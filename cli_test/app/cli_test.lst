
cli_test:     file format elf32-littleriscv
cli_test
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1c008080

Program Header:
    LOAD off    0x00000000 vaddr 0x1c000000 paddr 0x1c000000 align 2**12
         filesz 0x00000880 memsz 0x00000880 flags r-x
    LOAD off    0x00001080 vaddr 0x1c008080 paddr 0x1c008080 align 2**12
         filesz 0x00016ef0 memsz 0x000176f0 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .vectors       00000080  1c000800  1c000800  00000800  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text          00005934  1c008080  1c008080  00001080  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata        00000355  1c00d9b4  1c00d9b4  000069b4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rti_fn.0.end  00000004  1c00dd0c  1c00dd0c  00006d0c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rti_fn.1.end  00000004  1c00dd10  1c00dd10  00006d10  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rti_fn.6.end  00000004  1c00dd14  1c00dd14  00006d14  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .eh_frame      00000000  1c00dd18  1c00dd18  00006d18  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .init_array    00000004  1c00dd18  1c00dd18  00006d18  2**2  CONTENTS, ALLOC, LOAD, DATA
  8 .data          00000480  1c00dd20  1c00dd20  00006d20  2**3  CONTENTS, ALLOC, LOAD, DATA
  9 .bss           00000dc8  1c00e1a0  1c00e1a0  000071a0  2**3  ALLOC
 10 .heap          00010000  1c00ef70  1c00ef70  00007f70  2**4  CONTENTS, ALLOC, LOAD, DATA
 11 .stack         00000800  1c01ef70  1c01ef70  00017f70  2**4  ALLOC
 12 .l2_data       00000000  1c01f770  1c01f770  00017f70  2**0  CONTENTS
 13 .debug_info    00016b7c  00000000  00000000  00017f70  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev  00004155  00000000  00000000  0002eaec  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f10  00000000  00000000  00032c48  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges  00000fe8  00000000  00000000  00033b58  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro   000083ff  00000000  00000000  00034b40  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_line    00010a5e  00000000  00000000  0003cf3f  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_str     000347a1  00000000  00000000  0004d99d  2**0  CONTENTS, READONLY, DEBUGGING
 20 .comment       00000054  00000000  00000000  0008213e  2**0  CONTENTS, READONLY
 21 .debug_frame   000033e0  00000000  00000000  00082194  2**2  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc     0000290f  00000000  00000000  00085574  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1c000800 l    d  .vectors	00000000 .vectors
1c008080 l    d  .text	00000000 .text
1c00d9b4 l    d  .rodata	00000000 .rodata
1c00dd0c l    d  .rti_fn.0.end	00000000 .rti_fn.0.end
1c00dd10 l    d  .rti_fn.1.end	00000000 .rti_fn.1.end
1c00dd14 l    d  .rti_fn.6.end	00000000 .rti_fn.6.end
1c00dd18 l    d  .eh_frame	00000000 .eh_frame
1c00dd18 l    d  .init_array	00000000 .init_array
1c00dd20 l    d  .data	00000000 .data
1c00e1a0 l    d  .bss	00000000 .bss
1c00ef70 l    d  .heap	00000000 .heap
1c01ef70 l    d  .stack	00000000 .stack
1c01f770 l    d  .l2_data	00000000 .l2_data
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 /home/wangshun/plct_cli/cli_test/cli_test/target/vectors.o
1c000800 l       .vectors	00000000 vector_table
00000000 l    df *ABS*	00000000 /home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.o
1c00818c l       .text	00000000 test_if_asynchronous
1c0081a0 l       .text	00000000 handle_synchronous
1c008196 l       .text	00000000 handle_asynchronous
1c0081c8 l       .text	00000000 processed_source
1c0081a4 l       .text	00000000 test_if_environment_call
1c0081b4 l       .text	00000000 is_exception
1c0081c2 l       .text	00000000 as_yet_unhandled
1c008628 l       .text	00000000 chip_specific_stack_frame
00000000 l    df *ABS*	00000000 rt-thread/libcpu/risc-v/common/context_gcc.o
1c00875e l       .text	00000000 save_mpie
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 queue.c
1c008cdc l     F .text	0000006c prvInitialiseNewQueue
1c008fec l     F .text	0000012a prvCopyDataToQueue
1c0091d4 l     F .text	0000003e prvIsQueueFull
1c009116 l     F .text	000000be prvUnlockQueue
00000000 l    df *ABS*	00000000 tasks.c
1c00e1a0 l     O .bss	00000064 pxReadyTasksLists
1c00eb48 l     O .bss	00000004 pxDelayedTaskList
1c00eb4c l     O .bss	00000004 pxOverflowDelayedTaskList
1c00e204 l     O .bss	00000014 xPendingReadyList
1c00e218 l     O .bss	00000014 xSuspendedTaskList
1c00eb50 l     O .bss	00000004 uxCurrentNumberOfTasks
1c00eb58 l     O .bss	00000004 uxTopReadyPriority
1c00eb5c l     O .bss	00000004 xSchedulerRunning
1c00eb60 l     O .bss	00000004 xPendedTicks
1c00eb64 l     O .bss	00000004 xYieldPending
1c00eb68 l     O .bss	00000004 xNumOfOverflows
1c00eb6c l     O .bss	00000004 xNextTaskUnblockTime
1c00eb70 l     O .bss	00000004 uxSchedulerSuspended
1c0097e6 l     F .text	00000034 prvResetNextTaskUnblockTime
1c009980 l     F .text	000000b6 prvAddCurrentTaskToDelayedList
00000000 l    df *ABS*	00000000 heap_2.c
1c00eb74 l     O .bss	00000008 xStart
1c00eb7c l     O .bss	00000008 xEnd
1c00e194 l     O .data	00000004 xFreeBytesRemaining
1c00eb84 l     O .bss	00000004 xHeapHasBeenInitialised.2470
1c009ba6 l     F .text	0000005c prvHeapInit
00000000 l    df *ABS*	00000000 hal_apb_i2cs.c
00000000 l    df *ABS*	00000000 hal_fc_event.c
1c00e22c l     O .bss	000002a0 fc_event_handlers
1c00e4cc l     O .bss	000002a0 fc_event_semaphores
1c009cc0 l     F .text	00000012 fc_event_null_event
1c00eb88 l     O .bss	00000004 xHigherPriorityTaskWoken.4047
00000000 l    df *ABS*	00000000 hal_irq.c
00000000 l    df *ABS*	00000000 hal_pinmux.c
00000000 l    df *ABS*	00000000 hal_soc_eu.c
1c009f28 l     F .text	00000020 writew
00000000 l    df *ABS*	00000000 hal_timer_irq.c
1c009fae l     F .text	00000020 writew
00000000 l    df *ABS*	00000000 udma_i2cm_driver.c
1c00a062 l     F .text	00000020 writew
1c00a082 l     F .text	00000020 readw
1c00a0a2 l     F .text	0000002e soc_eu_fc_write
1c00a0d0 l     F .text	00000028 soc_eu_fc_read
1c00a0f8 l     F .text	00000076 hal_soc_eu_set_fc_mask
1c00eb8c l     O .bss	00000002 aucclkdiv
00000000 l    df *ABS*	00000000 udma_qspi_driver.c
1c00a36a l     F .text	00000020 writew
1c00a38a l     F .text	00000020 readw
1c00a3aa l     F .text	0000002e soc_eu_fc_write
1c00a3d8 l     F .text	00000028 soc_eu_fc_read
1c00a400 l     F .text	00000076 hal_soc_eu_set_fc_mask
1c00eb90 l     O .bss	00000004 isr_count
1c00e76c l     O .bss	00000040 auccmd
1c00e7ac l     O .bss	00000010 rx_data
00000000 l    df *ABS*	00000000 udma_uart_driver.c
1c00a998 l     F .text	00000020 writew
1c00a9b8 l     F .text	00000020 readw
1c00a9d8 l     F .text	0000002e soc_eu_fc_write
1c00aa06 l     F .text	00000028 soc_eu_fc_read
1c00aa2e l     F .text	00000076 hal_soc_eu_set_fc_mask
1c00e7bc l     O .bss	00000080 u1buffer
1c00e83c l     O .bss	00000080 u0buffer
1c00eb94 l     O .bss	00000004 u1rdptr
1c00eb98 l     O .bss	00000004 u1wrptr
1c00eb9c l     O .bss	00000004 u0rdptr
1c00eba0 l     O .bss	00000004 u0wrptr
1c00e198 l     O .data	00000004 puart0
1c00e19c l     O .data	00000004 puart1
00000000 l    df *ABS*	00000000 core-v-mcu.c
00000000 l    df *ABS*	00000000 qspi_tests.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 clock.c
1c00ebb4 l     O .bss	00000004 rt_tick
00000000 l    df *ABS*	00000000 idle.c
1c00e8c8 l     O .bss	00000078 idle
1c00e940 l     O .bss	00000080 rt_thread_stack
1c00b6f8 l     F .text	00000010 rt_thread_idle_entry
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 kservice.c
1c00b9c2 l     F .text	0000006a divide
1c00ba2c l     F .text	00000056 skip_atoi
1c00ba82 l     F .text	0000027a print_number
1c00dcc8 l     O .rodata	00000011 large_digits.2067
1c00dcdc l     O .rodata	00000011 small_digits.2066
1c00e9c0 l     O .bss	00000080 rt_log_buf.2171
00000000 l    df *ABS*	00000000 object.c
1c00c452 l     F .text	00000042 rt_list_insert_after
1c00c494 l     F .text	00000044 rt_list_remove
1c00e148 l     O .data	00000040 rt_object_container
00000000 l    df *ABS*	00000000 scheduler.c
1c00c63a l     F .text	00000028 rt_list_init
1c00c662 l     F .text	00000042 rt_list_insert_before
1c00c6a4 l     F .text	00000044 rt_list_remove
1c00c6e8 l     F .text	00000028 rt_list_isempty
1c00ebb8 l     O .bss	00000002 rt_scheduler_lock_nest
00000000 l    df *ABS*	00000000 thread.c
1c00c9ee l     F .text	00000028 rt_list_init
1c00ca16 l     F .text	00000042 rt_list_insert_after
1c00ca58 l     F .text	00000042 rt_list_insert_before
1c00ca9a l     F .text	00000044 rt_list_remove
1c00cade l     F .text	0000003a _thread_cleanup_execute
1c00cb98 l     F .text	00000126 _rt_thread_init
00000000 l    df *ABS*	00000000 timer.c
1c00cfc4 l     F .text	00000028 rt_list_init
1c00cfec l     F .text	00000042 rt_list_insert_after
1c00d02e l     F .text	00000044 rt_list_remove
1c00d072 l     F .text	00000028 rt_list_isempty
1c00ebc0 l     O .bss	00000008 rt_timer_list
1c00d09a l     F .text	0000009e _rt_timer_init
1c00d138 l     F .text	00000044 _rt_timer_remove
1c00ebc8 l     O .bss	00000004 random_nr.1946
00000000 l    df *ABS*	00000000 components.c
1c00d67a l     F .text	00000010 rti_board_start
1c00d68a l     F .text	00000010 rti_board_end
1c00d69a l     F .text	00000010 rti_end
1c00ea40 l     O .bss	00000100 main_stack
00000000 l    df *ABS*	00000000 rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.o
1c00d87c l       .text	00000000 spurious_interrupt
00000000 l    df *ABS*	00000000 cpuport.c
00000000 l    df *ABS*	00000000 stack_protector.c
00000000 l    df *ABS*	00000000 impure.c
1c00dd20 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 port.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
1c00d72e g     F .text	00000016 entry
1c00c612 g     F .text	00000028 rt_object_is_systemobject
1c00b8e4 g     F .text	0000008e rt_strncpy
1c00d8ce g     F .text	000000a4 rt_hw_stack_init
1c009f74 g     F .text	0000003a pulp_soc_eu_event_init
1c00dbc8 g     O .rodata	00000100 __lowest_bit_bitmap
1c00ad48 g     F .text	0000024c setFLLFrequencyInIntegerMode
1c008112 g       .text	00000000 h9
1c00e768 g       *ABS*	00000000 __global_pointer$
1c00c76a g     F .text	00000048 rt_system_scheduler_start
1c00e8bc g     O .bss	0000000a gMuxSelSaveBuf
1c00ebd0 g     O .bss	00000004 rt_interrupt_to_thread
1c000800 g       .vectors	00000000 __vector_start
1c00a18e g     F .text	00000020 i2cmRXHandler
1c00ce90 g     F .text	00000020 rt_thread_delay
1c00ebcc g     O .bss	00000004 rt_interrupt_from_thread
1c00d744 g     F .text	0000001e main_thread_entry
1c00d51e g     F .text	00000112 rt_timer_check
1c00a01e g     F .text	00000044 timer_irq_set_timeout
1c009928 g     F .text	00000026 vTaskEnterCritical
1c00c86e g     F .text	00000088 rt_schedule_insert_thread
1c00af94 g     F .text	00000234 system_init
1c00d7ec g       .text	00000000 IRQ_Handler
1c00eb40 g     O .bss	00000004 __stack_chk_guard
1c0089b4 g     F .text	00000006 __errno
1c00eb44 g     O .bss	00000004 pxCurrentTCB
1c00b6ea g     F .text	0000000e rt_thread_idle_excute
1c00ceb0 g     F .text	00000078 rt_thread_suspend
1c00c340 g     F .text	0000006a rt_kprintf
1c008102 g       .text	00000000 h1
1c00d9b4 g       .text	00000000 _etext
00000800 g       *ABS*	00000000 __stack_size
1c00dd20 g       .data	00000000 sdata
1c00cf86 g     F .text	0000003e rt_thread_timeout
1c008080 g       *ABS*	00000000 __boot_address
1c00ebe8 g     O .bss	00000008 qspim_semaphores_eot
1c009ee2 g     F .text	00000046 hal_getpinmux
1c0096ce g     F .text	00000026 vTaskInternalSetTimeOutState
1c008810 g     F .text	000000be memcpy
1c0095d2 g     F .text	0000003e vTaskPlaceOnEventList
1c009d5a g     F .text	0000003c pi_fc_event_handler_clear
1c009e7c g     F .text	00000066 hal_setpinmux
1c00b2c6 g     F .text	0000001c vPortSetupTimerInterrupt
1c00d6ec g     F .text	00000042 rt_components_init
1c00d17c g     F .text	00000052 rt_timer_init
1c00b708 g     F .text	00000042 rt_thread_idle_init
1c009c02 g     F .text	00000024 hal_get_apb_i2cs_slave_address
1c01f770 g       .stack	00000000 __freertos_irq_stack_top
1c00ec1c g     O .bss	00000180 gFlashDeviceObject
1c00c710 g     F .text	0000005a rt_system_scheduler_init
1c00873c g       .text	00000000 rt_hw_context_switch_to
1c00ebf0 g     O .bss	00000001 aucclkdiv
1c00ebd4 g     O .bss	00000004 rt_thread_switch_interrupt_flag
1c00e1a0 g       .bss	00000000 _bss_start
1c00e1a0 g       .data	00000000 edata
1c008a06 g     F .text	00000066 vListInsertEnd
1c00dd14 g     O .rti_fn.6.end	00000004 __rt_init_rti_end
1c00e188 g       .data	00000000 __sdata_begin
1c00dd20 g       .data	00000000 _sdata
1c00d972 g     F .text	00000032 rt_hw_context_switch_interrupt
1c00ef70 g     O .heap	00010000 ucHeap
1c00ebf4 g     O .bss	00000008 qspim_semaphores_tx
1c00cd96 g     F .text	0000008c rt_thread_yield
1c00d762 g     F .text	00000050 rt_application_init
1c00d9a4 g     F .text	00000010 __stack_chk_init
1c00e188 g     O .data	00000004 _global_impure_ptr
1c00ef68 g       .bss	00000000 __bss_end
1c01f770 g       .stack	00000000 stack
1c00eba8 g     O .bss	00000002 gMicronFlashDetectedFlg
1c009a36 g     F .text	00000170 pvPortMalloc
1c0080ce g     F .text	00000002 _init
1c0089ba g     F .text	0000004c vListInitialise
1c00d1ce g     F .text	0000004e rt_timer_detach
1c00810e g       .text	00000000 h7
1c00810a g       .text	00000000 h5
1c00a4e0 g     F .text	000002b0 udma_qspim_open
1c009c26 g     F .text	00000042 hal_set_apb_i2cs_slave_address
1c00ef68 g       .bss	00000000 _bss_end
1c00d6aa g     F .text	00000042 rt_components_board_init
1c008d48 g     F .text	000001ba xQueueGenericSend
1c00a1ae g     F .text	000001bc udma_i2cm_open
1c00b1e4 g     F .text	00000030 vSystemIrqHandler
1c00b972 g     F .text	00000050 rt_show_version
1c00b63a g     F .text	0000001a rt_hw_board_init
1c00eba4 g     O .bss	00000002 gQSPIFlashPresentFlg
1c00cf28 g     F .text	0000005e rt_thread_resume
1c008300 g       .text	00000000 freertos_risc_v_ctxt_handler
1c00984c g     F .text	000000dc xTaskPriorityDisinherit
1c00d7b2 g     F .text	00000038 rtthread_startup
1c00a790 g     F .text	0000009c udma_qspim_control
1c00ec0c g     O .bss	00000008 uart_semaphores_rx
1c008114 g       .text	00000000 freertos_risc_v_trap_handler
1c00d462 g     F .text	000000bc rt_timer_control
1c01ef70 g       .stack	00000000 stack_start
1c00c4d8 g     F .text	00000054 rt_object_get_information
1c00b654 g     F .text	0000000e vApplicationMallocFailedHook
1c009610 g     F .text	000000be xTaskRemoveFromEventList
1c00eea0 g     O .bss	00000040 rt_thread_priority_table
1c00b678 g     F .text	0000000e vApplicationTickHook
1c00cb18 g     F .text	00000080 rt_thread_exit
1c01f770 g       .stack	00000000 __stack_top
1c00aaa4 g     F .text	000000a6 uart_rx_isr
00000000 g     O *ABS*	00000004 __heap_size
1c00e190 g     O .data	00000004 xISRStackTop
1c008104 g       .text	00000000 h2
1c009ff6 g     F .text	00000028 timer_irq_init
1c008100 g       .text	00000000 h0
1c0096f4 g     F .text	000000de xTaskCheckForTimeOut
1c01f770 g       .l2_data	00000000 __cluster_text_start
1c0088e0 g     F .text	000000aa __call_exitprocs
1c00eee0 g     O .bss	00000001 rt_current_priority
1c008080 g     F .text	0000004e _start
1c009212 g     F .text	0000001a vTaskSuspendAll
1c009d0c g     F .text	0000004e pi_fc_event_handler_set
1c00ebd8 g     O .bss	00000008 i2cm_semaphores_tx
1c008b0e g     F .text	00000070 uxListRemove
1c01f770 g       *ABS*	00000000 __l2_shared_end
1c00ebfc g     O .bss	00000008 qspim_semaphores_rx
1c0094ae g     F .text	00000124 vTaskSwitchContext
1c00b698 g     F .text	00000052 rt_tick_increase
1c00d40c g     F .text	00000056 rt_timer_stop
1c00bcfc g     F .text	00000644 rt_vsnprintf
1c00b662 g     F .text	00000016 vApplicationStackOverflowHook
1c00ebac g     O .bss	00000004 gSpecialHandlingIRQCnt
1c01f770 g       .stack	00000000 __l2_priv1_end
1c00c3aa g     F .text	000000a8 __rt_ffs
1c00c964 g     F .text	00000036 rt_enter_critical
1c00ce22 g     F .text	0000006e rt_thread_sleep
1c00e1a0 g       .bss	00000000 __bss_start
1c009f48 g     F .text	0000002c soc_eu_mask_set
1c00ebe0 g     O .bss	00000008 i2cm_semaphores_rx
1c00b5fe g     F .text	0000003c main
1c00b786 g     F .text	0000003c rt_interrupt_leave
1c008a6c g     F .text	000000a2 vListInsert
1c00ec14 g     O .bss	00000008 uart_semaphores_tx
1c00d66c g     F .text	0000000e rt_system_timer_thread_init
1c00ccbe g     F .text	0000006a rt_thread_init
1c00d9b4 g       .text	00000000 __l2_priv0_end
1c00ed9c g     O .bss	00000080 isr_table
1c008110 g       .text	00000000 h8
1c00dd20 g       .data	00000000 __data_begin
1c009e30 g     F .text	0000004c irq_clint_enable
1c00ee9c g     O .bss	00000001 rt_interrupt_nest
1c008c58 g     F .text	00000084 xQueueGenericCreate
1c00b5ce g     F .text	00000030 rt_hw_console_output
1c00810c g       .text	00000000 h6
1c00a490 g     F .text	0000001a spi_rx_isr
1c01ef70 g       .heap	00000000 __heap_end
1c008108 g       .text	00000000 h4
1c008730 g       .text	00000000 rt_hw_interrupt_disable
1c00cd3a g     F .text	0000005c rt_thread_startup
1c00a476 g     F .text	0000001a spi_tx_isr
1c009cd2 g     F .text	0000003a pi_fc_event_handler_init
1c00ebbc g     O .bss	00000004 rt_current_thread
1c0080ce g     F .text	00000002 _fini
1c00922c g     F .text	00000110 xTaskResumeAll
1c008500 g       .text	00000000 xPortStartFirstTask
1c00eee4 g     O .bss	00000004 rt_thread_ready_priority_group
1c00eef0 g     O .bss	00000078 main_thread
1c00e18c g     O .data	00000004 _impure_ptr
1c00b214 g     F .text	000000b2 undefined_handler
1c01ef70 g       .stack	00000000 __stack_bottom
1c00ec04 g     O .bss	00000008 qspim_semaphores_cmd
1c00eee8 g     O .bss	00000008 rt_thread_defunct
1c00dd10 g     O .rti_fn.1.end	00000004 __rt_init_rti_board_end
1c009fce g     F .text	00000028 timer_irq_disable
1c00879e g       .text	00000000 rt_hw_context_switch_exit
1c00b7c2 g     F .text	00000122 rt_memset
1c0097d2 g     F .text	00000014 vTaskMissedYield
1c00ef70 g       .heap	00000000 __heap_start
1c00c5d8 g     F .text	0000003a rt_object_detach
1c00a4aa g     F .text	0000001a spi_cmd_isr
1c00933c g     F .text	00000172 xTaskIncrementTick
1c00d630 g     F .text	0000003c rt_system_timer_init
1c00c8f6 g     F .text	0000006e rt_schedule_remove_thread
1c00ee1c g     O .bss	00000080 handler_count
1c00b74a g     F .text	0000003c rt_interrupt_enter
1c008736 g       .text	00000000 rt_hw_interrupt_enable
1c000800 g       .vectors	00000000 __irq_vector_base
1c008b7e g     F .text	000000da xQueueGenericReset
1c00e1a0 g       .data	00000000 _edata
1c00b2e2 g     F .text	0000016c setQspimPinMux
1c00ef68 g       .bss	00000000 _end
1c008106 g       .text	00000000 h3
1c00c99a g     F .text	00000054 rt_exit_critical
1c00a82c g     F .text	0000016c udma_flash_readid
1c009d96 g     F .text	0000009a fc_soc_event_handler1
1c00b1c8 g     F .text	0000001c timer_irq_handler
1c0087f6 g     F .text	0000001a exit
1c00cd28 g     F .text	00000012 rt_thread_self
1c00ebb0 g     O .bss	00000001 gQSPIIdNum
1c00b564 g     F .text	0000006a writeraw
1c00b686 g     F .text	00000012 rt_tick_get
1c00981a g     F .text	00000032 xTaskGetSchedulerState
1c00a16e g     F .text	00000020 i2cmTXHandler
1c00898a g     F .text	0000002a _exit
1c008080 g       .text	00000000 _stext
1c00994e g     F .text	00000032 vTaskExitCritical
1c0088ce g     F .text	00000012 strlen
1c008600 g       .text	00000000 pxPortInitialiseStack
1c00eb54 g     O .bss	00000004 xTickCount
1c00ab4a g     F .text	000001fe udma_uart_open
1c01f770 g       .l2_data	00000000 __cluster_text_end
1c00dd0c g     O .rti_fn.0.end	00000004 __rt_init_rti_board_start
1c00b44e g     F .text	00000116 restoreQspimPinMux
1c00c7b2 g     F .text	000000bc rt_schedule
1c00c52c g     F .text	000000ac rt_object_init
1c00a4c4 g     F .text	0000001c spi_eot_isr
1c00d21c g     F .text	000001f0 rt_timer_start
1c009c68 g     F .text	00000058 hal_set_apb_i2cs_slave_on_off
1c00d9b4 g       .text	00000000 _endtext
1c008748 g       .text	00000000 rt_hw_context_switch
1c008f02 g     F .text	000000ea xQueueGiveFromISR



Disassembly of section .vectors:
vector_table():
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:30
#endif
.extern fc_soc_event_handler
.section .vectors, "ax"
.option norvc
vector_table:
	j IRQ_Handler  // irq0
1c000800 <__irq_vector_base> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:31
	j IRQ_Handler
1c000804 <__irq_vector_base+0x4> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:32
	j IRQ_Handler
1c000808 <__irq_vector_base+0x8> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:33
	j IRQ_Handler  // irq3
1c00080c <__irq_vector_base+0xc> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:34
	j IRQ_Handler
1c000810 <__irq_vector_base+0x10> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:35
	j IRQ_Handler
1c000814 <__irq_vector_base+0x14> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:36
	j IRQ_Handler
1c000818 <__irq_vector_base+0x18> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:37
	j IRQ_Handler //ctxt_handler  // irq 7 mtime or timer
1c00081c <__irq_vector_base+0x1c> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:38
	j IRQ_Handler
1c000820 <__irq_vector_base+0x20> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:39
	j IRQ_Handler
1c000824 <__irq_vector_base+0x24> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:40
	j h7// IRQ_Handler
1c000828 <__irq_vector_base+0x28> j	1c00810e <h7>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:41
	j IRQ_Handler // irq 11 Machine (event Fifo)
1c00082c <__irq_vector_base+0x2c> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:42
	j IRQ_Handler
1c000830 <__irq_vector_base+0x30> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:43
	j IRQ_Handler
1c000834 <__irq_vector_base+0x34> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:44
	j IRQ_Handler
1c000838 <__irq_vector_base+0x38> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:45
	j IRQ_Handler
1c00083c <__irq_vector_base+0x3c> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:46
	j IRQ_Handler // IRQ16
1c000840 <__irq_vector_base+0x40> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:47
	j IRQ_Handler // IRQ17
1c000844 <__irq_vector_base+0x44> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:48
	j IRQ_Handler // IRQ18
1c000848 <__irq_vector_base+0x48> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:49
	j IRQ_Handler // IRQ19
1c00084c <__irq_vector_base+0x4c> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:50
	j IRQ_Handler // IRQ20
1c000850 <__irq_vector_base+0x50> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:51
	j IRQ_Handler // IRQ21
1c000854 <__irq_vector_base+0x54> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:52
	j IRQ_Handler // IRQ22
1c000858 <__irq_vector_base+0x58> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:53
	j IRQ_Handler // IRQ23
1c00085c <__irq_vector_base+0x5c> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:54
	j IRQ_Handler // IRQ24
1c000860 <__irq_vector_base+0x60> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:55
	j IRQ_Handler // IRQ25
1c000864 <__irq_vector_base+0x64> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:56
	j IRQ_Handler // IRQ26
1c000868 <__irq_vector_base+0x68> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:57
	j IRQ_Handler // IRQ27
1c00086c <__irq_vector_base+0x6c> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:58
	j IRQ_Handler // IRQ28
1c000870 <__irq_vector_base+0x70> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:59
	j IRQ_Handler // IRQ29
1c000874 <__irq_vector_base+0x74> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:60
	j IRQ_Handler // IRQ30
1c000878 <__irq_vector_base+0x78> j	1c00d7ec <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:61
    j IRQ_Handler // IRQ30
1c00087c <__irq_vector_base+0x7c> j	1c00d7ec <IRQ_Handler>

Disassembly of section .text:
_start():
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:39

_start:
/* initialize global pointer */
.option push
.option norelax
1:	auipc gp, %pcrel_hi(__global_pointer$)
1c008080 <_start> auipc	gp,0x6
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:40
	addi  gp, gp, %pcrel_lo(1b)
1c008084 <_start+0x4> addi	gp,gp,1768 # 1c00e768 <__global_pointer$>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:47

#if defined(ARCHI_HAS_CLUSTER)
	/* TODO */
#endif
/* initialize stack pointer */
	la sp, __stack_top
1c008088 <_start+0x8> auipc	sp,0x17
1c00808c <_start+0xc> addi	sp,sp,1768 # 1c01f770 <__l2_shared_end>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:50

	/*or a0, a0, 0*/
	and a0, a0, 0
1c008090 <_start+0x10> andi	a0,a0,0
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:51
	csrw mie, a0 // disable interrupts
1c008092 <_start+0x12> csrw	mie,a0
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:52
	csrr a0, mie
1c008096 <_start+0x16> csrr	a0,mie
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:54
/* set vector table address */
	la a0, __vector_start
1c00809a <_start+0x1a> auipc	a0,0xffff8
1c00809e <_start+0x1e> addi	a0,a0,1894 # 1c000800 <__irq_vector_base>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:55
	or a0, a0, 1 /* enable vectored mode (hardcoded anyway for CV32E40P) */
1c0080a2 <_start+0x22> ori	a0,a0,1
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:56
	csrw mtvec, a0
1c0080a6 <_start+0x26> csrw	mtvec,a0
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:59

/* clear the bss segment */
	la t0, __bss_start
1c0080aa <_start+0x2a> addi	t0,gp,-1480 # 1c00e1a0 <_edata>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:60
        la t1, __bss_end
1c0080ae <_start+0x2e> auipc	t1,0x7
1c0080b2 <_start+0x32> addi	t1,t1,-326 # 1c00ef68 <__bss_end>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:63
/* TODO: optionally compile this out to speed simulation */
1:
	sw zero,0(t0)
1c0080b6 <_start+0x36> sw	zero,0(t0)
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:64
	addi t0, t0, 4
1c0080ba <_start+0x3a> addi	t0,t0,4
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:65
	bltu t0, t1, 1b
1c0080bc <_start+0x3c> bltu	t0,t1,1c0080b6 <_start+0x36>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:75
	call atexit
	call __libc_init_array
#endif

/* call main */
	lw a0, 0(sp)                    /* a0 = argc */
1c0080c0 <_start+0x40> lw	a0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:76
	addi a1, sp, __SIZEOF_POINTER__ /* a1 = argv */
1c0080c2 <_start+0x42> addi	a1,sp,4
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:77
	li a2, 0                        /* a2 = envp = NULL */
1c0080c4 <_start+0x44> li	a2,0
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:78
	call entry
1c0080c6 <_start+0x46> jal	ra,1c00d72e <entry>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:79
	tail exit
1c0080ca <_start+0x4a> j	1c0087f6 <exit>
_init():
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:91
.type   _fini, @function
_init:
_fini:
 /* These don't have to do anything since we use init_array/fini_array. Prevent
    missing symbol error */
	ret
1c0080ce <_fini> ret
	...
h0():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:131
.global h6
.global h7
.global h8
.global h9
.align 8
h0: addi x0, x0, 0
1c008100 <h0> nop
h1():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:132
h1: addi x0, x0, 0
1c008102 <h1> nop
h2():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:133
h2: addi x0, x0, 0
1c008104 <h2> nop
h3():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:134
h3: addi x0, x0, 0
1c008106 <h3> nop
h4():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:135
h4: addi x0, x0, 0
1c008108 <h4> nop
h5():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:136
h5: addi x0, x0, 0
1c00810a <h5> nop
h6():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:137
h6: addi x0, x0, 0
1c00810c <h6> nop
h7():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:138
h7: addi x0, x0, 0
1c00810e <h7> nop
h8():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:139
h8: addi x0, x0, 0
1c008110 <h8> nop
h9():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:140
h9: addi x0, x0, 0
1c008112 <h9> nop
freertos_risc_v_trap_handler():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:143
.func
freertos_risc_v_trap_handler:
	addi sp, sp, -portCONTEXT_SIZE
1c008114 <freertos_risc_v_trap_handler> addi	sp,sp,-120
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:144
	store_x x1, 1 * portWORD_SIZE( sp )
1c008118 <freertos_risc_v_trap_handler+0x4> sw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:145
	store_x x5, 2 * portWORD_SIZE( sp )
1c00811a <freertos_risc_v_trap_handler+0x6> sw	t0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:146
	store_x x6, 3 * portWORD_SIZE( sp )
1c00811c <freertos_risc_v_trap_handler+0x8> sw	t1,12(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:147
	store_x x7, 4 * portWORD_SIZE( sp )
1c00811e <freertos_risc_v_trap_handler+0xa> sw	t2,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:148
	store_x x8, 5 * portWORD_SIZE( sp )
1c008120 <freertos_risc_v_trap_handler+0xc> sw	s0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:149
	store_x x9, 6 * portWORD_SIZE( sp )
1c008122 <freertos_risc_v_trap_handler+0xe> sw	s1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:150
	store_x x10, 7 * portWORD_SIZE( sp )
1c008124 <freertos_risc_v_trap_handler+0x10> sw	a0,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:151
	store_x x11, 8 * portWORD_SIZE( sp )
1c008126 <freertos_risc_v_trap_handler+0x12> sw	a1,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:152
	store_x x12, 9 * portWORD_SIZE( sp )
1c008128 <freertos_risc_v_trap_handler+0x14> sw	a2,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:153
	store_x x13, 10 * portWORD_SIZE( sp )
1c00812a <freertos_risc_v_trap_handler+0x16> sw	a3,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:154
	store_x x14, 11 * portWORD_SIZE( sp )
1c00812c <freertos_risc_v_trap_handler+0x18> sw	a4,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:155
	store_x x15, 12 * portWORD_SIZE( sp )
1c00812e <freertos_risc_v_trap_handler+0x1a> sw	a5,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:157
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	store_x x16, 13 * portWORD_SIZE( sp )
1c008130 <freertos_risc_v_trap_handler+0x1c> sw	a6,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:158
	store_x x17, 14 * portWORD_SIZE( sp )
1c008132 <freertos_risc_v_trap_handler+0x1e> sw	a7,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:159
	store_x x18, 15 * portWORD_SIZE( sp )
1c008134 <freertos_risc_v_trap_handler+0x20> sw	s2,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:160
	store_x x19, 16 * portWORD_SIZE( sp )
1c008136 <freertos_risc_v_trap_handler+0x22> sw	s3,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:161
	store_x x20, 17 * portWORD_SIZE( sp )
1c008138 <freertos_risc_v_trap_handler+0x24> sw	s4,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:162
	store_x x21, 18 * portWORD_SIZE( sp )
1c00813a <freertos_risc_v_trap_handler+0x26> sw	s5,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:163
	store_x x22, 19 * portWORD_SIZE( sp )
1c00813c <freertos_risc_v_trap_handler+0x28> sw	s6,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:164
	store_x x23, 20 * portWORD_SIZE( sp )
1c00813e <freertos_risc_v_trap_handler+0x2a> sw	s7,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:165
	store_x x24, 21 * portWORD_SIZE( sp )
1c008140 <freertos_risc_v_trap_handler+0x2c> sw	s8,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:166
	store_x x25, 22 * portWORD_SIZE( sp )
1c008142 <freertos_risc_v_trap_handler+0x2e> sw	s9,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:167
	store_x x26, 23 * portWORD_SIZE( sp )
1c008144 <freertos_risc_v_trap_handler+0x30> sw	s10,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:168
	store_x x27, 24 * portWORD_SIZE( sp )
1c008146 <freertos_risc_v_trap_handler+0x32> sw	s11,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:169
	store_x x28, 25 * portWORD_SIZE( sp )
1c008148 <freertos_risc_v_trap_handler+0x34> sw	t3,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:170
	store_x x29, 26 * portWORD_SIZE( sp )
1c00814a <freertos_risc_v_trap_handler+0x36> sw	t4,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:171
	store_x x30, 27 * portWORD_SIZE( sp )
1c00814c <freertos_risc_v_trap_handler+0x38> sw	t5,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:172
	store_x x31, 28 * portWORD_SIZE( sp )
1c00814e <freertos_risc_v_trap_handler+0x3a> sw	t6,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:175
#endif
	
	csrr t0, mstatus					/* Required for MPIE bit. */
1c008150 <freertos_risc_v_trap_handler+0x3c> csrr	t0,mstatus
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:176
	store_x t0, 29 * portWORD_SIZE( sp )
1c008154 <freertos_risc_v_trap_handler+0x40> sw	t0,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:178
#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */
1c008156 <freertos_risc_v_trap_handler+0x42> addi	sp,sp,-24
1c008158 <freertos_risc_v_trap_handler+0x44> csrr	t0,0x800
1c00815c <freertos_risc_v_trap_handler+0x48> csrr	t1,0x801
1c008160 <freertos_risc_v_trap_handler+0x4c> csrr	t2,0x802
1c008164 <freertos_risc_v_trap_handler+0x50> csrr	t3,0x804
1c008168 <freertos_risc_v_trap_handler+0x54> csrr	t4,0x805
1c00816c <freertos_risc_v_trap_handler+0x58> csrr	t5,0x806
1c008170 <freertos_risc_v_trap_handler+0x5c> sw	t0,4(sp)
1c008172 <freertos_risc_v_trap_handler+0x5e> sw	t1,8(sp)
1c008174 <freertos_risc_v_trap_handler+0x60> sw	t2,12(sp)
1c008176 <freertos_risc_v_trap_handler+0x62> sw	t3,16(sp)
1c008178 <freertos_risc_v_trap_handler+0x64> sw	t4,20(sp)
1c00817a <freertos_risc_v_trap_handler+0x66> sw	t5,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:181
#endif

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
1c00817c <freertos_risc_v_trap_handler+0x68> lw	t0,988(gp) # 1c00eb44 <pxCurrentTCB>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:182
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
1c008180 <freertos_risc_v_trap_handler+0x6c> sw	sp,0(t0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:185


	csrr a0, mcause
1c008184 <freertos_risc_v_trap_handler+0x70> csrr	a0,mcause
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:186
	csrr a1, mepc
1c008188 <freertos_risc_v_trap_handler+0x74> csrr	a1,mepc
test_if_asynchronous():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:189

test_if_asynchronous:
	srli a2, a0, __riscv_xlen - 1		/* MSB of mcause is 1 if handing an asynchronous interrupt - shift to LSB to clear other bits. */
1c00818c <test_if_asynchronous> srli	a2,a0,0x1f
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:190
	beq a2, x0, handle_synchronous		/* Branch past interrupt handing if not asynchronous. */
1c008190 <test_if_asynchronous+0x4> beqz	a2,1c0081a0 <handle_synchronous>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:191
	store_x a1, 0( sp )					/* Asynch so save unmodified exception return address. */
1c008194 <test_if_asynchronous+0x8> sw	a1,0(sp)
handle_asynchronous():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:249
//		addi t1, t1, 4					/* 0x80000007 + 4 = 0x8000000b == Machine external interrupt. */
//		bne a0, t1, as_yet_unhandled	/* Something as yet unhandled. */

#endif /* portasmHAS_MTIME */

	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
1c008196 <handle_asynchronous> lw	sp,-1496(gp) # 1c00e190 <xISRStackTop>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:250
	jal portasmHANDLE_INTERRUPT			/* Jump to the interrupt handler if there is no CLINT or if there is a CLINT and it has been determined that an external interrupt is pending. */
1c00819a <handle_asynchronous+0x4> jal	ra,1c00b1e4 <vSystemIrqHandler>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:251
	j processed_source
1c00819e <handle_asynchronous+0x8> j	1c0081c8 <processed_source>
handle_synchronous():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:254

handle_synchronous:
	addi a1, a1, 4						/* Synchronous so updated exception return address to the instruction after the instruction that generated the exeption. */
1c0081a0 <handle_synchronous> addi	a1,a1,4
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:255
	store_x a1, 0( sp )					/* Save updated exception return address. */
1c0081a2 <handle_synchronous+0x2> sw	a1,0(sp)
test_if_environment_call():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:258

test_if_environment_call:
	li t0, 11 							/* 11 == environment call. */
1c0081a4 <test_if_environment_call> li	t0,11
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:259
	bne a0, t0, is_exception			/* Not an M environment call, so some other exception. */
1c0081a6 <test_if_environment_call+0x2> bne	a0,t0,1c0081b4 <is_exception>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:260
	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
1c0081aa <test_if_environment_call+0x6> lw	sp,-1496(gp) # 1c00e190 <xISRStackTop>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:261
	jal vTaskSwitchContext
1c0081ae <test_if_environment_call+0xa> jal	ra,1c0094ae <vTaskSwitchContext>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:262
	j processed_source
1c0081b2 <test_if_environment_call+0xe> j	1c0081c8 <processed_source>
is_exception():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:265

is_exception:
	csrr t0, mcause						/* For viewing in the debugger only. */
1c0081b4 <is_exception> csrr	t0,mcause
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:266
	csrr t1, mepc						/* For viewing in the debugger only */
1c0081b8 <is_exception+0x4> csrr	t1,mepc
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:267
	csrr t2, mstatus
1c0081bc <is_exception+0x8> csrr	t2,mstatus
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:268
	j is_exception						/* No other exceptions handled yet. */
1c0081c0 <is_exception+0xc> j	1c0081b4 <is_exception>
as_yet_unhandled():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:271

as_yet_unhandled:
	csrr t0, mcause						/* For viewing in the debugger only. */
1c0081c2 <as_yet_unhandled> csrr	t0,mcause
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:272
	j as_yet_unhandled
1c0081c6 <as_yet_unhandled+0x4> j	1c0081c2 <as_yet_unhandled>
processed_source():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:275

processed_source:
	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
1c0081c8 <processed_source> lw	t1,988(gp) # 1c00eb44 <pxCurrentTCB>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:276
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
1c0081cc <processed_source+0x4> lw	sp,0(t1)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:279

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
1c0081d0 <processed_source+0x8> lw	t0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:280
	csrw mepc, t0
1c0081d2 <processed_source+0xa> csrw	mepc,t0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:283

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c0081d6 <processed_source+0xe> lw	t0,4(sp)
1c0081d8 <processed_source+0x10> lw	t1,8(sp)
1c0081da <processed_source+0x12> lw	t2,12(sp)
1c0081dc <processed_source+0x14> lw	t3,16(sp)
1c0081de <processed_source+0x16> lw	t4,20(sp)
1c0081e0 <processed_source+0x18> lw	t5,24(sp)
1c0081e2 <processed_source+0x1a> csrw	0x800,t0
1c0081e6 <processed_source+0x1e> csrw	0x801,t1
1c0081ea <processed_source+0x22> csrw	0x802,t2
1c0081ee <processed_source+0x26> csrw	0x804,t3
1c0081f2 <processed_source+0x2a> csrw	0x805,t4
1c0081f6 <processed_source+0x2e> csrw	0x806,t5
1c0081fa <processed_source+0x32> addi	sp,sp,24
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:287
#endif

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
1c0081fc <processed_source+0x34> lw	t0,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:288
	csrw mstatus, t0						/* Required for MPIE bit. */
1c0081fe <processed_source+0x36> csrw	mstatus,t0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:290

	load_x  x1, 1 * portWORD_SIZE( sp )
1c008202 <processed_source+0x3a> lw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:291
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
1c008204 <processed_source+0x3c> lw	t0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:292
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c008206 <processed_source+0x3e> lw	t1,12(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:293
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c008208 <processed_source+0x40> lw	t2,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:294
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c00820a <processed_source+0x42> lw	s0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:295
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c00820c <processed_source+0x44> lw	s1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:296
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c00820e <processed_source+0x46> lw	a0,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:297
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c008210 <processed_source+0x48> lw	a1,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:298
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c008212 <processed_source+0x4a> lw	a2,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:299
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c008214 <processed_source+0x4c> lw	a3,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:300
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c008216 <processed_source+0x4e> lw	a4,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:301
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c008218 <processed_source+0x50> lw	a5,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:303
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c00821a <processed_source+0x52> lw	a6,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:304
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c00821c <processed_source+0x54> lw	a7,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:305
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c00821e <processed_source+0x56> lw	s2,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:306
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c008220 <processed_source+0x58> lw	s3,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:307
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c008222 <processed_source+0x5a> lw	s4,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:308
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c008224 <processed_source+0x5c> lw	s5,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:309
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c008226 <processed_source+0x5e> lw	s6,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:310
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c008228 <processed_source+0x60> lw	s7,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:311
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c00822a <processed_source+0x62> lw	s8,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:312
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c00822c <processed_source+0x64> lw	s9,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:313
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c00822e <processed_source+0x66> lw	s10,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:314
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c008230 <processed_source+0x68> lw	s11,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:315
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c008232 <processed_source+0x6a> lw	t3,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:316
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c008234 <processed_source+0x6c> lw	t4,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:317
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c008236 <processed_source+0x6e> lw	t5,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:318
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c008238 <processed_source+0x70> lw	t6,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:320
#endif
	addi sp, sp, portCONTEXT_SIZE
1c00823a <processed_source+0x72> addi	sp,sp,120
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:322

	mret
1c00823e <processed_source+0x76> mret
1c008242 <processed_source+0x7a> nop
1c008246 <processed_source+0x7e> nop
1c00824a <processed_source+0x82> nop
1c00824e <processed_source+0x86> nop
1c008252 <processed_source+0x8a> nop
1c008256 <processed_source+0x8e> nop
1c00825a <processed_source+0x92> nop
1c00825e <processed_source+0x96> nop
1c008262 <processed_source+0x9a> nop
1c008266 <processed_source+0x9e> nop
1c00826a <processed_source+0xa2> nop
1c00826e <processed_source+0xa6> nop
1c008272 <processed_source+0xaa> nop
1c008276 <processed_source+0xae> nop
1c00827a <processed_source+0xb2> nop
1c00827e <processed_source+0xb6> nop
1c008282 <processed_source+0xba> nop
1c008286 <processed_source+0xbe> nop
1c00828a <processed_source+0xc2> nop
1c00828e <processed_source+0xc6> nop
1c008292 <processed_source+0xca> nop
1c008296 <processed_source+0xce> nop
1c00829a <processed_source+0xd2> nop
1c00829e <processed_source+0xd6> nop
1c0082a2 <processed_source+0xda> nop
1c0082a6 <processed_source+0xde> nop
1c0082aa <processed_source+0xe2> nop
1c0082ae <processed_source+0xe6> nop
1c0082b2 <processed_source+0xea> nop
1c0082b6 <processed_source+0xee> nop
1c0082ba <processed_source+0xf2> nop
1c0082be <processed_source+0xf6> nop
1c0082c2 <processed_source+0xfa> nop
1c0082c6 <processed_source+0xfe> nop
1c0082ca <processed_source+0x102> nop
1c0082ce <processed_source+0x106> nop
1c0082d2 <processed_source+0x10a> nop
1c0082d6 <processed_source+0x10e> nop
1c0082da <processed_source+0x112> nop
1c0082de <processed_source+0x116> nop
1c0082e2 <processed_source+0x11a> nop
1c0082e6 <processed_source+0x11e> nop
1c0082ea <processed_source+0x122> nop
1c0082ee <processed_source+0x126> nop
1c0082f2 <processed_source+0x12a> nop
1c0082f6 <processed_source+0x12e> nop
1c0082fa <processed_source+0x132> nop
1c0082fe <processed_source+0x136> nop
freertos_risc_v_ctxt_handler():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:330

/* for timer interrupt vectored context switches */
.align 8
.func
freertos_risc_v_ctxt_handler:
	addi sp, sp, -portCONTEXT_SIZE
1c008300 <freertos_risc_v_ctxt_handler> addi	sp,sp,-120
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:331
	store_x x1, 1 * portWORD_SIZE( sp )
1c008304 <freertos_risc_v_ctxt_handler+0x4> sw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:332
	store_x x5, 2 * portWORD_SIZE( sp )
1c008306 <freertos_risc_v_ctxt_handler+0x6> sw	t0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:333
	store_x x6, 3 * portWORD_SIZE( sp )
1c008308 <freertos_risc_v_ctxt_handler+0x8> sw	t1,12(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:334
	store_x x7, 4 * portWORD_SIZE( sp )
1c00830a <freertos_risc_v_ctxt_handler+0xa> sw	t2,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:335
	store_x x8, 5 * portWORD_SIZE( sp )
1c00830c <freertos_risc_v_ctxt_handler+0xc> sw	s0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:336
	store_x x9, 6 * portWORD_SIZE( sp )
1c00830e <freertos_risc_v_ctxt_handler+0xe> sw	s1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:337
	store_x x10, 7 * portWORD_SIZE( sp )
1c008310 <freertos_risc_v_ctxt_handler+0x10> sw	a0,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:338
	store_x x11, 8 * portWORD_SIZE( sp )
1c008312 <freertos_risc_v_ctxt_handler+0x12> sw	a1,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:339
	store_x x12, 9 * portWORD_SIZE( sp )
1c008314 <freertos_risc_v_ctxt_handler+0x14> sw	a2,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:340
	store_x x13, 10 * portWORD_SIZE( sp )
1c008316 <freertos_risc_v_ctxt_handler+0x16> sw	a3,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:341
	store_x x14, 11 * portWORD_SIZE( sp )
1c008318 <freertos_risc_v_ctxt_handler+0x18> sw	a4,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:342
	store_x x15, 12 * portWORD_SIZE( sp )
1c00831a <freertos_risc_v_ctxt_handler+0x1a> sw	a5,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:344
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	store_x x16, 13 * portWORD_SIZE( sp )
1c00831c <freertos_risc_v_ctxt_handler+0x1c> sw	a6,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:345
	store_x x17, 14 * portWORD_SIZE( sp )
1c00831e <freertos_risc_v_ctxt_handler+0x1e> sw	a7,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:346
	store_x x18, 15 * portWORD_SIZE( sp )
1c008320 <freertos_risc_v_ctxt_handler+0x20> sw	s2,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:347
	store_x x19, 16 * portWORD_SIZE( sp )
1c008322 <freertos_risc_v_ctxt_handler+0x22> sw	s3,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:348
	store_x x20, 17 * portWORD_SIZE( sp )
1c008324 <freertos_risc_v_ctxt_handler+0x24> sw	s4,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:349
	store_x x21, 18 * portWORD_SIZE( sp )
1c008326 <freertos_risc_v_ctxt_handler+0x26> sw	s5,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:350
	store_x x22, 19 * portWORD_SIZE( sp )
1c008328 <freertos_risc_v_ctxt_handler+0x28> sw	s6,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:351
	store_x x23, 20 * portWORD_SIZE( sp )
1c00832a <freertos_risc_v_ctxt_handler+0x2a> sw	s7,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:352
	store_x x24, 21 * portWORD_SIZE( sp )
1c00832c <freertos_risc_v_ctxt_handler+0x2c> sw	s8,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:353
	store_x x25, 22 * portWORD_SIZE( sp )
1c00832e <freertos_risc_v_ctxt_handler+0x2e> sw	s9,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:354
	store_x x26, 23 * portWORD_SIZE( sp )
1c008330 <freertos_risc_v_ctxt_handler+0x30> sw	s10,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:355
	store_x x27, 24 * portWORD_SIZE( sp )
1c008332 <freertos_risc_v_ctxt_handler+0x32> sw	s11,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:356
	store_x x28, 25 * portWORD_SIZE( sp )
1c008334 <freertos_risc_v_ctxt_handler+0x34> sw	t3,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:357
	store_x x29, 26 * portWORD_SIZE( sp )
1c008336 <freertos_risc_v_ctxt_handler+0x36> sw	t4,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:358
	store_x x30, 27 * portWORD_SIZE( sp )
1c008338 <freertos_risc_v_ctxt_handler+0x38> sw	t5,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:359
	store_x x31, 28 * portWORD_SIZE( sp )
1c00833a <freertos_risc_v_ctxt_handler+0x3a> sw	t6,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:362
#endif
	
	csrr t0, mstatus					/* Required for MPIE bit. */
1c00833c <freertos_risc_v_ctxt_handler+0x3c> csrr	t0,mstatus
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:363
	store_x t0, 29 * portWORD_SIZE( sp )
1c008340 <freertos_risc_v_ctxt_handler+0x40> sw	t0,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:365
#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */
1c008342 <freertos_risc_v_ctxt_handler+0x42> addi	sp,sp,-24
1c008344 <freertos_risc_v_ctxt_handler+0x44> csrr	t0,0x800
1c008348 <freertos_risc_v_ctxt_handler+0x48> csrr	t1,0x801
1c00834c <freertos_risc_v_ctxt_handler+0x4c> csrr	t2,0x802
1c008350 <freertos_risc_v_ctxt_handler+0x50> csrr	t3,0x804
1c008354 <freertos_risc_v_ctxt_handler+0x54> csrr	t4,0x805
1c008358 <freertos_risc_v_ctxt_handler+0x58> csrr	t5,0x806
1c00835c <freertos_risc_v_ctxt_handler+0x5c> sw	t0,4(sp)
1c00835e <freertos_risc_v_ctxt_handler+0x5e> sw	t1,8(sp)
1c008360 <freertos_risc_v_ctxt_handler+0x60> sw	t2,12(sp)
1c008362 <freertos_risc_v_ctxt_handler+0x62> sw	t3,16(sp)
1c008364 <freertos_risc_v_ctxt_handler+0x64> sw	t4,20(sp)
1c008366 <freertos_risc_v_ctxt_handler+0x66> sw	t5,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:368
#endif

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
1c008368 <freertos_risc_v_ctxt_handler+0x68> lw	t0,988(gp) # 1c00eb44 <pxCurrentTCB>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:369
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
1c00836c <freertos_risc_v_ctxt_handler+0x6c> sw	sp,0(t0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:371

	csrr a0, mcause
1c008370 <freertos_risc_v_ctxt_handler+0x70> csrr	a0,mcause
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:372
	csrr a1, mepc
1c008374 <freertos_risc_v_ctxt_handler+0x74> csrr	a1,mepc
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:374

	store_x a1, 0( sp )				/* Asynch so save unmodified exception return address. */
1c008378 <freertos_risc_v_ctxt_handler+0x78> sw	a1,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:376

	load_x sp, xISRStackTop			/* Switch to ISR stack before function call. */
1c00837a <freertos_risc_v_ctxt_handler+0x7a> lw	sp,-1496(gp) # 1c00e190 <xISRStackTop>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:377
	jal xTaskIncrementTick
1c00837e <freertos_risc_v_ctxt_handler+0x7e> jal	ra,1c00933c <xTaskIncrementTick>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:378
	beqz a0, processed_source		/* Don't switch context if incrementing tick didn't unblock a task. */
1c008382 <freertos_risc_v_ctxt_handler+0x82> beqz	a0,1c0081c8 <processed_source>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:379
	jal vTaskSwitchContext
1c008386 <freertos_risc_v_ctxt_handler+0x86> jal	ra,1c0094ae <vTaskSwitchContext>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:381

	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
1c00838a <freertos_risc_v_ctxt_handler+0x8a> lw	t1,988(gp) # 1c00eb44 <pxCurrentTCB>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:382
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
1c00838e <freertos_risc_v_ctxt_handler+0x8e> lw	sp,0(t1)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:385

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
1c008392 <freertos_risc_v_ctxt_handler+0x92> lw	t0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:386
	csrw mepc, t0
1c008394 <freertos_risc_v_ctxt_handler+0x94> csrw	mepc,t0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:389

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c008398 <freertos_risc_v_ctxt_handler+0x98> lw	t0,4(sp)
1c00839a <freertos_risc_v_ctxt_handler+0x9a> lw	t1,8(sp)
1c00839c <freertos_risc_v_ctxt_handler+0x9c> lw	t2,12(sp)
1c00839e <freertos_risc_v_ctxt_handler+0x9e> lw	t3,16(sp)
1c0083a0 <freertos_risc_v_ctxt_handler+0xa0> lw	t4,20(sp)
1c0083a2 <freertos_risc_v_ctxt_handler+0xa2> lw	t5,24(sp)
1c0083a4 <freertos_risc_v_ctxt_handler+0xa4> csrw	0x800,t0
1c0083a8 <freertos_risc_v_ctxt_handler+0xa8> csrw	0x801,t1
1c0083ac <freertos_risc_v_ctxt_handler+0xac> csrw	0x802,t2
1c0083b0 <freertos_risc_v_ctxt_handler+0xb0> csrw	0x804,t3
1c0083b4 <freertos_risc_v_ctxt_handler+0xb4> csrw	0x805,t4
1c0083b8 <freertos_risc_v_ctxt_handler+0xb8> csrw	0x806,t5
1c0083bc <freertos_risc_v_ctxt_handler+0xbc> addi	sp,sp,24
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:393
#endif

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
1c0083be <freertos_risc_v_ctxt_handler+0xbe> lw	t0,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:394
	csrw mstatus, t0						/* Required for MPIE bit. */
1c0083c0 <freertos_risc_v_ctxt_handler+0xc0> csrw	mstatus,t0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:396

	load_x  x1, 1 * portWORD_SIZE( sp )
1c0083c4 <freertos_risc_v_ctxt_handler+0xc4> lw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:397
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
1c0083c6 <freertos_risc_v_ctxt_handler+0xc6> lw	t0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:398
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c0083c8 <freertos_risc_v_ctxt_handler+0xc8> lw	t1,12(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:399
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c0083ca <freertos_risc_v_ctxt_handler+0xca> lw	t2,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:400
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c0083cc <freertos_risc_v_ctxt_handler+0xcc> lw	s0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:401
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c0083ce <freertos_risc_v_ctxt_handler+0xce> lw	s1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:402
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c0083d0 <freertos_risc_v_ctxt_handler+0xd0> lw	a0,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:403
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c0083d2 <freertos_risc_v_ctxt_handler+0xd2> lw	a1,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:404
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c0083d4 <freertos_risc_v_ctxt_handler+0xd4> lw	a2,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:405
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c0083d6 <freertos_risc_v_ctxt_handler+0xd6> lw	a3,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:406
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c0083d8 <freertos_risc_v_ctxt_handler+0xd8> lw	a4,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:407
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c0083da <freertos_risc_v_ctxt_handler+0xda> lw	a5,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:409
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c0083dc <freertos_risc_v_ctxt_handler+0xdc> lw	a6,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:410
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c0083de <freertos_risc_v_ctxt_handler+0xde> lw	a7,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:411
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c0083e0 <freertos_risc_v_ctxt_handler+0xe0> lw	s2,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:412
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c0083e2 <freertos_risc_v_ctxt_handler+0xe2> lw	s3,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:413
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c0083e4 <freertos_risc_v_ctxt_handler+0xe4> lw	s4,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:414
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c0083e6 <freertos_risc_v_ctxt_handler+0xe6> lw	s5,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:415
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c0083e8 <freertos_risc_v_ctxt_handler+0xe8> lw	s6,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:416
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c0083ea <freertos_risc_v_ctxt_handler+0xea> lw	s7,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:417
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c0083ec <freertos_risc_v_ctxt_handler+0xec> lw	s8,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:418
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c0083ee <freertos_risc_v_ctxt_handler+0xee> lw	s9,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:419
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c0083f0 <freertos_risc_v_ctxt_handler+0xf0> lw	s10,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:420
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c0083f2 <freertos_risc_v_ctxt_handler+0xf2> lw	s11,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:421
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c0083f4 <freertos_risc_v_ctxt_handler+0xf4> lw	t3,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:422
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c0083f6 <freertos_risc_v_ctxt_handler+0xf6> lw	t4,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:423
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c0083f8 <freertos_risc_v_ctxt_handler+0xf8> lw	t5,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:424
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c0083fa <freertos_risc_v_ctxt_handler+0xfa> lw	t6,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:426
#endif
	addi sp, sp, portCONTEXT_SIZE
1c0083fc <freertos_risc_v_ctxt_handler+0xfc> addi	sp,sp,120
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:428

	mret
1c008400 <freertos_risc_v_ctxt_handler+0x100> mret
1c008404 <freertos_risc_v_ctxt_handler+0x104> nop
1c008408 <freertos_risc_v_ctxt_handler+0x108> nop
1c00840c <freertos_risc_v_ctxt_handler+0x10c> nop
1c008410 <freertos_risc_v_ctxt_handler+0x110> nop
1c008414 <freertos_risc_v_ctxt_handler+0x114> nop
1c008418 <freertos_risc_v_ctxt_handler+0x118> nop
1c00841c <freertos_risc_v_ctxt_handler+0x11c> nop
1c008420 <freertos_risc_v_ctxt_handler+0x120> nop
1c008424 <freertos_risc_v_ctxt_handler+0x124> nop
1c008428 <freertos_risc_v_ctxt_handler+0x128> nop
1c00842c <freertos_risc_v_ctxt_handler+0x12c> nop
1c008430 <freertos_risc_v_ctxt_handler+0x130> nop
1c008434 <freertos_risc_v_ctxt_handler+0x134> nop
1c008438 <freertos_risc_v_ctxt_handler+0x138> nop
1c00843c <freertos_risc_v_ctxt_handler+0x13c> nop
1c008440 <freertos_risc_v_ctxt_handler+0x140> nop
1c008444 <freertos_risc_v_ctxt_handler+0x144> nop
1c008448 <freertos_risc_v_ctxt_handler+0x148> nop
1c00844c <freertos_risc_v_ctxt_handler+0x14c> nop
1c008450 <freertos_risc_v_ctxt_handler+0x150> nop
1c008454 <freertos_risc_v_ctxt_handler+0x154> nop
1c008458 <freertos_risc_v_ctxt_handler+0x158> nop
1c00845c <freertos_risc_v_ctxt_handler+0x15c> nop
1c008460 <freertos_risc_v_ctxt_handler+0x160> nop
1c008464 <freertos_risc_v_ctxt_handler+0x164> nop
1c008468 <freertos_risc_v_ctxt_handler+0x168> nop
1c00846c <freertos_risc_v_ctxt_handler+0x16c> nop
1c008470 <freertos_risc_v_ctxt_handler+0x170> nop
1c008474 <freertos_risc_v_ctxt_handler+0x174> nop
1c008478 <freertos_risc_v_ctxt_handler+0x178> nop
1c00847c <freertos_risc_v_ctxt_handler+0x17c> nop
1c008480 <freertos_risc_v_ctxt_handler+0x180> nop
1c008484 <freertos_risc_v_ctxt_handler+0x184> nop
1c008488 <freertos_risc_v_ctxt_handler+0x188> nop
1c00848c <freertos_risc_v_ctxt_handler+0x18c> nop
1c008490 <freertos_risc_v_ctxt_handler+0x190> nop
1c008494 <freertos_risc_v_ctxt_handler+0x194> nop
1c008498 <freertos_risc_v_ctxt_handler+0x198> nop
1c00849c <freertos_risc_v_ctxt_handler+0x19c> nop
1c0084a0 <freertos_risc_v_ctxt_handler+0x1a0> nop
1c0084a4 <freertos_risc_v_ctxt_handler+0x1a4> nop
1c0084a8 <freertos_risc_v_ctxt_handler+0x1a8> nop
1c0084ac <freertos_risc_v_ctxt_handler+0x1ac> nop
1c0084b0 <freertos_risc_v_ctxt_handler+0x1b0> nop
1c0084b4 <freertos_risc_v_ctxt_handler+0x1b4> nop
1c0084b8 <freertos_risc_v_ctxt_handler+0x1b8> nop
1c0084bc <freertos_risc_v_ctxt_handler+0x1bc> nop
1c0084c0 <freertos_risc_v_ctxt_handler+0x1c0> nop
1c0084c4 <freertos_risc_v_ctxt_handler+0x1c4> nop
1c0084c8 <freertos_risc_v_ctxt_handler+0x1c8> nop
1c0084cc <freertos_risc_v_ctxt_handler+0x1cc> nop
1c0084d0 <freertos_risc_v_ctxt_handler+0x1d0> nop
1c0084d4 <freertos_risc_v_ctxt_handler+0x1d4> nop
1c0084d8 <freertos_risc_v_ctxt_handler+0x1d8> nop
1c0084dc <freertos_risc_v_ctxt_handler+0x1dc> nop
1c0084e0 <freertos_risc_v_ctxt_handler+0x1e0> nop
1c0084e4 <freertos_risc_v_ctxt_handler+0x1e4> nop
1c0084e8 <freertos_risc_v_ctxt_handler+0x1e8> nop
1c0084ec <freertos_risc_v_ctxt_handler+0x1ec> nop
1c0084f0 <freertos_risc_v_ctxt_handler+0x1f0> nop
1c0084f4 <freertos_risc_v_ctxt_handler+0x1f4> nop
1c0084f8 <freertos_risc_v_ctxt_handler+0x1f8> nop
1c0084fc <freertos_risc_v_ctxt_handler+0x1fc> nop
xPortStartFirstTask():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:445
	outside of this file. */
	la t0, freertos_risc_v_trap_handler
	csrw mtvec, t0
#endif /* portasmHAS_CLILNT */

	load_x  sp, pxCurrentTCB			/* Load pxCurrentTCB. */
1c008500 <xPortStartFirstTask> lw	sp,988(gp) # 1c00eb44 <pxCurrentTCB>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:446
	load_x  sp, 0( sp )				 	/* Read sp from first TCB member. */
1c008504 <xPortStartFirstTask+0x4> lw	sp,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:448

	load_x  x1, 0( sp ) /* Note for starting the scheduler the exception return address is used as the function return address. */
1c008506 <xPortStartFirstTask+0x6> lw	ra,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:451

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c008508 <xPortStartFirstTask+0x8> lw	t0,4(sp)
1c00850a <xPortStartFirstTask+0xa> lw	t1,8(sp)
1c00850c <xPortStartFirstTask+0xc> lw	t2,12(sp)
1c00850e <xPortStartFirstTask+0xe> lw	t3,16(sp)
1c008510 <xPortStartFirstTask+0x10> lw	t4,20(sp)
1c008512 <xPortStartFirstTask+0x12> lw	t5,24(sp)
1c008514 <xPortStartFirstTask+0x14> csrw	0x800,t0
1c008518 <xPortStartFirstTask+0x18> csrw	0x801,t1
1c00851c <xPortStartFirstTask+0x1c> csrw	0x802,t2
1c008520 <xPortStartFirstTask+0x20> csrw	0x804,t3
1c008524 <xPortStartFirstTask+0x24> csrw	0x805,t4
1c008528 <xPortStartFirstTask+0x28> csrw	0x806,t5
1c00852c <xPortStartFirstTask+0x2c> addi	sp,sp,24
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:454
#endif

	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c00852e <xPortStartFirstTask+0x2e> lw	t1,12(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:455
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c008530 <xPortStartFirstTask+0x30> lw	t2,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:456
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c008532 <xPortStartFirstTask+0x32> lw	s0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:457
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c008534 <xPortStartFirstTask+0x34> lw	s1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:458
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c008536 <xPortStartFirstTask+0x36> lw	a0,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:459
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c008538 <xPortStartFirstTask+0x38> lw	a1,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:460
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c00853a <xPortStartFirstTask+0x3a> lw	a2,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:461
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c00853c <xPortStartFirstTask+0x3c> lw	a3,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:462
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c00853e <xPortStartFirstTask+0x3e> lw	a4,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:463
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c008540 <xPortStartFirstTask+0x40> lw	a5,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:465
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c008542 <xPortStartFirstTask+0x42> lw	a6,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:466
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c008544 <xPortStartFirstTask+0x44> lw	a7,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:467
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c008546 <xPortStartFirstTask+0x46> lw	s2,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:468
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c008548 <xPortStartFirstTask+0x48> lw	s3,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:469
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c00854a <xPortStartFirstTask+0x4a> lw	s4,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:470
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c00854c <xPortStartFirstTask+0x4c> lw	s5,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:471
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c00854e <xPortStartFirstTask+0x4e> lw	s6,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:472
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c008550 <xPortStartFirstTask+0x50> lw	s7,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:473
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c008552 <xPortStartFirstTask+0x52> lw	s8,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:474
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c008554 <xPortStartFirstTask+0x54> lw	s9,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:475
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c008556 <xPortStartFirstTask+0x56> lw	s10,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:476
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c008558 <xPortStartFirstTask+0x58> lw	s11,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:477
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c00855a <xPortStartFirstTask+0x5a> lw	t3,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:478
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c00855c <xPortStartFirstTask+0x5c> lw	t4,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:479
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c00855e <xPortStartFirstTask+0x5e> lw	t5,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:480
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c008560 <xPortStartFirstTask+0x60> lw	t6,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:482
#endif
	load_x  x5, 29 * portWORD_SIZE( sp )	/* Initial mstatus into x5 (t0) */
1c008562 <xPortStartFirstTask+0x62> lw	t0,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:483
	addi x5, x5, 0x08						/* Set MIE bit so the first task starts with interrupts enabled - required as returns with ret not eret. */
1c008564 <xPortStartFirstTask+0x64> addi	t0,t0,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:484
	csrrw  x0, mstatus, x5					/* Interrupts enabled from here! */
1c008566 <xPortStartFirstTask+0x66> csrw	mstatus,t0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:485
	load_x  x5, 2 * portWORD_SIZE( sp )		/* Initial x5 (t0) value. */
1c00856a <xPortStartFirstTask+0x6a> lw	t0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:487

	addi	sp, sp, portCONTEXT_SIZE
1c00856c <xPortStartFirstTask+0x6c> addi	sp,sp,120
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:488
	ret
1c008570 <xPortStartFirstTask+0x70> ret
1c008572 <xPortStartFirstTask+0x72> nop
1c008576 <xPortStartFirstTask+0x76> nop
1c00857a <xPortStartFirstTask+0x7a> nop
1c00857e <xPortStartFirstTask+0x7e> nop
1c008582 <xPortStartFirstTask+0x82> nop
1c008586 <xPortStartFirstTask+0x86> nop
1c00858a <xPortStartFirstTask+0x8a> nop
1c00858e <xPortStartFirstTask+0x8e> nop
1c008592 <xPortStartFirstTask+0x92> nop
1c008596 <xPortStartFirstTask+0x96> nop
1c00859a <xPortStartFirstTask+0x9a> nop
1c00859e <xPortStartFirstTask+0x9e> nop
1c0085a2 <xPortStartFirstTask+0xa2> nop
1c0085a6 <xPortStartFirstTask+0xa6> nop
1c0085aa <xPortStartFirstTask+0xaa> nop
1c0085ae <xPortStartFirstTask+0xae> nop
1c0085b2 <xPortStartFirstTask+0xb2> nop
1c0085b6 <xPortStartFirstTask+0xb6> nop
1c0085ba <xPortStartFirstTask+0xba> nop
1c0085be <xPortStartFirstTask+0xbe> nop
1c0085c2 <xPortStartFirstTask+0xc2> nop
1c0085c6 <xPortStartFirstTask+0xc6> nop
1c0085ca <xPortStartFirstTask+0xca> nop
1c0085ce <xPortStartFirstTask+0xce> nop
1c0085d2 <xPortStartFirstTask+0xd2> nop
1c0085d6 <xPortStartFirstTask+0xd6> nop
1c0085da <xPortStartFirstTask+0xda> nop
1c0085de <xPortStartFirstTask+0xde> nop
1c0085e2 <xPortStartFirstTask+0xe2> nop
1c0085e6 <xPortStartFirstTask+0xe6> nop
1c0085ea <xPortStartFirstTask+0xea> nop
1c0085ee <xPortStartFirstTask+0xee> nop
1c0085f2 <xPortStartFirstTask+0xf2> nop
1c0085f6 <xPortStartFirstTask+0xf6> nop
1c0085fa <xPortStartFirstTask+0xfa> nop
1c0085fe <xPortStartFirstTask+0xfe> nop
pxPortInitialiseStack():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:558
 */
.align 8
.func
pxPortInitialiseStack:

	csrr t0, mstatus					/* Obtain current mstatus value. */
1c008600 <pxPortInitialiseStack> csrr	t0,mstatus
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:559
	andi t0, t0, ~0x8					/* Ensure interrupts are disabled when the stack is restored within an ISR.  Required when a task is created after the schedulre has been started, otherwise interrupts would be disabled anyway. */
1c008604 <pxPortInitialiseStack+0x4> andi	t0,t0,-9
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:560
	addi t1, x0, 0x188					/* Generate the value 0x1880, which are the MPIE and MPP bits to set in mstatus. */
1c008608 <pxPortInitialiseStack+0x8> li	t1,392
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:561
	slli t1, t1, 4
1c00860c <pxPortInitialiseStack+0xc> slli	t1,t1,0x4
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:562
	or t0, t0, t1						/* Set MPIE and MPP bits in mstatus value. */
1c00860e <pxPortInitialiseStack+0xe> or	t0,t0,t1
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:564

	addi a0, a0, -portWORD_SIZE
1c008612 <pxPortInitialiseStack+0x12> addi	a0,a0,-4
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:565
	store_x t0, 0(a0)					/* mstatus onto the stack. */
1c008614 <pxPortInitialiseStack+0x14> sw	t0,0(a0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:566
	addi a0, a0, -(22 * portWORD_SIZE)	/* Space for registers x11-x31. */
1c008618 <pxPortInitialiseStack+0x18> addi	a0,a0,-88
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:567
	store_x a2, 0(a0)					/* Task parameters (pvParameters parameter) goes into register X10/a0 on the stack. */
1c00861c <pxPortInitialiseStack+0x1c> sw	a2,0(a0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:568
	addi a0, a0, -(6 * portWORD_SIZE)	/* Space for registers x5-x9. */
1c00861e <pxPortInitialiseStack+0x1e> addi	a0,a0,-24
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:569
	store_x x0, 0(a0)					/* Return address onto the stack, could be portTASK_RETURN_ADDRESS */
1c008620 <pxPortInitialiseStack+0x20> sw	zero,0(a0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:570
	addi t0, x0, portasmADDITIONAL_CONTEXT_SIZE /* The number of chip specific additional registers. */
1c008624 <pxPortInitialiseStack+0x24> li	t0,6
chip_specific_stack_frame():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:572
chip_specific_stack_frame:				/* First add any chip specific registers to the stack frame being created. */
	beq t0, x0, 1f						/* No more chip specific registers to save. */
1c008628 <chip_specific_stack_frame> beqz	t0,1c008636 <chip_specific_stack_frame+0xe>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:573
	addi a0, a0, -portWORD_SIZE			/* Make space for chip specific register. */
1c00862c <chip_specific_stack_frame+0x4> addi	a0,a0,-4
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:574
	store_x x0, 0(a0)					/* Give the chip specific register an initial value of zero. */
1c00862e <chip_specific_stack_frame+0x6> sw	zero,0(a0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:575
	addi t0, t0, -1						/* Decrement the count of chip specific registers remaining. */
1c008632 <chip_specific_stack_frame+0xa> addi	t0,t0,-1
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:576
	j chip_specific_stack_frame			/* Until no more chip specific registers. */
1c008634 <chip_specific_stack_frame+0xc> j	1c008628 <chip_specific_stack_frame>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:578
1:
	addi a0, a0, -portWORD_SIZE
1c008636 <chip_specific_stack_frame+0xe> addi	a0,a0,-4
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:579
	store_x a1, 0(a0)					/* mret value (pxCode parameter) onto the stack. */
1c008638 <chip_specific_stack_frame+0x10> sw	a1,0(a0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/GCC/RISC-V/portASM.S:580
	ret
1c00863a <chip_specific_stack_frame+0x12> ret
	...
rt_hw_interrupt_disable():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:24
/*
 * rt_base_t rt_hw_interrupt_disable(void);
 */
    .globl rt_hw_interrupt_disable
rt_hw_interrupt_disable:
    csrrci a0, mstatus, 8
1c008730 <rt_hw_interrupt_disable> csrrci	a0,mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:25
    ret
1c008734 <rt_hw_interrupt_disable+0x4> ret
rt_hw_interrupt_enable():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:32
/*
 * void rt_hw_interrupt_enable(rt_base_t level);
 */
    .globl rt_hw_interrupt_enable
rt_hw_interrupt_enable:
    csrw mstatus, a0
1c008736 <rt_hw_interrupt_enable> csrw	mstatus,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:33
    ret
1c00873a <rt_hw_interrupt_enable+0x4> ret
rt_hw_context_switch_to():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:46
 * a0 --> to
 * a1 --> to_thread
 */
    .globl rt_hw_context_switch_to
rt_hw_context_switch_to:
    LOAD sp, (a0)
1c00873c <rt_hw_context_switch_to> lw	sp,0(a0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:47
    LOAD a0,   2 * REGBYTES(sp)
1c008740 <rt_hw_context_switch_to+0x4> lw	a0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:48
    csrw mstatus, a0
1c008742 <rt_hw_context_switch_to+0x6> csrw	mstatus,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:49
    j    rt_hw_context_switch_exit
1c008746 <rt_hw_context_switch_to+0xa> j	1c00879e <rt_hw_context_switch_exit>
rt_hw_context_switch():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:70
     *     x1/ra       -> sp(0)
     *     x1/ra       -> sp(1)
     *     mstatus.mie -> sp(2)
     *     x(i)        -> sp(i-4)
     */
    addi  sp,  sp, -32 * REGBYTES
1c008748 <rt_hw_context_switch> addi	sp,sp,-128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:71
    STORE sp,  (a0)
1c00874a <rt_hw_context_switch+0x2> sw	sp,0(a0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:73

    STORE x1,   0 * REGBYTES(sp)
1c00874e <rt_hw_context_switch+0x6> sw	ra,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:74
    STORE x1,   1 * REGBYTES(sp)
1c008750 <rt_hw_context_switch+0x8> sw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:76

    csrr a0, mstatus
1c008752 <rt_hw_context_switch+0xa> csrr	a0,mstatus
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:77
    andi a0, a0, 8
1c008756 <rt_hw_context_switch+0xe> andi	a0,a0,8
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:78
    beqz a0, save_mpie
1c008758 <rt_hw_context_switch+0x10> beqz	a0,1c00875e <save_mpie>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:79
    li   a0, 0x80
1c00875a <rt_hw_context_switch+0x12> li	a0,128
save_mpie():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:81
save_mpie:
    STORE a0,   2 * REGBYTES(sp)
1c00875e <save_mpie> sw	a0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:83

    STORE x4,   4 * REGBYTES(sp)
1c008760 <save_mpie+0x2> sw	tp,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:84
    STORE x5,   5 * REGBYTES(sp)
1c008762 <save_mpie+0x4> sw	t0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:85
    STORE x6,   6 * REGBYTES(sp)
1c008764 <save_mpie+0x6> sw	t1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:86
    STORE x7,   7 * REGBYTES(sp)
1c008766 <save_mpie+0x8> sw	t2,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:87
    STORE x8,   8 * REGBYTES(sp)
1c008768 <save_mpie+0xa> sw	s0,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:88
    STORE x9,   9 * REGBYTES(sp)
1c00876a <save_mpie+0xc> sw	s1,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:89
    STORE x10, 10 * REGBYTES(sp)
1c00876c <save_mpie+0xe> sw	a0,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:90
    STORE x11, 11 * REGBYTES(sp)
1c00876e <save_mpie+0x10> sw	a1,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:91
    STORE x12, 12 * REGBYTES(sp)
1c008770 <save_mpie+0x12> sw	a2,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:92
    STORE x13, 13 * REGBYTES(sp)
1c008772 <save_mpie+0x14> sw	a3,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:93
    STORE x14, 14 * REGBYTES(sp)
1c008774 <save_mpie+0x16> sw	a4,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:94
    STORE x15, 15 * REGBYTES(sp)
1c008776 <save_mpie+0x18> sw	a5,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:95
    STORE x16, 16 * REGBYTES(sp)
1c008778 <save_mpie+0x1a> sw	a6,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:96
    STORE x17, 17 * REGBYTES(sp)
1c00877a <save_mpie+0x1c> sw	a7,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:97
    STORE x18, 18 * REGBYTES(sp)
1c00877c <save_mpie+0x1e> sw	s2,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:98
    STORE x19, 19 * REGBYTES(sp)
1c00877e <save_mpie+0x20> sw	s3,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:99
    STORE x20, 20 * REGBYTES(sp)
1c008780 <save_mpie+0x22> sw	s4,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:100
    STORE x21, 21 * REGBYTES(sp)
1c008782 <save_mpie+0x24> sw	s5,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:101
    STORE x22, 22 * REGBYTES(sp)
1c008784 <save_mpie+0x26> sw	s6,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:102
    STORE x23, 23 * REGBYTES(sp)
1c008786 <save_mpie+0x28> sw	s7,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:103
    STORE x24, 24 * REGBYTES(sp)
1c008788 <save_mpie+0x2a> sw	s8,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:104
    STORE x25, 25 * REGBYTES(sp)
1c00878a <save_mpie+0x2c> sw	s9,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:105
    STORE x26, 26 * REGBYTES(sp)
1c00878c <save_mpie+0x2e> sw	s10,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:106
    STORE x27, 27 * REGBYTES(sp)
1c00878e <save_mpie+0x30> sw	s11,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:107
    STORE x28, 28 * REGBYTES(sp)
1c008790 <save_mpie+0x32> sw	t3,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:108
    STORE x29, 29 * REGBYTES(sp)
1c008792 <save_mpie+0x34> sw	t4,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:109
    STORE x30, 30 * REGBYTES(sp)
1c008794 <save_mpie+0x36> sw	t5,120(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:110
    STORE x31, 31 * REGBYTES(sp)
1c008796 <save_mpie+0x38> sw	t6,124(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:117
    /* restore to thread context
     * sp(0) -> epc;
     * sp(1) -> ra;
     * sp(i) -> x(i+2)
     */
    LOAD sp,  (a1)
1c008798 <save_mpie+0x3a> lw	sp,0(a1)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:119

    j rt_hw_context_switch_exit
1c00879c <save_mpie+0x3e> j	1c00879e <rt_hw_context_switch_exit>
rt_hw_context_switch_exit():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:141
    call rt_signal_check
    mv sp, a0
#endif
#endif
    /* resw ra to mepc */
    LOAD a0,   0 * REGBYTES(sp)
1c00879e <rt_hw_context_switch_exit> lw	a0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:142
    csrw mepc, a0
1c0087a0 <rt_hw_context_switch_exit+0x2> csrw	mepc,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:144

    LOAD x1,   1 * REGBYTES(sp)
1c0087a4 <rt_hw_context_switch_exit+0x6> lw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:146

    li    t0, 0x00001800
1c0087a6 <rt_hw_context_switch_exit+0x8> lui	t0,0x2
1c0087aa <rt_hw_context_switch_exit+0xc> addi	t0,t0,-2048 # 00001800 <__stack_size+0x1000>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:147
    csrs  mstatus, t0
1c0087ae <rt_hw_context_switch_exit+0x10> csrs	mstatus,t0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:148
    LOAD a0,   2 * REGBYTES(sp)
1c0087b2 <rt_hw_context_switch_exit+0x14> lw	a0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:149
    csrs mstatus, a0
1c0087b4 <rt_hw_context_switch_exit+0x16> csrs	mstatus,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:151

    LOAD x4,   4 * REGBYTES(sp)
1c0087b8 <rt_hw_context_switch_exit+0x1a> lw	tp,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:152
    LOAD x5,   5 * REGBYTES(sp)
1c0087ba <rt_hw_context_switch_exit+0x1c> lw	t0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:153
    LOAD x6,   6 * REGBYTES(sp)
1c0087bc <rt_hw_context_switch_exit+0x1e> lw	t1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:154
    LOAD x7,   7 * REGBYTES(sp)
1c0087be <rt_hw_context_switch_exit+0x20> lw	t2,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:155
    LOAD x8,   8 * REGBYTES(sp)
1c0087c0 <rt_hw_context_switch_exit+0x22> lw	s0,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:156
    LOAD x9,   9 * REGBYTES(sp)
1c0087c2 <rt_hw_context_switch_exit+0x24> lw	s1,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:157
    LOAD x10, 10 * REGBYTES(sp)
1c0087c4 <rt_hw_context_switch_exit+0x26> lw	a0,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:158
    LOAD x11, 11 * REGBYTES(sp)
1c0087c6 <rt_hw_context_switch_exit+0x28> lw	a1,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:159
    LOAD x12, 12 * REGBYTES(sp)
1c0087c8 <rt_hw_context_switch_exit+0x2a> lw	a2,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:160
    LOAD x13, 13 * REGBYTES(sp)
1c0087ca <rt_hw_context_switch_exit+0x2c> lw	a3,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:161
    LOAD x14, 14 * REGBYTES(sp)
1c0087cc <rt_hw_context_switch_exit+0x2e> lw	a4,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:162
    LOAD x15, 15 * REGBYTES(sp)
1c0087ce <rt_hw_context_switch_exit+0x30> lw	a5,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:163
    LOAD x16, 16 * REGBYTES(sp)
1c0087d0 <rt_hw_context_switch_exit+0x32> lw	a6,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:164
    LOAD x17, 17 * REGBYTES(sp)
1c0087d2 <rt_hw_context_switch_exit+0x34> lw	a7,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:165
    LOAD x18, 18 * REGBYTES(sp)
1c0087d4 <rt_hw_context_switch_exit+0x36> lw	s2,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:166
    LOAD x19, 19 * REGBYTES(sp)
1c0087d6 <rt_hw_context_switch_exit+0x38> lw	s3,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:167
    LOAD x20, 20 * REGBYTES(sp)
1c0087d8 <rt_hw_context_switch_exit+0x3a> lw	s4,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:168
    LOAD x21, 21 * REGBYTES(sp)
1c0087da <rt_hw_context_switch_exit+0x3c> lw	s5,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:169
    LOAD x22, 22 * REGBYTES(sp)
1c0087dc <rt_hw_context_switch_exit+0x3e> lw	s6,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:170
    LOAD x23, 23 * REGBYTES(sp)
1c0087de <rt_hw_context_switch_exit+0x40> lw	s7,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:171
    LOAD x24, 24 * REGBYTES(sp)
1c0087e0 <rt_hw_context_switch_exit+0x42> lw	s8,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:172
    LOAD x25, 25 * REGBYTES(sp)
1c0087e2 <rt_hw_context_switch_exit+0x44> lw	s9,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:173
    LOAD x26, 26 * REGBYTES(sp)
1c0087e4 <rt_hw_context_switch_exit+0x46> lw	s10,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:174
    LOAD x27, 27 * REGBYTES(sp)
1c0087e6 <rt_hw_context_switch_exit+0x48> lw	s11,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:175
    LOAD x28, 28 * REGBYTES(sp)
1c0087e8 <rt_hw_context_switch_exit+0x4a> lw	t3,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:176
    LOAD x29, 29 * REGBYTES(sp)
1c0087ea <rt_hw_context_switch_exit+0x4c> lw	t4,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:177
    LOAD x30, 30 * REGBYTES(sp)
1c0087ec <rt_hw_context_switch_exit+0x4e> lw	t5,120(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:178
    LOAD x31, 31 * REGBYTES(sp)
1c0087ee <rt_hw_context_switch_exit+0x50> lw	t6,124(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:180

    addi sp,  sp, 32 * REGBYTES
1c0087f0 <rt_hw_context_switch_exit+0x52> addi	sp,sp,128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:181
    mret
1c0087f2 <rt_hw_context_switch_exit+0x54> mret
exit():
1c0087f6 <exit> addi	sp,sp,-16
1c0087f8 <exit+0x2> li	a1,0
1c0087fa <exit+0x4> sw	s0,8(sp)
1c0087fc <exit+0x6> sw	ra,12(sp)
1c0087fe <exit+0x8> mv	s0,a0
1c008800 <exit+0xa> jal	1c0088e0 <__call_exitprocs>
1c008802 <exit+0xc> lw	a0,-1504(gp) # 1c00e188 <_global_impure_ptr>
1c008806 <exit+0x10> lw	a5,60(a0)
1c008808 <exit+0x12> beqz	a5,1c00880c <exit+0x16>
1c00880a <exit+0x14> jalr	a5
1c00880c <exit+0x16> mv	a0,s0
1c00880e <exit+0x18> jal	1c00898a <_exit>
memcpy():
1c008810 <memcpy> xor	a5,a1,a0
1c008814 <memcpy+0x4> andi	a5,a5,3
1c008816 <memcpy+0x6> add	a4,a0,a2
1c00881a <memcpy+0xa> bnez	a5,1c008822 <memcpy+0x12>
1c00881c <memcpy+0xc> li	a5,3
1c00881e <memcpy+0xe> bltu	a5,a2,1c00883c <memcpy+0x2c>
1c008822 <memcpy+0x12> mv	a5,a0
1c008824 <memcpy+0x14> bltu	a0,a4,1c008836 <memcpy+0x26>
1c008828 <memcpy+0x18> ret
1c00882a <memcpy+0x1a> lbu	a3,0(a1)
1c00882e <memcpy+0x1e> addi	a5,a5,1
1c008830 <memcpy+0x20> addi	a1,a1,1
1c008832 <memcpy+0x22> sb	a3,-1(a5)
1c008836 <memcpy+0x26> bltu	a5,a4,1c00882a <memcpy+0x1a>
1c00883a <memcpy+0x2a> ret
1c00883c <memcpy+0x2c> andi	a5,a0,3
1c008840 <memcpy+0x30> bnez	a5,1c0088b6 <memcpy+0xa6>
1c008842 <memcpy+0x32> mv	a5,a0
1c008844 <memcpy+0x34> andi	a3,a4,-4
1c008848 <memcpy+0x38> addi	a2,a3,-32
1c00884c <memcpy+0x3c> bgeu	a5,a2,1c0088c4 <memcpy+0xb4>
1c008850 <memcpy+0x40> lw	t2,0(a1)
1c008854 <memcpy+0x44> lw	t0,4(a1)
1c008858 <memcpy+0x48> lw	t6,8(a1)
1c00885c <memcpy+0x4c> lw	t5,12(a1)
1c008860 <memcpy+0x50> lw	t4,16(a1)
1c008864 <memcpy+0x54> lw	t3,20(a1)
1c008868 <memcpy+0x58> lw	t1,24(a1)
1c00886c <memcpy+0x5c> lw	a7,28(a1)
1c008870 <memcpy+0x60> addi	a1,a1,36
1c008874 <memcpy+0x64> sw	t2,0(a5)
1c008878 <memcpy+0x68> lw	a6,-4(a1)
1c00887c <memcpy+0x6c> sw	t0,4(a5)
1c008880 <memcpy+0x70> sw	t6,8(a5)
1c008884 <memcpy+0x74> sw	t5,12(a5)
1c008888 <memcpy+0x78> sw	t4,16(a5)
1c00888c <memcpy+0x7c> sw	t3,20(a5)
1c008890 <memcpy+0x80> sw	t1,24(a5)
1c008894 <memcpy+0x84> sw	a7,28(a5)
1c008898 <memcpy+0x88> addi	a5,a5,36
1c00889c <memcpy+0x8c> sw	a6,-4(a5)
1c0088a0 <memcpy+0x90> j	1c00884c <memcpy+0x3c>
1c0088a2 <memcpy+0x92> lbu	a3,0(a1)
1c0088a6 <memcpy+0x96> addi	a5,a5,1
1c0088a8 <memcpy+0x98> addi	a1,a1,1
1c0088aa <memcpy+0x9a> sb	a3,-1(a5)
1c0088ae <memcpy+0x9e> andi	a3,a5,3
1c0088b2 <memcpy+0xa2> bnez	a3,1c0088a2 <memcpy+0x92>
1c0088b4 <memcpy+0xa4> j	1c008844 <memcpy+0x34>
1c0088b6 <memcpy+0xa6> mv	a5,a0
1c0088b8 <memcpy+0xa8> j	1c0088ae <memcpy+0x9e>
1c0088ba <memcpy+0xaa> lw	a2,0(a1)
1c0088bc <memcpy+0xac> addi	a5,a5,4
1c0088be <memcpy+0xae> addi	a1,a1,4
1c0088c0 <memcpy+0xb0> sw	a2,-4(a5)
1c0088c4 <memcpy+0xb4> bltu	a5,a3,1c0088ba <memcpy+0xaa>
1c0088c8 <memcpy+0xb8> bltu	a5,a4,1c008836 <memcpy+0x26>
1c0088cc <memcpy+0xbc> ret
strlen():
1c0088ce <strlen> mv	a5,a0
1c0088d0 <strlen+0x2> addi	a5,a5,1
1c0088d2 <strlen+0x4> lbu	a4,-1(a5)
1c0088d6 <strlen+0x8> bnez	a4,1c0088d0 <strlen+0x2>
1c0088d8 <strlen+0xa> sub	a0,a5,a0
1c0088dc <strlen+0xe> addi	a0,a0,-1
1c0088de <strlen+0x10> ret
__call_exitprocs():
1c0088e0 <__call_exitprocs> addi	sp,sp,-48
1c0088e2 <__call_exitprocs+0x2> sw	s3,28(sp)
1c0088e4 <__call_exitprocs+0x4> lw	s3,-1504(gp) # 1c00e188 <_global_impure_ptr>
1c0088e8 <__call_exitprocs+0x8> sw	s4,24(sp)
1c0088ea <__call_exitprocs+0xa> sw	s5,20(sp)
1c0088ec <__call_exitprocs+0xc> sw	s6,16(sp)
1c0088ee <__call_exitprocs+0xe> sw	ra,44(sp)
1c0088f0 <__call_exitprocs+0x10> sw	s0,40(sp)
1c0088f2 <__call_exitprocs+0x12> sw	s1,36(sp)
1c0088f4 <__call_exitprocs+0x14> sw	s2,32(sp)
1c0088f6 <__call_exitprocs+0x16> sw	s7,12(sp)
1c0088f8 <__call_exitprocs+0x18> mv	s5,a0
1c0088fa <__call_exitprocs+0x1a> mv	s4,a1
1c0088fc <__call_exitprocs+0x1c> li	s6,1
1c0088fe <__call_exitprocs+0x1e> lw	s1,328(s3)
1c008902 <__call_exitprocs+0x22> beqz	s1,1c008912 <__call_exitprocs+0x32>
1c008904 <__call_exitprocs+0x24> lw	s0,4(s1)
1c008906 <__call_exitprocs+0x26> addi	s2,s0,-1
1c00890a <__call_exitprocs+0x2a> slli	s0,s0,0x2
1c00890c <__call_exitprocs+0x2c> add	s0,s0,s1
1c00890e <__call_exitprocs+0x2e> bgez	s2,1c008928 <__call_exitprocs+0x48>
1c008912 <__call_exitprocs+0x32> lw	ra,44(sp)
1c008914 <__call_exitprocs+0x34> lw	s0,40(sp)
1c008916 <__call_exitprocs+0x36> lw	s1,36(sp)
1c008918 <__call_exitprocs+0x38> lw	s2,32(sp)
1c00891a <__call_exitprocs+0x3a> lw	s3,28(sp)
1c00891c <__call_exitprocs+0x3c> lw	s4,24(sp)
1c00891e <__call_exitprocs+0x3e> lw	s5,20(sp)
1c008920 <__call_exitprocs+0x40> lw	s6,16(sp)
1c008922 <__call_exitprocs+0x42> lw	s7,12(sp)
1c008924 <__call_exitprocs+0x44> addi	sp,sp,48
1c008926 <__call_exitprocs+0x46> ret
1c008928 <__call_exitprocs+0x48> beqz	s4,1c00893a <__call_exitprocs+0x5a>
1c00892c <__call_exitprocs+0x4c> lw	a5,260(s0)
1c008930 <__call_exitprocs+0x50> beq	a5,s4,1c00893a <__call_exitprocs+0x5a>
1c008934 <__call_exitprocs+0x54> addi	s2,s2,-1
1c008936 <__call_exitprocs+0x56> addi	s0,s0,-4
1c008938 <__call_exitprocs+0x58> j	1c00890e <__call_exitprocs+0x2e>
1c00893a <__call_exitprocs+0x5a> lw	a4,4(s1)
1c00893c <__call_exitprocs+0x5c> lw	a5,4(s0)
1c00893e <__call_exitprocs+0x5e> addi	a4,a4,-1
1c008940 <__call_exitprocs+0x60> bne	a4,s2,1c00896c <__call_exitprocs+0x8c>
1c008944 <__call_exitprocs+0x64> sw	s2,4(s1)
1c008948 <__call_exitprocs+0x68> beqz	a5,1c008934 <__call_exitprocs+0x54>
1c00894a <__call_exitprocs+0x6a> lw	a3,392(s1)
1c00894e <__call_exitprocs+0x6e> sll	a4,s6,s2
1c008952 <__call_exitprocs+0x72> lw	s7,4(s1)
1c008956 <__call_exitprocs+0x76> and	a3,a3,a4
1c008958 <__call_exitprocs+0x78> bnez	a3,1c008972 <__call_exitprocs+0x92>
1c00895a <__call_exitprocs+0x7a> jalr	a5
1c00895c <__call_exitprocs+0x7c> lw	a4,4(s1)
1c00895e <__call_exitprocs+0x7e> lw	a5,328(s3)
1c008962 <__call_exitprocs+0x82> bne	a4,s7,1c0088fe <__call_exitprocs+0x1e>
1c008966 <__call_exitprocs+0x86> beq	s1,a5,1c008934 <__call_exitprocs+0x54>
1c00896a <__call_exitprocs+0x8a> j	1c0088fe <__call_exitprocs+0x1e>
1c00896c <__call_exitprocs+0x8c> sw	zero,4(s0)
1c008970 <__call_exitprocs+0x90> j	1c008948 <__call_exitprocs+0x68>
1c008972 <__call_exitprocs+0x92> lw	a3,396(s1)
1c008976 <__call_exitprocs+0x96> lw	a1,132(s0)
1c00897a <__call_exitprocs+0x9a> and	a4,a4,a3
1c00897c <__call_exitprocs+0x9c> bnez	a4,1c008984 <__call_exitprocs+0xa4>
1c00897e <__call_exitprocs+0x9e> mv	a0,s5
1c008980 <__call_exitprocs+0xa0> jalr	a5
1c008982 <__call_exitprocs+0xa2> j	1c00895c <__call_exitprocs+0x7c>
1c008984 <__call_exitprocs+0xa4> mv	a0,a1
1c008986 <__call_exitprocs+0xa6> jalr	a5
1c008988 <__call_exitprocs+0xa8> j	1c00895c <__call_exitprocs+0x7c>
_exit():
1c00898a <_exit> li	a1,0
1c00898c <_exit+0x2> li	a2,0
1c00898e <_exit+0x4> li	a3,0
1c008990 <_exit+0x6> li	a4,0
1c008992 <_exit+0x8> li	a5,0
1c008994 <_exit+0xa> li	a7,93
1c008998 <_exit+0xe> ecall
1c00899c <_exit+0x12> bgez	a0,1c0089b2 <_exit+0x28>
1c0089a0 <_exit+0x16> addi	sp,sp,-16
1c0089a2 <_exit+0x18> sw	s0,8(sp)
1c0089a4 <_exit+0x1a> mv	s0,a0
1c0089a6 <_exit+0x1c> sw	ra,12(sp)
1c0089a8 <_exit+0x1e> neg	s0,s0
1c0089ac <_exit+0x22> jal	1c0089b4 <__errno>
1c0089ae <_exit+0x24> sw	s0,0(a0)
1c0089b0 <_exit+0x26> j	1c0089b0 <_exit+0x26>
1c0089b2 <_exit+0x28> j	1c0089b2 <_exit+0x28>
__errno():
1c0089b4 <__errno> lw	a0,-1500(gp) # 1c00e18c <_impure_ptr>
1c0089b8 <__errno+0x4> ret
vListInitialise():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:38
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
1c0089ba <vListInitialise> addi	sp,sp,-32
1c0089bc <vListInitialise+0x2> sw	s0,28(sp)
1c0089be <vListInitialise+0x4> addi	s0,sp,32
1c0089c0 <vListInitialise+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:42
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c0089c4 <vListInitialise+0xa> lw	a5,-20(s0)
1c0089c8 <vListInitialise+0xe> addi	a4,a5,8
1c0089cc <vListInitialise+0x12> lw	a5,-20(s0)
1c0089d0 <vListInitialise+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:46

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1c0089d2 <vListInitialise+0x18> lw	a5,-20(s0)
1c0089d6 <vListInitialise+0x1c> li	a4,-1
1c0089d8 <vListInitialise+0x1e> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:50

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c0089da <vListInitialise+0x20> lw	a5,-20(s0)
1c0089de <vListInitialise+0x24> addi	a4,a5,8
1c0089e2 <vListInitialise+0x28> lw	a5,-20(s0)
1c0089e6 <vListInitialise+0x2c> sw	a4,12(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:51
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c0089e8 <vListInitialise+0x2e> lw	a5,-20(s0)
1c0089ec <vListInitialise+0x32> addi	a4,a5,8
1c0089f0 <vListInitialise+0x36> lw	a5,-20(s0)
1c0089f4 <vListInitialise+0x3a> sw	a4,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:53

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1c0089f6 <vListInitialise+0x3c> lw	a5,-20(s0)
1c0089fa <vListInitialise+0x40> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:59

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1c0089fe <vListInitialise+0x44> nop
1c008a00 <vListInitialise+0x46> lw	s0,28(sp)
1c008a02 <vListInitialise+0x48> addi	sp,sp,32
1c008a04 <vListInitialise+0x4a> ret
vListInsertEnd():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:75
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1c008a06 <vListInsertEnd> addi	sp,sp,-48
1c008a08 <vListInsertEnd+0x2> sw	s0,44(sp)
1c008a0a <vListInsertEnd+0x4> addi	s0,sp,48
1c008a0c <vListInsertEnd+0x6> sw	a0,-36(s0)
1c008a10 <vListInsertEnd+0xa> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:76
ListItem_t * const pxIndex = pxList->pxIndex;
1c008a14 <vListInsertEnd+0xe> lw	a5,-36(s0)
1c008a18 <vListInsertEnd+0x12> lw	a5,4(a5)
1c008a1a <vListInsertEnd+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:87
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1c008a1e <vListInsertEnd+0x18> lw	a5,-40(s0)
1c008a22 <vListInsertEnd+0x1c> lw	a4,-20(s0)
1c008a26 <vListInsertEnd+0x20> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:88
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1c008a28 <vListInsertEnd+0x22> lw	a5,-20(s0)
1c008a2c <vListInsertEnd+0x26> lw	a4,8(a5)
1c008a2e <vListInsertEnd+0x28> lw	a5,-40(s0)
1c008a32 <vListInsertEnd+0x2c> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:93

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1c008a34 <vListInsertEnd+0x2e> lw	a5,-20(s0)
1c008a38 <vListInsertEnd+0x32> lw	a5,8(a5)
1c008a3a <vListInsertEnd+0x34> lw	a4,-40(s0)
1c008a3e <vListInsertEnd+0x38> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:94
	pxIndex->pxPrevious = pxNewListItem;
1c008a40 <vListInsertEnd+0x3a> lw	a5,-20(s0)
1c008a44 <vListInsertEnd+0x3e> lw	a4,-40(s0)
1c008a48 <vListInsertEnd+0x42> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:97

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
1c008a4a <vListInsertEnd+0x44> lw	a5,-40(s0)
1c008a4e <vListInsertEnd+0x48> lw	a4,-36(s0)
1c008a52 <vListInsertEnd+0x4c> sw	a4,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:99

	( pxList->uxNumberOfItems )++;
1c008a54 <vListInsertEnd+0x4e> lw	a5,-36(s0)
1c008a58 <vListInsertEnd+0x52> lw	a5,0(a5)
1c008a5a <vListInsertEnd+0x54> addi	a4,a5,1
1c008a5e <vListInsertEnd+0x58> lw	a5,-36(s0)
1c008a62 <vListInsertEnd+0x5c> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:100
}
1c008a64 <vListInsertEnd+0x5e> nop
1c008a66 <vListInsertEnd+0x60> lw	s0,44(sp)
1c008a68 <vListInsertEnd+0x62> addi	sp,sp,48
1c008a6a <vListInsertEnd+0x64> ret
vListInsert():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:104
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1c008a6c <vListInsert> addi	sp,sp,-48
1c008a6e <vListInsert+0x2> sw	s0,44(sp)
1c008a70 <vListInsert+0x4> addi	s0,sp,48
1c008a72 <vListInsert+0x6> sw	a0,-36(s0)
1c008a76 <vListInsert+0xa> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:106
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1c008a7a <vListInsert+0xe> lw	a5,-40(s0)
1c008a7e <vListInsert+0x12> lw	a5,0(a5)
1c008a80 <vListInsert+0x14> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:122
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1c008a84 <vListInsert+0x18> lw	a4,-24(s0)
1c008a88 <vListInsert+0x1c> li	a5,-1
1c008a8a <vListInsert+0x1e> bne	a4,a5,1c008a9a <vListInsert+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:124
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1c008a8e <vListInsert+0x22> lw	a5,-36(s0)
1c008a92 <vListInsert+0x26> lw	a5,16(a5)
1c008a94 <vListInsert+0x28> sw	a5,-20(s0)
1c008a98 <vListInsert+0x2c> j	1c008ac0 <vListInsert+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:150
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
1c008a9a <vListInsert+0x2e> lw	a5,-36(s0)
1c008a9e <vListInsert+0x32> addi	a5,a5,8
1c008aa0 <vListInsert+0x34> sw	a5,-20(s0)
1c008aa4 <vListInsert+0x38> j	1c008ab0 <vListInsert+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:150 (discriminator 3)
1c008aa6 <vListInsert+0x3a> lw	a5,-20(s0)
1c008aaa <vListInsert+0x3e> lw	a5,4(a5)
1c008aac <vListInsert+0x40> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:150 (discriminator 1)
1c008ab0 <vListInsert+0x44> lw	a5,-20(s0)
1c008ab4 <vListInsert+0x48> lw	a5,4(a5)
1c008ab6 <vListInsert+0x4a> lw	a5,0(a5)
1c008ab8 <vListInsert+0x4c> lw	a4,-24(s0)
1c008abc <vListInsert+0x50> bgeu	a4,a5,1c008aa6 <vListInsert+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:157
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1c008ac0 <vListInsert+0x54> lw	a5,-20(s0)
1c008ac4 <vListInsert+0x58> lw	a4,4(a5)
1c008ac6 <vListInsert+0x5a> lw	a5,-40(s0)
1c008aca <vListInsert+0x5e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:158
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1c008acc <vListInsert+0x60> lw	a5,-40(s0)
1c008ad0 <vListInsert+0x64> lw	a5,4(a5)
1c008ad2 <vListInsert+0x66> lw	a4,-40(s0)
1c008ad6 <vListInsert+0x6a> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:159
	pxNewListItem->pxPrevious = pxIterator;
1c008ad8 <vListInsert+0x6c> lw	a5,-40(s0)
1c008adc <vListInsert+0x70> lw	a4,-20(s0)
1c008ae0 <vListInsert+0x74> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:160
	pxIterator->pxNext = pxNewListItem;
1c008ae2 <vListInsert+0x76> lw	a5,-20(s0)
1c008ae6 <vListInsert+0x7a> lw	a4,-40(s0)
1c008aea <vListInsert+0x7e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:164

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
1c008aec <vListInsert+0x80> lw	a5,-40(s0)
1c008af0 <vListInsert+0x84> lw	a4,-36(s0)
1c008af4 <vListInsert+0x88> sw	a4,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:166

	( pxList->uxNumberOfItems )++;
1c008af6 <vListInsert+0x8a> lw	a5,-36(s0)
1c008afa <vListInsert+0x8e> lw	a5,0(a5)
1c008afc <vListInsert+0x90> addi	a4,a5,1
1c008b00 <vListInsert+0x94> lw	a5,-36(s0)
1c008b04 <vListInsert+0x98> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:167
}
1c008b06 <vListInsert+0x9a> nop
1c008b08 <vListInsert+0x9c> lw	s0,44(sp)
1c008b0a <vListInsert+0x9e> addi	sp,sp,48
1c008b0c <vListInsert+0xa0> ret
uxListRemove():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:171
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
1c008b0e <uxListRemove> addi	sp,sp,-48
1c008b10 <uxListRemove+0x2> sw	s0,44(sp)
1c008b12 <uxListRemove+0x4> addi	s0,sp,48
1c008b14 <uxListRemove+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:174
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
1c008b18 <uxListRemove+0xa> lw	a5,-36(s0)
1c008b1c <uxListRemove+0xe> lw	a5,16(a5)
1c008b1e <uxListRemove+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:176

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1c008b22 <uxListRemove+0x14> lw	a5,-36(s0)
1c008b26 <uxListRemove+0x18> lw	a5,4(a5)
1c008b28 <uxListRemove+0x1a> lw	a4,-36(s0)
1c008b2c <uxListRemove+0x1e> lw	a4,8(a4)
1c008b2e <uxListRemove+0x20> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:177
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1c008b30 <uxListRemove+0x22> lw	a5,-36(s0)
1c008b34 <uxListRemove+0x26> lw	a5,8(a5)
1c008b36 <uxListRemove+0x28> lw	a4,-36(s0)
1c008b3a <uxListRemove+0x2c> lw	a4,4(a4)
1c008b3c <uxListRemove+0x2e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:183

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1c008b3e <uxListRemove+0x30> lw	a5,-20(s0)
1c008b42 <uxListRemove+0x34> lw	a5,4(a5)
1c008b44 <uxListRemove+0x36> lw	a4,-36(s0)
1c008b48 <uxListRemove+0x3a> bne	a4,a5,1c008b58 <uxListRemove+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:185
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1c008b4c <uxListRemove+0x3e> lw	a5,-36(s0)
1c008b50 <uxListRemove+0x42> lw	a4,8(a5)
1c008b52 <uxListRemove+0x44> lw	a5,-20(s0)
1c008b56 <uxListRemove+0x48> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:192
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
1c008b58 <uxListRemove+0x4a> lw	a5,-36(s0)
1c008b5c <uxListRemove+0x4e> sw	zero,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:193
	( pxList->uxNumberOfItems )--;
1c008b60 <uxListRemove+0x52> lw	a5,-20(s0)
1c008b64 <uxListRemove+0x56> lw	a5,0(a5)
1c008b66 <uxListRemove+0x58> addi	a4,a5,-1
1c008b6a <uxListRemove+0x5c> lw	a5,-20(s0)
1c008b6e <uxListRemove+0x60> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:195

	return pxList->uxNumberOfItems;
1c008b70 <uxListRemove+0x62> lw	a5,-20(s0)
1c008b74 <uxListRemove+0x66> lw	a5,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:196
}
1c008b76 <uxListRemove+0x68> mv	a0,a5
1c008b78 <uxListRemove+0x6a> lw	s0,44(sp)
1c008b7a <uxListRemove+0x6c> addi	sp,sp,48
1c008b7c <uxListRemove+0x6e> ret
xQueueGenericReset():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:256
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1c008b7e <xQueueGenericReset> addi	sp,sp,-48
1c008b80 <xQueueGenericReset+0x2> sw	ra,44(sp)
1c008b82 <xQueueGenericReset+0x4> sw	s0,40(sp)
1c008b84 <xQueueGenericReset+0x6> addi	s0,sp,48
1c008b86 <xQueueGenericReset+0x8> sw	a0,-36(s0)
1c008b8a <xQueueGenericReset+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:257
Queue_t * const pxQueue = xQueue;
1c008b8e <xQueueGenericReset+0x10> lw	a5,-36(s0)
1c008b92 <xQueueGenericReset+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:259

	configASSERT( pxQueue );
1c008b96 <xQueueGenericReset+0x18> lw	a5,-20(s0)
1c008b9a <xQueueGenericReset+0x1c> bnez	a5,1c008ba2 <xQueueGenericReset+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:259 (discriminator 1)
1c008b9c <xQueueGenericReset+0x1e> csrci	mstatus,8
1c008ba0 <xQueueGenericReset+0x22> j	1c008ba0 <xQueueGenericReset+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:261

	taskENTER_CRITICAL();
1c008ba2 <xQueueGenericReset+0x24> jal	ra,1c009928 <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:263
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c008ba6 <xQueueGenericReset+0x28> lw	a5,-20(s0)
1c008baa <xQueueGenericReset+0x2c> lw	a4,0(a5)
1c008bac <xQueueGenericReset+0x2e> lw	a5,-20(s0)
1c008bb0 <xQueueGenericReset+0x32> lw	a3,60(a5)
1c008bb2 <xQueueGenericReset+0x34> lw	a5,-20(s0)
1c008bb6 <xQueueGenericReset+0x38> lw	a5,64(a5)
1c008bb8 <xQueueGenericReset+0x3a> mul	a5,a3,a5
1c008bbc <xQueueGenericReset+0x3e> add	a4,a4,a5
1c008bbe <xQueueGenericReset+0x40> lw	a5,-20(s0)
1c008bc2 <xQueueGenericReset+0x44> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:264
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1c008bc4 <xQueueGenericReset+0x46> lw	a5,-20(s0)
1c008bc8 <xQueueGenericReset+0x4a> sw	zero,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:265
		pxQueue->pcWriteTo = pxQueue->pcHead;
1c008bcc <xQueueGenericReset+0x4e> lw	a5,-20(s0)
1c008bd0 <xQueueGenericReset+0x52> lw	a4,0(a5)
1c008bd2 <xQueueGenericReset+0x54> lw	a5,-20(s0)
1c008bd6 <xQueueGenericReset+0x58> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:266
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c008bd8 <xQueueGenericReset+0x5a> lw	a5,-20(s0)
1c008bdc <xQueueGenericReset+0x5e> lw	a4,0(a5)
1c008bde <xQueueGenericReset+0x60> lw	a5,-20(s0)
1c008be2 <xQueueGenericReset+0x64> lw	a5,60(a5)
1c008be4 <xQueueGenericReset+0x66> addi	a3,a5,-1
1c008be8 <xQueueGenericReset+0x6a> lw	a5,-20(s0)
1c008bec <xQueueGenericReset+0x6e> lw	a5,64(a5)
1c008bee <xQueueGenericReset+0x70> mul	a5,a3,a5
1c008bf2 <xQueueGenericReset+0x74> add	a4,a4,a5
1c008bf4 <xQueueGenericReset+0x76> lw	a5,-20(s0)
1c008bf8 <xQueueGenericReset+0x7a> sw	a4,12(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:267
		pxQueue->cRxLock = queueUNLOCKED;
1c008bfa <xQueueGenericReset+0x7c> lw	a5,-20(s0)
1c008bfe <xQueueGenericReset+0x80> li	a4,-1
1c008c00 <xQueueGenericReset+0x82> sb	a4,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:268
		pxQueue->cTxLock = queueUNLOCKED;
1c008c04 <xQueueGenericReset+0x86> lw	a5,-20(s0)
1c008c08 <xQueueGenericReset+0x8a> li	a4,-1
1c008c0a <xQueueGenericReset+0x8c> sb	a4,69(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:270

		if( xNewQueue == pdFALSE )
1c008c0e <xQueueGenericReset+0x90> lw	a5,-40(s0)
1c008c12 <xQueueGenericReset+0x94> bnez	a5,1c008c32 <xQueueGenericReset+0xb4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:277
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1c008c14 <xQueueGenericReset+0x96> lw	a5,-20(s0)
1c008c18 <xQueueGenericReset+0x9a> lw	a5,16(a5)
1c008c1a <xQueueGenericReset+0x9c> beqz	a5,1c008c48 <xQueueGenericReset+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:279
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c008c1c <xQueueGenericReset+0x9e> lw	a5,-20(s0)
1c008c20 <xQueueGenericReset+0xa2> addi	a5,a5,16
1c008c22 <xQueueGenericReset+0xa4> mv	a0,a5
1c008c24 <xQueueGenericReset+0xa6> jal	ra,1c009610 <xTaskRemoveFromEventList>
1c008c28 <xQueueGenericReset+0xaa> mv	a5,a0
1c008c2a <xQueueGenericReset+0xac> beqz	a5,1c008c48 <xQueueGenericReset+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:281
				{
					queueYIELD_IF_USING_PREEMPTION();
1c008c2c <xQueueGenericReset+0xae> ecall
1c008c30 <xQueueGenericReset+0xb2> j	1c008c48 <xQueueGenericReset+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:296
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1c008c32 <xQueueGenericReset+0xb4> lw	a5,-20(s0)
1c008c36 <xQueueGenericReset+0xb8> addi	a5,a5,16
1c008c38 <xQueueGenericReset+0xba> mv	a0,a5
1c008c3a <xQueueGenericReset+0xbc> jal	1c0089ba <vListInitialise>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:297
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1c008c3c <xQueueGenericReset+0xbe> lw	a5,-20(s0)
1c008c40 <xQueueGenericReset+0xc2> addi	a5,a5,36
1c008c44 <xQueueGenericReset+0xc6> mv	a0,a5
1c008c46 <xQueueGenericReset+0xc8> jal	1c0089ba <vListInitialise>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:300
		}
	}
	taskEXIT_CRITICAL();
1c008c48 <xQueueGenericReset+0xca> jal	ra,1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:304

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
1c008c4c <xQueueGenericReset+0xce> li	a5,1
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:305
}
1c008c4e <xQueueGenericReset+0xd0> mv	a0,a5
1c008c50 <xQueueGenericReset+0xd2> lw	ra,44(sp)
1c008c52 <xQueueGenericReset+0xd4> lw	s0,40(sp)
1c008c54 <xQueueGenericReset+0xd6> addi	sp,sp,48
1c008c56 <xQueueGenericReset+0xd8> ret
xQueueGenericCreate():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:369
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
1c008c58 <xQueueGenericCreate> addi	sp,sp,-48
1c008c5a <xQueueGenericCreate+0x2> sw	ra,44(sp)
1c008c5c <xQueueGenericCreate+0x4> sw	s0,40(sp)
1c008c5e <xQueueGenericCreate+0x6> addi	s0,sp,48
1c008c60 <xQueueGenericCreate+0x8> sw	a0,-36(s0)
1c008c64 <xQueueGenericCreate+0xc> sw	a1,-40(s0)
1c008c68 <xQueueGenericCreate+0x10> mv	a5,a2
1c008c6a <xQueueGenericCreate+0x12> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:374
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1c008c6e <xQueueGenericCreate+0x16> lw	a5,-36(s0)
1c008c72 <xQueueGenericCreate+0x1a> bnez	a5,1c008c7a <xQueueGenericCreate+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:374 (discriminator 1)
1c008c74 <xQueueGenericCreate+0x1c> csrci	mstatus,8
1c008c78 <xQueueGenericCreate+0x20> j	1c008c78 <xQueueGenericCreate+0x20>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:379

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c008c7a <xQueueGenericCreate+0x22> lw	a4,-36(s0)
1c008c7e <xQueueGenericCreate+0x26> lw	a5,-40(s0)
1c008c82 <xQueueGenericCreate+0x2a> mul	a5,a4,a5
1c008c86 <xQueueGenericCreate+0x2e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:390
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
1c008c8a <xQueueGenericCreate+0x32> lw	a5,-20(s0)
1c008c8e <xQueueGenericCreate+0x36> addi	a5,a5,80
1c008c92 <xQueueGenericCreate+0x3a> mv	a0,a5
1c008c94 <xQueueGenericCreate+0x3c> jal	ra,1c009a36 <pvPortMalloc>
1c008c98 <xQueueGenericCreate+0x40> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:392

		if( pxNewQueue != NULL )
1c008c9c <xQueueGenericCreate+0x44> lw	a5,-24(s0)
1c008ca0 <xQueueGenericCreate+0x48> beqz	a5,1c008cce <xQueueGenericCreate+0x76>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:396
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
1c008ca2 <xQueueGenericCreate+0x4a> lw	a5,-24(s0)
1c008ca6 <xQueueGenericCreate+0x4e> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:397
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c008caa <xQueueGenericCreate+0x52> lw	a5,-28(s0)
1c008cae <xQueueGenericCreate+0x56> addi	a5,a5,80
1c008cb2 <xQueueGenericCreate+0x5a> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:408
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1c008cb6 <xQueueGenericCreate+0x5e> lbu	a5,-41(s0)
1c008cba <xQueueGenericCreate+0x62> lw	a4,-24(s0)
1c008cbe <xQueueGenericCreate+0x66> mv	a3,a5
1c008cc0 <xQueueGenericCreate+0x68> lw	a2,-28(s0)
1c008cc4 <xQueueGenericCreate+0x6c> lw	a1,-40(s0)
1c008cc8 <xQueueGenericCreate+0x70> lw	a0,-36(s0)
1c008ccc <xQueueGenericCreate+0x74> jal	1c008cdc <prvInitialiseNewQueue>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:416
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
1c008cce <xQueueGenericCreate+0x76> lw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:417
	}
1c008cd2 <xQueueGenericCreate+0x7a> mv	a0,a5
1c008cd4 <xQueueGenericCreate+0x7c> lw	ra,44(sp)
1c008cd6 <xQueueGenericCreate+0x7e> lw	s0,40(sp)
1c008cd8 <xQueueGenericCreate+0x80> addi	sp,sp,48
1c008cda <xQueueGenericCreate+0x82> ret
prvInitialiseNewQueue():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:423

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1c008cdc <prvInitialiseNewQueue> addi	sp,sp,-48
1c008cde <prvInitialiseNewQueue+0x2> sw	ra,44(sp)
1c008ce0 <prvInitialiseNewQueue+0x4> sw	s0,40(sp)
1c008ce2 <prvInitialiseNewQueue+0x6> addi	s0,sp,48
1c008ce4 <prvInitialiseNewQueue+0x8> sw	a0,-20(s0)
1c008ce8 <prvInitialiseNewQueue+0xc> sw	a1,-24(s0)
1c008cec <prvInitialiseNewQueue+0x10> sw	a2,-28(s0)
1c008cf0 <prvInitialiseNewQueue+0x14> mv	a5,a3
1c008cf2 <prvInitialiseNewQueue+0x16> sw	a4,-36(s0)
1c008cf6 <prvInitialiseNewQueue+0x1a> sb	a5,-29(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:428
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1c008cfa <prvInitialiseNewQueue+0x1e> lw	a5,-24(s0)
1c008cfe <prvInitialiseNewQueue+0x22> bnez	a5,1c008d0c <prvInitialiseNewQueue+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:434
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1c008d00 <prvInitialiseNewQueue+0x24> lw	a5,-36(s0)
1c008d04 <prvInitialiseNewQueue+0x28> lw	a4,-36(s0)
1c008d08 <prvInitialiseNewQueue+0x2c> sw	a4,0(a5)
1c008d0a <prvInitialiseNewQueue+0x2e> j	1c008d16 <prvInitialiseNewQueue+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:439
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1c008d0c <prvInitialiseNewQueue+0x30> lw	a5,-36(s0)
1c008d10 <prvInitialiseNewQueue+0x34> lw	a4,-28(s0)
1c008d14 <prvInitialiseNewQueue+0x38> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:444
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1c008d16 <prvInitialiseNewQueue+0x3a> lw	a5,-36(s0)
1c008d1a <prvInitialiseNewQueue+0x3e> lw	a4,-20(s0)
1c008d1e <prvInitialiseNewQueue+0x42> sw	a4,60(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:445
	pxNewQueue->uxItemSize = uxItemSize;
1c008d20 <prvInitialiseNewQueue+0x44> lw	a5,-36(s0)
1c008d24 <prvInitialiseNewQueue+0x48> lw	a4,-24(s0)
1c008d28 <prvInitialiseNewQueue+0x4c> sw	a4,64(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:446
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1c008d2a <prvInitialiseNewQueue+0x4e> li	a1,1
1c008d2c <prvInitialiseNewQueue+0x50> lw	a0,-36(s0)
1c008d30 <prvInitialiseNewQueue+0x54> jal	1c008b7e <xQueueGenericReset>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:450

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
1c008d32 <prvInitialiseNewQueue+0x56> lw	a5,-36(s0)
1c008d36 <prvInitialiseNewQueue+0x5a> lbu	a4,-29(s0)
1c008d3a <prvInitialiseNewQueue+0x5e> sb	a4,76(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:461
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
1c008d3e <prvInitialiseNewQueue+0x62> nop
1c008d40 <prvInitialiseNewQueue+0x64> lw	ra,44(sp)
1c008d42 <prvInitialiseNewQueue+0x66> lw	s0,40(sp)
1c008d44 <prvInitialiseNewQueue+0x68> addi	sp,sp,48
1c008d46 <prvInitialiseNewQueue+0x6a> ret
xQueueGenericSend():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:741

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
1c008d48 <xQueueGenericSend> addi	sp,sp,-64
1c008d4a <xQueueGenericSend+0x2> sw	ra,60(sp)
1c008d4c <xQueueGenericSend+0x4> sw	s0,56(sp)
1c008d4e <xQueueGenericSend+0x6> addi	s0,sp,64
1c008d50 <xQueueGenericSend+0x8> sw	a0,-52(s0)
1c008d54 <xQueueGenericSend+0xc> sw	a1,-56(s0)
1c008d58 <xQueueGenericSend+0x10> sw	a2,-60(s0)
1c008d5c <xQueueGenericSend+0x14> sw	a3,-64(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:742
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
1c008d60 <xQueueGenericSend+0x18> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:744
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
1c008d64 <xQueueGenericSend+0x1c> lw	a5,-52(s0)
1c008d68 <xQueueGenericSend+0x20> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:746

	configASSERT( pxQueue );
1c008d6c <xQueueGenericSend+0x24> lw	a5,-24(s0)
1c008d70 <xQueueGenericSend+0x28> bnez	a5,1c008d78 <xQueueGenericSend+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:746 (discriminator 1)
1c008d72 <xQueueGenericSend+0x2a> csrci	mstatus,8
1c008d76 <xQueueGenericSend+0x2e> j	1c008d76 <xQueueGenericSend+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1c008d78 <xQueueGenericSend+0x30> lw	a5,-56(s0)
1c008d7c <xQueueGenericSend+0x34> bnez	a5,1c008d86 <xQueueGenericSend+0x3e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 2)
1c008d7e <xQueueGenericSend+0x36> lw	a5,-24(s0)
1c008d82 <xQueueGenericSend+0x3a> lw	a5,64(a5)
1c008d84 <xQueueGenericSend+0x3c> bnez	a5,1c008d8a <xQueueGenericSend+0x42>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 3)
1c008d86 <xQueueGenericSend+0x3e> li	a5,1
1c008d88 <xQueueGenericSend+0x40> j	1c008d8c <xQueueGenericSend+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 4)
1c008d8a <xQueueGenericSend+0x42> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 6)
1c008d8c <xQueueGenericSend+0x44> bnez	a5,1c008d94 <xQueueGenericSend+0x4c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 7)
1c008d8e <xQueueGenericSend+0x46> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 2)
1c008d92 <xQueueGenericSend+0x4a> j	1c008d92 <xQueueGenericSend+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1c008d94 <xQueueGenericSend+0x4c> lw	a4,-64(s0)
1c008d98 <xQueueGenericSend+0x50> li	a5,2
1c008d9a <xQueueGenericSend+0x52> bne	a4,a5,1c008daa <xQueueGenericSend+0x62>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 2)
1c008d9e <xQueueGenericSend+0x56> lw	a5,-24(s0)
1c008da2 <xQueueGenericSend+0x5a> lw	a4,60(a5)
1c008da4 <xQueueGenericSend+0x5c> li	a5,1
1c008da6 <xQueueGenericSend+0x5e> bne	a4,a5,1c008dae <xQueueGenericSend+0x66>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 3)
1c008daa <xQueueGenericSend+0x62> li	a5,1
1c008dac <xQueueGenericSend+0x64> j	1c008db0 <xQueueGenericSend+0x68>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 4)
1c008dae <xQueueGenericSend+0x66> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 6)
1c008db0 <xQueueGenericSend+0x68> bnez	a5,1c008db8 <xQueueGenericSend+0x70>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 7)
1c008db2 <xQueueGenericSend+0x6a> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 3)
1c008db6 <xQueueGenericSend+0x6e> j	1c008db6 <xQueueGenericSend+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1c008db8 <xQueueGenericSend+0x70> jal	ra,1c00981a <xTaskGetSchedulerState>
1c008dbc <xQueueGenericSend+0x74> mv	a5,a0
1c008dbe <xQueueGenericSend+0x76> bnez	a5,1c008dc6 <xQueueGenericSend+0x7e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 2)
1c008dc0 <xQueueGenericSend+0x78> lw	a5,-60(s0)
1c008dc4 <xQueueGenericSend+0x7c> bnez	a5,1c008dca <xQueueGenericSend+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 3)
1c008dc6 <xQueueGenericSend+0x7e> li	a5,1
1c008dc8 <xQueueGenericSend+0x80> j	1c008dcc <xQueueGenericSend+0x84>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 4)
1c008dca <xQueueGenericSend+0x82> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 6)
1c008dcc <xQueueGenericSend+0x84> bnez	a5,1c008dd4 <xQueueGenericSend+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 7)
1c008dce <xQueueGenericSend+0x86> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 4)
1c008dd2 <xQueueGenericSend+0x8a> j	1c008dd2 <xQueueGenericSend+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:761
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
1c008dd4 <xQueueGenericSend+0x8c> jal	ra,1c009928 <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:767
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1c008dd8 <xQueueGenericSend+0x90> lw	a5,-24(s0)
1c008ddc <xQueueGenericSend+0x94> lw	a4,56(a5)
1c008dde <xQueueGenericSend+0x96> lw	a5,-24(s0)
1c008de2 <xQueueGenericSend+0x9a> lw	a5,60(a5)
1c008de4 <xQueueGenericSend+0x9c> bltu	a4,a5,1c008df2 <xQueueGenericSend+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:767 (discriminator 1)
1c008de8 <xQueueGenericSend+0xa0> lw	a4,-64(s0)
1c008dec <xQueueGenericSend+0xa4> li	a5,2
1c008dee <xQueueGenericSend+0xa6> bne	a4,a5,1c008e36 <xQueueGenericSend+0xee>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:833
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1c008df2 <xQueueGenericSend+0xaa> lw	a2,-64(s0)
1c008df6 <xQueueGenericSend+0xae> lw	a1,-56(s0)
1c008dfa <xQueueGenericSend+0xb2> lw	a0,-24(s0)
1c008dfe <xQueueGenericSend+0xb6> jal	1c008fec <prvCopyDataToQueue>
1c008e00 <xQueueGenericSend+0xb8> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:837

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c008e04 <xQueueGenericSend+0xbc> lw	a5,-24(s0)
1c008e08 <xQueueGenericSend+0xc0> lw	a5,36(a5)
1c008e0a <xQueueGenericSend+0xc2> beqz	a5,1c008e24 <xQueueGenericSend+0xdc>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:839
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c008e0c <xQueueGenericSend+0xc4> lw	a5,-24(s0)
1c008e10 <xQueueGenericSend+0xc8> addi	a5,a5,36
1c008e14 <xQueueGenericSend+0xcc> mv	a0,a5
1c008e16 <xQueueGenericSend+0xce> jal	ra,1c009610 <xTaskRemoveFromEventList>
1c008e1a <xQueueGenericSend+0xd2> mv	a5,a0
1c008e1c <xQueueGenericSend+0xd4> beqz	a5,1c008e2e <xQueueGenericSend+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:845
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
1c008e1e <xQueueGenericSend+0xd6> ecall
1c008e22 <xQueueGenericSend+0xda> j	1c008e2e <xQueueGenericSend+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:852
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
1c008e24 <xQueueGenericSend+0xdc> lw	a5,-28(s0)
1c008e28 <xQueueGenericSend+0xe0> beqz	a5,1c008e2e <xQueueGenericSend+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:858
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
1c008e2a <xQueueGenericSend+0xe2> ecall
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:867
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
1c008e2e <xQueueGenericSend+0xe6> jal	ra,1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:868
				return pdPASS;
1c008e32 <xQueueGenericSend+0xea> li	a5,1
1c008e34 <xQueueGenericSend+0xec> j	1c008ef8 <xQueueGenericSend+0x1b0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:872
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1c008e36 <xQueueGenericSend+0xee> lw	a5,-60(s0)
1c008e3a <xQueueGenericSend+0xf2> bnez	a5,1c008e44 <xQueueGenericSend+0xfc>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:876
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1c008e3c <xQueueGenericSend+0xf4> jal	ra,1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:881

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
1c008e40 <xQueueGenericSend+0xf8> li	a5,0
1c008e42 <xQueueGenericSend+0xfa> j	1c008ef8 <xQueueGenericSend+0x1b0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:883
				}
				else if( xEntryTimeSet == pdFALSE )
1c008e44 <xQueueGenericSend+0xfc> lw	a5,-20(s0)
1c008e48 <xQueueGenericSend+0x100> bnez	a5,1c008e5a <xQueueGenericSend+0x112>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:887
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1c008e4a <xQueueGenericSend+0x102> addi	a5,s0,-36
1c008e4e <xQueueGenericSend+0x106> mv	a0,a5
1c008e50 <xQueueGenericSend+0x108> jal	ra,1c0096ce <vTaskInternalSetTimeOutState>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:888
					xEntryTimeSet = pdTRUE;
1c008e54 <xQueueGenericSend+0x10c> li	a5,1
1c008e56 <xQueueGenericSend+0x10e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:897
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1c008e5a <xQueueGenericSend+0x112> jal	ra,1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:902

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1c008e5e <xQueueGenericSend+0x116> jal	1c009212 <vTaskSuspendAll>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903
		prvLockQueue( pxQueue );
1c008e60 <xQueueGenericSend+0x118> jal	ra,1c009928 <vTaskEnterCritical>
1c008e64 <xQueueGenericSend+0x11c> lw	a5,-24(s0)
1c008e68 <xQueueGenericSend+0x120> lbu	a5,68(a5)
1c008e6c <xQueueGenericSend+0x124> slli	a4,a5,0x18
1c008e70 <xQueueGenericSend+0x128> srai	a4,a4,0x18
1c008e72 <xQueueGenericSend+0x12a> li	a5,-1
1c008e74 <xQueueGenericSend+0x12c> bne	a4,a5,1c008e80 <xQueueGenericSend+0x138>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903 (discriminator 1)
1c008e78 <xQueueGenericSend+0x130> lw	a5,-24(s0)
1c008e7c <xQueueGenericSend+0x134> sb	zero,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903 (discriminator 3)
1c008e80 <xQueueGenericSend+0x138> lw	a5,-24(s0)
1c008e84 <xQueueGenericSend+0x13c> lbu	a5,69(a5)
1c008e88 <xQueueGenericSend+0x140> slli	a4,a5,0x18
1c008e8c <xQueueGenericSend+0x144> srai	a4,a4,0x18
1c008e8e <xQueueGenericSend+0x146> li	a5,-1
1c008e90 <xQueueGenericSend+0x148> bne	a4,a5,1c008e9c <xQueueGenericSend+0x154>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903 (discriminator 4)
1c008e94 <xQueueGenericSend+0x14c> lw	a5,-24(s0)
1c008e98 <xQueueGenericSend+0x150> sb	zero,69(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903 (discriminator 6)
1c008e9c <xQueueGenericSend+0x154> jal	ra,1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:906 (discriminator 6)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1c008ea0 <xQueueGenericSend+0x158> addi	a4,s0,-60
1c008ea4 <xQueueGenericSend+0x15c> addi	a5,s0,-36
1c008ea8 <xQueueGenericSend+0x160> mv	a1,a4
1c008eaa <xQueueGenericSend+0x162> mv	a0,a5
1c008eac <xQueueGenericSend+0x164> jal	ra,1c0096f4 <xTaskCheckForTimeOut>
1c008eb0 <xQueueGenericSend+0x168> mv	a5,a0
1c008eb2 <xQueueGenericSend+0x16a> bnez	a5,1c008eee <xQueueGenericSend+0x1a6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:908
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1c008eb4 <xQueueGenericSend+0x16c> lw	a0,-24(s0)
1c008eb8 <xQueueGenericSend+0x170> jal	1c0091d4 <prvIsQueueFull>
1c008eba <xQueueGenericSend+0x172> mv	a5,a0
1c008ebc <xQueueGenericSend+0x174> beqz	a5,1c008ee4 <xQueueGenericSend+0x19c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:911
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1c008ebe <xQueueGenericSend+0x176> lw	a5,-24(s0)
1c008ec2 <xQueueGenericSend+0x17a> addi	a5,a5,16
1c008ec4 <xQueueGenericSend+0x17c> lw	a4,-60(s0)
1c008ec8 <xQueueGenericSend+0x180> mv	a1,a4
1c008eca <xQueueGenericSend+0x182> mv	a0,a5
1c008ecc <xQueueGenericSend+0x184> jal	ra,1c0095d2 <vTaskPlaceOnEventList>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:918
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
1c008ed0 <xQueueGenericSend+0x188> lw	a0,-24(s0)
1c008ed4 <xQueueGenericSend+0x18c> jal	1c009116 <prvUnlockQueue>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:925
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
1c008ed6 <xQueueGenericSend+0x18e> jal	1c00922c <xTaskResumeAll>
1c008ed8 <xQueueGenericSend+0x190> mv	a5,a0
1c008eda <xQueueGenericSend+0x192> bnez	a5,1c008dd4 <xQueueGenericSend+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:927
				{
					portYIELD_WITHIN_API();
1c008ede <xQueueGenericSend+0x196> ecall
1c008ee2 <xQueueGenericSend+0x19a> j	1c008dd4 <xQueueGenericSend+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:933
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
1c008ee4 <xQueueGenericSend+0x19c> lw	a0,-24(s0)
1c008ee8 <xQueueGenericSend+0x1a0> jal	1c009116 <prvUnlockQueue>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:934
				( void ) xTaskResumeAll();
1c008eea <xQueueGenericSend+0x1a2> jal	1c00922c <xTaskResumeAll>
1c008eec <xQueueGenericSend+0x1a4> j	1c008dd4 <xQueueGenericSend+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:940
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
1c008eee <xQueueGenericSend+0x1a6> lw	a0,-24(s0)
1c008ef2 <xQueueGenericSend+0x1aa> jal	1c009116 <prvUnlockQueue>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:941
			( void ) xTaskResumeAll();
1c008ef4 <xQueueGenericSend+0x1ac> jal	1c00922c <xTaskResumeAll>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:944

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
1c008ef6 <xQueueGenericSend+0x1ae> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:947 (discriminator 7)
		}
	} /*lint -restore */
}
1c008ef8 <xQueueGenericSend+0x1b0> mv	a0,a5
1c008efa <xQueueGenericSend+0x1b2> lw	ra,60(sp)
1c008efc <xQueueGenericSend+0x1b4> lw	s0,56(sp)
1c008efe <xQueueGenericSend+0x1b6> addi	sp,sp,64
1c008f00 <xQueueGenericSend+0x1b8> ret
xQueueGiveFromISR():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1113
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
1c008f02 <xQueueGiveFromISR> addi	sp,sp,-64
1c008f04 <xQueueGiveFromISR+0x2> sw	ra,60(sp)
1c008f06 <xQueueGiveFromISR+0x4> sw	s0,56(sp)
1c008f08 <xQueueGiveFromISR+0x6> addi	s0,sp,64
1c008f0a <xQueueGiveFromISR+0x8> sw	a0,-52(s0)
1c008f0e <xQueueGiveFromISR+0xc> sw	a1,-56(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1116
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
1c008f12 <xQueueGiveFromISR+0x10> lw	a5,-52(s0)
1c008f16 <xQueueGiveFromISR+0x14> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1124
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
1c008f1a <xQueueGiveFromISR+0x18> lw	a5,-24(s0)
1c008f1e <xQueueGiveFromISR+0x1c> bnez	a5,1c008f26 <xQueueGiveFromISR+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1124 (discriminator 1)
1c008f20 <xQueueGiveFromISR+0x1e> csrci	mstatus,8
1c008f24 <xQueueGiveFromISR+0x22> j	1c008f24 <xQueueGiveFromISR+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1128

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
1c008f26 <xQueueGiveFromISR+0x24> lw	a5,-24(s0)
1c008f2a <xQueueGiveFromISR+0x28> lw	a5,64(a5)
1c008f2c <xQueueGiveFromISR+0x2a> beqz	a5,1c008f34 <xQueueGiveFromISR+0x32>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1128 (discriminator 1)
1c008f2e <xQueueGiveFromISR+0x2c> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1128 (discriminator 2)
1c008f32 <xQueueGiveFromISR+0x30> j	1c008f32 <xQueueGiveFromISR+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
1c008f34 <xQueueGiveFromISR+0x32> lw	a5,-24(s0)
1c008f38 <xQueueGiveFromISR+0x36> lw	a5,0(a5)
1c008f3a <xQueueGiveFromISR+0x38> bnez	a5,1c008f44 <xQueueGiveFromISR+0x42>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 2)
1c008f3c <xQueueGiveFromISR+0x3a> lw	a5,-24(s0)
1c008f40 <xQueueGiveFromISR+0x3e> lw	a5,8(a5)
1c008f42 <xQueueGiveFromISR+0x40> bnez	a5,1c008f48 <xQueueGiveFromISR+0x46>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 3)
1c008f44 <xQueueGiveFromISR+0x42> li	a5,1
1c008f46 <xQueueGiveFromISR+0x44> j	1c008f4a <xQueueGiveFromISR+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 4)
1c008f48 <xQueueGiveFromISR+0x46> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 6)
1c008f4a <xQueueGiveFromISR+0x48> bnez	a5,1c008f52 <xQueueGiveFromISR+0x50>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 7)
1c008f4c <xQueueGiveFromISR+0x4a> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 3)
1c008f50 <xQueueGiveFromISR+0x4e> j	1c008f50 <xQueueGiveFromISR+0x4e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1151
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1c008f52 <xQueueGiveFromISR+0x50> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1153
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1c008f56 <xQueueGiveFromISR+0x54> lw	a5,-24(s0)
1c008f5a <xQueueGiveFromISR+0x58> lw	a5,56(a5)
1c008f5c <xQueueGiveFromISR+0x5a> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1158

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
1c008f60 <xQueueGiveFromISR+0x5e> lw	a5,-24(s0)
1c008f64 <xQueueGiveFromISR+0x62> lw	a5,60(a5)
1c008f66 <xQueueGiveFromISR+0x64> lw	a4,-32(s0)
1c008f6a <xQueueGiveFromISR+0x68> bgeu	a4,a5,1c008fda <xQueueGiveFromISR+0xd8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1160
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1c008f6e <xQueueGiveFromISR+0x6c> lw	a5,-24(s0)
1c008f72 <xQueueGiveFromISR+0x70> lbu	a5,69(a5)
1c008f76 <xQueueGiveFromISR+0x74> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1170
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1c008f7a <xQueueGiveFromISR+0x78> lw	a5,-32(s0)
1c008f7e <xQueueGiveFromISR+0x7c> addi	a4,a5,1
1c008f82 <xQueueGiveFromISR+0x80> lw	a5,-24(s0)
1c008f86 <xQueueGiveFromISR+0x84> sw	a4,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1174

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1c008f88 <xQueueGiveFromISR+0x86> lb	a4,-33(s0)
1c008f8c <xQueueGiveFromISR+0x8a> li	a5,-1
1c008f8e <xQueueGiveFromISR+0x8c> bne	a4,a5,1c008fba <xQueueGiveFromISR+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1229
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c008f92 <xQueueGiveFromISR+0x90> lw	a5,-24(s0)
1c008f96 <xQueueGiveFromISR+0x94> lw	a5,36(a5)
1c008f98 <xQueueGiveFromISR+0x96> beqz	a5,1c008fd2 <xQueueGiveFromISR+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1231
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c008f9a <xQueueGiveFromISR+0x98> lw	a5,-24(s0)
1c008f9e <xQueueGiveFromISR+0x9c> addi	a5,a5,36
1c008fa2 <xQueueGiveFromISR+0xa0> mv	a0,a5
1c008fa4 <xQueueGiveFromISR+0xa2> jal	1c009610 <xTaskRemoveFromEventList>
1c008fa6 <xQueueGiveFromISR+0xa4> mv	a5,a0
1c008fa8 <xQueueGiveFromISR+0xa6> beqz	a5,1c008fd2 <xQueueGiveFromISR+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1235
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1c008faa <xQueueGiveFromISR+0xa8> lw	a5,-56(s0)
1c008fae <xQueueGiveFromISR+0xac> beqz	a5,1c008fd2 <xQueueGiveFromISR+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1237
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1c008fb0 <xQueueGiveFromISR+0xae> lw	a5,-56(s0)
1c008fb4 <xQueueGiveFromISR+0xb2> li	a4,1
1c008fb6 <xQueueGiveFromISR+0xb4> sw	a4,0(a5)
1c008fb8 <xQueueGiveFromISR+0xb6> j	1c008fd2 <xQueueGiveFromISR+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1260
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1c008fba <xQueueGiveFromISR+0xb8> lbu	a5,-33(s0)
1c008fbe <xQueueGiveFromISR+0xbc> addi	a5,a5,1
1c008fc0 <xQueueGiveFromISR+0xbe> andi	a5,a5,255
1c008fc4 <xQueueGiveFromISR+0xc2> slli	a4,a5,0x18
1c008fc8 <xQueueGiveFromISR+0xc6> srai	a4,a4,0x18
1c008fca <xQueueGiveFromISR+0xc8> lw	a5,-24(s0)
1c008fce <xQueueGiveFromISR+0xcc> sb	a4,69(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1263
			}

			xReturn = pdPASS;
1c008fd2 <xQueueGiveFromISR+0xd0> li	a5,1
1c008fd4 <xQueueGiveFromISR+0xd2> sw	a5,-20(s0)
1c008fd8 <xQueueGiveFromISR+0xd6> j	1c008fde <xQueueGiveFromISR+0xdc>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1268
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1c008fda <xQueueGiveFromISR+0xd8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1273
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
1c008fde <xQueueGiveFromISR+0xdc> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1274
}
1c008fe2 <xQueueGiveFromISR+0xe0> mv	a0,a5
1c008fe4 <xQueueGiveFromISR+0xe2> lw	ra,60(sp)
1c008fe6 <xQueueGiveFromISR+0xe4> lw	s0,56(sp)
1c008fe8 <xQueueGiveFromISR+0xe6> addi	sp,sp,64
1c008fea <xQueueGiveFromISR+0xe8> ret
prvCopyDataToQueue():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2075

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
1c008fec <prvCopyDataToQueue> addi	sp,sp,-48
1c008fee <prvCopyDataToQueue+0x2> sw	ra,44(sp)
1c008ff0 <prvCopyDataToQueue+0x4> sw	s0,40(sp)
1c008ff2 <prvCopyDataToQueue+0x6> addi	s0,sp,48
1c008ff4 <prvCopyDataToQueue+0x8> sw	a0,-36(s0)
1c008ff8 <prvCopyDataToQueue+0xc> sw	a1,-40(s0)
1c008ffc <prvCopyDataToQueue+0x10> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2076
BaseType_t xReturn = pdFALSE;
1c009000 <prvCopyDataToQueue+0x14> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2081
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1c009004 <prvCopyDataToQueue+0x18> lw	a5,-36(s0)
1c009008 <prvCopyDataToQueue+0x1c> lw	a5,56(a5)
1c00900a <prvCopyDataToQueue+0x1e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2083

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1c00900e <prvCopyDataToQueue+0x22> lw	a5,-36(s0)
1c009012 <prvCopyDataToQueue+0x26> lw	a5,64(a5)
1c009014 <prvCopyDataToQueue+0x28> bnez	a5,1c009038 <prvCopyDataToQueue+0x4c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2087
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1c009016 <prvCopyDataToQueue+0x2a> lw	a5,-36(s0)
1c00901a <prvCopyDataToQueue+0x2e> lw	a5,0(a5)
1c00901c <prvCopyDataToQueue+0x30> bnez	a5,1c0090fa <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2090
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
1c00901e <prvCopyDataToQueue+0x32> lw	a5,-36(s0)
1c009022 <prvCopyDataToQueue+0x36> lw	a5,8(a5)
1c009024 <prvCopyDataToQueue+0x38> mv	a0,a5
1c009026 <prvCopyDataToQueue+0x3a> jal	ra,1c00984c <xTaskPriorityDisinherit>
1c00902a <prvCopyDataToQueue+0x3e> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2091
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
1c00902e <prvCopyDataToQueue+0x42> lw	a5,-36(s0)
1c009032 <prvCopyDataToQueue+0x46> sw	zero,8(a5)
1c009036 <prvCopyDataToQueue+0x4a> j	1c0090fa <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2100
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
1c009038 <prvCopyDataToQueue+0x4c> lw	a5,-44(s0)
1c00903c <prvCopyDataToQueue+0x50> bnez	a5,1c009088 <prvCopyDataToQueue+0x9c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2102
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
1c00903e <prvCopyDataToQueue+0x52> lw	a5,-36(s0)
1c009042 <prvCopyDataToQueue+0x56> lw	a4,4(a5)
1c009044 <prvCopyDataToQueue+0x58> lw	a5,-36(s0)
1c009048 <prvCopyDataToQueue+0x5c> lw	a5,64(a5)
1c00904a <prvCopyDataToQueue+0x5e> mv	a2,a5
1c00904c <prvCopyDataToQueue+0x60> lw	a1,-40(s0)
1c009050 <prvCopyDataToQueue+0x64> mv	a0,a4
1c009052 <prvCopyDataToQueue+0x66> jal	ra,1c008810 <memcpy>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2103
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
1c009056 <prvCopyDataToQueue+0x6a> lw	a5,-36(s0)
1c00905a <prvCopyDataToQueue+0x6e> lw	a4,4(a5)
1c00905c <prvCopyDataToQueue+0x70> lw	a5,-36(s0)
1c009060 <prvCopyDataToQueue+0x74> lw	a5,64(a5)
1c009062 <prvCopyDataToQueue+0x76> add	a4,a4,a5
1c009064 <prvCopyDataToQueue+0x78> lw	a5,-36(s0)
1c009068 <prvCopyDataToQueue+0x7c> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2104
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1c00906a <prvCopyDataToQueue+0x7e> lw	a5,-36(s0)
1c00906e <prvCopyDataToQueue+0x82> lw	a4,4(a5)
1c009070 <prvCopyDataToQueue+0x84> lw	a5,-36(s0)
1c009074 <prvCopyDataToQueue+0x88> lw	a5,8(a5)
1c009076 <prvCopyDataToQueue+0x8a> bltu	a4,a5,1c0090fa <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2106
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1c00907a <prvCopyDataToQueue+0x8e> lw	a5,-36(s0)
1c00907e <prvCopyDataToQueue+0x92> lw	a4,0(a5)
1c009080 <prvCopyDataToQueue+0x94> lw	a5,-36(s0)
1c009084 <prvCopyDataToQueue+0x98> sw	a4,4(a5)
1c009086 <prvCopyDataToQueue+0x9a> j	1c0090fa <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2115
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
1c009088 <prvCopyDataToQueue+0x9c> lw	a5,-36(s0)
1c00908c <prvCopyDataToQueue+0xa0> lw	a4,12(a5)
1c00908e <prvCopyDataToQueue+0xa2> lw	a5,-36(s0)
1c009092 <prvCopyDataToQueue+0xa6> lw	a5,64(a5)
1c009094 <prvCopyDataToQueue+0xa8> mv	a2,a5
1c009096 <prvCopyDataToQueue+0xaa> lw	a1,-40(s0)
1c00909a <prvCopyDataToQueue+0xae> mv	a0,a4
1c00909c <prvCopyDataToQueue+0xb0> jal	ra,1c008810 <memcpy>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2116
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
1c0090a0 <prvCopyDataToQueue+0xb4> lw	a5,-36(s0)
1c0090a4 <prvCopyDataToQueue+0xb8> lw	a4,12(a5)
1c0090a6 <prvCopyDataToQueue+0xba> lw	a5,-36(s0)
1c0090aa <prvCopyDataToQueue+0xbe> lw	a5,64(a5)
1c0090ac <prvCopyDataToQueue+0xc0> neg	a5,a5
1c0090b0 <prvCopyDataToQueue+0xc4> add	a4,a4,a5
1c0090b2 <prvCopyDataToQueue+0xc6> lw	a5,-36(s0)
1c0090b6 <prvCopyDataToQueue+0xca> sw	a4,12(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2117
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1c0090b8 <prvCopyDataToQueue+0xcc> lw	a5,-36(s0)
1c0090bc <prvCopyDataToQueue+0xd0> lw	a4,12(a5)
1c0090be <prvCopyDataToQueue+0xd2> lw	a5,-36(s0)
1c0090c2 <prvCopyDataToQueue+0xd6> lw	a5,0(a5)
1c0090c4 <prvCopyDataToQueue+0xd8> bgeu	a4,a5,1c0090e0 <prvCopyDataToQueue+0xf4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2119
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
1c0090c8 <prvCopyDataToQueue+0xdc> lw	a5,-36(s0)
1c0090cc <prvCopyDataToQueue+0xe0> lw	a4,8(a5)
1c0090ce <prvCopyDataToQueue+0xe2> lw	a5,-36(s0)
1c0090d2 <prvCopyDataToQueue+0xe6> lw	a5,64(a5)
1c0090d4 <prvCopyDataToQueue+0xe8> neg	a5,a5
1c0090d8 <prvCopyDataToQueue+0xec> add	a4,a4,a5
1c0090da <prvCopyDataToQueue+0xee> lw	a5,-36(s0)
1c0090de <prvCopyDataToQueue+0xf2> sw	a4,12(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2126
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
1c0090e0 <prvCopyDataToQueue+0xf4> lw	a4,-44(s0)
1c0090e4 <prvCopyDataToQueue+0xf8> li	a5,2
1c0090e6 <prvCopyDataToQueue+0xfa> bne	a4,a5,1c0090fa <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2128
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1c0090ea <prvCopyDataToQueue+0xfe> lw	a5,-24(s0)
1c0090ee <prvCopyDataToQueue+0x102> beqz	a5,1c0090fa <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2134
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1c0090f0 <prvCopyDataToQueue+0x104> lw	a5,-24(s0)
1c0090f4 <prvCopyDataToQueue+0x108> addi	a5,a5,-1
1c0090f6 <prvCopyDataToQueue+0x10a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2147
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1c0090fa <prvCopyDataToQueue+0x10e> lw	a5,-24(s0)
1c0090fe <prvCopyDataToQueue+0x112> addi	a4,a5,1
1c009102 <prvCopyDataToQueue+0x116> lw	a5,-36(s0)
1c009106 <prvCopyDataToQueue+0x11a> sw	a4,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2149

	return xReturn;
1c009108 <prvCopyDataToQueue+0x11c> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2150
}
1c00910c <prvCopyDataToQueue+0x120> mv	a0,a5
1c00910e <prvCopyDataToQueue+0x122> lw	ra,44(sp)
1c009110 <prvCopyDataToQueue+0x124> lw	s0,40(sp)
1c009112 <prvCopyDataToQueue+0x126> addi	sp,sp,48
1c009114 <prvCopyDataToQueue+0x128> ret
prvUnlockQueue():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2172
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
1c009116 <prvUnlockQueue> addi	sp,sp,-48
1c009118 <prvUnlockQueue+0x2> sw	ra,44(sp)
1c00911a <prvUnlockQueue+0x4> sw	s0,40(sp)
1c00911c <prvUnlockQueue+0x6> addi	s0,sp,48
1c00911e <prvUnlockQueue+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2179

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
1c009122 <prvUnlockQueue+0xc> jal	ra,1c009928 <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2181
	{
		int8_t cTxLock = pxQueue->cTxLock;
1c009126 <prvUnlockQueue+0x10> lw	a5,-36(s0)
1c00912a <prvUnlockQueue+0x14> lbu	a5,69(a5)
1c00912e <prvUnlockQueue+0x18> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2184

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1c009132 <prvUnlockQueue+0x1c> j	1c00915e <prvUnlockQueue+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2232
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c009134 <prvUnlockQueue+0x1e> lw	a5,-36(s0)
1c009138 <prvUnlockQueue+0x22> lw	a5,36(a5)
1c00913a <prvUnlockQueue+0x24> beqz	a5,1c009168 <prvUnlockQueue+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2234
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c00913c <prvUnlockQueue+0x26> lw	a5,-36(s0)
1c009140 <prvUnlockQueue+0x2a> addi	a5,a5,36
1c009144 <prvUnlockQueue+0x2e> mv	a0,a5
1c009146 <prvUnlockQueue+0x30> jal	1c009610 <xTaskRemoveFromEventList>
1c009148 <prvUnlockQueue+0x32> mv	a5,a0
1c00914a <prvUnlockQueue+0x34> beqz	a5,1c009150 <prvUnlockQueue+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2238
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
1c00914c <prvUnlockQueue+0x36> jal	ra,1c0097d2 <vTaskMissedYield>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2252
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1c009150 <prvUnlockQueue+0x3a> lbu	a5,-17(s0)
1c009154 <prvUnlockQueue+0x3e> addi	a5,a5,-1
1c009156 <prvUnlockQueue+0x40> andi	a5,a5,255
1c00915a <prvUnlockQueue+0x44> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2184
		while( cTxLock > queueLOCKED_UNMODIFIED )
1c00915e <prvUnlockQueue+0x48> lb	a5,-17(s0)
1c009162 <prvUnlockQueue+0x4c> bgtz	a5,1c009134 <prvUnlockQueue+0x1e>
1c009166 <prvUnlockQueue+0x50> j	1c00916a <prvUnlockQueue+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2247
					break;
1c009168 <prvUnlockQueue+0x52> nop
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2255
		}

		pxQueue->cTxLock = queueUNLOCKED;
1c00916a <prvUnlockQueue+0x54> lw	a5,-36(s0)
1c00916e <prvUnlockQueue+0x58> li	a4,-1
1c009170 <prvUnlockQueue+0x5a> sb	a4,69(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2257
	}
	taskEXIT_CRITICAL();
1c009174 <prvUnlockQueue+0x5e> jal	ra,1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2260

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1c009178 <prvUnlockQueue+0x62> jal	ra,1c009928 <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2262
	{
		int8_t cRxLock = pxQueue->cRxLock;
1c00917c <prvUnlockQueue+0x66> lw	a5,-36(s0)
1c009180 <prvUnlockQueue+0x6a> lbu	a5,68(a5)
1c009184 <prvUnlockQueue+0x6e> sb	a5,-18(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2264

		while( cRxLock > queueLOCKED_UNMODIFIED )
1c009188 <prvUnlockQueue+0x72> j	1c0091b0 <prvUnlockQueue+0x9a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2266
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1c00918a <prvUnlockQueue+0x74> lw	a5,-36(s0)
1c00918e <prvUnlockQueue+0x78> lw	a5,16(a5)
1c009190 <prvUnlockQueue+0x7a> beqz	a5,1c0091ba <prvUnlockQueue+0xa4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2268
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c009192 <prvUnlockQueue+0x7c> lw	a5,-36(s0)
1c009196 <prvUnlockQueue+0x80> addi	a5,a5,16
1c009198 <prvUnlockQueue+0x82> mv	a0,a5
1c00919a <prvUnlockQueue+0x84> jal	1c009610 <xTaskRemoveFromEventList>
1c00919c <prvUnlockQueue+0x86> mv	a5,a0
1c00919e <prvUnlockQueue+0x88> beqz	a5,1c0091a2 <prvUnlockQueue+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2270
				{
					vTaskMissedYield();
1c0091a0 <prvUnlockQueue+0x8a> jal	1c0097d2 <vTaskMissedYield>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2277
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1c0091a2 <prvUnlockQueue+0x8c> lbu	a5,-18(s0)
1c0091a6 <prvUnlockQueue+0x90> addi	a5,a5,-1
1c0091a8 <prvUnlockQueue+0x92> andi	a5,a5,255
1c0091ac <prvUnlockQueue+0x96> sb	a5,-18(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2264
		while( cRxLock > queueLOCKED_UNMODIFIED )
1c0091b0 <prvUnlockQueue+0x9a> lb	a5,-18(s0)
1c0091b4 <prvUnlockQueue+0x9e> bgtz	a5,1c00918a <prvUnlockQueue+0x74>
1c0091b8 <prvUnlockQueue+0xa2> j	1c0091bc <prvUnlockQueue+0xa6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2281
			}
			else
			{
				break;
1c0091ba <prvUnlockQueue+0xa4> nop
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2285
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
1c0091bc <prvUnlockQueue+0xa6> lw	a5,-36(s0)
1c0091c0 <prvUnlockQueue+0xaa> li	a4,-1
1c0091c2 <prvUnlockQueue+0xac> sb	a4,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2287
	}
	taskEXIT_CRITICAL();
1c0091c6 <prvUnlockQueue+0xb0> jal	ra,1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2288
}
1c0091ca <prvUnlockQueue+0xb4> nop
1c0091cc <prvUnlockQueue+0xb6> lw	ra,44(sp)
1c0091ce <prvUnlockQueue+0xb8> lw	s0,40(sp)
1c0091d0 <prvUnlockQueue+0xba> addi	sp,sp,48
1c0091d2 <prvUnlockQueue+0xbc> ret
prvIsQueueFull():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2332
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1c0091d4 <prvIsQueueFull> addi	sp,sp,-48
1c0091d6 <prvIsQueueFull+0x2> sw	ra,44(sp)
1c0091d8 <prvIsQueueFull+0x4> sw	s0,40(sp)
1c0091da <prvIsQueueFull+0x6> addi	s0,sp,48
1c0091dc <prvIsQueueFull+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2335
BaseType_t xReturn;

	taskENTER_CRITICAL();
1c0091e0 <prvIsQueueFull+0xc> jal	ra,1c009928 <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2337
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1c0091e4 <prvIsQueueFull+0x10> lw	a5,-36(s0)
1c0091e8 <prvIsQueueFull+0x14> lw	a4,56(a5)
1c0091ea <prvIsQueueFull+0x16> lw	a5,-36(s0)
1c0091ee <prvIsQueueFull+0x1a> lw	a5,60(a5)
1c0091f0 <prvIsQueueFull+0x1c> bne	a4,a5,1c0091fc <prvIsQueueFull+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2339
		{
			xReturn = pdTRUE;
1c0091f4 <prvIsQueueFull+0x20> li	a5,1
1c0091f6 <prvIsQueueFull+0x22> sw	a5,-20(s0)
1c0091fa <prvIsQueueFull+0x26> j	1c009200 <prvIsQueueFull+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2343
		}
		else
		{
			xReturn = pdFALSE;
1c0091fc <prvIsQueueFull+0x28> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2346
		}
	}
	taskEXIT_CRITICAL();
1c009200 <prvIsQueueFull+0x2c> jal	ra,1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2348

	return xReturn;
1c009204 <prvIsQueueFull+0x30> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2349
}
1c009208 <prvIsQueueFull+0x34> mv	a0,a5
1c00920a <prvIsQueueFull+0x36> lw	ra,44(sp)
1c00920c <prvIsQueueFull+0x38> lw	s0,40(sp)
1c00920e <prvIsQueueFull+0x3a> addi	sp,sp,48
1c009210 <prvIsQueueFull+0x3c> ret
vTaskSuspendAll():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2111
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
1c009212 <vTaskSuspendAll> addi	sp,sp,-16
1c009214 <vTaskSuspendAll+0x2> sw	s0,12(sp)
1c009216 <vTaskSuspendAll+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2123
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
1c009218 <vTaskSuspendAll+0x6> lw	a5,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
1c00921c <vTaskSuspendAll+0xa> addi	a4,a5,1
1c009220 <vTaskSuspendAll+0xe> sw	a4,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2128

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
1c009224 <vTaskSuspendAll+0x12> nop
1c009226 <vTaskSuspendAll+0x14> lw	s0,12(sp)
1c009228 <vTaskSuspendAll+0x16> addi	sp,sp,16
1c00922a <vTaskSuspendAll+0x18> ret
xTaskResumeAll():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2195

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
1c00922c <xTaskResumeAll> addi	sp,sp,-32
1c00922e <xTaskResumeAll+0x2> sw	ra,28(sp)
1c009230 <xTaskResumeAll+0x4> sw	s0,24(sp)
1c009232 <xTaskResumeAll+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2196
TCB_t *pxTCB = NULL;
1c009234 <xTaskResumeAll+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2197
BaseType_t xAlreadyYielded = pdFALSE;
1c009238 <xTaskResumeAll+0xc> sw	zero,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2201

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
1c00923c <xTaskResumeAll+0x10> lw	a5,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
1c009240 <xTaskResumeAll+0x14> bnez	a5,1c009248 <xTaskResumeAll+0x1c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2201 (discriminator 1)
1c009242 <xTaskResumeAll+0x16> csrci	mstatus,8
1c009246 <xTaskResumeAll+0x1a> j	1c009246 <xTaskResumeAll+0x1a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2208
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
1c009248 <xTaskResumeAll+0x1c> jal	ra,1c009928 <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2210
	{
		--uxSchedulerSuspended;
1c00924c <xTaskResumeAll+0x20> lw	a5,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
1c009250 <xTaskResumeAll+0x24> addi	a4,a5,-1
1c009254 <xTaskResumeAll+0x28> sw	a4,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2212

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c009258 <xTaskResumeAll+0x2c> lw	a5,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
1c00925c <xTaskResumeAll+0x30> bnez	a5,1c00932c <xTaskResumeAll+0x100>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2214
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1c009260 <xTaskResumeAll+0x34> lw	a5,1000(gp) # 1c00eb50 <uxCurrentNumberOfTasks>
1c009264 <xTaskResumeAll+0x38> beqz	a5,1c00932c <xTaskResumeAll+0x100>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2218
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1c009268 <xTaskResumeAll+0x3c> j	1c0092de <xTaskResumeAll+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2220
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c00926a <xTaskResumeAll+0x3e> addi	a5,gp,-1380 # 1c00e204 <xPendingReadyList>
1c00926e <xTaskResumeAll+0x42> lw	a5,12(a5)
1c009270 <xTaskResumeAll+0x44> lw	a5,12(a5)
1c009272 <xTaskResumeAll+0x46> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2221
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c009276 <xTaskResumeAll+0x4a> lw	a5,-20(s0)
1c00927a <xTaskResumeAll+0x4e> addi	a5,a5,24
1c00927c <xTaskResumeAll+0x50> mv	a0,a5
1c00927e <xTaskResumeAll+0x52> jal	ra,1c008b0e <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2222
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c009282 <xTaskResumeAll+0x56> lw	a5,-20(s0)
1c009286 <xTaskResumeAll+0x5a> addi	a5,a5,4
1c009288 <xTaskResumeAll+0x5c> mv	a0,a5
1c00928a <xTaskResumeAll+0x5e> jal	ra,1c008b0e <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2223
					prvAddTaskToReadyList( pxTCB );
1c00928e <xTaskResumeAll+0x62> lw	a5,-20(s0)
1c009292 <xTaskResumeAll+0x66> lw	a4,44(a5)
1c009294 <xTaskResumeAll+0x68> lw	a5,1008(gp) # 1c00eb58 <uxTopReadyPriority>
1c009298 <xTaskResumeAll+0x6c> bgeu	a5,a4,1c0092a6 <xTaskResumeAll+0x7a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2223 (discriminator 1)
1c00929c <xTaskResumeAll+0x70> lw	a5,-20(s0)
1c0092a0 <xTaskResumeAll+0x74> lw	a4,44(a5)
1c0092a2 <xTaskResumeAll+0x76> sw	a4,1008(gp) # 1c00eb58 <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2223 (discriminator 3)
1c0092a6 <xTaskResumeAll+0x7a> lw	a5,-20(s0)
1c0092aa <xTaskResumeAll+0x7e> lw	a4,44(a5)
1c0092ac <xTaskResumeAll+0x80> mv	a5,a4
1c0092ae <xTaskResumeAll+0x82> slli	a5,a5,0x2
1c0092b0 <xTaskResumeAll+0x84> add	a5,a5,a4
1c0092b2 <xTaskResumeAll+0x86> slli	a5,a5,0x2
1c0092b4 <xTaskResumeAll+0x88> addi	a4,gp,-1480 # 1c00e1a0 <_edata>
1c0092b8 <xTaskResumeAll+0x8c> add	a4,a4,a5
1c0092ba <xTaskResumeAll+0x8e> lw	a5,-20(s0)
1c0092be <xTaskResumeAll+0x92> addi	a5,a5,4
1c0092c0 <xTaskResumeAll+0x94> mv	a1,a5
1c0092c2 <xTaskResumeAll+0x96> mv	a0,a4
1c0092c4 <xTaskResumeAll+0x98> jal	ra,1c008a06 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2227 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c0092c8 <xTaskResumeAll+0x9c> lw	a5,-20(s0)
1c0092cc <xTaskResumeAll+0xa0> lw	a4,44(a5)
1c0092ce <xTaskResumeAll+0xa2> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0092d2 <xTaskResumeAll+0xa6> lw	a5,44(a5)
1c0092d4 <xTaskResumeAll+0xa8> bltu	a4,a5,1c0092de <xTaskResumeAll+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2229
					{
						xYieldPending = pdTRUE;
1c0092d8 <xTaskResumeAll+0xac> li	a4,1
1c0092da <xTaskResumeAll+0xae> sw	a4,1020(gp) # 1c00eb64 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2218
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1c0092de <xTaskResumeAll+0xb2> addi	a5,gp,-1380 # 1c00e204 <xPendingReadyList>
1c0092e2 <xTaskResumeAll+0xb6> lw	a5,0(a5)
1c0092e4 <xTaskResumeAll+0xb8> bnez	a5,1c00926a <xTaskResumeAll+0x3e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2237
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1c0092e6 <xTaskResumeAll+0xba> lw	a5,-20(s0)
1c0092ea <xTaskResumeAll+0xbe> beqz	a5,1c0092ee <xTaskResumeAll+0xc2>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2245
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
1c0092ec <xTaskResumeAll+0xc0> jal	1c0097e6 <prvResetNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2253
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
1c0092ee <xTaskResumeAll+0xc2> lw	a5,1016(gp) # 1c00eb60 <xPendedTicks>
1c0092f2 <xTaskResumeAll+0xc6> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2255

					if( xPendedCounts > ( TickType_t ) 0U )
1c0092f6 <xTaskResumeAll+0xca> lw	a5,-28(s0)
1c0092fa <xTaskResumeAll+0xce> beqz	a5,1c00931c <xTaskResumeAll+0xf0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2259
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
1c0092fc <xTaskResumeAll+0xd0> jal	1c00933c <xTaskIncrementTick>
1c0092fe <xTaskResumeAll+0xd2> mv	a5,a0
1c009300 <xTaskResumeAll+0xd4> beqz	a5,1c009308 <xTaskResumeAll+0xdc>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2261
							{
								xYieldPending = pdTRUE;
1c009302 <xTaskResumeAll+0xd6> li	a4,1
1c009304 <xTaskResumeAll+0xd8> sw	a4,1020(gp) # 1c00eb64 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2267
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
1c009308 <xTaskResumeAll+0xdc> lw	a5,-28(s0)
1c00930c <xTaskResumeAll+0xe0> addi	a5,a5,-1
1c00930e <xTaskResumeAll+0xe2> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2268
						} while( xPendedCounts > ( TickType_t ) 0U );
1c009312 <xTaskResumeAll+0xe6> lw	a5,-28(s0)
1c009316 <xTaskResumeAll+0xea> bnez	a5,1c0092fc <xTaskResumeAll+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2270

						xPendedTicks = 0;
1c009318 <xTaskResumeAll+0xec> sw	zero,1016(gp) # 1c00eb60 <xPendedTicks>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2278
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
1c00931c <xTaskResumeAll+0xf0> lw	a5,1020(gp) # 1c00eb64 <xYieldPending>
1c009320 <xTaskResumeAll+0xf4> beqz	a5,1c00932c <xTaskResumeAll+0x100>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2282
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
1c009322 <xTaskResumeAll+0xf6> li	a5,1
1c009324 <xTaskResumeAll+0xf8> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2285
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
1c009328 <xTaskResumeAll+0xfc> ecall
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2298
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1c00932c <xTaskResumeAll+0x100> jal	1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2300

	return xAlreadyYielded;
1c00932e <xTaskResumeAll+0x102> lw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2301
}
1c009332 <xTaskResumeAll+0x106> mv	a0,a5
1c009334 <xTaskResumeAll+0x108> lw	ra,28(sp)
1c009336 <xTaskResumeAll+0x10a> lw	s0,24(sp)
1c009338 <xTaskResumeAll+0x10c> addi	sp,sp,32
1c00933a <xTaskResumeAll+0x10e> ret
xTaskIncrementTick():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2708

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
1c00933c <xTaskIncrementTick> addi	sp,sp,-48
1c00933e <xTaskIncrementTick+0x2> sw	ra,44(sp)
1c009340 <xTaskIncrementTick+0x4> sw	s0,40(sp)
1c009342 <xTaskIncrementTick+0x6> addi	s0,sp,48
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2711
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1c009344 <xTaskIncrementTick+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2717

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c009348 <xTaskIncrementTick+0xc> lw	a5,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
1c00934c <xTaskIncrementTick+0x10> bnez	a5,1c009490 <xTaskIncrementTick+0x154>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2721
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1c009350 <xTaskIncrementTick+0x14> lw	a5,1004(gp) # 1c00eb54 <xTickCount>
1c009354 <xTaskIncrementTick+0x18> addi	a5,a5,1
1c009356 <xTaskIncrementTick+0x1a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2725

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
1c00935a <xTaskIncrementTick+0x1e> lw	a4,-24(s0)
1c00935e <xTaskIncrementTick+0x22> sw	a4,1004(gp) # 1c00eb54 <xTickCount>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2727

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1c009362 <xTaskIncrementTick+0x26> lw	a5,-24(s0)
1c009366 <xTaskIncrementTick+0x2a> bnez	a5,1c00939c <xTaskIncrementTick+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2729
		{
			taskSWITCH_DELAYED_LISTS();
1c009368 <xTaskIncrementTick+0x2c> lw	a5,992(gp) # 1c00eb48 <pxDelayedTaskList>
1c00936c <xTaskIncrementTick+0x30> lw	a5,0(a5)
1c00936e <xTaskIncrementTick+0x32> beqz	a5,1c009376 <xTaskIncrementTick+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2729 (discriminator 1)
1c009370 <xTaskIncrementTick+0x34> csrci	mstatus,8
1c009374 <xTaskIncrementTick+0x38> j	1c009374 <xTaskIncrementTick+0x38>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2729 (discriminator 2)
1c009376 <xTaskIncrementTick+0x3a> lw	a5,992(gp) # 1c00eb48 <pxDelayedTaskList>
1c00937a <xTaskIncrementTick+0x3e> sw	a5,-28(s0)
1c00937e <xTaskIncrementTick+0x42> lw	a4,996(gp) # 1c00eb4c <pxOverflowDelayedTaskList>
1c009382 <xTaskIncrementTick+0x46> sw	a4,992(gp) # 1c00eb48 <pxDelayedTaskList>
1c009386 <xTaskIncrementTick+0x4a> lw	a4,-28(s0)
1c00938a <xTaskIncrementTick+0x4e> sw	a4,996(gp) # 1c00eb4c <pxOverflowDelayedTaskList>
1c00938e <xTaskIncrementTick+0x52> lw	a5,1024(gp) # 1c00eb68 <xNumOfOverflows>
1c009392 <xTaskIncrementTick+0x56> addi	a4,a5,1
1c009396 <xTaskIncrementTick+0x5a> sw	a4,1024(gp) # 1c00eb68 <xNumOfOverflows>
1c00939a <xTaskIncrementTick+0x5e> jal	1c0097e6 <prvResetNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2740

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
1c00939c <xTaskIncrementTick+0x60> lw	a5,1028(gp) # 1c00eb6c <xNextTaskUnblockTime>
1c0093a0 <xTaskIncrementTick+0x64> lw	a4,-24(s0)
1c0093a4 <xTaskIncrementTick+0x68> bltu	a4,a5,1c009456 <xTaskIncrementTick+0x11a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2744
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c0093a8 <xTaskIncrementTick+0x6c> lw	a5,992(gp) # 1c00eb48 <pxDelayedTaskList>
1c0093ac <xTaskIncrementTick+0x70> lw	a5,0(a5)
1c0093ae <xTaskIncrementTick+0x72> bnez	a5,1c0093b8 <xTaskIncrementTick+0x7c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2751
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c0093b0 <xTaskIncrementTick+0x74> li	a4,-1
1c0093b2 <xTaskIncrementTick+0x76> sw	a4,1028(gp) # 1c00eb6c <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2752
					break;
1c0093b6 <xTaskIncrementTick+0x7a> j	1c009456 <xTaskIncrementTick+0x11a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2760
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0093b8 <xTaskIncrementTick+0x7c> lw	a5,992(gp) # 1c00eb48 <pxDelayedTaskList>
1c0093bc <xTaskIncrementTick+0x80> lw	a5,12(a5)
1c0093be <xTaskIncrementTick+0x82> lw	a5,12(a5)
1c0093c0 <xTaskIncrementTick+0x84> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2761
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1c0093c4 <xTaskIncrementTick+0x88> lw	a5,-32(s0)
1c0093c8 <xTaskIncrementTick+0x8c> lw	a5,4(a5)
1c0093ca <xTaskIncrementTick+0x8e> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2763

					if( xConstTickCount < xItemValue )
1c0093ce <xTaskIncrementTick+0x92> lw	a4,-24(s0)
1c0093d2 <xTaskIncrementTick+0x96> lw	a5,-36(s0)
1c0093d6 <xTaskIncrementTick+0x9a> bgeu	a4,a5,1c0093e4 <xTaskIncrementTick+0xa8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2770
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
1c0093da <xTaskIncrementTick+0x9e> lw	a4,-36(s0)
1c0093de <xTaskIncrementTick+0xa2> sw	a4,1028(gp) # 1c00eb6c <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2771
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
1c0093e2 <xTaskIncrementTick+0xa6> j	1c009456 <xTaskIncrementTick+0x11a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2779
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c0093e4 <xTaskIncrementTick+0xa8> lw	a5,-32(s0)
1c0093e8 <xTaskIncrementTick+0xac> addi	a5,a5,4
1c0093ea <xTaskIncrementTick+0xae> mv	a0,a5
1c0093ec <xTaskIncrementTick+0xb0> jal	ra,1c008b0e <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2783

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1c0093f0 <xTaskIncrementTick+0xb4> lw	a5,-32(s0)
1c0093f4 <xTaskIncrementTick+0xb8> lw	a5,40(a5)
1c0093f6 <xTaskIncrementTick+0xba> beqz	a5,1c009404 <xTaskIncrementTick+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2785
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c0093f8 <xTaskIncrementTick+0xbc> lw	a5,-32(s0)
1c0093fc <xTaskIncrementTick+0xc0> addi	a5,a5,24
1c0093fe <xTaskIncrementTick+0xc2> mv	a0,a5
1c009400 <xTaskIncrementTick+0xc4> jal	ra,1c008b0e <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2794
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
1c009404 <xTaskIncrementTick+0xc8> lw	a5,-32(s0)
1c009408 <xTaskIncrementTick+0xcc> lw	a4,44(a5)
1c00940a <xTaskIncrementTick+0xce> lw	a5,1008(gp) # 1c00eb58 <uxTopReadyPriority>
1c00940e <xTaskIncrementTick+0xd2> bgeu	a5,a4,1c00941c <xTaskIncrementTick+0xe0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2794 (discriminator 1)
1c009412 <xTaskIncrementTick+0xd6> lw	a5,-32(s0)
1c009416 <xTaskIncrementTick+0xda> lw	a4,44(a5)
1c009418 <xTaskIncrementTick+0xdc> sw	a4,1008(gp) # 1c00eb58 <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2794 (discriminator 3)
1c00941c <xTaskIncrementTick+0xe0> lw	a5,-32(s0)
1c009420 <xTaskIncrementTick+0xe4> lw	a4,44(a5)
1c009422 <xTaskIncrementTick+0xe6> mv	a5,a4
1c009424 <xTaskIncrementTick+0xe8> slli	a5,a5,0x2
1c009426 <xTaskIncrementTick+0xea> add	a5,a5,a4
1c009428 <xTaskIncrementTick+0xec> slli	a5,a5,0x2
1c00942a <xTaskIncrementTick+0xee> addi	a4,gp,-1480 # 1c00e1a0 <_edata>
1c00942e <xTaskIncrementTick+0xf2> add	a4,a4,a5
1c009430 <xTaskIncrementTick+0xf4> lw	a5,-32(s0)
1c009434 <xTaskIncrementTick+0xf8> addi	a5,a5,4
1c009436 <xTaskIncrementTick+0xfa> mv	a1,a5
1c009438 <xTaskIncrementTick+0xfc> mv	a0,a4
1c00943a <xTaskIncrementTick+0xfe> jal	ra,1c008a06 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2804 (discriminator 3)
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c00943e <xTaskIncrementTick+0x102> lw	a5,-32(s0)
1c009442 <xTaskIncrementTick+0x106> lw	a4,44(a5)
1c009444 <xTaskIncrementTick+0x108> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c009448 <xTaskIncrementTick+0x10c> lw	a5,44(a5)
1c00944a <xTaskIncrementTick+0x10e> bltu	a4,a5,1c0093a8 <xTaskIncrementTick+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2806
						{
							xSwitchRequired = pdTRUE;
1c00944e <xTaskIncrementTick+0x112> li	a5,1
1c009450 <xTaskIncrementTick+0x114> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2744
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c009454 <xTaskIncrementTick+0x118> j	1c0093a8 <xTaskIncrementTick+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2823
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1c009456 <xTaskIncrementTick+0x11a> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c00945a <xTaskIncrementTick+0x11e> lw	a4,44(a5)
1c00945c <xTaskIncrementTick+0x120> addi	a3,gp,-1480 # 1c00e1a0 <_edata>
1c009460 <xTaskIncrementTick+0x124> mv	a5,a4
1c009462 <xTaskIncrementTick+0x126> slli	a5,a5,0x2
1c009464 <xTaskIncrementTick+0x128> add	a5,a5,a4
1c009466 <xTaskIncrementTick+0x12a> slli	a5,a5,0x2
1c009468 <xTaskIncrementTick+0x12c> add	a5,a5,a3
1c00946a <xTaskIncrementTick+0x12e> lw	a4,0(a5)
1c00946c <xTaskIncrementTick+0x130> li	a5,1
1c00946e <xTaskIncrementTick+0x132> bgeu	a5,a4,1c009478 <xTaskIncrementTick+0x13c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2825
			{
				xSwitchRequired = pdTRUE;
1c009472 <xTaskIncrementTick+0x136> li	a5,1
1c009474 <xTaskIncrementTick+0x138> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2838

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
1c009478 <xTaskIncrementTick+0x13c> lw	a5,1016(gp) # 1c00eb60 <xPendedTicks>
1c00947c <xTaskIncrementTick+0x140> bnez	a5,1c009482 <xTaskIncrementTick+0x146>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2840
			{
				vApplicationTickHook();
1c00947e <xTaskIncrementTick+0x142> jal	ra,1c00b678 <vApplicationTickHook>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2851
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
1c009482 <xTaskIncrementTick+0x146> lw	a5,1020(gp) # 1c00eb64 <xYieldPending>
1c009486 <xTaskIncrementTick+0x14a> beqz	a5,1c0094a0 <xTaskIncrementTick+0x164>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2853
			{
				xSwitchRequired = pdTRUE;
1c009488 <xTaskIncrementTick+0x14c> li	a5,1
1c00948a <xTaskIncrementTick+0x14e> sw	a5,-20(s0)
1c00948e <xTaskIncrementTick+0x152> j	1c0094a0 <xTaskIncrementTick+0x164>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2864
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
1c009490 <xTaskIncrementTick+0x154> lw	a5,1016(gp) # 1c00eb60 <xPendedTicks>
1c009494 <xTaskIncrementTick+0x158> addi	a4,a5,1
1c009498 <xTaskIncrementTick+0x15c> sw	a4,1016(gp) # 1c00eb60 <xPendedTicks>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2870

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
1c00949c <xTaskIncrementTick+0x160> jal	ra,1c00b678 <vApplicationTickHook>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2875
		}
		#endif
	}

	return xSwitchRequired;
1c0094a0 <xTaskIncrementTick+0x164> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2876
}
1c0094a4 <xTaskIncrementTick+0x168> mv	a0,a5
1c0094a6 <xTaskIncrementTick+0x16a> lw	ra,44(sp)
1c0094a8 <xTaskIncrementTick+0x16c> lw	s0,40(sp)
1c0094aa <xTaskIncrementTick+0x16e> addi	sp,sp,48
1c0094ac <xTaskIncrementTick+0x170> ret
vTaskSwitchContext():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2990

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
1c0094ae <vTaskSwitchContext> addi	sp,sp,-32
1c0094b0 <vTaskSwitchContext+0x2> sw	ra,28(sp)
1c0094b2 <vTaskSwitchContext+0x4> sw	s0,24(sp)
1c0094b4 <vTaskSwitchContext+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2991
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1c0094b6 <vTaskSwitchContext+0x8> lw	a5,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
1c0094ba <vTaskSwitchContext+0xc> beqz	a5,1c0094c4 <vTaskSwitchContext+0x16>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2995
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
1c0094bc <vTaskSwitchContext+0xe> li	a4,1
1c0094be <vTaskSwitchContext+0x10> sw	a4,1020(gp) # 1c00eb64 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3061
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
1c0094c2 <vTaskSwitchContext+0x14> j	1c0095c8 <vTaskSwitchContext+0x11a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2999
		xYieldPending = pdFALSE;
1c0094c4 <vTaskSwitchContext+0x16> sw	zero,1020(gp) # 1c00eb64 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030
		taskCHECK_FOR_STACK_OVERFLOW();
1c0094c8 <vTaskSwitchContext+0x1a> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0094cc <vTaskSwitchContext+0x1e> lw	a5,48(a5)
1c0094ce <vTaskSwitchContext+0x20> sw	a5,-24(s0)
1c0094d2 <vTaskSwitchContext+0x24> lui	a5,0xa5a5a
1c0094d6 <vTaskSwitchContext+0x28> addi	a5,a5,1445 # a5a5a5a5 <__l2_shared_end+0x89a3ae35>
1c0094da <vTaskSwitchContext+0x2c> sw	a5,-28(s0)
1c0094de <vTaskSwitchContext+0x30> lw	a5,-24(s0)
1c0094e2 <vTaskSwitchContext+0x34> lw	a5,0(a5)
1c0094e4 <vTaskSwitchContext+0x36> lw	a4,-28(s0)
1c0094e8 <vTaskSwitchContext+0x3a> bne	a4,a5,1c00951c <vTaskSwitchContext+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030 (discriminator 2)
1c0094ec <vTaskSwitchContext+0x3e> lw	a5,-24(s0)
1c0094f0 <vTaskSwitchContext+0x42> addi	a5,a5,4
1c0094f2 <vTaskSwitchContext+0x44> lw	a5,0(a5)
1c0094f4 <vTaskSwitchContext+0x46> lw	a4,-28(s0)
1c0094f8 <vTaskSwitchContext+0x4a> bne	a4,a5,1c00951c <vTaskSwitchContext+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030 (discriminator 4)
1c0094fc <vTaskSwitchContext+0x4e> lw	a5,-24(s0)
1c009500 <vTaskSwitchContext+0x52> addi	a5,a5,8
1c009502 <vTaskSwitchContext+0x54> lw	a5,0(a5)
1c009504 <vTaskSwitchContext+0x56> lw	a4,-28(s0)
1c009508 <vTaskSwitchContext+0x5a> bne	a4,a5,1c00951c <vTaskSwitchContext+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030 (discriminator 6)
1c00950c <vTaskSwitchContext+0x5e> lw	a5,-24(s0)
1c009510 <vTaskSwitchContext+0x62> addi	a5,a5,12
1c009512 <vTaskSwitchContext+0x64> lw	a5,0(a5)
1c009514 <vTaskSwitchContext+0x66> lw	a4,-28(s0)
1c009518 <vTaskSwitchContext+0x6a> beq	a4,a5,1c009530 <vTaskSwitchContext+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030 (discriminator 7)
1c00951c <vTaskSwitchContext+0x6e> lw	a4,988(gp) # 1c00eb44 <pxCurrentTCB>
1c009520 <vTaskSwitchContext+0x72> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c009524 <vTaskSwitchContext+0x76> addi	a5,a5,52
1c009528 <vTaskSwitchContext+0x7a> mv	a1,a5
1c00952a <vTaskSwitchContext+0x7c> mv	a0,a4
1c00952c <vTaskSwitchContext+0x7e> jal	ra,1c00b662 <vApplicationStackOverflowHook>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c009530 <vTaskSwitchContext+0x82> lw	a5,1008(gp) # 1c00eb58 <uxTopReadyPriority>
1c009534 <vTaskSwitchContext+0x86> sw	a5,-20(s0)
1c009538 <vTaskSwitchContext+0x8a> j	1c009550 <vTaskSwitchContext+0xa2>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 5)
1c00953a <vTaskSwitchContext+0x8c> lw	a5,-20(s0)
1c00953e <vTaskSwitchContext+0x90> bnez	a5,1c009546 <vTaskSwitchContext+0x98>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 2)
1c009540 <vTaskSwitchContext+0x92> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 1)
1c009544 <vTaskSwitchContext+0x96> j	1c009544 <vTaskSwitchContext+0x96>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 3)
1c009546 <vTaskSwitchContext+0x98> lw	a5,-20(s0)
1c00954a <vTaskSwitchContext+0x9c> addi	a5,a5,-1
1c00954c <vTaskSwitchContext+0x9e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 4)
1c009550 <vTaskSwitchContext+0xa2> addi	a3,gp,-1480 # 1c00e1a0 <_edata>
1c009554 <vTaskSwitchContext+0xa6> lw	a4,-20(s0)
1c009558 <vTaskSwitchContext+0xaa> mv	a5,a4
1c00955a <vTaskSwitchContext+0xac> slli	a5,a5,0x2
1c00955c <vTaskSwitchContext+0xae> add	a5,a5,a4
1c00955e <vTaskSwitchContext+0xb0> slli	a5,a5,0x2
1c009560 <vTaskSwitchContext+0xb2> add	a5,a5,a3
1c009562 <vTaskSwitchContext+0xb4> lw	a5,0(a5)
1c009564 <vTaskSwitchContext+0xb6> beqz	a5,1c00953a <vTaskSwitchContext+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 6)
1c009566 <vTaskSwitchContext+0xb8> lw	a4,-20(s0)
1c00956a <vTaskSwitchContext+0xbc> mv	a5,a4
1c00956c <vTaskSwitchContext+0xbe> slli	a5,a5,0x2
1c00956e <vTaskSwitchContext+0xc0> add	a5,a5,a4
1c009570 <vTaskSwitchContext+0xc2> slli	a5,a5,0x2
1c009572 <vTaskSwitchContext+0xc4> addi	a4,gp,-1480 # 1c00e1a0 <_edata>
1c009576 <vTaskSwitchContext+0xc8> add	a5,a5,a4
1c009578 <vTaskSwitchContext+0xca> sw	a5,-32(s0)
1c00957c <vTaskSwitchContext+0xce> lw	a5,-32(s0)
1c009580 <vTaskSwitchContext+0xd2> lw	a5,4(a5)
1c009582 <vTaskSwitchContext+0xd4> lw	a4,4(a5)
1c009584 <vTaskSwitchContext+0xd6> lw	a5,-32(s0)
1c009588 <vTaskSwitchContext+0xda> sw	a4,4(a5)
1c00958a <vTaskSwitchContext+0xdc> lw	a5,-32(s0)
1c00958e <vTaskSwitchContext+0xe0> lw	a4,4(a5)
1c009590 <vTaskSwitchContext+0xe2> lw	a5,-32(s0)
1c009594 <vTaskSwitchContext+0xe6> addi	a5,a5,8
1c009596 <vTaskSwitchContext+0xe8> bne	a4,a5,1c0095a8 <vTaskSwitchContext+0xfa>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 7)
1c00959a <vTaskSwitchContext+0xec> lw	a5,-32(s0)
1c00959e <vTaskSwitchContext+0xf0> lw	a5,4(a5)
1c0095a0 <vTaskSwitchContext+0xf2> lw	a4,4(a5)
1c0095a2 <vTaskSwitchContext+0xf4> lw	a5,-32(s0)
1c0095a6 <vTaskSwitchContext+0xf8> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 9)
1c0095a8 <vTaskSwitchContext+0xfa> lw	a5,-32(s0)
1c0095ac <vTaskSwitchContext+0xfe> lw	a5,4(a5)
1c0095ae <vTaskSwitchContext+0x100> lw	a4,12(a5)
1c0095b0 <vTaskSwitchContext+0x102> sw	a4,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0095b4 <vTaskSwitchContext+0x106> lw	a4,-20(s0)
1c0095b8 <vTaskSwitchContext+0x10a> sw	a4,1008(gp) # 1c00eb58 <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3057 (discriminator 9)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1c0095bc <vTaskSwitchContext+0x10e> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0095c0 <vTaskSwitchContext+0x112> addi	a4,a5,88
1c0095c4 <vTaskSwitchContext+0x116> sw	a4,-1500(gp) # 1c00e18c <_impure_ptr>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3061
}
1c0095c8 <vTaskSwitchContext+0x11a> nop
1c0095ca <vTaskSwitchContext+0x11c> lw	ra,28(sp)
1c0095cc <vTaskSwitchContext+0x11e> lw	s0,24(sp)
1c0095ce <vTaskSwitchContext+0x120> addi	sp,sp,32
1c0095d0 <vTaskSwitchContext+0x122> ret
vTaskPlaceOnEventList():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3065
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
1c0095d2 <vTaskPlaceOnEventList> addi	sp,sp,-32
1c0095d4 <vTaskPlaceOnEventList+0x2> sw	ra,28(sp)
1c0095d6 <vTaskPlaceOnEventList+0x4> sw	s0,24(sp)
1c0095d8 <vTaskPlaceOnEventList+0x6> addi	s0,sp,32
1c0095da <vTaskPlaceOnEventList+0x8> sw	a0,-20(s0)
1c0095de <vTaskPlaceOnEventList+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3066
	configASSERT( pxEventList );
1c0095e2 <vTaskPlaceOnEventList+0x10> lw	a5,-20(s0)
1c0095e6 <vTaskPlaceOnEventList+0x14> bnez	a5,1c0095ee <vTaskPlaceOnEventList+0x1c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3066 (discriminator 1)
1c0095e8 <vTaskPlaceOnEventList+0x16> csrci	mstatus,8
1c0095ec <vTaskPlaceOnEventList+0x1a> j	1c0095ec <vTaskPlaceOnEventList+0x1a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3075

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1c0095ee <vTaskPlaceOnEventList+0x1c> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0095f2 <vTaskPlaceOnEventList+0x20> addi	a5,a5,24
1c0095f4 <vTaskPlaceOnEventList+0x22> mv	a1,a5
1c0095f6 <vTaskPlaceOnEventList+0x24> lw	a0,-20(s0)
1c0095fa <vTaskPlaceOnEventList+0x28> jal	ra,1c008a6c <vListInsert>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3077

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1c0095fe <vTaskPlaceOnEventList+0x2c> li	a1,1
1c009600 <vTaskPlaceOnEventList+0x2e> lw	a0,-24(s0)
1c009604 <vTaskPlaceOnEventList+0x32> jal	1c009980 <prvAddCurrentTaskToDelayedList>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3078
}
1c009606 <vTaskPlaceOnEventList+0x34> nop
1c009608 <vTaskPlaceOnEventList+0x36> lw	ra,28(sp)
1c00960a <vTaskPlaceOnEventList+0x38> lw	s0,24(sp)
1c00960c <vTaskPlaceOnEventList+0x3a> addi	sp,sp,32
1c00960e <vTaskPlaceOnEventList+0x3c> ret
xTaskRemoveFromEventList():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3139

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
1c009610 <xTaskRemoveFromEventList> addi	sp,sp,-48
1c009612 <xTaskRemoveFromEventList+0x2> sw	ra,44(sp)
1c009614 <xTaskRemoveFromEventList+0x4> sw	s0,40(sp)
1c009616 <xTaskRemoveFromEventList+0x6> addi	s0,sp,48
1c009618 <xTaskRemoveFromEventList+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3156
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c00961c <xTaskRemoveFromEventList+0xc> lw	a5,-36(s0)
1c009620 <xTaskRemoveFromEventList+0x10> lw	a5,12(a5)
1c009622 <xTaskRemoveFromEventList+0x12> lw	a5,12(a5)
1c009624 <xTaskRemoveFromEventList+0x14> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3157
	configASSERT( pxUnblockedTCB );
1c009628 <xTaskRemoveFromEventList+0x18> lw	a5,-24(s0)
1c00962c <xTaskRemoveFromEventList+0x1c> bnez	a5,1c009634 <xTaskRemoveFromEventList+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3157 (discriminator 1)
1c00962e <xTaskRemoveFromEventList+0x1e> csrci	mstatus,8
1c009632 <xTaskRemoveFromEventList+0x22> j	1c009632 <xTaskRemoveFromEventList+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3158
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1c009634 <xTaskRemoveFromEventList+0x24> lw	a5,-24(s0)
1c009638 <xTaskRemoveFromEventList+0x28> addi	a5,a5,24
1c00963a <xTaskRemoveFromEventList+0x2a> mv	a0,a5
1c00963c <xTaskRemoveFromEventList+0x2c> jal	ra,1c008b0e <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3160

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c009640 <xTaskRemoveFromEventList+0x30> lw	a5,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
1c009644 <xTaskRemoveFromEventList+0x34> bnez	a5,1c00968e <xTaskRemoveFromEventList+0x7e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3162
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1c009646 <xTaskRemoveFromEventList+0x36> lw	a5,-24(s0)
1c00964a <xTaskRemoveFromEventList+0x3a> addi	a5,a5,4
1c00964c <xTaskRemoveFromEventList+0x3c> mv	a0,a5
1c00964e <xTaskRemoveFromEventList+0x3e> jal	ra,1c008b0e <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3163
		prvAddTaskToReadyList( pxUnblockedTCB );
1c009652 <xTaskRemoveFromEventList+0x42> lw	a5,-24(s0)
1c009656 <xTaskRemoveFromEventList+0x46> lw	a4,44(a5)
1c009658 <xTaskRemoveFromEventList+0x48> lw	a5,1008(gp) # 1c00eb58 <uxTopReadyPriority>
1c00965c <xTaskRemoveFromEventList+0x4c> bgeu	a5,a4,1c00966a <xTaskRemoveFromEventList+0x5a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3163 (discriminator 1)
1c009660 <xTaskRemoveFromEventList+0x50> lw	a5,-24(s0)
1c009664 <xTaskRemoveFromEventList+0x54> lw	a4,44(a5)
1c009666 <xTaskRemoveFromEventList+0x56> sw	a4,1008(gp) # 1c00eb58 <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3163 (discriminator 3)
1c00966a <xTaskRemoveFromEventList+0x5a> lw	a5,-24(s0)
1c00966e <xTaskRemoveFromEventList+0x5e> lw	a4,44(a5)
1c009670 <xTaskRemoveFromEventList+0x60> mv	a5,a4
1c009672 <xTaskRemoveFromEventList+0x62> slli	a5,a5,0x2
1c009674 <xTaskRemoveFromEventList+0x64> add	a5,a5,a4
1c009676 <xTaskRemoveFromEventList+0x66> slli	a5,a5,0x2
1c009678 <xTaskRemoveFromEventList+0x68> addi	a4,gp,-1480 # 1c00e1a0 <_edata>
1c00967c <xTaskRemoveFromEventList+0x6c> add	a4,a4,a5
1c00967e <xTaskRemoveFromEventList+0x6e> lw	a5,-24(s0)
1c009682 <xTaskRemoveFromEventList+0x72> addi	a5,a5,4
1c009684 <xTaskRemoveFromEventList+0x74> mv	a1,a5
1c009686 <xTaskRemoveFromEventList+0x76> mv	a0,a4
1c009688 <xTaskRemoveFromEventList+0x78> jal	ra,1c008a06 <vListInsertEnd>
1c00968c <xTaskRemoveFromEventList+0x7c> j	1c00969e <xTaskRemoveFromEventList+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3183
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1c00968e <xTaskRemoveFromEventList+0x7e> lw	a5,-24(s0)
1c009692 <xTaskRemoveFromEventList+0x82> addi	a5,a5,24
1c009694 <xTaskRemoveFromEventList+0x84> mv	a1,a5
1c009696 <xTaskRemoveFromEventList+0x86> addi	a0,gp,-1380 # 1c00e204 <xPendingReadyList>
1c00969a <xTaskRemoveFromEventList+0x8a> jal	ra,1c008a06 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3186
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1c00969e <xTaskRemoveFromEventList+0x8e> lw	a5,-24(s0)
1c0096a2 <xTaskRemoveFromEventList+0x92> lw	a4,44(a5)
1c0096a4 <xTaskRemoveFromEventList+0x94> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0096a8 <xTaskRemoveFromEventList+0x98> lw	a5,44(a5)
1c0096aa <xTaskRemoveFromEventList+0x9a> bgeu	a5,a4,1c0096bc <xTaskRemoveFromEventList+0xac>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3191
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
1c0096ae <xTaskRemoveFromEventList+0x9e> li	a5,1
1c0096b0 <xTaskRemoveFromEventList+0xa0> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3195

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
1c0096b4 <xTaskRemoveFromEventList+0xa4> li	a4,1
1c0096b6 <xTaskRemoveFromEventList+0xa6> sw	a4,1020(gp) # 1c00eb64 <xYieldPending>
1c0096ba <xTaskRemoveFromEventList+0xaa> j	1c0096c0 <xTaskRemoveFromEventList+0xb0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3199
	}
	else
	{
		xReturn = pdFALSE;
1c0096bc <xTaskRemoveFromEventList+0xac> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3202
	}

	return xReturn;
1c0096c0 <xTaskRemoveFromEventList+0xb0> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3203
}
1c0096c4 <xTaskRemoveFromEventList+0xb4> mv	a0,a5
1c0096c6 <xTaskRemoveFromEventList+0xb6> lw	ra,44(sp)
1c0096c8 <xTaskRemoveFromEventList+0xb8> lw	s0,40(sp)
1c0096ca <xTaskRemoveFromEventList+0xba> addi	sp,sp,48
1c0096cc <xTaskRemoveFromEventList+0xbc> ret
vTaskInternalSetTimeOutState():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3267
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
1c0096ce <vTaskInternalSetTimeOutState> addi	sp,sp,-32
1c0096d0 <vTaskInternalSetTimeOutState+0x2> sw	s0,28(sp)
1c0096d2 <vTaskInternalSetTimeOutState+0x4> addi	s0,sp,32
1c0096d4 <vTaskInternalSetTimeOutState+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3269
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1c0096d8 <vTaskInternalSetTimeOutState+0xa> lw	a4,1024(gp) # 1c00eb68 <xNumOfOverflows>
1c0096dc <vTaskInternalSetTimeOutState+0xe> lw	a5,-20(s0)
1c0096e0 <vTaskInternalSetTimeOutState+0x12> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3270
	pxTimeOut->xTimeOnEntering = xTickCount;
1c0096e2 <vTaskInternalSetTimeOutState+0x14> lw	a4,1004(gp) # 1c00eb54 <xTickCount>
1c0096e6 <vTaskInternalSetTimeOutState+0x18> lw	a5,-20(s0)
1c0096ea <vTaskInternalSetTimeOutState+0x1c> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3271
}
1c0096ec <vTaskInternalSetTimeOutState+0x1e> nop
1c0096ee <vTaskInternalSetTimeOutState+0x20> lw	s0,28(sp)
1c0096f0 <vTaskInternalSetTimeOutState+0x22> addi	sp,sp,32
1c0096f2 <vTaskInternalSetTimeOutState+0x24> ret
xTaskCheckForTimeOut():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3275
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
1c0096f4 <xTaskCheckForTimeOut> addi	sp,sp,-48
1c0096f6 <xTaskCheckForTimeOut+0x2> sw	ra,44(sp)
1c0096f8 <xTaskCheckForTimeOut+0x4> sw	s0,40(sp)
1c0096fa <xTaskCheckForTimeOut+0x6> addi	s0,sp,48
1c0096fc <xTaskCheckForTimeOut+0x8> sw	a0,-36(s0)
1c009700 <xTaskCheckForTimeOut+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3278
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1c009704 <xTaskCheckForTimeOut+0x10> lw	a5,-36(s0)
1c009708 <xTaskCheckForTimeOut+0x14> bnez	a5,1c009710 <xTaskCheckForTimeOut+0x1c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3278 (discriminator 1)
1c00970a <xTaskCheckForTimeOut+0x16> csrci	mstatus,8
1c00970e <xTaskCheckForTimeOut+0x1a> j	1c00970e <xTaskCheckForTimeOut+0x1a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3279
	configASSERT( pxTicksToWait );
1c009710 <xTaskCheckForTimeOut+0x1c> lw	a5,-40(s0)
1c009714 <xTaskCheckForTimeOut+0x20> bnez	a5,1c00971c <xTaskCheckForTimeOut+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3279 (discriminator 1)
1c009716 <xTaskCheckForTimeOut+0x22> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3279 (discriminator 2)
1c00971a <xTaskCheckForTimeOut+0x26> j	1c00971a <xTaskCheckForTimeOut+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3281

	taskENTER_CRITICAL();
1c00971c <xTaskCheckForTimeOut+0x28> jal	1c009928 <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3284
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
1c00971e <xTaskCheckForTimeOut+0x2a> lw	a5,1004(gp) # 1c00eb54 <xTickCount>
1c009722 <xTaskCheckForTimeOut+0x2e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3285
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1c009726 <xTaskCheckForTimeOut+0x32> lw	a5,-36(s0)
1c00972a <xTaskCheckForTimeOut+0x36> lw	a5,4(a5)
1c00972c <xTaskCheckForTimeOut+0x38> lw	a4,-24(s0)
1c009730 <xTaskCheckForTimeOut+0x3c> sub	a5,a4,a5
1c009734 <xTaskCheckForTimeOut+0x40> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3288

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
1c009738 <xTaskCheckForTimeOut+0x44> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c00973c <xTaskCheckForTimeOut+0x48> lbu	a5,1157(a5)
1c009740 <xTaskCheckForTimeOut+0x4c> beqz	a5,1c009752 <xTaskCheckForTimeOut+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3292
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
1c009742 <xTaskCheckForTimeOut+0x4e> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c009746 <xTaskCheckForTimeOut+0x52> sb	zero,1157(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3293
				xReturn = pdTRUE;
1c00974a <xTaskCheckForTimeOut+0x56> li	a5,1
1c00974c <xTaskCheckForTimeOut+0x58> sw	a5,-20(s0)
1c009750 <xTaskCheckForTimeOut+0x5c> j	1c0097c2 <xTaskCheckForTimeOut+0xce>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3299
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
1c009752 <xTaskCheckForTimeOut+0x5e> lw	a5,-40(s0)
1c009756 <xTaskCheckForTimeOut+0x62> lw	a4,0(a5)
1c009758 <xTaskCheckForTimeOut+0x64> li	a5,-1
1c00975a <xTaskCheckForTimeOut+0x66> bne	a4,a5,1c009764 <xTaskCheckForTimeOut+0x70>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3304
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
1c00975e <xTaskCheckForTimeOut+0x6a> sw	zero,-20(s0)
1c009762 <xTaskCheckForTimeOut+0x6e> j	1c0097c2 <xTaskCheckForTimeOut+0xce>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3309
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1c009764 <xTaskCheckForTimeOut+0x70> lw	a5,-36(s0)
1c009768 <xTaskCheckForTimeOut+0x74> lw	a4,0(a5)
1c00976a <xTaskCheckForTimeOut+0x76> lw	a5,1024(gp) # 1c00eb68 <xNumOfOverflows>
1c00976e <xTaskCheckForTimeOut+0x7a> beq	a4,a5,1c009788 <xTaskCheckForTimeOut+0x94>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3309 (discriminator 1)
1c009772 <xTaskCheckForTimeOut+0x7e> lw	a5,-36(s0)
1c009776 <xTaskCheckForTimeOut+0x82> lw	a5,4(a5)
1c009778 <xTaskCheckForTimeOut+0x84> lw	a4,-24(s0)
1c00977c <xTaskCheckForTimeOut+0x88> bltu	a4,a5,1c009788 <xTaskCheckForTimeOut+0x94>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3316
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
1c009780 <xTaskCheckForTimeOut+0x8c> li	a5,1
1c009782 <xTaskCheckForTimeOut+0x8e> sw	a5,-20(s0)
1c009786 <xTaskCheckForTimeOut+0x92> j	1c0097c2 <xTaskCheckForTimeOut+0xce>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3318
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1c009788 <xTaskCheckForTimeOut+0x94> lw	a5,-40(s0)
1c00978c <xTaskCheckForTimeOut+0x98> lw	a5,0(a5)
1c00978e <xTaskCheckForTimeOut+0x9a> lw	a4,-28(s0)
1c009792 <xTaskCheckForTimeOut+0x9e> bgeu	a4,a5,1c0097b4 <xTaskCheckForTimeOut+0xc0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3321
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
1c009796 <xTaskCheckForTimeOut+0xa2> lw	a5,-40(s0)
1c00979a <xTaskCheckForTimeOut+0xa6> lw	a4,0(a5)
1c00979c <xTaskCheckForTimeOut+0xa8> lw	a5,-28(s0)
1c0097a0 <xTaskCheckForTimeOut+0xac> sub	a4,a4,a5
1c0097a2 <xTaskCheckForTimeOut+0xae> lw	a5,-40(s0)
1c0097a6 <xTaskCheckForTimeOut+0xb2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3322
			vTaskInternalSetTimeOutState( pxTimeOut );
1c0097a8 <xTaskCheckForTimeOut+0xb4> lw	a0,-36(s0)
1c0097ac <xTaskCheckForTimeOut+0xb8> jal	1c0096ce <vTaskInternalSetTimeOutState>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3323
			xReturn = pdFALSE;
1c0097ae <xTaskCheckForTimeOut+0xba> sw	zero,-20(s0)
1c0097b2 <xTaskCheckForTimeOut+0xbe> j	1c0097c2 <xTaskCheckForTimeOut+0xce>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3327
		}
		else
		{
			*pxTicksToWait = 0;
1c0097b4 <xTaskCheckForTimeOut+0xc0> lw	a5,-40(s0)
1c0097b8 <xTaskCheckForTimeOut+0xc4> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3328
			xReturn = pdTRUE;
1c0097bc <xTaskCheckForTimeOut+0xc8> li	a5,1
1c0097be <xTaskCheckForTimeOut+0xca> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3331
		}
	}
	taskEXIT_CRITICAL();
1c0097c2 <xTaskCheckForTimeOut+0xce> jal	1c00994e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3333

	return xReturn;
1c0097c4 <xTaskCheckForTimeOut+0xd0> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3334
}
1c0097c8 <xTaskCheckForTimeOut+0xd4> mv	a0,a5
1c0097ca <xTaskCheckForTimeOut+0xd6> lw	ra,44(sp)
1c0097cc <xTaskCheckForTimeOut+0xd8> lw	s0,40(sp)
1c0097ce <xTaskCheckForTimeOut+0xda> addi	sp,sp,48
1c0097d0 <xTaskCheckForTimeOut+0xdc> ret
vTaskMissedYield():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3338
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
1c0097d2 <vTaskMissedYield> addi	sp,sp,-16
1c0097d4 <vTaskMissedYield+0x2> sw	s0,12(sp)
1c0097d6 <vTaskMissedYield+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3339
	xYieldPending = pdTRUE;
1c0097d8 <vTaskMissedYield+0x6> li	a4,1
1c0097da <vTaskMissedYield+0x8> sw	a4,1020(gp) # 1c00eb64 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3340
}
1c0097de <vTaskMissedYield+0xc> nop
1c0097e0 <vTaskMissedYield+0xe> lw	s0,12(sp)
1c0097e2 <vTaskMissedYield+0x10> addi	sp,sp,16
1c0097e4 <vTaskMissedYield+0x12> ret
prvResetNextTaskUnblockTime():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3944

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
1c0097e6 <prvResetNextTaskUnblockTime> addi	sp,sp,-32
1c0097e8 <prvResetNextTaskUnblockTime+0x2> sw	s0,28(sp)
1c0097ea <prvResetNextTaskUnblockTime+0x4> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3947
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c0097ec <prvResetNextTaskUnblockTime+0x6> lw	a5,992(gp) # 1c00eb48 <pxDelayedTaskList>
1c0097f0 <prvResetNextTaskUnblockTime+0xa> lw	a5,0(a5)
1c0097f2 <prvResetNextTaskUnblockTime+0xc> bnez	a5,1c0097fc <prvResetNextTaskUnblockTime+0x16>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3953
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1c0097f4 <prvResetNextTaskUnblockTime+0xe> li	a4,-1
1c0097f6 <prvResetNextTaskUnblockTime+0x10> sw	a4,1028(gp) # 1c00eb6c <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3964
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
1c0097fa <prvResetNextTaskUnblockTime+0x14> j	1c009812 <prvResetNextTaskUnblockTime+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3961
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0097fc <prvResetNextTaskUnblockTime+0x16> lw	a5,992(gp) # 1c00eb48 <pxDelayedTaskList>
1c009800 <prvResetNextTaskUnblockTime+0x1a> lw	a5,12(a5)
1c009802 <prvResetNextTaskUnblockTime+0x1c> lw	a5,12(a5)
1c009804 <prvResetNextTaskUnblockTime+0x1e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3962
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1c009808 <prvResetNextTaskUnblockTime+0x22> lw	a5,-20(s0)
1c00980c <prvResetNextTaskUnblockTime+0x26> lw	a4,4(a5)
1c00980e <prvResetNextTaskUnblockTime+0x28> sw	a4,1028(gp) # 1c00eb6c <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3964
}
1c009812 <prvResetNextTaskUnblockTime+0x2c> nop
1c009814 <prvResetNextTaskUnblockTime+0x2e> lw	s0,28(sp)
1c009816 <prvResetNextTaskUnblockTime+0x30> addi	sp,sp,32
1c009818 <prvResetNextTaskUnblockTime+0x32> ret
xTaskGetSchedulerState():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3987
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
1c00981a <xTaskGetSchedulerState> addi	sp,sp,-32
1c00981c <xTaskGetSchedulerState+0x2> sw	s0,28(sp)
1c00981e <xTaskGetSchedulerState+0x4> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3990
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
1c009820 <xTaskGetSchedulerState+0x6> lw	a5,1012(gp) # 1c00eb5c <xSchedulerRunning>
1c009824 <xTaskGetSchedulerState+0xa> bnez	a5,1c00982e <xTaskGetSchedulerState+0x14>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3992
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
1c009826 <xTaskGetSchedulerState+0xc> li	a5,1
1c009828 <xTaskGetSchedulerState+0xe> sw	a5,-20(s0)
1c00982c <xTaskGetSchedulerState+0x12> j	1c009840 <xTaskGetSchedulerState+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3996
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c00982e <xTaskGetSchedulerState+0x14> lw	a5,1032(gp) # 1c00eb70 <uxSchedulerSuspended>
1c009832 <xTaskGetSchedulerState+0x18> bnez	a5,1c00983c <xTaskGetSchedulerState+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3998
			{
				xReturn = taskSCHEDULER_RUNNING;
1c009834 <xTaskGetSchedulerState+0x1a> li	a5,2
1c009836 <xTaskGetSchedulerState+0x1c> sw	a5,-20(s0)
1c00983a <xTaskGetSchedulerState+0x20> j	1c009840 <xTaskGetSchedulerState+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4002
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
1c00983c <xTaskGetSchedulerState+0x22> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4006
			}
		}

		return xReturn;
1c009840 <xTaskGetSchedulerState+0x26> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4007
	}
1c009844 <xTaskGetSchedulerState+0x2a> mv	a0,a5
1c009846 <xTaskGetSchedulerState+0x2c> lw	s0,28(sp)
1c009848 <xTaskGetSchedulerState+0x2e> addi	sp,sp,32
1c00984a <xTaskGetSchedulerState+0x30> ret
xTaskPriorityDisinherit():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4105
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
1c00984c <xTaskPriorityDisinherit> addi	sp,sp,-48
1c00984e <xTaskPriorityDisinherit+0x2> sw	ra,44(sp)
1c009850 <xTaskPriorityDisinherit+0x4> sw	s0,40(sp)
1c009852 <xTaskPriorityDisinherit+0x6> addi	s0,sp,48
1c009854 <xTaskPriorityDisinherit+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4106
	TCB_t * const pxTCB = pxMutexHolder;
1c009858 <xTaskPriorityDisinherit+0xc> lw	a5,-36(s0)
1c00985c <xTaskPriorityDisinherit+0x10> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4107
	BaseType_t xReturn = pdFALSE;
1c009860 <xTaskPriorityDisinherit+0x14> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4109

		if( pxMutexHolder != NULL )
1c009864 <xTaskPriorityDisinherit+0x18> lw	a5,-36(s0)
1c009868 <xTaskPriorityDisinherit+0x1c> beqz	a5,1c00991a <xTaskPriorityDisinherit+0xce>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4115
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1c00986a <xTaskPriorityDisinherit+0x1e> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c00986e <xTaskPriorityDisinherit+0x22> lw	a4,-24(s0)
1c009872 <xTaskPriorityDisinherit+0x26> beq	a4,a5,1c00987c <xTaskPriorityDisinherit+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4115 (discriminator 1)
1c009876 <xTaskPriorityDisinherit+0x2a> csrci	mstatus,8
1c00987a <xTaskPriorityDisinherit+0x2e> j	1c00987a <xTaskPriorityDisinherit+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4116
			configASSERT( pxTCB->uxMutexesHeld );
1c00987c <xTaskPriorityDisinherit+0x30> lw	a5,-24(s0)
1c009880 <xTaskPriorityDisinherit+0x34> lw	a5,84(a5)
1c009882 <xTaskPriorityDisinherit+0x36> bnez	a5,1c00988a <xTaskPriorityDisinherit+0x3e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4116 (discriminator 1)
1c009884 <xTaskPriorityDisinherit+0x38> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4116 (discriminator 2)
1c009888 <xTaskPriorityDisinherit+0x3c> j	1c009888 <xTaskPriorityDisinherit+0x3c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4117
			( pxTCB->uxMutexesHeld )--;
1c00988a <xTaskPriorityDisinherit+0x3e> lw	a5,-24(s0)
1c00988e <xTaskPriorityDisinherit+0x42> lw	a5,84(a5)
1c009890 <xTaskPriorityDisinherit+0x44> addi	a4,a5,-1
1c009894 <xTaskPriorityDisinherit+0x48> lw	a5,-24(s0)
1c009898 <xTaskPriorityDisinherit+0x4c> sw	a4,84(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4121

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1c00989a <xTaskPriorityDisinherit+0x4e> lw	a5,-24(s0)
1c00989e <xTaskPriorityDisinherit+0x52> lw	a4,44(a5)
1c0098a0 <xTaskPriorityDisinherit+0x54> lw	a5,-24(s0)
1c0098a4 <xTaskPriorityDisinherit+0x58> lw	a5,80(a5)
1c0098a6 <xTaskPriorityDisinherit+0x5a> beq	a4,a5,1c00991a <xTaskPriorityDisinherit+0xce>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4124
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1c0098aa <xTaskPriorityDisinherit+0x5e> lw	a5,-24(s0)
1c0098ae <xTaskPriorityDisinherit+0x62> lw	a5,84(a5)
1c0098b0 <xTaskPriorityDisinherit+0x64> bnez	a5,1c00991a <xTaskPriorityDisinherit+0xce>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4131
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c0098b2 <xTaskPriorityDisinherit+0x66> lw	a5,-24(s0)
1c0098b6 <xTaskPriorityDisinherit+0x6a> addi	a5,a5,4
1c0098b8 <xTaskPriorityDisinherit+0x6c> mv	a0,a5
1c0098ba <xTaskPriorityDisinherit+0x6e> jal	ra,1c008b0e <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4143
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1c0098be <xTaskPriorityDisinherit+0x72> lw	a5,-24(s0)
1c0098c2 <xTaskPriorityDisinherit+0x76> lw	a4,80(a5)
1c0098c4 <xTaskPriorityDisinherit+0x78> lw	a5,-24(s0)
1c0098c8 <xTaskPriorityDisinherit+0x7c> sw	a4,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4148

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c0098ca <xTaskPriorityDisinherit+0x7e> lw	a5,-24(s0)
1c0098ce <xTaskPriorityDisinherit+0x82> lw	a5,44(a5)
1c0098d0 <xTaskPriorityDisinherit+0x84> li	a4,5
1c0098d2 <xTaskPriorityDisinherit+0x86> sub	a4,a4,a5
1c0098d4 <xTaskPriorityDisinherit+0x88> lw	a5,-24(s0)
1c0098d8 <xTaskPriorityDisinherit+0x8c> sw	a4,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4149
					prvAddTaskToReadyList( pxTCB );
1c0098da <xTaskPriorityDisinherit+0x8e> lw	a5,-24(s0)
1c0098de <xTaskPriorityDisinherit+0x92> lw	a4,44(a5)
1c0098e0 <xTaskPriorityDisinherit+0x94> lw	a5,1008(gp) # 1c00eb58 <uxTopReadyPriority>
1c0098e4 <xTaskPriorityDisinherit+0x98> bgeu	a5,a4,1c0098f2 <xTaskPriorityDisinherit+0xa6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4149 (discriminator 1)
1c0098e8 <xTaskPriorityDisinherit+0x9c> lw	a5,-24(s0)
1c0098ec <xTaskPriorityDisinherit+0xa0> lw	a4,44(a5)
1c0098ee <xTaskPriorityDisinherit+0xa2> sw	a4,1008(gp) # 1c00eb58 <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4149 (discriminator 3)
1c0098f2 <xTaskPriorityDisinherit+0xa6> lw	a5,-24(s0)
1c0098f6 <xTaskPriorityDisinherit+0xaa> lw	a4,44(a5)
1c0098f8 <xTaskPriorityDisinherit+0xac> mv	a5,a4
1c0098fa <xTaskPriorityDisinherit+0xae> slli	a5,a5,0x2
1c0098fc <xTaskPriorityDisinherit+0xb0> add	a5,a5,a4
1c0098fe <xTaskPriorityDisinherit+0xb2> slli	a5,a5,0x2
1c009900 <xTaskPriorityDisinherit+0xb4> addi	a4,gp,-1480 # 1c00e1a0 <_edata>
1c009904 <xTaskPriorityDisinherit+0xb8> add	a4,a4,a5
1c009906 <xTaskPriorityDisinherit+0xba> lw	a5,-24(s0)
1c00990a <xTaskPriorityDisinherit+0xbe> addi	a5,a5,4
1c00990c <xTaskPriorityDisinherit+0xc0> mv	a1,a5
1c00990e <xTaskPriorityDisinherit+0xc2> mv	a0,a4
1c009910 <xTaskPriorityDisinherit+0xc4> jal	ra,1c008a06 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4159 (discriminator 3)
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
1c009914 <xTaskPriorityDisinherit+0xc8> li	a5,1
1c009916 <xTaskPriorityDisinherit+0xca> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4176
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
1c00991a <xTaskPriorityDisinherit+0xce> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4177
	}
1c00991e <xTaskPriorityDisinherit+0xd2> mv	a0,a5
1c009920 <xTaskPriorityDisinherit+0xd4> lw	ra,44(sp)
1c009922 <xTaskPriorityDisinherit+0xd6> lw	s0,40(sp)
1c009924 <xTaskPriorityDisinherit+0xd8> addi	sp,sp,48
1c009926 <xTaskPriorityDisinherit+0xda> ret
vTaskEnterCritical():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4290
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
1c009928 <vTaskEnterCritical> addi	sp,sp,-16
1c00992a <vTaskEnterCritical+0x2> sw	s0,12(sp)
1c00992c <vTaskEnterCritical+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4291
		portDISABLE_INTERRUPTS();
1c00992e <vTaskEnterCritical+0x6> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4293

		if( xSchedulerRunning != pdFALSE )
1c009932 <vTaskEnterCritical+0xa> lw	a5,1012(gp) # 1c00eb5c <xSchedulerRunning>
1c009936 <vTaskEnterCritical+0xe> beqz	a5,1c009946 <vTaskEnterCritical+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4295
		{
			( pxCurrentTCB->uxCriticalNesting )++;
1c009938 <vTaskEnterCritical+0x10> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c00993c <vTaskEnterCritical+0x14> lw	a4,68(a5)
1c00993e <vTaskEnterCritical+0x16> addi	a4,a4,1
1c009940 <vTaskEnterCritical+0x18> sw	a4,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4303
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
1c009942 <vTaskEnterCritical+0x1a> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4312
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1c009946 <vTaskEnterCritical+0x1e> nop
1c009948 <vTaskEnterCritical+0x20> lw	s0,12(sp)
1c00994a <vTaskEnterCritical+0x22> addi	sp,sp,16
1c00994c <vTaskEnterCritical+0x24> ret
vTaskExitCritical():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4320
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
1c00994e <vTaskExitCritical> addi	sp,sp,-16
1c009950 <vTaskExitCritical+0x2> sw	s0,12(sp)
1c009952 <vTaskExitCritical+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4321
		if( xSchedulerRunning != pdFALSE )
1c009954 <vTaskExitCritical+0x6> lw	a5,1012(gp) # 1c00eb5c <xSchedulerRunning>
1c009958 <vTaskExitCritical+0xa> beqz	a5,1c009978 <vTaskExitCritical+0x2a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4323
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
1c00995a <vTaskExitCritical+0xc> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c00995e <vTaskExitCritical+0x10> lw	a5,68(a5)
1c009960 <vTaskExitCritical+0x12> beqz	a5,1c009978 <vTaskExitCritical+0x2a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4325
			{
				( pxCurrentTCB->uxCriticalNesting )--;
1c009962 <vTaskExitCritical+0x14> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c009966 <vTaskExitCritical+0x18> lw	a4,68(a5)
1c009968 <vTaskExitCritical+0x1a> addi	a4,a4,-1
1c00996a <vTaskExitCritical+0x1c> sw	a4,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4327

				if( pxCurrentTCB->uxCriticalNesting == 0U )
1c00996c <vTaskExitCritical+0x1e> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c009970 <vTaskExitCritical+0x22> lw	a5,68(a5)
1c009972 <vTaskExitCritical+0x24> bnez	a5,1c009978 <vTaskExitCritical+0x2a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4329
				{
					portENABLE_INTERRUPTS();
1c009974 <vTaskExitCritical+0x26> csrsi	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4345
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1c009978 <vTaskExitCritical+0x2a> nop
1c00997a <vTaskExitCritical+0x2c> lw	s0,12(sp)
1c00997c <vTaskExitCritical+0x2e> addi	sp,sp,16
1c00997e <vTaskExitCritical+0x30> ret
prvAddCurrentTaskToDelayedList():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5178

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1c009980 <prvAddCurrentTaskToDelayedList> addi	sp,sp,-48
1c009982 <prvAddCurrentTaskToDelayedList+0x2> sw	ra,44(sp)
1c009984 <prvAddCurrentTaskToDelayedList+0x4> sw	s0,40(sp)
1c009986 <prvAddCurrentTaskToDelayedList+0x6> addi	s0,sp,48
1c009988 <prvAddCurrentTaskToDelayedList+0x8> sw	a0,-36(s0)
1c00998c <prvAddCurrentTaskToDelayedList+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5180
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1c009990 <prvAddCurrentTaskToDelayedList+0x10> lw	a5,1004(gp) # 1c00eb54 <xTickCount>
1c009994 <prvAddCurrentTaskToDelayedList+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5187
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
1c009998 <prvAddCurrentTaskToDelayedList+0x18> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c00999c <prvAddCurrentTaskToDelayedList+0x1c> sb	zero,1157(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5193
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c0099a0 <prvAddCurrentTaskToDelayedList+0x20> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0099a4 <prvAddCurrentTaskToDelayedList+0x24> addi	a5,a5,4
1c0099a6 <prvAddCurrentTaskToDelayedList+0x26> mv	a0,a5
1c0099a8 <prvAddCurrentTaskToDelayedList+0x28> jal	ra,1c008b0e <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5206
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1c0099ac <prvAddCurrentTaskToDelayedList+0x2c> lw	a4,-36(s0)
1c0099b0 <prvAddCurrentTaskToDelayedList+0x30> li	a5,-1
1c0099b2 <prvAddCurrentTaskToDelayedList+0x32> bne	a4,a5,1c0099ce <prvAddCurrentTaskToDelayedList+0x4e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5206 (discriminator 1)
1c0099b6 <prvAddCurrentTaskToDelayedList+0x36> lw	a5,-40(s0)
1c0099ba <prvAddCurrentTaskToDelayedList+0x3a> beqz	a5,1c0099ce <prvAddCurrentTaskToDelayedList+0x4e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5211
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0099bc <prvAddCurrentTaskToDelayedList+0x3c> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0099c0 <prvAddCurrentTaskToDelayedList+0x40> addi	a5,a5,4
1c0099c2 <prvAddCurrentTaskToDelayedList+0x42> mv	a1,a5
1c0099c4 <prvAddCurrentTaskToDelayedList+0x44> addi	a0,gp,-1360 # 1c00e218 <xSuspendedTaskList>
1c0099c8 <prvAddCurrentTaskToDelayedList+0x48> jal	ra,1c008a06 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5286

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1c0099cc <prvAddCurrentTaskToDelayedList+0x4c> j	1c009a2c <prvAddCurrentTaskToDelayedList+0xac>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5218
			xTimeToWake = xConstTickCount + xTicksToWait;
1c0099ce <prvAddCurrentTaskToDelayedList+0x4e> lw	a4,-20(s0)
1c0099d2 <prvAddCurrentTaskToDelayedList+0x52> lw	a5,-36(s0)
1c0099d6 <prvAddCurrentTaskToDelayedList+0x56> add	a5,a5,a4
1c0099d8 <prvAddCurrentTaskToDelayedList+0x58> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5221
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1c0099dc <prvAddCurrentTaskToDelayedList+0x5c> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0099e0 <prvAddCurrentTaskToDelayedList+0x60> lw	a4,-24(s0)
1c0099e4 <prvAddCurrentTaskToDelayedList+0x64> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5223
			if( xTimeToWake < xConstTickCount )
1c0099e6 <prvAddCurrentTaskToDelayedList+0x66> lw	a4,-24(s0)
1c0099ea <prvAddCurrentTaskToDelayedList+0x6a> lw	a5,-20(s0)
1c0099ee <prvAddCurrentTaskToDelayedList+0x6e> bgeu	a4,a5,1c009a06 <prvAddCurrentTaskToDelayedList+0x86>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5227
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0099f2 <prvAddCurrentTaskToDelayedList+0x72> lw	a4,996(gp) # 1c00eb4c <pxOverflowDelayedTaskList>
1c0099f6 <prvAddCurrentTaskToDelayedList+0x76> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c0099fa <prvAddCurrentTaskToDelayedList+0x7a> addi	a5,a5,4
1c0099fc <prvAddCurrentTaskToDelayedList+0x7c> mv	a1,a5
1c0099fe <prvAddCurrentTaskToDelayedList+0x7e> mv	a0,a4
1c009a00 <prvAddCurrentTaskToDelayedList+0x80> jal	ra,1c008a6c <vListInsert>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5286
}
1c009a04 <prvAddCurrentTaskToDelayedList+0x84> j	1c009a2c <prvAddCurrentTaskToDelayedList+0xac>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5233
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c009a06 <prvAddCurrentTaskToDelayedList+0x86> lw	a4,992(gp) # 1c00eb48 <pxDelayedTaskList>
1c009a0a <prvAddCurrentTaskToDelayedList+0x8a> lw	a5,988(gp) # 1c00eb44 <pxCurrentTCB>
1c009a0e <prvAddCurrentTaskToDelayedList+0x8e> addi	a5,a5,4
1c009a10 <prvAddCurrentTaskToDelayedList+0x90> mv	a1,a5
1c009a12 <prvAddCurrentTaskToDelayedList+0x92> mv	a0,a4
1c009a14 <prvAddCurrentTaskToDelayedList+0x94> jal	ra,1c008a6c <vListInsert>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5238
				if( xTimeToWake < xNextTaskUnblockTime )
1c009a18 <prvAddCurrentTaskToDelayedList+0x98> lw	a5,1028(gp) # 1c00eb6c <xNextTaskUnblockTime>
1c009a1c <prvAddCurrentTaskToDelayedList+0x9c> lw	a4,-24(s0)
1c009a20 <prvAddCurrentTaskToDelayedList+0xa0> bgeu	a4,a5,1c009a2c <prvAddCurrentTaskToDelayedList+0xac>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5240
					xNextTaskUnblockTime = xTimeToWake;
1c009a24 <prvAddCurrentTaskToDelayedList+0xa4> lw	a4,-24(s0)
1c009a28 <prvAddCurrentTaskToDelayedList+0xa8> sw	a4,1028(gp) # 1c00eb6c <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5286
}
1c009a2c <prvAddCurrentTaskToDelayedList+0xac> nop
1c009a2e <prvAddCurrentTaskToDelayedList+0xae> lw	ra,44(sp)
1c009a30 <prvAddCurrentTaskToDelayedList+0xb0> lw	s0,40(sp)
1c009a32 <prvAddCurrentTaskToDelayedList+0xb2> addi	sp,sp,48
1c009a34 <prvAddCurrentTaskToDelayedList+0xb4> ret
pvPortMalloc():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:119
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1c009a36 <pvPortMalloc> addi	sp,sp,-64
1c009a38 <pvPortMalloc+0x2> sw	ra,60(sp)
1c009a3a <pvPortMalloc+0x4> sw	s0,56(sp)
1c009a3c <pvPortMalloc+0x6> addi	s0,sp,64
1c009a3e <pvPortMalloc+0x8> sw	a0,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:122
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
1c009a42 <pvPortMalloc+0xc> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:124

	vTaskSuspendAll();
1c009a46 <pvPortMalloc+0x10> jal	ra,1c009212 <vTaskSuspendAll>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:128
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
1c009a4a <pvPortMalloc+0x14> lw	a5,1052(gp) # 1c00eb84 <xHeapHasBeenInitialised.2470>
1c009a4e <pvPortMalloc+0x18> bnez	a5,1c009a58 <pvPortMalloc+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:130
		{
			prvHeapInit();
1c009a50 <pvPortMalloc+0x1a> jal	1c009ba6 <prvHeapInit>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:131
			xHeapHasBeenInitialised = pdTRUE;
1c009a52 <pvPortMalloc+0x1c> li	a4,1
1c009a54 <pvPortMalloc+0x1e> sw	a4,1052(gp) # 1c00eb84 <xHeapHasBeenInitialised.2470>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:136
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
1c009a58 <pvPortMalloc+0x22> lw	a5,-52(s0)
1c009a5c <pvPortMalloc+0x26> beqz	a5,1c009a80 <pvPortMalloc+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:138
		{
			xWantedSize += heapSTRUCT_SIZE;
1c009a5e <pvPortMalloc+0x28> li	a5,16
1c009a60 <pvPortMalloc+0x2a> mv	a4,a5
1c009a62 <pvPortMalloc+0x2c> lw	a5,-52(s0)
1c009a66 <pvPortMalloc+0x30> add	a5,a5,a4
1c009a68 <pvPortMalloc+0x32> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:141

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
1c009a6c <pvPortMalloc+0x36> lw	a5,-52(s0)
1c009a70 <pvPortMalloc+0x3a> andi	a5,a5,15
1c009a72 <pvPortMalloc+0x3c> beqz	a5,1c009a80 <pvPortMalloc+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:144
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1c009a74 <pvPortMalloc+0x3e> lw	a5,-52(s0)
1c009a78 <pvPortMalloc+0x42> andi	a5,a5,-16
1c009a7a <pvPortMalloc+0x44> addi	a5,a5,16
1c009a7c <pvPortMalloc+0x46> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:148
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
1c009a80 <pvPortMalloc+0x4a> lw	a5,-52(s0)
1c009a84 <pvPortMalloc+0x4e> beqz	a5,1c009b8a <pvPortMalloc+0x154>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:148 (discriminator 1)
1c009a88 <pvPortMalloc+0x52> lw	a4,-52(s0)
1c009a8c <pvPortMalloc+0x56> lui	a5,0x10
1c009a8e <pvPortMalloc+0x58> addi	a5,a5,-17
1c009a90 <pvPortMalloc+0x5a> bltu	a5,a4,1c009b8a <pvPortMalloc+0x154>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:152
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
1c009a94 <pvPortMalloc+0x5e> addi	a5,gp,1036 # 1c00eb74 <xStart>
1c009a98 <pvPortMalloc+0x62> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:153
			pxBlock = xStart.pxNextFreeBlock;
1c009a9c <pvPortMalloc+0x66> addi	a5,gp,1036 # 1c00eb74 <xStart>
1c009aa0 <pvPortMalloc+0x6a> lw	a5,0(a5)
1c009aa2 <pvPortMalloc+0x6c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:154
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1c009aa6 <pvPortMalloc+0x70> j	1c009aba <pvPortMalloc+0x84>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:156
			{
				pxPreviousBlock = pxBlock;
1c009aa8 <pvPortMalloc+0x72> lw	a5,-20(s0)
1c009aac <pvPortMalloc+0x76> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:157
				pxBlock = pxBlock->pxNextFreeBlock;
1c009ab0 <pvPortMalloc+0x7a> lw	a5,-20(s0)
1c009ab4 <pvPortMalloc+0x7e> lw	a5,0(a5)
1c009ab6 <pvPortMalloc+0x80> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:154
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1c009aba <pvPortMalloc+0x84> lw	a5,-20(s0)
1c009abe <pvPortMalloc+0x88> lw	a5,4(a5)
1c009ac0 <pvPortMalloc+0x8a> lw	a4,-52(s0)
1c009ac4 <pvPortMalloc+0x8e> bgeu	a5,a4,1c009ad0 <pvPortMalloc+0x9a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:154 (discriminator 1)
1c009ac8 <pvPortMalloc+0x92> lw	a5,-20(s0)
1c009acc <pvPortMalloc+0x96> lw	a5,0(a5)
1c009ace <pvPortMalloc+0x98> bnez	a5,1c009aa8 <pvPortMalloc+0x72>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:161
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
1c009ad0 <pvPortMalloc+0x9a> lw	a4,-20(s0)
1c009ad4 <pvPortMalloc+0x9e> addi	a5,gp,1044 # 1c00eb7c <xEnd>
1c009ad8 <pvPortMalloc+0xa2> beq	a4,a5,1c009b8a <pvPortMalloc+0x154>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:165
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
1c009adc <pvPortMalloc+0xa6> lw	a5,-24(s0)
1c009ae0 <pvPortMalloc+0xaa> lw	a5,0(a5)
1c009ae2 <pvPortMalloc+0xac> li	a4,16
1c009ae4 <pvPortMalloc+0xae> add	a5,a5,a4
1c009ae6 <pvPortMalloc+0xb0> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:169

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1c009aea <pvPortMalloc+0xb4> lw	a5,-20(s0)
1c009aee <pvPortMalloc+0xb8> lw	a4,0(a5)
1c009af0 <pvPortMalloc+0xba> lw	a5,-24(s0)
1c009af4 <pvPortMalloc+0xbe> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:172

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1c009af6 <pvPortMalloc+0xc0> lw	a5,-20(s0)
1c009afa <pvPortMalloc+0xc4> lw	a4,4(a5)
1c009afc <pvPortMalloc+0xc6> lw	a5,-52(s0)
1c009b00 <pvPortMalloc+0xca> sub	a5,a4,a5
1c009b04 <pvPortMalloc+0xce> li	a4,16
1c009b06 <pvPortMalloc+0xd0> slli	a4,a4,0x1
1c009b08 <pvPortMalloc+0xd2> bgeu	a4,a5,1c009b7a <pvPortMalloc+0x144>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:177
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1c009b0c <pvPortMalloc+0xd6> lw	a4,-20(s0)
1c009b10 <pvPortMalloc+0xda> lw	a5,-52(s0)
1c009b14 <pvPortMalloc+0xde> add	a5,a5,a4
1c009b16 <pvPortMalloc+0xe0> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:181

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1c009b1a <pvPortMalloc+0xe4> lw	a5,-20(s0)
1c009b1e <pvPortMalloc+0xe8> lw	a4,4(a5)
1c009b20 <pvPortMalloc+0xea> lw	a5,-52(s0)
1c009b24 <pvPortMalloc+0xee> sub	a4,a4,a5
1c009b26 <pvPortMalloc+0xf0> lw	a5,-36(s0)
1c009b2a <pvPortMalloc+0xf4> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:182
					pxBlock->xBlockSize = xWantedSize;
1c009b2c <pvPortMalloc+0xf6> lw	a5,-20(s0)
1c009b30 <pvPortMalloc+0xfa> lw	a4,-52(s0)
1c009b34 <pvPortMalloc+0xfe> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:185

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
1c009b36 <pvPortMalloc+0x100> lw	a5,-36(s0)
1c009b3a <pvPortMalloc+0x104> lw	a5,4(a5)
1c009b3c <pvPortMalloc+0x106> sw	a5,-40(s0)
1c009b40 <pvPortMalloc+0x10a> addi	a5,gp,1036 # 1c00eb74 <xStart>
1c009b44 <pvPortMalloc+0x10e> sw	a5,-32(s0)
1c009b48 <pvPortMalloc+0x112> j	1c009b54 <pvPortMalloc+0x11e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:185 (discriminator 3)
1c009b4a <pvPortMalloc+0x114> lw	a5,-32(s0)
1c009b4e <pvPortMalloc+0x118> lw	a5,0(a5)
1c009b50 <pvPortMalloc+0x11a> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:185 (discriminator 1)
1c009b54 <pvPortMalloc+0x11e> lw	a5,-32(s0)
1c009b58 <pvPortMalloc+0x122> lw	a5,0(a5)
1c009b5a <pvPortMalloc+0x124> lw	a5,4(a5)
1c009b5c <pvPortMalloc+0x126> lw	a4,-40(s0)
1c009b60 <pvPortMalloc+0x12a> bltu	a5,a4,1c009b4a <pvPortMalloc+0x114>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:185 (discriminator 4)
1c009b64 <pvPortMalloc+0x12e> lw	a5,-32(s0)
1c009b68 <pvPortMalloc+0x132> lw	a4,0(a5)
1c009b6a <pvPortMalloc+0x134> lw	a5,-36(s0)
1c009b6e <pvPortMalloc+0x138> sw	a4,0(a5)
1c009b70 <pvPortMalloc+0x13a> lw	a5,-32(s0)
1c009b74 <pvPortMalloc+0x13e> lw	a4,-36(s0)
1c009b78 <pvPortMalloc+0x142> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:188
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
1c009b7a <pvPortMalloc+0x144> lw	a4,-1492(gp) # 1c00e194 <xFreeBytesRemaining>
1c009b7e <pvPortMalloc+0x148> lw	a5,-20(s0)
1c009b82 <pvPortMalloc+0x14c> lw	a5,4(a5)
1c009b84 <pvPortMalloc+0x14e> sub	a4,a4,a5
1c009b86 <pvPortMalloc+0x150> sw	a4,-1492(gp) # 1c00e194 <xFreeBytesRemaining>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:194
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1c009b8a <pvPortMalloc+0x154> jal	ra,1c00922c <xTaskResumeAll>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:198

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1c009b8e <pvPortMalloc+0x158> lw	a5,-28(s0)
1c009b92 <pvPortMalloc+0x15c> bnez	a5,1c009b98 <pvPortMalloc+0x162>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:201
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1c009b94 <pvPortMalloc+0x15e> jal	ra,1c00b654 <vApplicationMallocFailedHook>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:206
		}
	}
	#endif

	return pvReturn;
1c009b98 <pvPortMalloc+0x162> lw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:207
}
1c009b9c <pvPortMalloc+0x166> mv	a0,a5
1c009b9e <pvPortMalloc+0x168> lw	ra,60(sp)
1c009ba0 <pvPortMalloc+0x16a> lw	s0,56(sp)
1c009ba2 <pvPortMalloc+0x16c> addi	sp,sp,64
1c009ba4 <pvPortMalloc+0x16e> ret
prvHeapInit():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:250
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
1c009ba6 <prvHeapInit> addi	sp,sp,-32
1c009ba8 <prvHeapInit+0x2> sw	s0,28(sp)
1c009baa <prvHeapInit+0x4> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:255
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1c009bac <prvHeapInit+0x6> lui	a5,0x1c00f
1c009bb0 <prvHeapInit+0xa> addi	a5,a5,-128 # 1c00ef80 <ucHeap+0x10>
1c009bb4 <prvHeapInit+0xe> andi	a5,a5,-16
1c009bb6 <prvHeapInit+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:259

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1c009bba <prvHeapInit+0x14> addi	a5,gp,1036 # 1c00eb74 <xStart>
1c009bbe <prvHeapInit+0x18> lw	a4,-20(s0)
1c009bc2 <prvHeapInit+0x1c> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:260
	xStart.xBlockSize = ( size_t ) 0;
1c009bc4 <prvHeapInit+0x1e> addi	a5,gp,1036 # 1c00eb74 <xStart>
1c009bc8 <prvHeapInit+0x22> sw	zero,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:263

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
1c009bcc <prvHeapInit+0x26> addi	a5,gp,1044 # 1c00eb7c <xEnd>
1c009bd0 <prvHeapInit+0x2a> lui	a4,0x10
1c009bd2 <prvHeapInit+0x2c> addi	a4,a4,-16
1c009bd4 <prvHeapInit+0x2e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:264
	xEnd.pxNextFreeBlock = NULL;
1c009bd6 <prvHeapInit+0x30> addi	a5,gp,1044 # 1c00eb7c <xEnd>
1c009bda <prvHeapInit+0x34> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:268

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
1c009bde <prvHeapInit+0x38> lw	a5,-20(s0)
1c009be2 <prvHeapInit+0x3c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:269
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
1c009be6 <prvHeapInit+0x40> lw	a5,-24(s0)
1c009bea <prvHeapInit+0x44> lui	a4,0x10
1c009bec <prvHeapInit+0x46> addi	a4,a4,-16
1c009bee <prvHeapInit+0x48> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:270
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
1c009bf0 <prvHeapInit+0x4a> lw	a5,-24(s0)
1c009bf4 <prvHeapInit+0x4e> addi	a4,gp,1044 # 1c00eb7c <xEnd>
1c009bf8 <prvHeapInit+0x52> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:271
}
1c009bfa <prvHeapInit+0x54> nop
1c009bfc <prvHeapInit+0x56> lw	s0,28(sp)
1c009bfe <prvHeapInit+0x58> addi	sp,sp,32
1c009c00 <prvHeapInit+0x5a> ret
hal_get_apb_i2cs_slave_address():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:6
#include "target/core-v-mcu/include/core-v-mcu-config.h"
#include "hal/include/hal_apb_i2cs_reg_defs.h"


uint8_t hal_get_apb_i2cs_slave_address(void)
{
1c009c02 <hal_get_apb_i2cs_slave_address> addi	sp,sp,-32
1c009c04 <hal_get_apb_i2cs_slave_address+0x2> sw	s0,28(sp)
1c009c06 <hal_get_apb_i2cs_slave_address+0x4> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:8

	ApbI2cs_t *apbI2cSlave = (ApbI2cs_t*)I2CS_START_ADDR;
1c009c08 <hal_get_apb_i2cs_slave_address+0x6> lui	a5,0x1a107
1c009c0c <hal_get_apb_i2cs_slave_address+0xa> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:9
	return (uint8_t )apbI2cSlave->i2cs_dev_address_b.slave_addr;
1c009c10 <hal_get_apb_i2cs_slave_address+0xe> lw	a5,-20(s0)
1c009c14 <hal_get_apb_i2cs_slave_address+0x12> lw	a5,0(a5)
1c009c16 <hal_get_apb_i2cs_slave_address+0x14> andi	a5,a5,127
1c009c1a <hal_get_apb_i2cs_slave_address+0x18> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:10
}
1c009c1e <hal_get_apb_i2cs_slave_address+0x1c> mv	a0,a5
1c009c20 <hal_get_apb_i2cs_slave_address+0x1e> lw	s0,28(sp)
1c009c22 <hal_get_apb_i2cs_slave_address+0x20> addi	sp,sp,32
1c009c24 <hal_get_apb_i2cs_slave_address+0x22> ret
hal_set_apb_i2cs_slave_address():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:13

void hal_set_apb_i2cs_slave_address(uint8_t aSlaveAddress)
{
1c009c26 <hal_set_apb_i2cs_slave_address> addi	sp,sp,-48
1c009c28 <hal_set_apb_i2cs_slave_address+0x2> sw	s0,44(sp)
1c009c2a <hal_set_apb_i2cs_slave_address+0x4> addi	s0,sp,48
1c009c2c <hal_set_apb_i2cs_slave_address+0x6> mv	a5,a0
1c009c2e <hal_set_apb_i2cs_slave_address+0x8> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:15

	ApbI2cs_t *apbI2cSlave = (ApbI2cs_t*) I2CS_START_ADDR;
1c009c32 <hal_set_apb_i2cs_slave_address+0xc> lui	a5,0x1a107
1c009c36 <hal_set_apb_i2cs_slave_address+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:16
	apbI2cSlave->i2cs_dev_address_b.slave_addr = aSlaveAddress;
1c009c3a <hal_set_apb_i2cs_slave_address+0x14> lbu	a5,-33(s0)
1c009c3e <hal_set_apb_i2cs_slave_address+0x18> andi	a5,a5,127
1c009c42 <hal_set_apb_i2cs_slave_address+0x1c> andi	a4,a5,255
1c009c46 <hal_set_apb_i2cs_slave_address+0x20> lw	a5,-20(s0)
1c009c4a <hal_set_apb_i2cs_slave_address+0x24> andi	a2,a4,127
1c009c4e <hal_set_apb_i2cs_slave_address+0x28> lbu	a4,0(a5) # 1a107000 <__stack_size+0x1a106800>
1c009c52 <hal_set_apb_i2cs_slave_address+0x2c> andi	a4,a4,-128
1c009c56 <hal_set_apb_i2cs_slave_address+0x30> mv	a3,a4
1c009c58 <hal_set_apb_i2cs_slave_address+0x32> mv	a4,a2
1c009c5a <hal_set_apb_i2cs_slave_address+0x34> or	a4,a4,a3
1c009c5c <hal_set_apb_i2cs_slave_address+0x36> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:17
}
1c009c60 <hal_set_apb_i2cs_slave_address+0x3a> nop
1c009c62 <hal_set_apb_i2cs_slave_address+0x3c> lw	s0,44(sp)
1c009c64 <hal_set_apb_i2cs_slave_address+0x3e> addi	sp,sp,48
1c009c66 <hal_set_apb_i2cs_slave_address+0x40> ret
hal_set_apb_i2cs_slave_on_off():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:20

uint8_t hal_set_apb_i2cs_slave_on_off(uint8_t aStatus)
{
1c009c68 <hal_set_apb_i2cs_slave_on_off> addi	sp,sp,-48
1c009c6a <hal_set_apb_i2cs_slave_on_off+0x2> sw	s0,44(sp)
1c009c6c <hal_set_apb_i2cs_slave_on_off+0x4> addi	s0,sp,48
1c009c6e <hal_set_apb_i2cs_slave_on_off+0x6> mv	a5,a0
1c009c70 <hal_set_apb_i2cs_slave_on_off+0x8> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:22

	ApbI2cs_t *apbI2cSlave = (ApbI2cs_t*)I2CS_START_ADDR;
1c009c74 <hal_set_apb_i2cs_slave_on_off+0xc> lui	a5,0x1a107
1c009c78 <hal_set_apb_i2cs_slave_on_off+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:23
	if( aStatus == 1 )
1c009c7c <hal_set_apb_i2cs_slave_on_off+0x14> lbu	a4,-33(s0)
1c009c80 <hal_set_apb_i2cs_slave_on_off+0x18> li	a5,1
1c009c82 <hal_set_apb_i2cs_slave_on_off+0x1a> bne	a4,a5,1c009c98 <hal_set_apb_i2cs_slave_on_off+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:24
		apbI2cSlave->i2cs_enable_b.ip_enable = 1;
1c009c86 <hal_set_apb_i2cs_slave_on_off+0x1e> lw	a5,-20(s0)
1c009c8a <hal_set_apb_i2cs_slave_on_off+0x22> lbu	a4,4(a5) # 1a107004 <__stack_size+0x1a106804>
1c009c8e <hal_set_apb_i2cs_slave_on_off+0x26> ori	a4,a4,1
1c009c92 <hal_set_apb_i2cs_slave_on_off+0x2a> sb	a4,4(a5)
1c009c96 <hal_set_apb_i2cs_slave_on_off+0x2e> j	1c009cac <hal_set_apb_i2cs_slave_on_off+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:25
	else if( aStatus == 0 )
1c009c98 <hal_set_apb_i2cs_slave_on_off+0x30> lbu	a5,-33(s0)
1c009c9c <hal_set_apb_i2cs_slave_on_off+0x34> bnez	a5,1c009cac <hal_set_apb_i2cs_slave_on_off+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:26
		apbI2cSlave->i2cs_enable_b.ip_enable = 0;
1c009c9e <hal_set_apb_i2cs_slave_on_off+0x36> lw	a5,-20(s0)
1c009ca2 <hal_set_apb_i2cs_slave_on_off+0x3a> lbu	a4,4(a5)
1c009ca6 <hal_set_apb_i2cs_slave_on_off+0x3e> andi	a4,a4,-2
1c009ca8 <hal_set_apb_i2cs_slave_on_off+0x40> sb	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:27
	return (uint8_t)apbI2cSlave->i2cs_enable_b.ip_enable;
1c009cac <hal_set_apb_i2cs_slave_on_off+0x44> lw	a5,-20(s0)
1c009cb0 <hal_set_apb_i2cs_slave_on_off+0x48> lw	a5,4(a5)
1c009cb2 <hal_set_apb_i2cs_slave_on_off+0x4a> andi	a5,a5,1
1c009cb4 <hal_set_apb_i2cs_slave_on_off+0x4c> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:28
}
1c009cb8 <hal_set_apb_i2cs_slave_on_off+0x50> mv	a0,a5
1c009cba <hal_set_apb_i2cs_slave_on_off+0x52> lw	s0,44(sp)
1c009cbc <hal_set_apb_i2cs_slave_on_off+0x54> addi	sp,sp,48
1c009cbe <hal_set_apb_i2cs_slave_on_off+0x56> ret
fc_event_null_event():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:48

static volatile pi_fc_event_handler_t fc_event_handlers[SOC_EU_NB_FC_EVENTS];
static SemaphoreHandle_t  fc_event_semaphores[SOC_EU_NB_FC_EVENTS];

static void fc_event_null_event(void *arg)
{
1c009cc0 <fc_event_null_event> addi	sp,sp,-32
1c009cc2 <fc_event_null_event+0x2> sw	s0,28(sp)
1c009cc4 <fc_event_null_event+0x4> addi	s0,sp,32
1c009cc6 <fc_event_null_event+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:49
	return;
1c009cca <fc_event_null_event+0xa> nop
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:50
}
1c009ccc <fc_event_null_event+0xc> lw	s0,28(sp)
1c009cce <fc_event_null_event+0xe> addi	sp,sp,32
1c009cd0 <fc_event_null_event+0x10> ret
pi_fc_event_handler_init():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:53

void pi_fc_event_handler_init(uint32_t fc_event_irq)
{
1c009cd2 <pi_fc_event_handler_init> addi	sp,sp,-48
1c009cd4 <pi_fc_event_handler_init+0x2> sw	ra,44(sp)
1c009cd6 <pi_fc_event_handler_init+0x4> sw	s0,40(sp)
1c009cd8 <pi_fc_event_handler_init+0x6> addi	s0,sp,48
1c009cda <pi_fc_event_handler_init+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:56
	/* TODO: fix this mess, that should be 8 32-bit writes */
	/* open the mask for fc_soc_event irq */
	for (int i = 0; i < SOC_EU_NB_FC_EVENTS; i++) {
1c009cde <pi_fc_event_handler_init+0xc> sw	zero,-20(s0)
1c009ce2 <pi_fc_event_handler_init+0x10> j	1c009cf6 <pi_fc_event_handler_init+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:57 (discriminator 3)
		pi_fc_event_handler_clear(i);
1c009ce4 <pi_fc_event_handler_init+0x12> lw	a5,-20(s0)
1c009ce8 <pi_fc_event_handler_init+0x16> mv	a0,a5
1c009cea <pi_fc_event_handler_init+0x18> jal	1c009d5a <pi_fc_event_handler_clear>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:56 (discriminator 3)
	for (int i = 0; i < SOC_EU_NB_FC_EVENTS; i++) {
1c009cec <pi_fc_event_handler_init+0x1a> lw	a5,-20(s0)
1c009cf0 <pi_fc_event_handler_init+0x1e> addi	a5,a5,1
1c009cf2 <pi_fc_event_handler_init+0x20> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:56 (discriminator 1)
1c009cf6 <pi_fc_event_handler_init+0x24> lw	a4,-20(s0)
1c009cfa <pi_fc_event_handler_init+0x28> li	a5,167
1c009cfe <pi_fc_event_handler_init+0x2c> bge	a5,a4,1c009ce4 <pi_fc_event_handler_init+0x12>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:61
	}
	/* NVIC_SetVector(fc_event_irq, (uint32_t)__handler_wrapper_light_fc_event_handler);*/
//	irqn_enable(fc_event_irq);
}
1c009d02 <pi_fc_event_handler_init+0x30> nop
1c009d04 <pi_fc_event_handler_init+0x32> lw	ra,44(sp)
1c009d06 <pi_fc_event_handler_init+0x34> lw	s0,40(sp)
1c009d08 <pi_fc_event_handler_init+0x36> addi	sp,sp,48
1c009d0a <pi_fc_event_handler_init+0x38> ret
pi_fc_event_handler_set():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:66

void pi_fc_event_handler_set(uint32_t event_id,
			     pi_fc_event_handler_t event_handler,
					SemaphoreHandle_t semaphoreHandle)
{
1c009d0c <pi_fc_event_handler_set> addi	sp,sp,-32
1c009d0e <pi_fc_event_handler_set+0x2> sw	s0,28(sp)
1c009d10 <pi_fc_event_handler_set+0x4> addi	s0,sp,32
1c009d12 <pi_fc_event_handler_set+0x6> sw	a0,-20(s0)
1c009d16 <pi_fc_event_handler_set+0xa> sw	a1,-24(s0)
1c009d1a <pi_fc_event_handler_set+0xe> sw	a2,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:67
	if (event_handler != NULL) {
1c009d1e <pi_fc_event_handler_set+0x12> lw	a5,-24(s0)
1c009d22 <pi_fc_event_handler_set+0x16> beqz	a5,1c009d3a <pi_fc_event_handler_set+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:68
		fc_event_handlers[event_id] = event_handler;
1c009d24 <pi_fc_event_handler_set+0x18> lui	a5,0x1c00e
1c009d28 <pi_fc_event_handler_set+0x1c> addi	a4,a5,556 # 1c00e22c <fc_event_handlers>
1c009d2c <pi_fc_event_handler_set+0x20> lw	a5,-20(s0)
1c009d30 <pi_fc_event_handler_set+0x24> slli	a5,a5,0x2
1c009d32 <pi_fc_event_handler_set+0x26> add	a5,a5,a4
1c009d34 <pi_fc_event_handler_set+0x28> lw	a4,-24(s0)
1c009d38 <pi_fc_event_handler_set+0x2c> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:70
	}
	if (semaphoreHandle != NULL) {
1c009d3a <pi_fc_event_handler_set+0x2e> lw	a5,-28(s0)
1c009d3e <pi_fc_event_handler_set+0x32> beqz	a5,1c009d52 <pi_fc_event_handler_set+0x46>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:71
		fc_event_semaphores[event_id] = semaphoreHandle;
1c009d40 <pi_fc_event_handler_set+0x34> addi	a4,gp,-668 # 1c00e4cc <fc_event_semaphores>
1c009d44 <pi_fc_event_handler_set+0x38> lw	a5,-20(s0)
1c009d48 <pi_fc_event_handler_set+0x3c> slli	a5,a5,0x2
1c009d4a <pi_fc_event_handler_set+0x3e> add	a5,a5,a4
1c009d4c <pi_fc_event_handler_set+0x40> lw	a4,-28(s0)
1c009d50 <pi_fc_event_handler_set+0x44> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:73
	}
}
1c009d52 <pi_fc_event_handler_set+0x46> nop
1c009d54 <pi_fc_event_handler_set+0x48> lw	s0,28(sp)
1c009d56 <pi_fc_event_handler_set+0x4a> addi	sp,sp,32
1c009d58 <pi_fc_event_handler_set+0x4c> ret
pi_fc_event_handler_clear():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:76

void pi_fc_event_handler_clear(uint32_t event_id)
{
1c009d5a <pi_fc_event_handler_clear> addi	sp,sp,-32
1c009d5c <pi_fc_event_handler_clear+0x2> sw	s0,28(sp)
1c009d5e <pi_fc_event_handler_clear+0x4> addi	s0,sp,32
1c009d60 <pi_fc_event_handler_clear+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:77
	fc_event_handlers[event_id] = (pi_fc_event_handler_t)fc_event_null_event;
1c009d64 <pi_fc_event_handler_clear+0xa> lui	a5,0x1c00e
1c009d68 <pi_fc_event_handler_clear+0xe> addi	a4,a5,556 # 1c00e22c <fc_event_handlers>
1c009d6c <pi_fc_event_handler_clear+0x12> lw	a5,-20(s0)
1c009d70 <pi_fc_event_handler_clear+0x16> slli	a5,a5,0x2
1c009d72 <pi_fc_event_handler_clear+0x18> add	a5,a5,a4
1c009d74 <pi_fc_event_handler_clear+0x1a> lui	a4,0x1c00a
1c009d78 <pi_fc_event_handler_clear+0x1e> addi	a4,a4,-832 # 1c009cc0 <fc_event_null_event>
1c009d7c <pi_fc_event_handler_clear+0x22> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:78
	fc_event_semaphores[event_id] = NULL;
1c009d7e <pi_fc_event_handler_clear+0x24> addi	a4,gp,-668 # 1c00e4cc <fc_event_semaphores>
1c009d82 <pi_fc_event_handler_clear+0x28> lw	a5,-20(s0)
1c009d86 <pi_fc_event_handler_clear+0x2c> slli	a5,a5,0x2
1c009d88 <pi_fc_event_handler_clear+0x2e> add	a5,a5,a4
1c009d8a <pi_fc_event_handler_clear+0x30> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:79
}
1c009d8e <pi_fc_event_handler_clear+0x34> nop
1c009d90 <pi_fc_event_handler_clear+0x36> lw	s0,28(sp)
1c009d92 <pi_fc_event_handler_clear+0x38> addi	sp,sp,32
1c009d94 <pi_fc_event_handler_clear+0x3a> ret
fc_soc_event_handler1():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:83

/* TODO: Use Eric's FIRQ ABI */
void fc_soc_event_handler1 (uint32_t mcause)
{
1c009d96 <fc_soc_event_handler1> addi	sp,sp,-48
1c009d98 <fc_soc_event_handler1+0x2> sw	ra,44(sp)
1c009d9a <fc_soc_event_handler1+0x4> sw	s0,40(sp)
1c009d9c <fc_soc_event_handler1+0x6> addi	s0,sp,48
1c009d9e <fc_soc_event_handler1+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:84
	uint32_t val = 0;
1c009da2 <fc_soc_event_handler1+0xc> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:91

	/* Pop one event element from the FIFO */
	/* TODO: don't use it like this */
	//__asm volatile( "csrs mie, %0" :: "r"(0x06000800) );

	uint32_t event_id = *(uint32_t*)(0x1a106090); // new event fifo address
1c009da6 <fc_soc_event_handler1+0x10> lui	a5,0x1a106
1c009daa <fc_soc_event_handler1+0x14> addi	a5,a5,144 # 1a106090 <__stack_size+0x1a105890>
1c009dae <fc_soc_event_handler1+0x18> lw	a5,0(a5)
1c009db0 <fc_soc_event_handler1+0x1a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:95
//	event_id = NVIC->FIFO;


event_id &= 0xFF;
1c009db4 <fc_soc_event_handler1+0x1e> lw	a5,-24(s0)
1c009db8 <fc_soc_event_handler1+0x22> andi	a5,a5,255
1c009dbc <fc_soc_event_handler1+0x26> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:102
//	if (event_id >= 12) {
//		event_id = event_id & 0x1F;
//	}

	/* redirect to handler with jump table */
	if (fc_event_handlers[event_id] != NULL) {
1c009dc0 <fc_soc_event_handler1+0x2a> lui	a5,0x1c00e
1c009dc4 <fc_soc_event_handler1+0x2e> addi	a4,a5,556 # 1c00e22c <fc_event_handlers>
1c009dc8 <fc_soc_event_handler1+0x32> lw	a5,-24(s0)
1c009dcc <fc_soc_event_handler1+0x36> slli	a5,a5,0x2
1c009dce <fc_soc_event_handler1+0x38> add	a5,a5,a4
1c009dd0 <fc_soc_event_handler1+0x3a> lw	a5,0(a5)
1c009dd2 <fc_soc_event_handler1+0x3c> beqz	a5,1c009dee <fc_soc_event_handler1+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:103
		fc_event_handlers[event_id]((void *)event_id);
1c009dd4 <fc_soc_event_handler1+0x3e> lui	a5,0x1c00e
1c009dd8 <fc_soc_event_handler1+0x42> addi	a4,a5,556 # 1c00e22c <fc_event_handlers>
1c009ddc <fc_soc_event_handler1+0x46> lw	a5,-24(s0)
1c009de0 <fc_soc_event_handler1+0x4a> slli	a5,a5,0x2
1c009de2 <fc_soc_event_handler1+0x4c> add	a5,a5,a4
1c009de4 <fc_soc_event_handler1+0x4e> lw	a4,0(a5)
1c009de6 <fc_soc_event_handler1+0x50> lw	a5,-24(s0)
1c009dea <fc_soc_event_handler1+0x54> mv	a0,a5
1c009dec <fc_soc_event_handler1+0x56> jalr	a4
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:105
	}
	if (fc_event_semaphores[event_id] != NULL) {
1c009dee <fc_soc_event_handler1+0x58> addi	a4,gp,-668 # 1c00e4cc <fc_event_semaphores>
1c009df2 <fc_soc_event_handler1+0x5c> lw	a5,-24(s0)
1c009df6 <fc_soc_event_handler1+0x60> slli	a5,a5,0x2
1c009df8 <fc_soc_event_handler1+0x62> add	a5,a5,a4
1c009dfa <fc_soc_event_handler1+0x64> lw	a5,0(a5)
1c009dfc <fc_soc_event_handler1+0x66> beqz	a5,1c009e26 <fc_soc_event_handler1+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:107
		/* Unblock the task by releasing the semaphore. */
		SemaphoreHandle_t xSemaphoreHandle = fc_event_semaphores[event_id];
1c009dfe <fc_soc_event_handler1+0x68> addi	a4,gp,-668 # 1c00e4cc <fc_event_semaphores>
1c009e02 <fc_soc_event_handler1+0x6c> lw	a5,-24(s0)
1c009e06 <fc_soc_event_handler1+0x70> slli	a5,a5,0x2
1c009e08 <fc_soc_event_handler1+0x72> add	a5,a5,a4
1c009e0a <fc_soc_event_handler1+0x74> lw	a5,0(a5)
1c009e0c <fc_soc_event_handler1+0x76> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:108
		xSemaphoreGiveFromISR( xSemaphoreHandle, &xHigherPriorityTaskWoken );
1c009e10 <fc_soc_event_handler1+0x7a> addi	a1,gp,1056 # 1c00eb88 <xHigherPriorityTaskWoken.4047>
1c009e14 <fc_soc_event_handler1+0x7e> lw	a0,-28(s0)
1c009e18 <fc_soc_event_handler1+0x82> jal	ra,1c008f02 <xQueueGiveFromISR>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:109
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1c009e1c <fc_soc_event_handler1+0x86> lw	a5,1056(gp) # 1c00eb88 <xHigherPriorityTaskWoken.4047>
1c009e20 <fc_soc_event_handler1+0x8a> beqz	a5,1c009e26 <fc_soc_event_handler1+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:109 (discriminator 1)
1c009e22 <fc_soc_event_handler1+0x8c> jal	ra,1c0094ae <vTaskSwitchContext>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:111
	}
}
1c009e26 <fc_soc_event_handler1+0x90> nop
1c009e28 <fc_soc_event_handler1+0x92> lw	ra,44(sp)
1c009e2a <fc_soc_event_handler1+0x94> lw	s0,40(sp)
1c009e2c <fc_soc_event_handler1+0x96> addi	sp,sp,48
1c009e2e <fc_soc_event_handler1+0x98> ret
irq_clint_enable():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:55
	uint32_t val = csr_read_clear(CSR_MSTATUS, MSTATUS_IE);
	return val;
}

uint32_t irq_clint_enable()
{
1c009e30 <irq_clint_enable> addi	sp,sp,-32
1c009e32 <irq_clint_enable+0x2> sw	s0,28(sp)
1c009e34 <irq_clint_enable+0x4> sw	s1,24(sp)
1c009e36 <irq_clint_enable+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:56
	uint32_t val = 0;
1c009e38 <irq_clint_enable+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:57
	val = csr_read(CSR_MSTATUS);
1c009e3c <irq_clint_enable+0xc> csrr	a5,mstatus
1c009e40 <irq_clint_enable+0x10> mv	s1,a5
1c009e42 <irq_clint_enable+0x12> mv	a5,s1
1c009e44 <irq_clint_enable+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:59

	val = csr_read_set(CSR_MSTATUS, MSTATUS_IE);
1c009e48 <irq_clint_enable+0x18> li	a5,8
1c009e4a <irq_clint_enable+0x1a> sw	a5,-24(s0)
1c009e4e <irq_clint_enable+0x1e> lw	a5,-24(s0)
1c009e52 <irq_clint_enable+0x22> csrrs	a5,mstatus,a5
1c009e56 <irq_clint_enable+0x26> sw	a5,-24(s0)
1c009e5a <irq_clint_enable+0x2a> lw	a5,-24(s0)
1c009e5e <irq_clint_enable+0x2e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:61
	//csr_write(CSR_MIE, BIT(25));
	val = csr_read(CSR_MSTATUS);
1c009e62 <irq_clint_enable+0x32> csrr	a5,mstatus
1c009e66 <irq_clint_enable+0x36> mv	s1,a5
1c009e68 <irq_clint_enable+0x38> mv	a5,s1
1c009e6a <irq_clint_enable+0x3a> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:62
	return val;
1c009e6e <irq_clint_enable+0x3e> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:63
}
1c009e72 <irq_clint_enable+0x42> mv	a0,a5
1c009e74 <irq_clint_enable+0x44> lw	s0,28(sp)
1c009e76 <irq_clint_enable+0x46> lw	s1,24(sp)
1c009e78 <irq_clint_enable+0x48> addi	sp,sp,32
1c009e7a <irq_clint_enable+0x4a> ret
hal_setpinmux():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:34

 	configASSERT (io_num < N_IO);
	psoc_ctrl->io_ctrl_b[io_num].cfg = on;
 }
 
 void hal_setpinmux(uint8_t io_num, uint8_t mux_sel) {
1c009e7c <hal_setpinmux> addi	sp,sp,-48
1c009e7e <hal_setpinmux+0x2> sw	s0,44(sp)
1c009e80 <hal_setpinmux+0x4> addi	s0,sp,48
1c009e82 <hal_setpinmux+0x6> mv	a5,a0
1c009e84 <hal_setpinmux+0x8> mv	a4,a1
1c009e86 <hal_setpinmux+0xa> sb	a5,-33(s0)
1c009e8a <hal_setpinmux+0xe> mv	a5,a4
1c009e8c <hal_setpinmux+0x10> sb	a5,-34(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:35
 	SocCtrl_t*		psoc_ctrl = SOC_CTRL_START_ADDR;
1c009e90 <hal_setpinmux+0x14> lui	a5,0x1a104
1c009e94 <hal_setpinmux+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:37
 	
 	configASSERT (io_num < N_IO);
1c009e98 <hal_setpinmux+0x1c> lbu	a4,-33(s0)
1c009e9c <hal_setpinmux+0x20> li	a5,47
1c009ea0 <hal_setpinmux+0x24> bgeu	a5,a4,1c009eaa <hal_setpinmux+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:37 (discriminator 1)
1c009ea4 <hal_setpinmux+0x28> csrci	mstatus,8
1c009ea8 <hal_setpinmux+0x2c> j	1c009ea8 <hal_setpinmux+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:38
	psoc_ctrl->io_ctrl_b[io_num].mux = mux_sel;
1c009eaa <hal_setpinmux+0x2e> lbu	a5,-33(s0)
1c009eae <hal_setpinmux+0x32> lbu	a4,-34(s0)
1c009eb2 <hal_setpinmux+0x36> andi	a4,a4,3
1c009eb4 <hal_setpinmux+0x38> andi	a3,a4,255
1c009eb8 <hal_setpinmux+0x3c> lw	a4,-20(s0)
1c009ebc <hal_setpinmux+0x40> addi	a5,a5,256 # 1a104100 <__stack_size+0x1a103900>
1c009ec0 <hal_setpinmux+0x44> slli	a5,a5,0x2
1c009ec2 <hal_setpinmux+0x46> add	a5,a5,a4
1c009ec4 <hal_setpinmux+0x48> mv	a4,a3
1c009ec6 <hal_setpinmux+0x4a> andi	a2,a4,3
1c009eca <hal_setpinmux+0x4e> lhu	a4,0(a5)
1c009ece <hal_setpinmux+0x52> andi	a4,a4,-4
1c009ed0 <hal_setpinmux+0x54> mv	a3,a4
1c009ed2 <hal_setpinmux+0x56> mv	a4,a2
1c009ed4 <hal_setpinmux+0x58> or	a4,a4,a3
1c009ed6 <hal_setpinmux+0x5a> sh	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:39
 }
1c009eda <hal_setpinmux+0x5e> nop
1c009edc <hal_setpinmux+0x60> lw	s0,44(sp)
1c009ede <hal_setpinmux+0x62> addi	sp,sp,48
1c009ee0 <hal_setpinmux+0x64> ret
hal_getpinmux():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:41
 
 uint8_t hal_getpinmux(uint8_t io_num) {
1c009ee2 <hal_getpinmux> addi	sp,sp,-48
1c009ee4 <hal_getpinmux+0x2> sw	s0,44(sp)
1c009ee6 <hal_getpinmux+0x4> addi	s0,sp,48
1c009ee8 <hal_getpinmux+0x6> mv	a5,a0
1c009eea <hal_getpinmux+0x8> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:42
 	SocCtrl_t*		psoc_ctrl = SOC_CTRL_START_ADDR;
1c009eee <hal_getpinmux+0xc> lui	a5,0x1a104
1c009ef2 <hal_getpinmux+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:44
 	
 	configASSERT (io_num < N_IO);
1c009ef6 <hal_getpinmux+0x14> lbu	a4,-33(s0)
1c009efa <hal_getpinmux+0x18> li	a5,47
1c009efe <hal_getpinmux+0x1c> bgeu	a5,a4,1c009f08 <hal_getpinmux+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:44 (discriminator 1)
1c009f02 <hal_getpinmux+0x20> csrci	mstatus,8
1c009f06 <hal_getpinmux+0x24> j	1c009f06 <hal_getpinmux+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:45
	return psoc_ctrl->io_ctrl_b[io_num].mux;
1c009f08 <hal_getpinmux+0x26> lbu	a5,-33(s0)
1c009f0c <hal_getpinmux+0x2a> lw	a4,-20(s0)
1c009f10 <hal_getpinmux+0x2e> addi	a5,a5,256 # 1a104100 <__stack_size+0x1a103900>
1c009f14 <hal_getpinmux+0x32> slli	a5,a5,0x2
1c009f16 <hal_getpinmux+0x34> add	a5,a5,a4
1c009f18 <hal_getpinmux+0x36> lw	a5,0(a5)
1c009f1a <hal_getpinmux+0x38> andi	a5,a5,3
1c009f1c <hal_getpinmux+0x3a> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:46
 }
1c009f20 <hal_getpinmux+0x3e> mv	a0,a5
1c009f22 <hal_getpinmux+0x40> lw	s0,44(sp)
1c009f24 <hal_getpinmux+0x42> addi	sp,sp,48
1c009f26 <hal_getpinmux+0x44> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
		     :
		     : "r"(val), "r"((volatile uint16_t *)addr));
}

static inline void writew(uint32_t val, uintptr_t addr)
{
1c009f28 <writew> addi	sp,sp,-32
1c009f2a <writew+0x2> sw	s0,28(sp)
1c009f2c <writew+0x4> addi	s0,sp,32
1c009f2e <writew+0x6> sw	a0,-20(s0)
1c009f32 <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
	asm volatile("sw %0, 0(%1)"
		     :
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c009f36 <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c009f3a <writew+0x12> lw	a5,-20(s0)
1c009f3e <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c009f40 <writew+0x18> nop
1c009f42 <writew+0x1a> lw	s0,28(sp)
1c009f44 <writew+0x1c> addi	sp,sp,32
1c009f46 <writew+0x1e> ret
soc_eu_mask_set():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:28
#include "target/core-v-mcu/include/core-v-mcu-config.h"
#include "target/core-v-mcu/include/core-v-mcu-memory-map.h" //ToDo: this should be merged into config.h
#include "hal/include/hal_soc_eu.h"

void soc_eu_mask_set(uint32_t offset, uint32_t mask)
{
1c009f48 <soc_eu_mask_set> addi	sp,sp,-32
1c009f4a <soc_eu_mask_set+0x2> sw	ra,28(sp)
1c009f4c <soc_eu_mask_set+0x4> sw	s0,24(sp)
1c009f4e <soc_eu_mask_set+0x6> addi	s0,sp,32
1c009f50 <soc_eu_mask_set+0x8> sw	a0,-20(s0)
1c009f54 <soc_eu_mask_set+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:29
	writew(mask, (uintptr_t)(SOC_EU_ADDR + offset));
1c009f58 <soc_eu_mask_set+0x10> lw	a4,-20(s0)
1c009f5c <soc_eu_mask_set+0x14> lui	a5,0x1a106
1c009f60 <soc_eu_mask_set+0x18> add	a5,a5,a4
1c009f62 <soc_eu_mask_set+0x1a> mv	a1,a5
1c009f64 <soc_eu_mask_set+0x1c> lw	a0,-24(s0)
1c009f68 <soc_eu_mask_set+0x20> jal	1c009f28 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:30
}
1c009f6a <soc_eu_mask_set+0x22> nop
1c009f6c <soc_eu_mask_set+0x24> lw	ra,28(sp)
1c009f6e <soc_eu_mask_set+0x26> lw	s0,24(sp)
1c009f70 <soc_eu_mask_set+0x28> addi	sp,sp,32
1c009f72 <soc_eu_mask_set+0x2a> ret
pulp_soc_eu_event_init():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:47
/* uint32_t soc_eu_irq_mask_get() */
/* { */
/* } */

void pulp_soc_eu_event_init()
{
1c009f74 <pulp_soc_eu_event_init> addi	sp,sp,-32
1c009f76 <pulp_soc_eu_event_init+0x2> sw	ra,28(sp)
1c009f78 <pulp_soc_eu_event_init+0x4> sw	s0,24(sp)
1c009f7a <pulp_soc_eu_event_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:49
	/* deactivate all soc events */
	for (int i = 0; i < SOC_NB_EVENT_REGS; i++) {
1c009f7c <pulp_soc_eu_event_init+0x8> sw	zero,-20(s0)
1c009f80 <pulp_soc_eu_event_init+0xc> j	1c009f9a <pulp_soc_eu_event_init+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:50 (discriminator 3)
		soc_eu_mask_set(SOC_FC_FIRST_MASK + i * 4, 0xffffffff);
1c009f82 <pulp_soc_eu_event_init+0xe> lw	a5,-20(s0)
1c009f86 <pulp_soc_eu_event_init+0x12> addi	a5,a5,1
1c009f88 <pulp_soc_eu_event_init+0x14> slli	a5,a5,0x2
1c009f8a <pulp_soc_eu_event_init+0x16> li	a1,-1
1c009f8c <pulp_soc_eu_event_init+0x18> mv	a0,a5
1c009f8e <pulp_soc_eu_event_init+0x1a> jal	1c009f48 <soc_eu_mask_set>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:49 (discriminator 3)
	for (int i = 0; i < SOC_NB_EVENT_REGS; i++) {
1c009f90 <pulp_soc_eu_event_init+0x1c> lw	a5,-20(s0)
1c009f94 <pulp_soc_eu_event_init+0x20> addi	a5,a5,1
1c009f96 <pulp_soc_eu_event_init+0x22> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:49 (discriminator 1)
1c009f9a <pulp_soc_eu_event_init+0x26> lw	a4,-20(s0)
1c009f9e <pulp_soc_eu_event_init+0x2a> li	a5,7
1c009fa0 <pulp_soc_eu_event_init+0x2c> bge	a5,a4,1c009f82 <pulp_soc_eu_event_init+0xe>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:52
	}
}
1c009fa4 <pulp_soc_eu_event_init+0x30> nop
1c009fa6 <pulp_soc_eu_event_init+0x32> lw	ra,28(sp)
1c009fa8 <pulp_soc_eu_event_init+0x34> lw	s0,24(sp)
1c009faa <pulp_soc_eu_event_init+0x36> addi	sp,sp,32
1c009fac <pulp_soc_eu_event_init+0x38> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
{
1c009fae <writew> addi	sp,sp,-32
1c009fb0 <writew+0x2> sw	s0,28(sp)
1c009fb2 <writew+0x4> addi	s0,sp,32
1c009fb4 <writew+0x6> sw	a0,-20(s0)
1c009fb8 <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c009fbc <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c009fc0 <writew+0x12> lw	a5,-20(s0)
1c009fc4 <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c009fc6 <writew+0x18> nop
1c009fc8 <writew+0x1a> lw	s0,28(sp)
1c009fca <writew+0x1c> addi	sp,sp,32
1c009fcc <writew+0x1e> ret
timer_irq_disable():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:36
#include "hal/include/hal_timer_irq.h"
#include "FreeRTOSConfig.h"

/* TODO: used to measure elapsed time since last "visit" */
static uint32_t last_count;
int timer_irq_disable(){
1c009fce <timer_irq_disable> addi	sp,sp,-16
1c009fd0 <timer_irq_disable+0x2> sw	ra,12(sp)
1c009fd2 <timer_irq_disable+0x4> sw	s0,8(sp)
1c009fd4 <timer_irq_disable+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:37
	writew (0,(uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CFG_LO_OFFSET));
1c009fd6 <timer_irq_disable+0x8> lui	a1,0x1a10b
1c009fda <timer_irq_disable+0xc> li	a0,0
1c009fdc <timer_irq_disable+0xe> jal	1c009fae <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:38
	writew (0,(uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CFG_HI_OFFSET));
1c009fde <timer_irq_disable+0x10> lui	a5,0x1a10b
1c009fe2 <timer_irq_disable+0x14> addi	a1,a5,4 # 1a10b004 <__stack_size+0x1a10a804>
1c009fe6 <timer_irq_disable+0x18> li	a0,0
1c009fe8 <timer_irq_disable+0x1a> jal	1c009fae <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:40

}
1c009fea <timer_irq_disable+0x1c> nop
1c009fec <timer_irq_disable+0x1e> mv	a0,a5
1c009fee <timer_irq_disable+0x20> lw	ra,12(sp)
1c009ff0 <timer_irq_disable+0x22> lw	s0,8(sp)
1c009ff2 <timer_irq_disable+0x24> addi	sp,sp,16
1c009ff4 <timer_irq_disable+0x26> ret
timer_irq_init():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:43

int timer_irq_init(uint32_t ticks)
{
1c009ff6 <timer_irq_init> addi	sp,sp,-32
1c009ff8 <timer_irq_init+0x2> sw	ra,28(sp)
1c009ffa <timer_irq_init+0x4> sw	s0,24(sp)
1c009ffc <timer_irq_init+0x6> addi	s0,sp,32
1c009ffe <timer_irq_init+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:47
	/* TODO: enable soc_eu timer interrupt */

	/* set the interrupt interval */
	timer_irq_set_timeout(ticks, false);
1c00a002 <timer_irq_init+0xc> li	a1,0
1c00a004 <timer_irq_init+0xe> lw	a0,-20(s0)
1c00a008 <timer_irq_init+0x12> jal	1c00a01e <timer_irq_set_timeout>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:60
	 */
/* use high timer for now as int actually gets to cpu */
#ifdef configMTIME_BASE_ADDRESS
	writew(0xc000000f,(uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CFG_LO_OFFSET));
#else
	writew(TIMER_CFG_LO_ENABLE_MASK | TIMER_CFG_LO_RESET_MASK |
1c00a00a <timer_irq_init+0x14> lui	a1,0x1a10b
1c00a00e <timer_irq_init+0x18> li	a0,23
1c00a010 <timer_irq_init+0x1a> jal	1c009fae <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:66
		       TIMER_CFG_LO_MODE_MASK |
		       TIMER_CFG_LO_IRQEN_MASK,
	       (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CFG_LO_OFFSET));
#endif

	return 0;
1c00a012 <timer_irq_init+0x1c> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:67
}
1c00a014 <timer_irq_init+0x1e> mv	a0,a5
1c00a016 <timer_irq_init+0x20> lw	ra,28(sp)
1c00a018 <timer_irq_init+0x22> lw	s0,24(sp)
1c00a01a <timer_irq_init+0x24> addi	sp,sp,32
1c00a01c <timer_irq_init+0x26> ret
timer_irq_set_timeout():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:70

int timer_irq_set_timeout(uint32_t ticks, bool idle)
{
1c00a01e <timer_irq_set_timeout> addi	sp,sp,-32
1c00a020 <timer_irq_set_timeout+0x2> sw	ra,28(sp)
1c00a022 <timer_irq_set_timeout+0x4> sw	s0,24(sp)
1c00a024 <timer_irq_set_timeout+0x6> addi	s0,sp,32
1c00a026 <timer_irq_set_timeout+0x8> sw	a0,-20(s0)
1c00a02a <timer_irq_set_timeout+0xc> mv	a5,a1
1c00a02c <timer_irq_set_timeout+0xe> sb	a5,-21(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:74
	(void)idle;
	/* fast reset, value doesn't matter */

	writew(1, (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_RESET_LO_OFFSET));
1c00a030 <timer_irq_set_timeout+0x12> lui	a5,0x1a10b
1c00a034 <timer_irq_set_timeout+0x16> addi	a1,a5,32 # 1a10b020 <__stack_size+0x1a10a820>
1c00a038 <timer_irq_set_timeout+0x1a> li	a0,1
1c00a03a <timer_irq_set_timeout+0x1c> jal	1c009fae <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:75
	writew(ticks, (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CMP_LO_OFFSET));
1c00a03c <timer_irq_set_timeout+0x1e> lui	a5,0x1a10b
1c00a040 <timer_irq_set_timeout+0x22> addi	a1,a5,16 # 1a10b010 <__stack_size+0x1a10a810>
1c00a044 <timer_irq_set_timeout+0x26> lw	a0,-20(s0)
1c00a048 <timer_irq_set_timeout+0x2a> jal	1c009fae <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:76
	writew(1, (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_RESET_HI_OFFSET));
1c00a04a <timer_irq_set_timeout+0x2c> lui	a5,0x1a10b
1c00a04e <timer_irq_set_timeout+0x30> addi	a1,a5,36 # 1a10b024 <__stack_size+0x1a10a824>
1c00a052 <timer_irq_set_timeout+0x34> li	a0,1
1c00a054 <timer_irq_set_timeout+0x36> jal	1c009fae <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:79
//	writew(ticks, (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CMP_HI_OFFSET));

	return 0;
1c00a056 <timer_irq_set_timeout+0x38> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:80
}
1c00a058 <timer_irq_set_timeout+0x3a> mv	a0,a5
1c00a05a <timer_irq_set_timeout+0x3c> lw	ra,28(sp)
1c00a05c <timer_irq_set_timeout+0x3e> lw	s0,24(sp)
1c00a05e <timer_irq_set_timeout+0x40> addi	sp,sp,32
1c00a060 <timer_irq_set_timeout+0x42> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
{
1c00a062 <writew> addi	sp,sp,-32
1c00a064 <writew+0x2> sw	s0,28(sp)
1c00a066 <writew+0x4> addi	s0,sp,32
1c00a068 <writew+0x6> sw	a0,-20(s0)
1c00a06c <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c00a070 <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c00a074 <writew+0x12> lw	a5,-20(s0)
1c00a078 <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c00a07a <writew+0x18> nop
1c00a07c <writew+0x1a> lw	s0,28(sp)
1c00a07e <writew+0x1c> addi	sp,sp,32
1c00a080 <writew+0x1e> ret
readw():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:79
		     : "r"((const volatile uint16_t *)addr));
	return val;
}

static inline uint32_t readw(const uintptr_t addr)
{
1c00a082 <readw> addi	sp,sp,-48
1c00a084 <readw+0x2> sw	s0,44(sp)
1c00a086 <readw+0x4> addi	s0,sp,48
1c00a088 <readw+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:84
	uint32_t val;

	asm volatile("lw %0, 0(%1)"
		     : "=r"(val)
		     : "r"((const volatile uint32_t *)addr));
1c00a08c <readw+0xa> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:82
	asm volatile("lw %0, 0(%1)"
1c00a090 <readw+0xe> lw	a5,0(a5)
1c00a092 <readw+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:85
	return val;
1c00a096 <readw+0x14> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:86
}
1c00a09a <readw+0x18> mv	a0,a5
1c00a09c <readw+0x1a> lw	s0,44(sp)
1c00a09e <readw+0x1c> addi	sp,sp,48
1c00a0a0 <readw+0x1e> ret
soc_eu_fc_write():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:108
#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

static inline void soc_eu_fc_write(uint32_t val, uint32_t reg)
{
1c00a0a2 <soc_eu_fc_write> addi	sp,sp,-32
1c00a0a4 <soc_eu_fc_write+0x2> sw	ra,28(sp)
1c00a0a6 <soc_eu_fc_write+0x4> sw	s0,24(sp)
1c00a0a8 <soc_eu_fc_write+0x6> addi	s0,sp,32
1c00a0aa <soc_eu_fc_write+0x8> sw	a0,-20(s0)
1c00a0ae <soc_eu_fc_write+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:109
	writew(val, (uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00a0b2 <soc_eu_fc_write+0x10> lw	a4,-24(s0)
1c00a0b6 <soc_eu_fc_write+0x14> lui	a5,0x1a106
1c00a0ba <soc_eu_fc_write+0x18> addi	a5,a5,4
1c00a0bc <soc_eu_fc_write+0x1a> add	a5,a5,a4
1c00a0be <soc_eu_fc_write+0x1c> mv	a1,a5
1c00a0c0 <soc_eu_fc_write+0x1e> lw	a0,-20(s0)
1c00a0c4 <soc_eu_fc_write+0x22> jal	1c00a062 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:110
}
1c00a0c6 <soc_eu_fc_write+0x24> nop
1c00a0c8 <soc_eu_fc_write+0x26> lw	ra,28(sp)
1c00a0ca <soc_eu_fc_write+0x28> lw	s0,24(sp)
1c00a0cc <soc_eu_fc_write+0x2a> addi	sp,sp,32
1c00a0ce <soc_eu_fc_write+0x2c> ret
soc_eu_fc_read():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:113

static inline uint32_t soc_eu_fc_read(uint32_t reg)
{
1c00a0d0 <soc_eu_fc_read> addi	sp,sp,-32
1c00a0d2 <soc_eu_fc_read+0x2> sw	ra,28(sp)
1c00a0d4 <soc_eu_fc_read+0x4> sw	s0,24(sp)
1c00a0d6 <soc_eu_fc_read+0x6> addi	s0,sp,32
1c00a0d8 <soc_eu_fc_read+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:114
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00a0dc <soc_eu_fc_read+0xc> lw	a4,-20(s0)
1c00a0e0 <soc_eu_fc_read+0x10> lui	a5,0x1a106
1c00a0e4 <soc_eu_fc_read+0x14> addi	a5,a5,4
1c00a0e6 <soc_eu_fc_read+0x16> add	a5,a5,a4
1c00a0e8 <soc_eu_fc_read+0x18> mv	a0,a5
1c00a0ea <soc_eu_fc_read+0x1a> jal	1c00a082 <readw>
1c00a0ec <soc_eu_fc_read+0x1c> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:115
}
1c00a0ee <soc_eu_fc_read+0x1e> mv	a0,a5
1c00a0f0 <soc_eu_fc_read+0x20> lw	ra,28(sp)
1c00a0f2 <soc_eu_fc_read+0x22> lw	s0,24(sp)
1c00a0f4 <soc_eu_fc_read+0x24> addi	sp,sp,32
1c00a0f6 <soc_eu_fc_read+0x26> ret
hal_soc_eu_set_fc_mask():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:137
static inline uint32_t soc_eu_pr_read(uint32_t reg)
{
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_PR_MASK0_OFFSET + reg));
}

static inline void hal_soc_eu_set_fc_mask(int evt) {
1c00a0f8 <hal_soc_eu_set_fc_mask> addi	sp,sp,-48
1c00a0fa <hal_soc_eu_set_fc_mask+0x2> sw	ra,44(sp)
1c00a0fc <hal_soc_eu_set_fc_mask+0x4> sw	s0,40(sp)
1c00a0fe <hal_soc_eu_set_fc_mask+0x6> addi	s0,sp,48
1c00a100 <hal_soc_eu_set_fc_mask+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138
	if (evt >= 256 || evt < 0)
1c00a104 <hal_soc_eu_set_fc_mask+0xc> lw	a4,-36(s0)
1c00a108 <hal_soc_eu_set_fc_mask+0x10> li	a5,255
1c00a10c <hal_soc_eu_set_fc_mask+0x14> blt	a5,a4,1c00a164 <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138 (discriminator 1)
1c00a110 <hal_soc_eu_set_fc_mask+0x18> lw	a5,-36(s0)
1c00a114 <hal_soc_eu_set_fc_mask+0x1c> bltz	a5,1c00a164 <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:141
		return;

	int shift = evt % 32;
1c00a118 <hal_soc_eu_set_fc_mask+0x20> lw	a4,-36(s0)
1c00a11c <hal_soc_eu_set_fc_mask+0x24> srai	a5,a4,0x1f
1c00a120 <hal_soc_eu_set_fc_mask+0x28> srli	a5,a5,0x1b
1c00a122 <hal_soc_eu_set_fc_mask+0x2a> add	a4,a4,a5
1c00a124 <hal_soc_eu_set_fc_mask+0x2c> andi	a4,a4,31
1c00a126 <hal_soc_eu_set_fc_mask+0x2e> sub	a5,a4,a5
1c00a12a <hal_soc_eu_set_fc_mask+0x32> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:142
	uint32_t reg_offset = evt/32 * 4;
1c00a12e <hal_soc_eu_set_fc_mask+0x36> lw	a5,-36(s0)
1c00a132 <hal_soc_eu_set_fc_mask+0x3a> srai	a4,a5,0x1f
1c00a136 <hal_soc_eu_set_fc_mask+0x3e> andi	a4,a4,31
1c00a138 <hal_soc_eu_set_fc_mask+0x40> add	a5,a5,a4
1c00a13a <hal_soc_eu_set_fc_mask+0x42> srai	a5,a5,0x5
1c00a13c <hal_soc_eu_set_fc_mask+0x44> slli	a5,a5,0x2
1c00a13e <hal_soc_eu_set_fc_mask+0x46> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:143
	soc_eu_fc_write(soc_eu_fc_read(reg_offset) & ~(1 << shift), reg_offset);
1c00a142 <hal_soc_eu_set_fc_mask+0x4a> lw	a0,-24(s0)
1c00a146 <hal_soc_eu_set_fc_mask+0x4e> jal	1c00a0d0 <soc_eu_fc_read>
1c00a148 <hal_soc_eu_set_fc_mask+0x50> mv	a3,a0
1c00a14a <hal_soc_eu_set_fc_mask+0x52> li	a4,1
1c00a14c <hal_soc_eu_set_fc_mask+0x54> lw	a5,-20(s0)
1c00a150 <hal_soc_eu_set_fc_mask+0x58> sll	a5,a4,a5
1c00a154 <hal_soc_eu_set_fc_mask+0x5c> not	a5,a5
1c00a158 <hal_soc_eu_set_fc_mask+0x60> and	a5,a5,a3
1c00a15a <hal_soc_eu_set_fc_mask+0x62> lw	a1,-24(s0)
1c00a15e <hal_soc_eu_set_fc_mask+0x66> mv	a0,a5
1c00a160 <hal_soc_eu_set_fc_mask+0x68> jal	1c00a0a2 <soc_eu_fc_write>
1c00a162 <hal_soc_eu_set_fc_mask+0x6a> j	1c00a166 <hal_soc_eu_set_fc_mask+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:139
		return;
1c00a164 <hal_soc_eu_set_fc_mask+0x6c> nop
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:144
}
1c00a166 <hal_soc_eu_set_fc_mask+0x6e> lw	ra,44(sp)
1c00a168 <hal_soc_eu_set_fc_mask+0x70> lw	s0,40(sp)
1c00a16a <hal_soc_eu_set_fc_mask+0x72> addi	sp,sp,48
1c00a16c <hal_soc_eu_set_fc_mask+0x74> ret
i2cmTXHandler():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:40

SemaphoreHandle_t  i2cm_semaphores_rx[N_I2CM];
SemaphoreHandle_t  i2cm_semaphores_tx[N_I2CM];

void i2cmTXHandler(void *arg)
{
1c00a16e <i2cmTXHandler> addi	sp,sp,-48
1c00a170 <i2cmTXHandler+0x2> sw	s0,44(sp)
1c00a172 <i2cmTXHandler+0x4> addi	s0,sp,48
1c00a174 <i2cmTXHandler+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:41
	uint32_t lCounter = 0;
1c00a178 <i2cmTXHandler+0xa> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:43

	lCounter++;
1c00a17c <i2cmTXHandler+0xe> lw	a5,-20(s0)
1c00a180 <i2cmTXHandler+0x12> addi	a5,a5,1
1c00a182 <i2cmTXHandler+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:44
}
1c00a186 <i2cmTXHandler+0x18> nop
1c00a188 <i2cmTXHandler+0x1a> lw	s0,44(sp)
1c00a18a <i2cmTXHandler+0x1c> addi	sp,sp,48
1c00a18c <i2cmTXHandler+0x1e> ret
i2cmRXHandler():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:47

void i2cmRXHandler(void *arg)
{
1c00a18e <i2cmRXHandler> addi	sp,sp,-48
1c00a190 <i2cmRXHandler+0x2> sw	s0,44(sp)
1c00a192 <i2cmRXHandler+0x4> addi	s0,sp,48
1c00a194 <i2cmRXHandler+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:48
	uint32_t lCounter = 0;
1c00a198 <i2cmRXHandler+0xa> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:50

	lCounter++;
1c00a19c <i2cmRXHandler+0xe> lw	a5,-20(s0)
1c00a1a0 <i2cmRXHandler+0x12> addi	a5,a5,1
1c00a1a2 <i2cmRXHandler+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:51
}
1c00a1a6 <i2cmRXHandler+0x18> nop
1c00a1a8 <i2cmRXHandler+0x1a> lw	s0,44(sp)
1c00a1aa <i2cmRXHandler+0x1c> addi	sp,sp,48
1c00a1ac <i2cmRXHandler+0x1e> ret
udma_i2cm_open():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:55

static uint8_t aucclkdiv[2];

uint16_t udma_i2cm_open (uint8_t i2cm_id, uint32_t clk_freq) {
1c00a1ae <udma_i2cm_open> addi	sp,sp,-48
1c00a1b0 <udma_i2cm_open+0x2> sw	ra,44(sp)
1c00a1b2 <udma_i2cm_open+0x4> sw	s0,40(sp)
1c00a1b4 <udma_i2cm_open+0x6> addi	s0,sp,48
1c00a1b6 <udma_i2cm_open+0x8> mv	a5,a0
1c00a1b8 <udma_i2cm_open+0xa> sw	a1,-40(s0)
1c00a1bc <udma_i2cm_open+0xe> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:56
	volatile UdmaCtrl_t*		pudma_ctrl = (UdmaCtrl_t*)UDMA_CH_ADDR_CTRL;
1c00a1c0 <udma_i2cm_open+0x12> lui	a5,0x1a102
1c00a1c4 <udma_i2cm_open+0x16> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:57
	UdmaI2cm_t*					pi2cm_regs = (UdmaI2cm_t*)(UDMA_CH_ADDR_I2CM + i2cm_id * UDMA_CH_SIZE);
1c00a1c8 <udma_i2cm_open+0x1a> lbu	a4,-33(s0)
1c00a1cc <udma_i2cm_open+0x1e> lui	a5,0x342
1c00a1d0 <udma_i2cm_open+0x22> addi	a5,a5,69 # 00342045 <__stack_size+0x341845>
1c00a1d4 <udma_i2cm_open+0x26> add	a5,a5,a4
1c00a1d6 <udma_i2cm_open+0x28> slli	a5,a5,0x7
1c00a1d8 <udma_i2cm_open+0x2a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:61
	uint32_t					clk_divisor;

	/* See if already initialized */
	if (i2cm_semaphores_rx[i2cm_id] != NULL || i2cm_semaphores_tx[i2cm_id] != NULL) {
1c00a1dc <udma_i2cm_open+0x2e> lbu	a5,-33(s0)
1c00a1e0 <udma_i2cm_open+0x32> addi	a4,gp,1144 # 1c00ebe0 <i2cm_semaphores_rx>
1c00a1e4 <udma_i2cm_open+0x36> slli	a5,a5,0x2
1c00a1e6 <udma_i2cm_open+0x38> add	a5,a5,a4
1c00a1e8 <udma_i2cm_open+0x3a> lw	a5,0(a5)
1c00a1ea <udma_i2cm_open+0x3c> bnez	a5,1c00a1fc <udma_i2cm_open+0x4e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:61 (discriminator 1)
1c00a1ec <udma_i2cm_open+0x3e> lbu	a5,-33(s0)
1c00a1f0 <udma_i2cm_open+0x42> addi	a4,gp,1136 # 1c00ebd8 <i2cm_semaphores_tx>
1c00a1f4 <udma_i2cm_open+0x46> slli	a5,a5,0x2
1c00a1f6 <udma_i2cm_open+0x48> add	a5,a5,a4
1c00a1f8 <udma_i2cm_open+0x4a> lw	a5,0(a5)
1c00a1fa <udma_i2cm_open+0x4c> beqz	a5,1c00a200 <udma_i2cm_open+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:62
		return 1;
1c00a1fc <udma_i2cm_open+0x4e> li	a5,1
1c00a1fe <udma_i2cm_open+0x50> j	1c00a360 <udma_i2cm_open+0x1b2>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:65
	}
	/* Enable reset and enable uart clock */
	pudma_ctrl->reg_rst |= (UDMA_CTRL_I2CM0_CLKEN << i2cm_id);
1c00a200 <udma_i2cm_open+0x52> lw	a5,-20(s0)
1c00a204 <udma_i2cm_open+0x56> lw	a5,8(a5)
1c00a206 <udma_i2cm_open+0x58> lbu	a4,-33(s0)
1c00a20a <udma_i2cm_open+0x5c> li	a3,16
1c00a20c <udma_i2cm_open+0x5e> sll	a4,a3,a4
1c00a210 <udma_i2cm_open+0x62> or	a4,a4,a5
1c00a212 <udma_i2cm_open+0x64> lw	a5,-20(s0)
1c00a216 <udma_i2cm_open+0x68> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:66
	pudma_ctrl->reg_rst &= ~(UDMA_CTRL_I2CM0_CLKEN << i2cm_id);
1c00a218 <udma_i2cm_open+0x6a> lw	a5,-20(s0)
1c00a21c <udma_i2cm_open+0x6e> lw	a5,8(a5)
1c00a21e <udma_i2cm_open+0x70> lbu	a4,-33(s0)
1c00a222 <udma_i2cm_open+0x74> li	a3,16
1c00a224 <udma_i2cm_open+0x76> sll	a4,a3,a4
1c00a228 <udma_i2cm_open+0x7a> not	a4,a4
1c00a22c <udma_i2cm_open+0x7e> and	a4,a4,a5
1c00a22e <udma_i2cm_open+0x80> lw	a5,-20(s0)
1c00a232 <udma_i2cm_open+0x84> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:67
	pudma_ctrl->reg_cg |= (UDMA_CTRL_I2CM0_CLKEN << i2cm_id);
1c00a234 <udma_i2cm_open+0x86> lw	a5,-20(s0)
1c00a238 <udma_i2cm_open+0x8a> lw	a5,0(a5)
1c00a23a <udma_i2cm_open+0x8c> lbu	a4,-33(s0)
1c00a23e <udma_i2cm_open+0x90> li	a3,16
1c00a240 <udma_i2cm_open+0x92> sll	a4,a3,a4
1c00a244 <udma_i2cm_open+0x96> or	a4,a4,a5
1c00a246 <udma_i2cm_open+0x98> lw	a5,-20(s0)
1c00a24a <udma_i2cm_open+0x9c> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:71

	/* Set semaphore */
	SemaphoreHandle_t shSemaphoreHandle;		// FreeRTOS.h has a define for xSemaphoreHandle, so can't use that
	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a24c <udma_i2cm_open+0x9e> li	a2,3
1c00a24e <udma_i2cm_open+0xa0> li	a1,0
1c00a250 <udma_i2cm_open+0xa2> li	a0,1
1c00a252 <udma_i2cm_open+0xa4> jal	ra,1c008c58 <xQueueGenericCreate>
1c00a256 <udma_i2cm_open+0xa8> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:72
	configASSERT(shSemaphoreHandle);
1c00a25a <udma_i2cm_open+0xac> lw	a5,-28(s0)
1c00a25e <udma_i2cm_open+0xb0> bnez	a5,1c00a266 <udma_i2cm_open+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:72 (discriminator 1)
1c00a260 <udma_i2cm_open+0xb2> csrci	mstatus,8
1c00a264 <udma_i2cm_open+0xb6> j	1c00a264 <udma_i2cm_open+0xb6>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:73
	xSemaphoreGive(shSemaphoreHandle);
1c00a266 <udma_i2cm_open+0xb8> li	a3,0
1c00a268 <udma_i2cm_open+0xba> li	a2,0
1c00a26a <udma_i2cm_open+0xbc> li	a1,0
1c00a26c <udma_i2cm_open+0xbe> lw	a0,-28(s0)
1c00a270 <udma_i2cm_open+0xc2> jal	ra,1c008d48 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:74
	i2cm_semaphores_rx[i2cm_id] = shSemaphoreHandle;
1c00a274 <udma_i2cm_open+0xc6> lbu	a5,-33(s0)
1c00a278 <udma_i2cm_open+0xca> addi	a4,gp,1144 # 1c00ebe0 <i2cm_semaphores_rx>
1c00a27c <udma_i2cm_open+0xce> slli	a5,a5,0x2
1c00a27e <udma_i2cm_open+0xd0> add	a5,a5,a4
1c00a280 <udma_i2cm_open+0xd2> lw	a4,-28(s0)
1c00a284 <udma_i2cm_open+0xd6> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:76

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a286 <udma_i2cm_open+0xd8> li	a2,3
1c00a288 <udma_i2cm_open+0xda> li	a1,0
1c00a28a <udma_i2cm_open+0xdc> li	a0,1
1c00a28c <udma_i2cm_open+0xde> jal	ra,1c008c58 <xQueueGenericCreate>
1c00a290 <udma_i2cm_open+0xe2> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:77
	configASSERT(shSemaphoreHandle);
1c00a294 <udma_i2cm_open+0xe6> lw	a5,-28(s0)
1c00a298 <udma_i2cm_open+0xea> bnez	a5,1c00a2a0 <udma_i2cm_open+0xf2>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:77 (discriminator 1)
1c00a29a <udma_i2cm_open+0xec> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:77 (discriminator 2)
1c00a29e <udma_i2cm_open+0xf0> j	1c00a29e <udma_i2cm_open+0xf0>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:78
	xSemaphoreGive(shSemaphoreHandle);
1c00a2a0 <udma_i2cm_open+0xf2> li	a3,0
1c00a2a2 <udma_i2cm_open+0xf4> li	a2,0
1c00a2a4 <udma_i2cm_open+0xf6> li	a1,0
1c00a2a6 <udma_i2cm_open+0xf8> lw	a0,-28(s0)
1c00a2aa <udma_i2cm_open+0xfc> jal	ra,1c008d48 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:79
	i2cm_semaphores_tx[i2cm_id] = shSemaphoreHandle;
1c00a2ae <udma_i2cm_open+0x100> lbu	a5,-33(s0)
1c00a2b2 <udma_i2cm_open+0x104> addi	a4,gp,1136 # 1c00ebd8 <i2cm_semaphores_tx>
1c00a2b6 <udma_i2cm_open+0x108> slli	a5,a5,0x2
1c00a2b8 <udma_i2cm_open+0x10a> add	a5,a5,a4
1c00a2ba <udma_i2cm_open+0x10c> lw	a4,-28(s0)
1c00a2be <udma_i2cm_open+0x110> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:82

	/* Set handlers. */
	pi_fc_event_handler_set(SOC_EVENT_UDMA_I2C_RX(i2cm_id), i2cmRXHandler/*NULL*/, i2cm_semaphores_rx[i2cm_id]);
1c00a2c0 <udma_i2cm_open+0x112> lbu	a5,-33(s0)
1c00a2c4 <udma_i2cm_open+0x116> addi	a5,a5,4
1c00a2c6 <udma_i2cm_open+0x118> slli	a5,a5,0x2
1c00a2c8 <udma_i2cm_open+0x11a> mv	a3,a5
1c00a2ca <udma_i2cm_open+0x11c> lbu	a5,-33(s0)
1c00a2ce <udma_i2cm_open+0x120> addi	a4,gp,1144 # 1c00ebe0 <i2cm_semaphores_rx>
1c00a2d2 <udma_i2cm_open+0x124> slli	a5,a5,0x2
1c00a2d4 <udma_i2cm_open+0x126> add	a5,a5,a4
1c00a2d6 <udma_i2cm_open+0x128> lw	a5,0(a5)
1c00a2d8 <udma_i2cm_open+0x12a> mv	a2,a5
1c00a2da <udma_i2cm_open+0x12c> lui	a5,0x1c00a
1c00a2de <udma_i2cm_open+0x130> addi	a1,a5,398 # 1c00a18e <i2cmRXHandler>
1c00a2e2 <udma_i2cm_open+0x134> mv	a0,a3
1c00a2e4 <udma_i2cm_open+0x136> jal	ra,1c009d0c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:83
	pi_fc_event_handler_set(SOC_EVENT_UDMA_I2C_TX(i2cm_id), i2cmTXHandler/*NULL*/, i2cm_semaphores_tx[i2cm_id]);
1c00a2e8 <udma_i2cm_open+0x13a> lbu	a5,-33(s0)
1c00a2ec <udma_i2cm_open+0x13e> addi	a5,a5,4
1c00a2ee <udma_i2cm_open+0x140> slli	a5,a5,0x2
1c00a2f0 <udma_i2cm_open+0x142> addi	a3,a5,1
1c00a2f4 <udma_i2cm_open+0x146> lbu	a5,-33(s0)
1c00a2f8 <udma_i2cm_open+0x14a> addi	a4,gp,1136 # 1c00ebd8 <i2cm_semaphores_tx>
1c00a2fc <udma_i2cm_open+0x14e> slli	a5,a5,0x2
1c00a2fe <udma_i2cm_open+0x150> add	a5,a5,a4
1c00a300 <udma_i2cm_open+0x152> lw	a5,0(a5)
1c00a302 <udma_i2cm_open+0x154> mv	a2,a5
1c00a304 <udma_i2cm_open+0x156> lui	a5,0x1c00a
1c00a308 <udma_i2cm_open+0x15a> addi	a1,a5,366 # 1c00a16e <i2cmTXHandler>
1c00a30c <udma_i2cm_open+0x15e> mv	a0,a3
1c00a30e <udma_i2cm_open+0x160> jal	ra,1c009d0c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:85
	/* Enable SOC events propagation to FC. */
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_I2C_RX(i2cm_id));
1c00a312 <udma_i2cm_open+0x164> lbu	a5,-33(s0)
1c00a316 <udma_i2cm_open+0x168> addi	a5,a5,4
1c00a318 <udma_i2cm_open+0x16a> slli	a5,a5,0x2
1c00a31a <udma_i2cm_open+0x16c> mv	a0,a5
1c00a31c <udma_i2cm_open+0x16e> jal	1c00a0f8 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:86
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_I2C_TX(i2cm_id));
1c00a31e <udma_i2cm_open+0x170> lbu	a5,-33(s0)
1c00a322 <udma_i2cm_open+0x174> addi	a5,a5,4
1c00a324 <udma_i2cm_open+0x176> slli	a5,a5,0x2
1c00a326 <udma_i2cm_open+0x178> addi	a5,a5,1
1c00a328 <udma_i2cm_open+0x17a> mv	a0,a5
1c00a32a <udma_i2cm_open+0x17c> jal	1c00a0f8 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:89

	/* configure */
	clk_divisor = 5000000/clk_freq;
1c00a32c <udma_i2cm_open+0x17e> lui	a5,0x4c5
1c00a330 <udma_i2cm_open+0x182> addi	a4,a5,-1216 # 004c4b40 <__stack_size+0x4c4340>
1c00a334 <udma_i2cm_open+0x186> lw	a5,-40(s0)
1c00a338 <udma_i2cm_open+0x18a> divu	a5,a4,a5
1c00a33c <udma_i2cm_open+0x18e> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:90
	aucclkdiv[0] = (clk_divisor >> 0) & 0xFF;
1c00a340 <udma_i2cm_open+0x192> lw	a5,-32(s0)
1c00a344 <udma_i2cm_open+0x196> andi	a4,a5,255
1c00a348 <udma_i2cm_open+0x19a> sb	a4,1060(gp) # 1c00eb8c <aucclkdiv>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:91
	aucclkdiv[1] = (clk_divisor >> 8) & 0xFF;
1c00a34c <udma_i2cm_open+0x19e> lw	a5,-32(s0)
1c00a350 <udma_i2cm_open+0x1a2> srli	a5,a5,0x8
1c00a352 <udma_i2cm_open+0x1a4> andi	a4,a5,255
1c00a356 <udma_i2cm_open+0x1a8> addi	a5,gp,1060 # 1c00eb8c <aucclkdiv>
1c00a35a <udma_i2cm_open+0x1ac> sb	a4,1(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:93

	return 0;
1c00a35e <udma_i2cm_open+0x1b0> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:94
}
1c00a360 <udma_i2cm_open+0x1b2> mv	a0,a5
1c00a362 <udma_i2cm_open+0x1b4> lw	ra,44(sp)
1c00a364 <udma_i2cm_open+0x1b6> lw	s0,40(sp)
1c00a366 <udma_i2cm_open+0x1b8> addi	sp,sp,48
1c00a368 <udma_i2cm_open+0x1ba> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
{
1c00a36a <writew> addi	sp,sp,-32
1c00a36c <writew+0x2> sw	s0,28(sp)
1c00a36e <writew+0x4> addi	s0,sp,32
1c00a370 <writew+0x6> sw	a0,-20(s0)
1c00a374 <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c00a378 <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c00a37c <writew+0x12> lw	a5,-20(s0)
1c00a380 <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c00a382 <writew+0x18> nop
1c00a384 <writew+0x1a> lw	s0,28(sp)
1c00a386 <writew+0x1c> addi	sp,sp,32
1c00a388 <writew+0x1e> ret
readw():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:79
{
1c00a38a <readw> addi	sp,sp,-48
1c00a38c <readw+0x2> sw	s0,44(sp)
1c00a38e <readw+0x4> addi	s0,sp,48
1c00a390 <readw+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:84
		     : "r"((const volatile uint32_t *)addr));
1c00a394 <readw+0xa> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:82
	asm volatile("lw %0, 0(%1)"
1c00a398 <readw+0xe> lw	a5,0(a5)
1c00a39a <readw+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:85
	return val;
1c00a39e <readw+0x14> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:86
}
1c00a3a2 <readw+0x18> mv	a0,a5
1c00a3a4 <readw+0x1a> lw	s0,44(sp)
1c00a3a6 <readw+0x1c> addi	sp,sp,48
1c00a3a8 <readw+0x1e> ret
soc_eu_fc_write():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:108
{
1c00a3aa <soc_eu_fc_write> addi	sp,sp,-32
1c00a3ac <soc_eu_fc_write+0x2> sw	ra,28(sp)
1c00a3ae <soc_eu_fc_write+0x4> sw	s0,24(sp)
1c00a3b0 <soc_eu_fc_write+0x6> addi	s0,sp,32
1c00a3b2 <soc_eu_fc_write+0x8> sw	a0,-20(s0)
1c00a3b6 <soc_eu_fc_write+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:109
	writew(val, (uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00a3ba <soc_eu_fc_write+0x10> lw	a4,-24(s0)
1c00a3be <soc_eu_fc_write+0x14> lui	a5,0x1a106
1c00a3c2 <soc_eu_fc_write+0x18> addi	a5,a5,4
1c00a3c4 <soc_eu_fc_write+0x1a> add	a5,a5,a4
1c00a3c6 <soc_eu_fc_write+0x1c> mv	a1,a5
1c00a3c8 <soc_eu_fc_write+0x1e> lw	a0,-20(s0)
1c00a3cc <soc_eu_fc_write+0x22> jal	1c00a36a <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:110
}
1c00a3ce <soc_eu_fc_write+0x24> nop
1c00a3d0 <soc_eu_fc_write+0x26> lw	ra,28(sp)
1c00a3d2 <soc_eu_fc_write+0x28> lw	s0,24(sp)
1c00a3d4 <soc_eu_fc_write+0x2a> addi	sp,sp,32
1c00a3d6 <soc_eu_fc_write+0x2c> ret
soc_eu_fc_read():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:113
{
1c00a3d8 <soc_eu_fc_read> addi	sp,sp,-32
1c00a3da <soc_eu_fc_read+0x2> sw	ra,28(sp)
1c00a3dc <soc_eu_fc_read+0x4> sw	s0,24(sp)
1c00a3de <soc_eu_fc_read+0x6> addi	s0,sp,32
1c00a3e0 <soc_eu_fc_read+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:114
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00a3e4 <soc_eu_fc_read+0xc> lw	a4,-20(s0)
1c00a3e8 <soc_eu_fc_read+0x10> lui	a5,0x1a106
1c00a3ec <soc_eu_fc_read+0x14> addi	a5,a5,4
1c00a3ee <soc_eu_fc_read+0x16> add	a5,a5,a4
1c00a3f0 <soc_eu_fc_read+0x18> mv	a0,a5
1c00a3f2 <soc_eu_fc_read+0x1a> jal	1c00a38a <readw>
1c00a3f4 <soc_eu_fc_read+0x1c> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:115
}
1c00a3f6 <soc_eu_fc_read+0x1e> mv	a0,a5
1c00a3f8 <soc_eu_fc_read+0x20> lw	ra,28(sp)
1c00a3fa <soc_eu_fc_read+0x22> lw	s0,24(sp)
1c00a3fc <soc_eu_fc_read+0x24> addi	sp,sp,32
1c00a3fe <soc_eu_fc_read+0x26> ret
hal_soc_eu_set_fc_mask():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:137
static inline void hal_soc_eu_set_fc_mask(int evt) {
1c00a400 <hal_soc_eu_set_fc_mask> addi	sp,sp,-48
1c00a402 <hal_soc_eu_set_fc_mask+0x2> sw	ra,44(sp)
1c00a404 <hal_soc_eu_set_fc_mask+0x4> sw	s0,40(sp)
1c00a406 <hal_soc_eu_set_fc_mask+0x6> addi	s0,sp,48
1c00a408 <hal_soc_eu_set_fc_mask+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138
	if (evt >= 256 || evt < 0)
1c00a40c <hal_soc_eu_set_fc_mask+0xc> lw	a4,-36(s0)
1c00a410 <hal_soc_eu_set_fc_mask+0x10> li	a5,255
1c00a414 <hal_soc_eu_set_fc_mask+0x14> blt	a5,a4,1c00a46c <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138 (discriminator 1)
1c00a418 <hal_soc_eu_set_fc_mask+0x18> lw	a5,-36(s0)
1c00a41c <hal_soc_eu_set_fc_mask+0x1c> bltz	a5,1c00a46c <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:141
	int shift = evt % 32;
1c00a420 <hal_soc_eu_set_fc_mask+0x20> lw	a4,-36(s0)
1c00a424 <hal_soc_eu_set_fc_mask+0x24> srai	a5,a4,0x1f
1c00a428 <hal_soc_eu_set_fc_mask+0x28> srli	a5,a5,0x1b
1c00a42a <hal_soc_eu_set_fc_mask+0x2a> add	a4,a4,a5
1c00a42c <hal_soc_eu_set_fc_mask+0x2c> andi	a4,a4,31
1c00a42e <hal_soc_eu_set_fc_mask+0x2e> sub	a5,a4,a5
1c00a432 <hal_soc_eu_set_fc_mask+0x32> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:142
	uint32_t reg_offset = evt/32 * 4;
1c00a436 <hal_soc_eu_set_fc_mask+0x36> lw	a5,-36(s0)
1c00a43a <hal_soc_eu_set_fc_mask+0x3a> srai	a4,a5,0x1f
1c00a43e <hal_soc_eu_set_fc_mask+0x3e> andi	a4,a4,31
1c00a440 <hal_soc_eu_set_fc_mask+0x40> add	a5,a5,a4
1c00a442 <hal_soc_eu_set_fc_mask+0x42> srai	a5,a5,0x5
1c00a444 <hal_soc_eu_set_fc_mask+0x44> slli	a5,a5,0x2
1c00a446 <hal_soc_eu_set_fc_mask+0x46> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:143
	soc_eu_fc_write(soc_eu_fc_read(reg_offset) & ~(1 << shift), reg_offset);
1c00a44a <hal_soc_eu_set_fc_mask+0x4a> lw	a0,-24(s0)
1c00a44e <hal_soc_eu_set_fc_mask+0x4e> jal	1c00a3d8 <soc_eu_fc_read>
1c00a450 <hal_soc_eu_set_fc_mask+0x50> mv	a3,a0
1c00a452 <hal_soc_eu_set_fc_mask+0x52> li	a4,1
1c00a454 <hal_soc_eu_set_fc_mask+0x54> lw	a5,-20(s0)
1c00a458 <hal_soc_eu_set_fc_mask+0x58> sll	a5,a4,a5
1c00a45c <hal_soc_eu_set_fc_mask+0x5c> not	a5,a5
1c00a460 <hal_soc_eu_set_fc_mask+0x60> and	a5,a5,a3
1c00a462 <hal_soc_eu_set_fc_mask+0x62> lw	a1,-24(s0)
1c00a466 <hal_soc_eu_set_fc_mask+0x66> mv	a0,a5
1c00a468 <hal_soc_eu_set_fc_mask+0x68> jal	1c00a3aa <soc_eu_fc_write>
1c00a46a <hal_soc_eu_set_fc_mask+0x6a> j	1c00a46e <hal_soc_eu_set_fc_mask+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:139
		return;
1c00a46c <hal_soc_eu_set_fc_mask+0x6c> nop
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:144
}
1c00a46e <hal_soc_eu_set_fc_mask+0x6e> lw	ra,44(sp)
1c00a470 <hal_soc_eu_set_fc_mask+0x70> lw	s0,40(sp)
1c00a472 <hal_soc_eu_set_fc_mask+0x72> addi	sp,sp,48
1c00a474 <hal_soc_eu_set_fc_mask+0x74> ret
spi_tx_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:41
SemaphoreHandle_t  qspim_semaphores_cmd[N_QSPIM];
SemaphoreHandle_t  qspim_semaphores_eot[N_QSPIM];

uint8_t aucclkdiv;
static unsigned int isr_count;
void spi_tx_isr() {
1c00a476 <spi_tx_isr> addi	sp,sp,-16
1c00a478 <spi_tx_isr+0x2> sw	s0,12(sp)
1c00a47a <spi_tx_isr+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:42
	isr_count += 0x1;
1c00a47c <spi_tx_isr+0x6> lw	a5,1064(gp) # 1c00eb90 <isr_count>
1c00a480 <spi_tx_isr+0xa> addi	a4,a5,1 # 1a106001 <__stack_size+0x1a105801>
1c00a484 <spi_tx_isr+0xe> sw	a4,1064(gp) # 1c00eb90 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:43
}
1c00a488 <spi_tx_isr+0x12> nop
1c00a48a <spi_tx_isr+0x14> lw	s0,12(sp)
1c00a48c <spi_tx_isr+0x16> addi	sp,sp,16
1c00a48e <spi_tx_isr+0x18> ret
spi_rx_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:44
void spi_rx_isr() {
1c00a490 <spi_rx_isr> addi	sp,sp,-16
1c00a492 <spi_rx_isr+0x2> sw	s0,12(sp)
1c00a494 <spi_rx_isr+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:45
	isr_count += 0x100;
1c00a496 <spi_rx_isr+0x6> lw	a5,1064(gp) # 1c00eb90 <isr_count>
1c00a49a <spi_rx_isr+0xa> addi	a4,a5,256
1c00a49e <spi_rx_isr+0xe> sw	a4,1064(gp) # 1c00eb90 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:46
}
1c00a4a2 <spi_rx_isr+0x12> nop
1c00a4a4 <spi_rx_isr+0x14> lw	s0,12(sp)
1c00a4a6 <spi_rx_isr+0x16> addi	sp,sp,16
1c00a4a8 <spi_rx_isr+0x18> ret
spi_cmd_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:47
void spi_cmd_isr() {
1c00a4aa <spi_cmd_isr> addi	sp,sp,-16
1c00a4ac <spi_cmd_isr+0x2> sw	s0,12(sp)
1c00a4ae <spi_cmd_isr+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:48
	isr_count += 0x10000;
1c00a4b0 <spi_cmd_isr+0x6> lw	a4,1064(gp) # 1c00eb90 <isr_count>
1c00a4b4 <spi_cmd_isr+0xa> lui	a5,0x10
1c00a4b6 <spi_cmd_isr+0xc> add	a4,a4,a5
1c00a4b8 <spi_cmd_isr+0xe> sw	a4,1064(gp) # 1c00eb90 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:49
}
1c00a4bc <spi_cmd_isr+0x12> nop
1c00a4be <spi_cmd_isr+0x14> lw	s0,12(sp)
1c00a4c0 <spi_cmd_isr+0x16> addi	sp,sp,16
1c00a4c2 <spi_cmd_isr+0x18> ret
spi_eot_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:50
void spi_eot_isr() {
1c00a4c4 <spi_eot_isr> addi	sp,sp,-16
1c00a4c6 <spi_eot_isr+0x2> sw	s0,12(sp)
1c00a4c8 <spi_eot_isr+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:51
	isr_count += 0x1000000;
1c00a4ca <spi_eot_isr+0x6> lw	a4,1064(gp) # 1c00eb90 <isr_count>
1c00a4ce <spi_eot_isr+0xa> lui	a5,0x1000
1c00a4d2 <spi_eot_isr+0xe> add	a4,a4,a5
1c00a4d4 <spi_eot_isr+0x10> sw	a4,1064(gp) # 1c00eb90 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:52
}
1c00a4d8 <spi_eot_isr+0x14> nop
1c00a4da <spi_eot_isr+0x16> lw	s0,12(sp)
1c00a4dc <spi_eot_isr+0x18> addi	sp,sp,16
1c00a4de <spi_eot_isr+0x1a> ret
udma_qspim_open():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:54

uint16_t udma_qspim_open (uint8_t qspim_id, uint32_t clk_freq) {
1c00a4e0 <udma_qspim_open> addi	sp,sp,-48
1c00a4e2 <udma_qspim_open+0x2> sw	ra,44(sp)
1c00a4e4 <udma_qspim_open+0x4> sw	s0,40(sp)
1c00a4e6 <udma_qspim_open+0x6> addi	s0,sp,48
1c00a4e8 <udma_qspim_open+0x8> mv	a5,a0
1c00a4ea <udma_qspim_open+0xa> sw	a1,-40(s0)
1c00a4ee <udma_qspim_open+0xe> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:55
	volatile UdmaCtrl_t*		pudma_ctrl = (UdmaCtrl_t*)UDMA_CH_ADDR_CTRL;
1c00a4f2 <udma_qspim_open+0x12> lui	a5,0x1a102
1c00a4f6 <udma_qspim_open+0x16> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:56
	UdmaQspi_t*					pqspim_regs = (UdmaQspi_t*)(UDMA_CH_ADDR_QSPIM + qspim_id * UDMA_CH_SIZE);
1c00a4fa <udma_qspim_open+0x1a> lbu	a4,-33(s0)
1c00a4fe <udma_qspim_open+0x1e> lui	a5,0x342
1c00a502 <udma_qspim_open+0x22> addi	a5,a5,67 # 00342043 <__stack_size+0x341843>
1c00a506 <udma_qspim_open+0x26> add	a5,a5,a4
1c00a508 <udma_qspim_open+0x28> slli	a5,a5,0x7
1c00a50a <udma_qspim_open+0x2a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:60
	uint32_t					clk_divisor;

	/* See if already initialized */
	if (qspim_semaphores_rx[qspim_id] != NULL || qspim_semaphores_tx[qspim_id] != NULL) {
1c00a50e <udma_qspim_open+0x2e> lbu	a5,-33(s0)
1c00a512 <udma_qspim_open+0x32> addi	a4,gp,1172 # 1c00ebfc <qspim_semaphores_rx>
1c00a516 <udma_qspim_open+0x36> slli	a5,a5,0x2
1c00a518 <udma_qspim_open+0x38> add	a5,a5,a4
1c00a51a <udma_qspim_open+0x3a> lw	a5,0(a5)
1c00a51c <udma_qspim_open+0x3c> bnez	a5,1c00a52e <udma_qspim_open+0x4e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:60 (discriminator 1)
1c00a51e <udma_qspim_open+0x3e> lbu	a5,-33(s0)
1c00a522 <udma_qspim_open+0x42> addi	a4,gp,1164 # 1c00ebf4 <qspim_semaphores_tx>
1c00a526 <udma_qspim_open+0x46> slli	a5,a5,0x2
1c00a528 <udma_qspim_open+0x48> add	a5,a5,a4
1c00a52a <udma_qspim_open+0x4a> lw	a5,0(a5)
1c00a52c <udma_qspim_open+0x4c> beqz	a5,1c00a532 <udma_qspim_open+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:61
		return 1;
1c00a52e <udma_qspim_open+0x4e> li	a5,1
1c00a530 <udma_qspim_open+0x50> j	1c00a786 <udma_qspim_open+0x2a6>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:64
	}
	/* Enable reset and enable uart clock */
	if( qspim_id == 0 )
1c00a532 <udma_qspim_open+0x52> lbu	a5,-33(s0)
1c00a536 <udma_qspim_open+0x56> bnez	a5,1c00a56a <udma_qspim_open+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:66
	{
		pudma_ctrl->reg_rst |= ( UDMA_CTRL_QSPIM0_CLKEN ) ;
1c00a538 <udma_qspim_open+0x58> lw	a5,-20(s0)
1c00a53c <udma_qspim_open+0x5c> lw	a5,8(a5)
1c00a53e <udma_qspim_open+0x5e> ori	a4,a5,4
1c00a542 <udma_qspim_open+0x62> lw	a5,-20(s0)
1c00a546 <udma_qspim_open+0x66> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:67
		pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM0_CLKEN);
1c00a548 <udma_qspim_open+0x68> lw	a5,-20(s0)
1c00a54c <udma_qspim_open+0x6c> lw	a5,8(a5)
1c00a54e <udma_qspim_open+0x6e> andi	a4,a5,-5
1c00a552 <udma_qspim_open+0x72> lw	a5,-20(s0)
1c00a556 <udma_qspim_open+0x76> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:68
		pudma_ctrl->reg_cg |= (UDMA_CTRL_QSPIM0_CLKEN );
1c00a558 <udma_qspim_open+0x78> lw	a5,-20(s0)
1c00a55c <udma_qspim_open+0x7c> lw	a5,0(a5)
1c00a55e <udma_qspim_open+0x7e> ori	a4,a5,4
1c00a562 <udma_qspim_open+0x82> lw	a5,-20(s0)
1c00a566 <udma_qspim_open+0x86> sw	a4,0(a5)
1c00a568 <udma_qspim_open+0x88> j	1c00a5a4 <udma_qspim_open+0xc4>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:70
	}
	else if( qspim_id == 1 )
1c00a56a <udma_qspim_open+0x8a> lbu	a4,-33(s0)
1c00a56e <udma_qspim_open+0x8e> li	a5,1
1c00a570 <udma_qspim_open+0x90> bne	a4,a5,1c00a5a4 <udma_qspim_open+0xc4>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:73
	{
#if(NEW_BIT_FILE == 1 )
		pudma_ctrl->reg_rst |= ( UDMA_CTRL_QSPIM1_CLKEN ) ;
1c00a574 <udma_qspim_open+0x94> lw	a5,-20(s0)
1c00a578 <udma_qspim_open+0x98> lw	a5,8(a5)
1c00a57a <udma_qspim_open+0x9a> ori	a4,a5,8
1c00a57e <udma_qspim_open+0x9e> lw	a5,-20(s0)
1c00a582 <udma_qspim_open+0xa2> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:74
		pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM1_CLKEN);
1c00a584 <udma_qspim_open+0xa4> lw	a5,-20(s0)
1c00a588 <udma_qspim_open+0xa8> lw	a5,8(a5)
1c00a58a <udma_qspim_open+0xaa> andi	a4,a5,-9
1c00a58e <udma_qspim_open+0xae> lw	a5,-20(s0)
1c00a592 <udma_qspim_open+0xb2> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:75
		pudma_ctrl->reg_cg |= (UDMA_CTRL_QSPIM1_CLKEN );
1c00a594 <udma_qspim_open+0xb4> lw	a5,-20(s0)
1c00a598 <udma_qspim_open+0xb8> lw	a5,0(a5)
1c00a59a <udma_qspim_open+0xba> ori	a4,a5,8
1c00a59e <udma_qspim_open+0xbe> lw	a5,-20(s0)
1c00a5a2 <udma_qspim_open+0xc2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:82
	}


	/* Set semaphore */
	SemaphoreHandle_t shSemaphoreHandle;		// FreeRTOS.h has a define for xSemaphoreHandle, so can't use that
	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a5a4 <udma_qspim_open+0xc4> li	a2,3
1c00a5a6 <udma_qspim_open+0xc6> li	a1,0
1c00a5a8 <udma_qspim_open+0xc8> li	a0,1
1c00a5aa <udma_qspim_open+0xca> jal	ra,1c008c58 <xQueueGenericCreate>
1c00a5ae <udma_qspim_open+0xce> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:83
	configASSERT(shSemaphoreHandle);
1c00a5b2 <udma_qspim_open+0xd2> lw	a5,-28(s0)
1c00a5b6 <udma_qspim_open+0xd6> bnez	a5,1c00a5be <udma_qspim_open+0xde>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:83 (discriminator 1)
1c00a5b8 <udma_qspim_open+0xd8> csrci	mstatus,8
1c00a5bc <udma_qspim_open+0xdc> j	1c00a5bc <udma_qspim_open+0xdc>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:84
	xSemaphoreGive(shSemaphoreHandle);
1c00a5be <udma_qspim_open+0xde> li	a3,0
1c00a5c0 <udma_qspim_open+0xe0> li	a2,0
1c00a5c2 <udma_qspim_open+0xe2> li	a1,0
1c00a5c4 <udma_qspim_open+0xe4> lw	a0,-28(s0)
1c00a5c8 <udma_qspim_open+0xe8> jal	ra,1c008d48 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:85
	qspim_semaphores_rx[qspim_id] = shSemaphoreHandle;
1c00a5cc <udma_qspim_open+0xec> lbu	a5,-33(s0)
1c00a5d0 <udma_qspim_open+0xf0> addi	a4,gp,1172 # 1c00ebfc <qspim_semaphores_rx>
1c00a5d4 <udma_qspim_open+0xf4> slli	a5,a5,0x2
1c00a5d6 <udma_qspim_open+0xf6> add	a5,a5,a4
1c00a5d8 <udma_qspim_open+0xf8> lw	a4,-28(s0)
1c00a5dc <udma_qspim_open+0xfc> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:87

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a5de <udma_qspim_open+0xfe> li	a2,3
1c00a5e0 <udma_qspim_open+0x100> li	a1,0
1c00a5e2 <udma_qspim_open+0x102> li	a0,1
1c00a5e4 <udma_qspim_open+0x104> jal	ra,1c008c58 <xQueueGenericCreate>
1c00a5e8 <udma_qspim_open+0x108> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:88
	configASSERT(shSemaphoreHandle);
1c00a5ec <udma_qspim_open+0x10c> lw	a5,-28(s0)
1c00a5f0 <udma_qspim_open+0x110> bnez	a5,1c00a5f8 <udma_qspim_open+0x118>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:88 (discriminator 1)
1c00a5f2 <udma_qspim_open+0x112> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:88 (discriminator 2)
1c00a5f6 <udma_qspim_open+0x116> j	1c00a5f6 <udma_qspim_open+0x116>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:89
	xSemaphoreGive(shSemaphoreHandle);
1c00a5f8 <udma_qspim_open+0x118> li	a3,0
1c00a5fa <udma_qspim_open+0x11a> li	a2,0
1c00a5fc <udma_qspim_open+0x11c> li	a1,0
1c00a5fe <udma_qspim_open+0x11e> lw	a0,-28(s0)
1c00a602 <udma_qspim_open+0x122> jal	ra,1c008d48 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:90
	qspim_semaphores_tx[qspim_id] = shSemaphoreHandle;
1c00a606 <udma_qspim_open+0x126> lbu	a5,-33(s0)
1c00a60a <udma_qspim_open+0x12a> addi	a4,gp,1164 # 1c00ebf4 <qspim_semaphores_tx>
1c00a60e <udma_qspim_open+0x12e> slli	a5,a5,0x2
1c00a610 <udma_qspim_open+0x130> add	a5,a5,a4
1c00a612 <udma_qspim_open+0x132> lw	a4,-28(s0)
1c00a616 <udma_qspim_open+0x136> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:92

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a618 <udma_qspim_open+0x138> li	a2,3
1c00a61a <udma_qspim_open+0x13a> li	a1,0
1c00a61c <udma_qspim_open+0x13c> li	a0,1
1c00a61e <udma_qspim_open+0x13e> jal	ra,1c008c58 <xQueueGenericCreate>
1c00a622 <udma_qspim_open+0x142> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:93
	configASSERT(shSemaphoreHandle);
1c00a626 <udma_qspim_open+0x146> lw	a5,-28(s0)
1c00a62a <udma_qspim_open+0x14a> bnez	a5,1c00a632 <udma_qspim_open+0x152>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:93 (discriminator 1)
1c00a62c <udma_qspim_open+0x14c> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:93 (discriminator 3)
1c00a630 <udma_qspim_open+0x150> j	1c00a630 <udma_qspim_open+0x150>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:94
	xSemaphoreGive(shSemaphoreHandle);
1c00a632 <udma_qspim_open+0x152> li	a3,0
1c00a634 <udma_qspim_open+0x154> li	a2,0
1c00a636 <udma_qspim_open+0x156> li	a1,0
1c00a638 <udma_qspim_open+0x158> lw	a0,-28(s0)
1c00a63c <udma_qspim_open+0x15c> jal	ra,1c008d48 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:95
	qspim_semaphores_cmd[qspim_id] = shSemaphoreHandle;
1c00a640 <udma_qspim_open+0x160> lbu	a5,-33(s0)
1c00a644 <udma_qspim_open+0x164> addi	a4,gp,1180 # 1c00ec04 <qspim_semaphores_cmd>
1c00a648 <udma_qspim_open+0x168> slli	a5,a5,0x2
1c00a64a <udma_qspim_open+0x16a> add	a5,a5,a4
1c00a64c <udma_qspim_open+0x16c> lw	a4,-28(s0)
1c00a650 <udma_qspim_open+0x170> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:97

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a652 <udma_qspim_open+0x172> li	a2,3
1c00a654 <udma_qspim_open+0x174> li	a1,0
1c00a656 <udma_qspim_open+0x176> li	a0,1
1c00a658 <udma_qspim_open+0x178> jal	ra,1c008c58 <xQueueGenericCreate>
1c00a65c <udma_qspim_open+0x17c> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:98
	configASSERT(shSemaphoreHandle);
1c00a660 <udma_qspim_open+0x180> lw	a5,-28(s0)
1c00a664 <udma_qspim_open+0x184> bnez	a5,1c00a66c <udma_qspim_open+0x18c>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:98 (discriminator 1)
1c00a666 <udma_qspim_open+0x186> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:98 (discriminator 4)
1c00a66a <udma_qspim_open+0x18a> j	1c00a66a <udma_qspim_open+0x18a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:99
	xSemaphoreGive(shSemaphoreHandle);
1c00a66c <udma_qspim_open+0x18c> li	a3,0
1c00a66e <udma_qspim_open+0x18e> li	a2,0
1c00a670 <udma_qspim_open+0x190> li	a1,0
1c00a672 <udma_qspim_open+0x192> lw	a0,-28(s0)
1c00a676 <udma_qspim_open+0x196> jal	ra,1c008d48 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:100
	qspim_semaphores_eot[qspim_id] = shSemaphoreHandle;
1c00a67a <udma_qspim_open+0x19a> lbu	a5,-33(s0)
1c00a67e <udma_qspim_open+0x19e> addi	a4,gp,1152 # 1c00ebe8 <qspim_semaphores_eot>
1c00a682 <udma_qspim_open+0x1a2> slli	a5,a5,0x2
1c00a684 <udma_qspim_open+0x1a4> add	a5,a5,a4
1c00a686 <udma_qspim_open+0x1a6> lw	a4,-28(s0)
1c00a68a <udma_qspim_open+0x1aa> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:103

	/* Set handlers. */
	isr_count = 0;
1c00a68c <udma_qspim_open+0x1ac> sw	zero,1064(gp) # 1c00eb90 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:104
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_RX(qspim_id), spi_rx_isr, qspim_semaphores_rx[qspim_id]);
1c00a690 <udma_qspim_open+0x1b0> lbu	a5,-33(s0)
1c00a694 <udma_qspim_open+0x1b4> addi	a5,a5,2
1c00a696 <udma_qspim_open+0x1b6> slli	a5,a5,0x2
1c00a698 <udma_qspim_open+0x1b8> mv	a3,a5
1c00a69a <udma_qspim_open+0x1ba> lbu	a5,-33(s0)
1c00a69e <udma_qspim_open+0x1be> addi	a4,gp,1172 # 1c00ebfc <qspim_semaphores_rx>
1c00a6a2 <udma_qspim_open+0x1c2> slli	a5,a5,0x2
1c00a6a4 <udma_qspim_open+0x1c4> add	a5,a5,a4
1c00a6a6 <udma_qspim_open+0x1c6> lw	a5,0(a5)
1c00a6a8 <udma_qspim_open+0x1c8> mv	a2,a5
1c00a6aa <udma_qspim_open+0x1ca> lui	a5,0x1c00a
1c00a6ae <udma_qspim_open+0x1ce> addi	a1,a5,1168 # 1c00a490 <spi_rx_isr>
1c00a6b2 <udma_qspim_open+0x1d2> mv	a0,a3
1c00a6b4 <udma_qspim_open+0x1d4> jal	ra,1c009d0c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:105
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_TX(qspim_id), spi_tx_isr, qspim_semaphores_tx[qspim_id]);
1c00a6b8 <udma_qspim_open+0x1d8> lbu	a5,-33(s0)
1c00a6bc <udma_qspim_open+0x1dc> addi	a5,a5,2
1c00a6be <udma_qspim_open+0x1de> slli	a5,a5,0x2
1c00a6c0 <udma_qspim_open+0x1e0> addi	a3,a5,1
1c00a6c4 <udma_qspim_open+0x1e4> lbu	a5,-33(s0)
1c00a6c8 <udma_qspim_open+0x1e8> addi	a4,gp,1164 # 1c00ebf4 <qspim_semaphores_tx>
1c00a6cc <udma_qspim_open+0x1ec> slli	a5,a5,0x2
1c00a6ce <udma_qspim_open+0x1ee> add	a5,a5,a4
1c00a6d0 <udma_qspim_open+0x1f0> lw	a5,0(a5)
1c00a6d2 <udma_qspim_open+0x1f2> mv	a2,a5
1c00a6d4 <udma_qspim_open+0x1f4> lui	a5,0x1c00a
1c00a6d8 <udma_qspim_open+0x1f8> addi	a1,a5,1142 # 1c00a476 <spi_tx_isr>
1c00a6dc <udma_qspim_open+0x1fc> mv	a0,a3
1c00a6de <udma_qspim_open+0x1fe> jal	ra,1c009d0c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:106
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_CMD(qspim_id), spi_cmd_isr, qspim_semaphores_cmd[qspim_id]);
1c00a6e2 <udma_qspim_open+0x202> lbu	a5,-33(s0)
1c00a6e6 <udma_qspim_open+0x206> addi	a5,a5,2
1c00a6e8 <udma_qspim_open+0x208> slli	a5,a5,0x2
1c00a6ea <udma_qspim_open+0x20a> addi	a5,a5,2
1c00a6ec <udma_qspim_open+0x20c> mv	a3,a5
1c00a6ee <udma_qspim_open+0x20e> lbu	a5,-33(s0)
1c00a6f2 <udma_qspim_open+0x212> addi	a4,gp,1180 # 1c00ec04 <qspim_semaphores_cmd>
1c00a6f6 <udma_qspim_open+0x216> slli	a5,a5,0x2
1c00a6f8 <udma_qspim_open+0x218> add	a5,a5,a4
1c00a6fa <udma_qspim_open+0x21a> lw	a5,0(a5)
1c00a6fc <udma_qspim_open+0x21c> mv	a2,a5
1c00a6fe <udma_qspim_open+0x21e> lui	a5,0x1c00a
1c00a702 <udma_qspim_open+0x222> addi	a1,a5,1194 # 1c00a4aa <spi_cmd_isr>
1c00a706 <udma_qspim_open+0x226> mv	a0,a3
1c00a708 <udma_qspim_open+0x228> jal	ra,1c009d0c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:107
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_EOT(qspim_id), spi_eot_isr, qspim_semaphores_eot[qspim_id]);
1c00a70c <udma_qspim_open+0x22c> lbu	a5,-33(s0)
1c00a710 <udma_qspim_open+0x230> addi	a5,a5,2
1c00a712 <udma_qspim_open+0x232> slli	a5,a5,0x2
1c00a714 <udma_qspim_open+0x234> addi	a5,a5,3
1c00a716 <udma_qspim_open+0x236> mv	a3,a5
1c00a718 <udma_qspim_open+0x238> lbu	a5,-33(s0)
1c00a71c <udma_qspim_open+0x23c> addi	a4,gp,1152 # 1c00ebe8 <qspim_semaphores_eot>
1c00a720 <udma_qspim_open+0x240> slli	a5,a5,0x2
1c00a722 <udma_qspim_open+0x242> add	a5,a5,a4
1c00a724 <udma_qspim_open+0x244> lw	a5,0(a5)
1c00a726 <udma_qspim_open+0x246> mv	a2,a5
1c00a728 <udma_qspim_open+0x248> lui	a5,0x1c00a
1c00a72c <udma_qspim_open+0x24c> addi	a1,a5,1220 # 1c00a4c4 <spi_eot_isr>
1c00a730 <udma_qspim_open+0x250> mv	a0,a3
1c00a732 <udma_qspim_open+0x252> jal	ra,1c009d0c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:110

	/* Enable SOC events propagation to FC. */
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_SPIM_RX(qspim_id));
1c00a736 <udma_qspim_open+0x256> lbu	a5,-33(s0)
1c00a73a <udma_qspim_open+0x25a> addi	a5,a5,2
1c00a73c <udma_qspim_open+0x25c> slli	a5,a5,0x2
1c00a73e <udma_qspim_open+0x25e> mv	a0,a5
1c00a740 <udma_qspim_open+0x260> jal	1c00a400 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:111
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_SPIM_TX(qspim_id));
1c00a742 <udma_qspim_open+0x262> lbu	a5,-33(s0)
1c00a746 <udma_qspim_open+0x266> addi	a5,a5,2
1c00a748 <udma_qspim_open+0x268> slli	a5,a5,0x2
1c00a74a <udma_qspim_open+0x26a> addi	a5,a5,1
1c00a74c <udma_qspim_open+0x26c> mv	a0,a5
1c00a74e <udma_qspim_open+0x26e> jal	1c00a400 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:112
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_SPIM_CMD(qspim_id));
1c00a750 <udma_qspim_open+0x270> lbu	a5,-33(s0)
1c00a754 <udma_qspim_open+0x274> addi	a5,a5,2
1c00a756 <udma_qspim_open+0x276> slli	a5,a5,0x2
1c00a758 <udma_qspim_open+0x278> addi	a5,a5,2
1c00a75a <udma_qspim_open+0x27a> mv	a0,a5
1c00a75c <udma_qspim_open+0x27c> jal	1c00a400 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:113
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_SPIM_EOT(qspim_id));
1c00a75e <udma_qspim_open+0x27e> lbu	a5,-33(s0)
1c00a762 <udma_qspim_open+0x282> addi	a5,a5,2
1c00a764 <udma_qspim_open+0x284> slli	a5,a5,0x2
1c00a766 <udma_qspim_open+0x286> addi	a5,a5,3
1c00a768 <udma_qspim_open+0x288> mv	a0,a5
1c00a76a <udma_qspim_open+0x28a> jal	1c00a400 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:116

	/* configure */
	aucclkdiv = 5000000/clk_freq;
1c00a76c <udma_qspim_open+0x28c> lui	a5,0x4c5
1c00a770 <udma_qspim_open+0x290> addi	a4,a5,-1216 # 004c4b40 <__stack_size+0x4c4340>
1c00a774 <udma_qspim_open+0x294> lw	a5,-40(s0)
1c00a778 <udma_qspim_open+0x298> divu	a5,a4,a5
1c00a77c <udma_qspim_open+0x29c> andi	a4,a5,255
1c00a780 <udma_qspim_open+0x2a0> sb	a4,1160(gp) # 1c00ebf0 <aucclkdiv>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:118

	return 0;
1c00a784 <udma_qspim_open+0x2a4> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:119
}
1c00a786 <udma_qspim_open+0x2a6> mv	a0,a5
1c00a788 <udma_qspim_open+0x2a8> lw	ra,44(sp)
1c00a78a <udma_qspim_open+0x2aa> lw	s0,40(sp)
1c00a78c <udma_qspim_open+0x2ac> addi	sp,sp,48
1c00a78e <udma_qspim_open+0x2ae> ret
udma_qspim_control():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:121

uint16_t udma_qspim_control(uint8_t qspim_id, udma_qspim_control_type_t control_type, void* pparam) {
1c00a790 <udma_qspim_control> addi	sp,sp,-48
1c00a792 <udma_qspim_control+0x2> sw	s0,44(sp)
1c00a794 <udma_qspim_control+0x4> addi	s0,sp,48
1c00a796 <udma_qspim_control+0x6> mv	a5,a0
1c00a798 <udma_qspim_control+0x8> sw	a1,-40(s0)
1c00a79c <udma_qspim_control+0xc> sw	a2,-44(s0)
1c00a7a0 <udma_qspim_control+0x10> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:122
	volatile UdmaCtrl_t*		pudma_ctrl = (UdmaCtrl_t*)UDMA_CH_ADDR_CTRL;
1c00a7a4 <udma_qspim_control+0x14> lui	a5,0x1a102
1c00a7a8 <udma_qspim_control+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:123
	UdmaQspi_t*					pqspim_regs = (UdmaQspi_t*)(UDMA_CH_ADDR_QSPIM + qspim_id * UDMA_CH_SIZE);
1c00a7ac <udma_qspim_control+0x1c> lbu	a4,-33(s0)
1c00a7b0 <udma_qspim_control+0x20> lui	a5,0x342
1c00a7b4 <udma_qspim_control+0x24> addi	a5,a5,67 # 00342043 <__stack_size+0x341843>
1c00a7b8 <udma_qspim_control+0x28> add	a5,a5,a4
1c00a7ba <udma_qspim_control+0x2a> slli	a5,a5,0x7
1c00a7bc <udma_qspim_control+0x2c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:125

	switch(control_type) {
1c00a7c0 <udma_qspim_control+0x30> lw	a5,-40(s0)
1c00a7c4 <udma_qspim_control+0x34> bnez	a5,1c00a81a <udma_qspim_control+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:127
	case kQSPImReset:
		if( qspim_id == 0 )
1c00a7c6 <udma_qspim_control+0x36> lbu	a5,-33(s0)
1c00a7ca <udma_qspim_control+0x3a> bnez	a5,1c00a7ee <udma_qspim_control+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:129
		{
			pudma_ctrl->reg_rst |= (UDMA_CTRL_QSPIM0_CLKEN);
1c00a7cc <udma_qspim_control+0x3c> lw	a5,-20(s0)
1c00a7d0 <udma_qspim_control+0x40> lw	a5,8(a5)
1c00a7d2 <udma_qspim_control+0x42> ori	a4,a5,4
1c00a7d6 <udma_qspim_control+0x46> lw	a5,-20(s0)
1c00a7da <udma_qspim_control+0x4a> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:130
			pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM0_CLKEN);
1c00a7dc <udma_qspim_control+0x4c> lw	a5,-20(s0)
1c00a7e0 <udma_qspim_control+0x50> lw	a5,8(a5)
1c00a7e2 <udma_qspim_control+0x52> andi	a4,a5,-5
1c00a7e6 <udma_qspim_control+0x56> lw	a5,-20(s0)
1c00a7ea <udma_qspim_control+0x5a> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:139
#if(NEW_BIT_FILE == 1 )
			pudma_ctrl->reg_rst |= (UDMA_CTRL_QSPIM1_CLKEN);
			pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM1_CLKEN);
#endif
		}
		break;
1c00a7ec <udma_qspim_control+0x5c> j	1c00a820 <udma_qspim_control+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:132
		else if( qspim_id == 1 )
1c00a7ee <udma_qspim_control+0x5e> lbu	a4,-33(s0)
1c00a7f2 <udma_qspim_control+0x62> li	a5,1
1c00a7f4 <udma_qspim_control+0x64> bne	a4,a5,1c00a820 <udma_qspim_control+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:135
			pudma_ctrl->reg_rst |= (UDMA_CTRL_QSPIM1_CLKEN);
1c00a7f8 <udma_qspim_control+0x68> lw	a5,-20(s0)
1c00a7fc <udma_qspim_control+0x6c> lw	a5,8(a5)
1c00a7fe <udma_qspim_control+0x6e> ori	a4,a5,8
1c00a802 <udma_qspim_control+0x72> lw	a5,-20(s0)
1c00a806 <udma_qspim_control+0x76> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:136
			pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM1_CLKEN);
1c00a808 <udma_qspim_control+0x78> lw	a5,-20(s0)
1c00a80c <udma_qspim_control+0x7c> lw	a5,8(a5)
1c00a80e <udma_qspim_control+0x7e> andi	a4,a5,-9
1c00a812 <udma_qspim_control+0x82> lw	a5,-20(s0)
1c00a816 <udma_qspim_control+0x86> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:139
		break;
1c00a818 <udma_qspim_control+0x88> j	1c00a820 <udma_qspim_control+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:141 (discriminator 1)
	default:
		configASSERT(0);
1c00a81a <udma_qspim_control+0x8a> csrci	mstatus,8
1c00a81e <udma_qspim_control+0x8e> j	1c00a81e <udma_qspim_control+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:139
		break;
1c00a820 <udma_qspim_control+0x90> nop
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:143
	}
	return 0;
1c00a822 <udma_qspim_control+0x92> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:144
}
1c00a824 <udma_qspim_control+0x94> mv	a0,a5
1c00a826 <udma_qspim_control+0x96> lw	s0,44(sp)
1c00a828 <udma_qspim_control+0x98> addi	sp,sp,48
1c00a82a <udma_qspim_control+0x9a> ret
udma_flash_readid():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:286

	return result;
}

static uint8_t rx_data[16];
uint32_t udma_flash_readid(uint8_t qspim_id, uint8_t cs) {
1c00a82c <udma_flash_readid> addi	sp,sp,-48
1c00a82e <udma_flash_readid+0x2> sw	s0,44(sp)
1c00a830 <udma_flash_readid+0x4> addi	s0,sp,48
1c00a832 <udma_flash_readid+0x6> mv	a5,a0
1c00a834 <udma_flash_readid+0x8> mv	a4,a1
1c00a836 <udma_flash_readid+0xa> sb	a5,-33(s0)
1c00a83a <udma_flash_readid+0xe> mv	a5,a4
1c00a83c <udma_flash_readid+0x10> sb	a5,-34(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:287
	UdmaQspi_t*	pqspim_regs = (UdmaQspi_t*)(UDMA_CH_ADDR_QSPIM + qspim_id * UDMA_CH_SIZE);
1c00a840 <udma_flash_readid+0x14> lbu	a4,-33(s0)
1c00a844 <udma_flash_readid+0x18> lui	a5,0x342
1c00a848 <udma_flash_readid+0x1c> addi	a5,a5,67 # 00342043 <__stack_size+0x341843>
1c00a84c <udma_flash_readid+0x20> add	a5,a5,a4
1c00a84e <udma_flash_readid+0x22> slli	a5,a5,0x7
1c00a850 <udma_flash_readid+0x24> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:288
	uint32_t*	pcmd = auccmd;
1c00a854 <udma_flash_readid+0x28> addi	a5,gp,4 # 1c00e76c <auccmd>
1c00a858 <udma_flash_readid+0x2c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:289
	uint32_t result = 0;
1c00a85c <udma_flash_readid+0x30> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:291

	pqspim_regs->rx_cfg_b.en = 0;
1c00a860 <udma_flash_readid+0x34> lw	a5,-20(s0)
1c00a864 <udma_flash_readid+0x38> lbu	a4,8(a5)
1c00a868 <udma_flash_readid+0x3c> andi	a4,a4,-17
1c00a86a <udma_flash_readid+0x3e> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:292
	pqspim_regs->tx_cfg_b.en = 0;
1c00a86e <udma_flash_readid+0x42> lw	a5,-20(s0)
1c00a872 <udma_flash_readid+0x46> lbu	a4,24(a5)
1c00a876 <udma_flash_readid+0x4a> andi	a4,a4,-17
1c00a878 <udma_flash_readid+0x4c> sb	a4,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:293
	pqspim_regs->cmd_cfg_b.en = 0;
1c00a87c <udma_flash_readid+0x50> lw	a5,-20(s0)
1c00a880 <udma_flash_readid+0x54> lbu	a4,40(a5)
1c00a884 <udma_flash_readid+0x58> andi	a4,a4,-17
1c00a886 <udma_flash_readid+0x5a> sb	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:295

	pqspim_regs->rx_cfg_b.clr = 1;
1c00a88a <udma_flash_readid+0x5e> lw	a5,-20(s0)
1c00a88e <udma_flash_readid+0x62> lbu	a4,8(a5)
1c00a892 <udma_flash_readid+0x66> ori	a4,a4,64
1c00a896 <udma_flash_readid+0x6a> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:296
	pqspim_regs->tx_cfg_b.clr = 1;
1c00a89a <udma_flash_readid+0x6e> lw	a5,-20(s0)
1c00a89e <udma_flash_readid+0x72> lbu	a4,24(a5)
1c00a8a2 <udma_flash_readid+0x76> ori	a4,a4,64
1c00a8a6 <udma_flash_readid+0x7a> sb	a4,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:297
	pqspim_regs->cmd_cfg_b.clr = 1;
1c00a8aa <udma_flash_readid+0x7e> lw	a5,-20(s0)
1c00a8ae <udma_flash_readid+0x82> lbu	a4,40(a5)
1c00a8b2 <udma_flash_readid+0x86> ori	a4,a4,64
1c00a8b6 <udma_flash_readid+0x8a> sb	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:299

	*pcmd++ = kSPIm_Cfg | aucclkdiv;
1c00a8ba <udma_flash_readid+0x8e> lbu	a3,1160(gp) # 1c00ebf0 <aucclkdiv>
1c00a8be <udma_flash_readid+0x92> lw	a5,-24(s0)
1c00a8c2 <udma_flash_readid+0x96> addi	a4,a5,4
1c00a8c6 <udma_flash_readid+0x9a> sw	a4,-24(s0)
1c00a8ca <udma_flash_readid+0x9e> mv	a4,a3
1c00a8cc <udma_flash_readid+0xa0> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:300
	*pcmd++ = kSPIm_SOT | cs;
1c00a8ce <udma_flash_readid+0xa2> lbu	a4,-34(s0)
1c00a8d2 <udma_flash_readid+0xa6> lui	a5,0x10000
1c00a8d6 <udma_flash_readid+0xaa> or	a3,a4,a5
1c00a8da <udma_flash_readid+0xae> lw	a5,-24(s0)
1c00a8de <udma_flash_readid+0xb2> addi	a4,a5,4 # 10000004 <__stack_size+0xffff804>
1c00a8e2 <udma_flash_readid+0xb6> sw	a4,-24(s0)
1c00a8e6 <udma_flash_readid+0xba> mv	a4,a3
1c00a8e8 <udma_flash_readid+0xbc> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:301
	*pcmd++ = kSPIm_SendCmd | (0x7009f); // readid command
1c00a8ea <udma_flash_readid+0xbe> lw	a5,-24(s0)
1c00a8ee <udma_flash_readid+0xc2> addi	a4,a5,4
1c00a8f2 <udma_flash_readid+0xc6> sw	a4,-24(s0)
1c00a8f6 <udma_flash_readid+0xca> lui	a4,0x20070
1c00a8fa <udma_flash_readid+0xce> addi	a4,a4,159 # 2007009f <__l2_shared_end+0x405092f>
1c00a8fe <udma_flash_readid+0xd2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:302
	*pcmd++ = kSPIm_RxData | (0x00470000 | (4-1)) ; // 4 words recieved
1c00a900 <udma_flash_readid+0xd4> lw	a5,-24(s0)
1c00a904 <udma_flash_readid+0xd8> addi	a4,a5,4
1c00a908 <udma_flash_readid+0xdc> sw	a4,-24(s0)
1c00a90c <udma_flash_readid+0xe0> lui	a4,0x70470
1c00a910 <udma_flash_readid+0xe4> addi	a4,a4,3
1c00a912 <udma_flash_readid+0xe6> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:303
	*pcmd++ = kSPIm_EOT  | 1; // generate event
1c00a914 <udma_flash_readid+0xe8> lw	a5,-24(s0)
1c00a918 <udma_flash_readid+0xec> addi	a4,a5,4
1c00a91c <udma_flash_readid+0xf0> sw	a4,-24(s0)
1c00a920 <udma_flash_readid+0xf4> lui	a4,0x90000
1c00a924 <udma_flash_readid+0xf8> addi	a4,a4,1
1c00a926 <udma_flash_readid+0xfa> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:305

	pqspim_regs->rx_saddr = &rx_data;
1c00a928 <udma_flash_readid+0xfc> addi	a4,gp,68 # 1c00e7ac <rx_data>
1c00a92c <udma_flash_readid+0x100> lw	a5,-20(s0)
1c00a930 <udma_flash_readid+0x104> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:306
	pqspim_regs->rx_size = 4;
1c00a932 <udma_flash_readid+0x106> lw	a5,-20(s0)
1c00a936 <udma_flash_readid+0x10a> li	a4,4
1c00a938 <udma_flash_readid+0x10c> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:307
	pqspim_regs->rx_cfg_b.en = 1;
1c00a93a <udma_flash_readid+0x10e> lw	a5,-20(s0)
1c00a93e <udma_flash_readid+0x112> lbu	a4,8(a5)
1c00a942 <udma_flash_readid+0x116> ori	a4,a4,16
1c00a946 <udma_flash_readid+0x11a> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:309

	pqspim_regs->cmd_saddr = auccmd;
1c00a94a <udma_flash_readid+0x11e> addi	a4,gp,4 # 1c00e76c <auccmd>
1c00a94e <udma_flash_readid+0x122> lw	a5,-20(s0)
1c00a952 <udma_flash_readid+0x126> sw	a4,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:310
	pqspim_regs->cmd_size = (uint32_t)(pcmd - auccmd)*4;
1c00a954 <udma_flash_readid+0x128> lw	a4,-24(s0)
1c00a958 <udma_flash_readid+0x12c> addi	a5,gp,4 # 1c00e76c <auccmd>
1c00a95c <udma_flash_readid+0x130> sub	a5,a4,a5
1c00a960 <udma_flash_readid+0x134> mv	a4,a5
1c00a962 <udma_flash_readid+0x136> lw	a5,-20(s0)
1c00a966 <udma_flash_readid+0x13a> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:311
	pqspim_regs->cmd_cfg_b.en = 1;
1c00a968 <udma_flash_readid+0x13c> lw	a5,-20(s0)
1c00a96c <udma_flash_readid+0x140> lbu	a4,40(a5)
1c00a970 <udma_flash_readid+0x144> ori	a4,a4,16
1c00a974 <udma_flash_readid+0x148> sb	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:313

	while (pqspim_regs->rx_size != 0) {}
1c00a978 <udma_flash_readid+0x14c> nop
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:313 (discriminator 1)
1c00a97a <udma_flash_readid+0x14e> lw	a5,-20(s0)
1c00a97e <udma_flash_readid+0x152> lw	a5,4(a5)
1c00a980 <udma_flash_readid+0x154> bnez	a5,1c00a97a <udma_flash_readid+0x14e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:315

	result = *(uint32_t *) rx_data;
1c00a982 <udma_flash_readid+0x156> addi	a5,gp,68 # 1c00e7ac <rx_data>
1c00a986 <udma_flash_readid+0x15a> lw	a5,0(a5)
1c00a988 <udma_flash_readid+0x15c> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:316
	return result;
1c00a98c <udma_flash_readid+0x160> lw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:317
}
1c00a990 <udma_flash_readid+0x164> mv	a0,a5
1c00a992 <udma_flash_readid+0x166> lw	s0,44(sp)
1c00a994 <udma_flash_readid+0x168> addi	sp,sp,48
1c00a996 <udma_flash_readid+0x16a> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
{
1c00a998 <writew> addi	sp,sp,-32
1c00a99a <writew+0x2> sw	s0,28(sp)
1c00a99c <writew+0x4> addi	s0,sp,32
1c00a99e <writew+0x6> sw	a0,-20(s0)
1c00a9a2 <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c00a9a6 <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c00a9aa <writew+0x12> lw	a5,-20(s0)
1c00a9ae <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c00a9b0 <writew+0x18> nop
1c00a9b2 <writew+0x1a> lw	s0,28(sp)
1c00a9b4 <writew+0x1c> addi	sp,sp,32
1c00a9b6 <writew+0x1e> ret
readw():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:79
{
1c00a9b8 <readw> addi	sp,sp,-48
1c00a9ba <readw+0x2> sw	s0,44(sp)
1c00a9bc <readw+0x4> addi	s0,sp,48
1c00a9be <readw+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:84
		     : "r"((const volatile uint32_t *)addr));
1c00a9c2 <readw+0xa> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:82
	asm volatile("lw %0, 0(%1)"
1c00a9c6 <readw+0xe> lw	a5,0(a5)
1c00a9c8 <readw+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:85
	return val;
1c00a9cc <readw+0x14> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:86
}
1c00a9d0 <readw+0x18> mv	a0,a5
1c00a9d2 <readw+0x1a> lw	s0,44(sp)
1c00a9d4 <readw+0x1c> addi	sp,sp,48
1c00a9d6 <readw+0x1e> ret
soc_eu_fc_write():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:108
{
1c00a9d8 <soc_eu_fc_write> addi	sp,sp,-32
1c00a9da <soc_eu_fc_write+0x2> sw	ra,28(sp)
1c00a9dc <soc_eu_fc_write+0x4> sw	s0,24(sp)
1c00a9de <soc_eu_fc_write+0x6> addi	s0,sp,32
1c00a9e0 <soc_eu_fc_write+0x8> sw	a0,-20(s0)
1c00a9e4 <soc_eu_fc_write+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:109
	writew(val, (uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00a9e8 <soc_eu_fc_write+0x10> lw	a4,-24(s0)
1c00a9ec <soc_eu_fc_write+0x14> lui	a5,0x1a106
1c00a9f0 <soc_eu_fc_write+0x18> addi	a5,a5,4
1c00a9f2 <soc_eu_fc_write+0x1a> add	a5,a5,a4
1c00a9f4 <soc_eu_fc_write+0x1c> mv	a1,a5
1c00a9f6 <soc_eu_fc_write+0x1e> lw	a0,-20(s0)
1c00a9fa <soc_eu_fc_write+0x22> jal	1c00a998 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:110
}
1c00a9fc <soc_eu_fc_write+0x24> nop
1c00a9fe <soc_eu_fc_write+0x26> lw	ra,28(sp)
1c00aa00 <soc_eu_fc_write+0x28> lw	s0,24(sp)
1c00aa02 <soc_eu_fc_write+0x2a> addi	sp,sp,32
1c00aa04 <soc_eu_fc_write+0x2c> ret
soc_eu_fc_read():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:113
{
1c00aa06 <soc_eu_fc_read> addi	sp,sp,-32
1c00aa08 <soc_eu_fc_read+0x2> sw	ra,28(sp)
1c00aa0a <soc_eu_fc_read+0x4> sw	s0,24(sp)
1c00aa0c <soc_eu_fc_read+0x6> addi	s0,sp,32
1c00aa0e <soc_eu_fc_read+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:114
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00aa12 <soc_eu_fc_read+0xc> lw	a4,-20(s0)
1c00aa16 <soc_eu_fc_read+0x10> lui	a5,0x1a106
1c00aa1a <soc_eu_fc_read+0x14> addi	a5,a5,4
1c00aa1c <soc_eu_fc_read+0x16> add	a5,a5,a4
1c00aa1e <soc_eu_fc_read+0x18> mv	a0,a5
1c00aa20 <soc_eu_fc_read+0x1a> jal	1c00a9b8 <readw>
1c00aa22 <soc_eu_fc_read+0x1c> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:115
}
1c00aa24 <soc_eu_fc_read+0x1e> mv	a0,a5
1c00aa26 <soc_eu_fc_read+0x20> lw	ra,28(sp)
1c00aa28 <soc_eu_fc_read+0x22> lw	s0,24(sp)
1c00aa2a <soc_eu_fc_read+0x24> addi	sp,sp,32
1c00aa2c <soc_eu_fc_read+0x26> ret
hal_soc_eu_set_fc_mask():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:137
static inline void hal_soc_eu_set_fc_mask(int evt) {
1c00aa2e <hal_soc_eu_set_fc_mask> addi	sp,sp,-48
1c00aa30 <hal_soc_eu_set_fc_mask+0x2> sw	ra,44(sp)
1c00aa32 <hal_soc_eu_set_fc_mask+0x4> sw	s0,40(sp)
1c00aa34 <hal_soc_eu_set_fc_mask+0x6> addi	s0,sp,48
1c00aa36 <hal_soc_eu_set_fc_mask+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138
	if (evt >= 256 || evt < 0)
1c00aa3a <hal_soc_eu_set_fc_mask+0xc> lw	a4,-36(s0)
1c00aa3e <hal_soc_eu_set_fc_mask+0x10> li	a5,255
1c00aa42 <hal_soc_eu_set_fc_mask+0x14> blt	a5,a4,1c00aa9a <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138 (discriminator 1)
1c00aa46 <hal_soc_eu_set_fc_mask+0x18> lw	a5,-36(s0)
1c00aa4a <hal_soc_eu_set_fc_mask+0x1c> bltz	a5,1c00aa9a <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:141
	int shift = evt % 32;
1c00aa4e <hal_soc_eu_set_fc_mask+0x20> lw	a4,-36(s0)
1c00aa52 <hal_soc_eu_set_fc_mask+0x24> srai	a5,a4,0x1f
1c00aa56 <hal_soc_eu_set_fc_mask+0x28> srli	a5,a5,0x1b
1c00aa58 <hal_soc_eu_set_fc_mask+0x2a> add	a4,a4,a5
1c00aa5a <hal_soc_eu_set_fc_mask+0x2c> andi	a4,a4,31
1c00aa5c <hal_soc_eu_set_fc_mask+0x2e> sub	a5,a4,a5
1c00aa60 <hal_soc_eu_set_fc_mask+0x32> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:142
	uint32_t reg_offset = evt/32 * 4;
1c00aa64 <hal_soc_eu_set_fc_mask+0x36> lw	a5,-36(s0)
1c00aa68 <hal_soc_eu_set_fc_mask+0x3a> srai	a4,a5,0x1f
1c00aa6c <hal_soc_eu_set_fc_mask+0x3e> andi	a4,a4,31
1c00aa6e <hal_soc_eu_set_fc_mask+0x40> add	a5,a5,a4
1c00aa70 <hal_soc_eu_set_fc_mask+0x42> srai	a5,a5,0x5
1c00aa72 <hal_soc_eu_set_fc_mask+0x44> slli	a5,a5,0x2
1c00aa74 <hal_soc_eu_set_fc_mask+0x46> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:143
	soc_eu_fc_write(soc_eu_fc_read(reg_offset) & ~(1 << shift), reg_offset);
1c00aa78 <hal_soc_eu_set_fc_mask+0x4a> lw	a0,-24(s0)
1c00aa7c <hal_soc_eu_set_fc_mask+0x4e> jal	1c00aa06 <soc_eu_fc_read>
1c00aa7e <hal_soc_eu_set_fc_mask+0x50> mv	a3,a0
1c00aa80 <hal_soc_eu_set_fc_mask+0x52> li	a4,1
1c00aa82 <hal_soc_eu_set_fc_mask+0x54> lw	a5,-20(s0)
1c00aa86 <hal_soc_eu_set_fc_mask+0x58> sll	a5,a4,a5
1c00aa8a <hal_soc_eu_set_fc_mask+0x5c> not	a5,a5
1c00aa8e <hal_soc_eu_set_fc_mask+0x60> and	a5,a5,a3
1c00aa90 <hal_soc_eu_set_fc_mask+0x62> lw	a1,-24(s0)
1c00aa94 <hal_soc_eu_set_fc_mask+0x66> mv	a0,a5
1c00aa96 <hal_soc_eu_set_fc_mask+0x68> jal	1c00a9d8 <soc_eu_fc_write>
1c00aa98 <hal_soc_eu_set_fc_mask+0x6a> j	1c00aa9c <hal_soc_eu_set_fc_mask+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:139
		return;
1c00aa9a <hal_soc_eu_set_fc_mask+0x6c> nop
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:144
}
1c00aa9c <hal_soc_eu_set_fc_mask+0x6e> lw	ra,44(sp)
1c00aa9e <hal_soc_eu_set_fc_mask+0x70> lw	s0,40(sp)
1c00aaa0 <hal_soc_eu_set_fc_mask+0x72> addi	sp,sp,48
1c00aaa2 <hal_soc_eu_set_fc_mask+0x74> ret
uart_rx_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:38
static char u1buffer[128], u0buffer[128];
static int u1rdptr, u1wrptr, u0rdptr,u0wrptr;
static UdmaUart_t *puart0 = (UdmaUart_t*)(UDMA_CH_ADDR_UART);
static UdmaUart_t *puart1 = (UdmaUart_t*)(UDMA_CH_ADDR_UART + UDMA_CH_SIZE);

void uart_rx_isr (void *id){
1c00aaa4 <uart_rx_isr> addi	sp,sp,-32
1c00aaa6 <uart_rx_isr+0x2> sw	s0,28(sp)
1c00aaa8 <uart_rx_isr+0x4> addi	s0,sp,32
1c00aaaa <uart_rx_isr+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:39
	if (id == 6) {
1c00aaae <uart_rx_isr+0xa> lw	a4,-20(s0)
1c00aab2 <uart_rx_isr+0xe> li	a5,6
1c00aab4 <uart_rx_isr+0x10> bne	a4,a5,1c00aafa <uart_rx_isr+0x56>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:40
		while (*(int*)0x1a102130) {
1c00aab8 <uart_rx_isr+0x14> j	1c00aaee <uart_rx_isr+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:41
			u1buffer[u1wrptr++] = puart1->data_b.rx_data & 0xff;
1c00aaba <uart_rx_isr+0x16> lw	a5,-1484(gp) # 1c00e19c <puart1>
1c00aabe <uart_rx_isr+0x1a> lbu	a5,52(a5) # 1a106034 <__stack_size+0x1a105834>
1c00aac2 <uart_rx_isr+0x1e> andi	a2,a5,255
1c00aac6 <uart_rx_isr+0x22> lw	a5,1072(gp) # 1c00eb98 <u1wrptr>
1c00aaca <uart_rx_isr+0x26> addi	a3,a5,1
1c00aace <uart_rx_isr+0x2a> sw	a3,1072(gp) # 1c00eb98 <u1wrptr>
1c00aad2 <uart_rx_isr+0x2e> slli	a4,a2,0x18
1c00aad6 <uart_rx_isr+0x32> srai	a4,a4,0x18
1c00aad8 <uart_rx_isr+0x34> addi	a3,gp,84 # 1c00e7bc <u1buffer>
1c00aadc <uart_rx_isr+0x38> add	a5,a5,a3
1c00aade <uart_rx_isr+0x3a> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:42
			u1wrptr &= 0x7f;
1c00aae2 <uart_rx_isr+0x3e> lw	a5,1072(gp) # 1c00eb98 <u1wrptr>
1c00aae6 <uart_rx_isr+0x42> andi	a4,a5,127
1c00aaea <uart_rx_isr+0x46> sw	a4,1072(gp) # 1c00eb98 <u1wrptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:40
		while (*(int*)0x1a102130) {
1c00aaee <uart_rx_isr+0x4a> lui	a5,0x1a102
1c00aaf2 <uart_rx_isr+0x4e> addi	a5,a5,304 # 1a102130 <__stack_size+0x1a101930>
1c00aaf6 <uart_rx_isr+0x52> lw	a5,0(a5)
1c00aaf8 <uart_rx_isr+0x54> bnez	a5,1c00aaba <uart_rx_isr+0x16>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:45
		}
	}
	if (id == 2) {
1c00aafa <uart_rx_isr+0x56> lw	a4,-20(s0)
1c00aafe <uart_rx_isr+0x5a> li	a5,2
1c00ab00 <uart_rx_isr+0x5c> bne	a4,a5,1c00ab42 <uart_rx_isr+0x9e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:46
		while (puart0->valid) {
1c00ab04 <uart_rx_isr+0x60> j	1c00ab3a <uart_rx_isr+0x96>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:47
			u0buffer[u0wrptr++] = puart0->data_b.rx_data & 0xff;
1c00ab06 <uart_rx_isr+0x62> lw	a5,-1488(gp) # 1c00e198 <puart0>
1c00ab0a <uart_rx_isr+0x66> lbu	a5,52(a5)
1c00ab0e <uart_rx_isr+0x6a> andi	a2,a5,255
1c00ab12 <uart_rx_isr+0x6e> lw	a5,1080(gp) # 1c00eba0 <u0wrptr>
1c00ab16 <uart_rx_isr+0x72> addi	a3,a5,1
1c00ab1a <uart_rx_isr+0x76> sw	a3,1080(gp) # 1c00eba0 <u0wrptr>
1c00ab1e <uart_rx_isr+0x7a> slli	a4,a2,0x18
1c00ab22 <uart_rx_isr+0x7e> srai	a4,a4,0x18
1c00ab24 <uart_rx_isr+0x80> addi	a3,gp,212 # 1c00e83c <u0buffer>
1c00ab28 <uart_rx_isr+0x84> add	a5,a5,a3
1c00ab2a <uart_rx_isr+0x86> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:48
			u0wrptr &= 0x7f;
1c00ab2e <uart_rx_isr+0x8a> lw	a5,1080(gp) # 1c00eba0 <u0wrptr>
1c00ab32 <uart_rx_isr+0x8e> andi	a4,a5,127
1c00ab36 <uart_rx_isr+0x92> sw	a4,1080(gp) # 1c00eba0 <u0wrptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:46
		while (puart0->valid) {
1c00ab3a <uart_rx_isr+0x96> lw	a5,-1488(gp) # 1c00e198 <puart0>
1c00ab3e <uart_rx_isr+0x9a> lw	a5,48(a5)
1c00ab40 <uart_rx_isr+0x9c> bnez	a5,1c00ab06 <uart_rx_isr+0x62>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:51
		}
	}
}
1c00ab42 <uart_rx_isr+0x9e> nop
1c00ab44 <uart_rx_isr+0xa0> lw	s0,28(sp)
1c00ab46 <uart_rx_isr+0xa2> addi	sp,sp,32
1c00ab48 <uart_rx_isr+0xa4> ret
udma_uart_open():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:66
		retval = u0buffer[u0rdptr++];
		u0rdptr &= 0x7f;
	}
	return retval;
}
uint16_t udma_uart_open (uint8_t uart_id, uint32_t xbaudrate) {
1c00ab4a <udma_uart_open> addi	sp,sp,-48
1c00ab4c <udma_uart_open+0x2> sw	ra,44(sp)
1c00ab4e <udma_uart_open+0x4> sw	s0,40(sp)
1c00ab50 <udma_uart_open+0x6> addi	s0,sp,48
1c00ab52 <udma_uart_open+0x8> mv	a5,a0
1c00ab54 <udma_uart_open+0xa> sw	a1,-40(s0)
1c00ab58 <udma_uart_open+0xe> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:68
	UdmaUart_t*				puart;
	volatile UdmaCtrl_t*		pudma_ctrl = (UdmaCtrl_t*)UDMA_CH_ADDR_CTRL;
1c00ab5c <udma_uart_open+0x12> lui	a5,0x1a102
1c00ab60 <udma_uart_open+0x16> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:71

	/* See if already initialized */
	if (uart_semaphores_rx[uart_id] != NULL || uart_semaphores_tx[uart_id] != NULL) {
1c00ab64 <udma_uart_open+0x1a> lbu	a5,-33(s0)
1c00ab68 <udma_uart_open+0x1e> addi	a4,gp,1188 # 1c00ec0c <uart_semaphores_rx>
1c00ab6c <udma_uart_open+0x22> slli	a5,a5,0x2
1c00ab6e <udma_uart_open+0x24> add	a5,a5,a4
1c00ab70 <udma_uart_open+0x26> lw	a5,0(a5)
1c00ab72 <udma_uart_open+0x28> bnez	a5,1c00ab84 <udma_uart_open+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:71 (discriminator 1)
1c00ab74 <udma_uart_open+0x2a> lbu	a5,-33(s0)
1c00ab78 <udma_uart_open+0x2e> addi	a4,gp,1196 # 1c00ec14 <uart_semaphores_tx>
1c00ab7c <udma_uart_open+0x32> slli	a5,a5,0x2
1c00ab7e <udma_uart_open+0x34> add	a5,a5,a4
1c00ab80 <udma_uart_open+0x36> lw	a5,0(a5)
1c00ab82 <udma_uart_open+0x38> beqz	a5,1c00ab88 <udma_uart_open+0x3e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:72
		return 1;
1c00ab84 <udma_uart_open+0x3a> li	a5,1
1c00ab86 <udma_uart_open+0x3c> j	1c00ad3e <udma_uart_open+0x1f4>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:75
	}
	/* Enable reset and enable uart clock */
	pudma_ctrl->reg_rst |= (UDMA_CTRL_UART0_CLKEN << uart_id);
1c00ab88 <udma_uart_open+0x3e> lw	a5,-20(s0)
1c00ab8c <udma_uart_open+0x42> lw	a5,8(a5)
1c00ab8e <udma_uart_open+0x44> lbu	a4,-33(s0)
1c00ab92 <udma_uart_open+0x48> li	a3,1
1c00ab94 <udma_uart_open+0x4a> sll	a4,a3,a4
1c00ab98 <udma_uart_open+0x4e> or	a4,a4,a5
1c00ab9a <udma_uart_open+0x50> lw	a5,-20(s0)
1c00ab9e <udma_uart_open+0x54> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:76
	pudma_ctrl->reg_rst &= ~(UDMA_CTRL_UART0_CLKEN << uart_id);
1c00aba0 <udma_uart_open+0x56> lw	a5,-20(s0)
1c00aba4 <udma_uart_open+0x5a> lw	a5,8(a5)
1c00aba6 <udma_uart_open+0x5c> lbu	a4,-33(s0)
1c00abaa <udma_uart_open+0x60> li	a3,1
1c00abac <udma_uart_open+0x62> sll	a4,a3,a4
1c00abb0 <udma_uart_open+0x66> not	a4,a4
1c00abb4 <udma_uart_open+0x6a> and	a4,a4,a5
1c00abb6 <udma_uart_open+0x6c> lw	a5,-20(s0)
1c00abba <udma_uart_open+0x70> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:77
	pudma_ctrl->reg_cg |= (UDMA_CTRL_UART0_CLKEN << uart_id);
1c00abbc <udma_uart_open+0x72> lw	a5,-20(s0)
1c00abc0 <udma_uart_open+0x76> lw	a5,0(a5)
1c00abc2 <udma_uart_open+0x78> lbu	a4,-33(s0)
1c00abc6 <udma_uart_open+0x7c> li	a3,1
1c00abc8 <udma_uart_open+0x7e> sll	a4,a3,a4
1c00abcc <udma_uart_open+0x82> or	a4,a4,a5
1c00abce <udma_uart_open+0x84> lw	a5,-20(s0)
1c00abd2 <udma_uart_open+0x88> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:81

	/* Set semaphore */
	SemaphoreHandle_t shSemaphoreHandle;		// FreeRTOS.h has a define for xSemaphoreHandle, so can't use that
	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00abd4 <udma_uart_open+0x8a> li	a2,3
1c00abd6 <udma_uart_open+0x8c> li	a1,0
1c00abd8 <udma_uart_open+0x8e> li	a0,1
1c00abda <udma_uart_open+0x90> jal	ra,1c008c58 <xQueueGenericCreate>
1c00abde <udma_uart_open+0x94> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:82
	configASSERT(shSemaphoreHandle);
1c00abe2 <udma_uart_open+0x98> lw	a5,-24(s0)
1c00abe6 <udma_uart_open+0x9c> bnez	a5,1c00abee <udma_uart_open+0xa4>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:82 (discriminator 1)
1c00abe8 <udma_uart_open+0x9e> csrci	mstatus,8
1c00abec <udma_uart_open+0xa2> j	1c00abec <udma_uart_open+0xa2>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:83
	xSemaphoreGive(shSemaphoreHandle);
1c00abee <udma_uart_open+0xa4> li	a3,0
1c00abf0 <udma_uart_open+0xa6> li	a2,0
1c00abf2 <udma_uart_open+0xa8> li	a1,0
1c00abf4 <udma_uart_open+0xaa> lw	a0,-24(s0)
1c00abf8 <udma_uart_open+0xae> jal	ra,1c008d48 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:84
	uart_semaphores_rx[uart_id] = shSemaphoreHandle;
1c00abfc <udma_uart_open+0xb2> lbu	a5,-33(s0)
1c00ac00 <udma_uart_open+0xb6> addi	a4,gp,1188 # 1c00ec0c <uart_semaphores_rx>
1c00ac04 <udma_uart_open+0xba> slli	a5,a5,0x2
1c00ac06 <udma_uart_open+0xbc> add	a5,a5,a4
1c00ac08 <udma_uart_open+0xbe> lw	a4,-24(s0)
1c00ac0c <udma_uart_open+0xc2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:86

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00ac0e <udma_uart_open+0xc4> li	a2,3
1c00ac10 <udma_uart_open+0xc6> li	a1,0
1c00ac12 <udma_uart_open+0xc8> li	a0,1
1c00ac14 <udma_uart_open+0xca> jal	ra,1c008c58 <xQueueGenericCreate>
1c00ac18 <udma_uart_open+0xce> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:87
	configASSERT(shSemaphoreHandle);
1c00ac1c <udma_uart_open+0xd2> lw	a5,-24(s0)
1c00ac20 <udma_uart_open+0xd6> bnez	a5,1c00ac28 <udma_uart_open+0xde>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:87 (discriminator 1)
1c00ac22 <udma_uart_open+0xd8> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:87 (discriminator 2)
1c00ac26 <udma_uart_open+0xdc> j	1c00ac26 <udma_uart_open+0xdc>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:88
	xSemaphoreGive(shSemaphoreHandle);
1c00ac28 <udma_uart_open+0xde> li	a3,0
1c00ac2a <udma_uart_open+0xe0> li	a2,0
1c00ac2c <udma_uart_open+0xe2> li	a1,0
1c00ac2e <udma_uart_open+0xe4> lw	a0,-24(s0)
1c00ac32 <udma_uart_open+0xe8> jal	ra,1c008d48 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:89
	uart_semaphores_tx[uart_id] = shSemaphoreHandle;
1c00ac36 <udma_uart_open+0xec> lbu	a5,-33(s0)
1c00ac3a <udma_uart_open+0xf0> addi	a4,gp,1196 # 1c00ec14 <uart_semaphores_tx>
1c00ac3e <udma_uart_open+0xf4> slli	a5,a5,0x2
1c00ac40 <udma_uart_open+0xf6> add	a5,a5,a4
1c00ac42 <udma_uart_open+0xf8> lw	a4,-24(s0)
1c00ac46 <udma_uart_open+0xfc> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:92

	/* Set handlers. */
	pi_fc_event_handler_set(SOC_EVENT_UART_RX(uart_id), uart_rx_isr, uart_semaphores_rx[uart_id]);
1c00ac48 <udma_uart_open+0xfe> lbu	a5,-33(s0)
1c00ac4c <udma_uart_open+0x102> slli	a5,a5,0x2
1c00ac4e <udma_uart_open+0x104> addi	a3,a5,2 # 1a102002 <__stack_size+0x1a101802>
1c00ac52 <udma_uart_open+0x108> lbu	a5,-33(s0)
1c00ac56 <udma_uart_open+0x10c> addi	a4,gp,1188 # 1c00ec0c <uart_semaphores_rx>
1c00ac5a <udma_uart_open+0x110> slli	a5,a5,0x2
1c00ac5c <udma_uart_open+0x112> add	a5,a5,a4
1c00ac5e <udma_uart_open+0x114> lw	a5,0(a5)
1c00ac60 <udma_uart_open+0x116> mv	a2,a5
1c00ac62 <udma_uart_open+0x118> lui	a5,0x1c00b
1c00ac66 <udma_uart_open+0x11c> addi	a1,a5,-1372 # 1c00aaa4 <uart_rx_isr>
1c00ac6a <udma_uart_open+0x120> mv	a0,a3
1c00ac6c <udma_uart_open+0x122> jal	ra,1c009d0c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:93
	pi_fc_event_handler_set(SOC_EVENT_UDMA_UART_TX(uart_id), NULL, uart_semaphores_tx[uart_id]);
1c00ac70 <udma_uart_open+0x126> lbu	a5,-33(s0)
1c00ac74 <udma_uart_open+0x12a> slli	a5,a5,0x2
1c00ac76 <udma_uart_open+0x12c> addi	a3,a5,1
1c00ac7a <udma_uart_open+0x130> lbu	a5,-33(s0)
1c00ac7e <udma_uart_open+0x134> addi	a4,gp,1196 # 1c00ec14 <uart_semaphores_tx>
1c00ac82 <udma_uart_open+0x138> slli	a5,a5,0x2
1c00ac84 <udma_uart_open+0x13a> add	a5,a5,a4
1c00ac86 <udma_uart_open+0x13c> lw	a5,0(a5)
1c00ac88 <udma_uart_open+0x13e> mv	a2,a5
1c00ac8a <udma_uart_open+0x140> li	a1,0
1c00ac8c <udma_uart_open+0x142> mv	a0,a3
1c00ac8e <udma_uart_open+0x144> jal	ra,1c009d0c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:95
	/* Enable SOC events propagation to FC. */
	hal_soc_eu_set_fc_mask(SOC_EVENT_UART_RX(uart_id));
1c00ac92 <udma_uart_open+0x148> lbu	a5,-33(s0)
1c00ac96 <udma_uart_open+0x14c> slli	a5,a5,0x2
1c00ac98 <udma_uart_open+0x14e> addi	a5,a5,2
1c00ac9a <udma_uart_open+0x150> mv	a0,a5
1c00ac9c <udma_uart_open+0x152> jal	1c00aa2e <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:96
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_UART_TX(uart_id));
1c00ac9e <udma_uart_open+0x154> lbu	a5,-33(s0)
1c00aca2 <udma_uart_open+0x158> slli	a5,a5,0x2
1c00aca4 <udma_uart_open+0x15a> addi	a5,a5,1
1c00aca6 <udma_uart_open+0x15c> mv	a0,a5
1c00aca8 <udma_uart_open+0x15e> jal	1c00aa2e <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:99

	/* configure */
	puart = (UdmaUart_t*)(UDMA_CH_ADDR_UART + uart_id * UDMA_CH_SIZE);
1c00acaa <udma_uart_open+0x160> lbu	a4,-33(s0)
1c00acae <udma_uart_open+0x164> lui	a5,0x342
1c00acb2 <udma_uart_open+0x168> addi	a5,a5,65 # 00342041 <__stack_size+0x341841>
1c00acb6 <udma_uart_open+0x16c> add	a5,a5,a4
1c00acb8 <udma_uart_open+0x16e> slli	a5,a5,0x7
1c00acba <udma_uart_open+0x170> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:100
	puart->uart_setup_b.div = (uint16_t)(5000000/xbaudrate);
1c00acbe <udma_uart_open+0x174> lui	a5,0x4c5
1c00acc2 <udma_uart_open+0x178> addi	a4,a5,-1216 # 004c4b40 <__stack_size+0x4c4340>
1c00acc6 <udma_uart_open+0x17c> lw	a5,-40(s0)
1c00acca <udma_uart_open+0x180> divu	a5,a4,a5
1c00acce <udma_uart_open+0x184> slli	a4,a5,0x10
1c00acd2 <udma_uart_open+0x188> srli	a4,a4,0x10
1c00acd4 <udma_uart_open+0x18a> lw	a5,-28(s0)
1c00acd8 <udma_uart_open+0x18e> sh	a4,38(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:101
	puart->uart_setup_b.bits = 3; // 8-bits
1c00acdc <udma_uart_open+0x192> lw	a5,-28(s0)
1c00ace0 <udma_uart_open+0x196> lw	a4,36(a5)
1c00ace2 <udma_uart_open+0x198> ori	a4,a4,6
1c00ace6 <udma_uart_open+0x19c> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:104
//	if (uart_id == 0) puart->uart_setup_b.rx_polling_en = 1;
//	if (uart_id == 1)
		puart->irq_en_b.rx_irq_en = 1;
1c00ace8 <udma_uart_open+0x19e> lw	a5,-28(s0)
1c00acec <udma_uart_open+0x1a2> lbu	a4,44(a5)
1c00acf0 <udma_uart_open+0x1a6> ori	a4,a4,1
1c00acf4 <udma_uart_open+0x1aa> sb	a4,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:105
	puart->uart_setup_b.en_tx = 1;
1c00acf8 <udma_uart_open+0x1ae> lw	a5,-28(s0)
1c00acfc <udma_uart_open+0x1b2> lw	a4,36(a5)
1c00acfe <udma_uart_open+0x1b4> ori	a4,a4,256
1c00ad02 <udma_uart_open+0x1b8> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:106
	puart->uart_setup_b.en_rx = 1;
1c00ad04 <udma_uart_open+0x1ba> lw	a5,-28(s0)
1c00ad08 <udma_uart_open+0x1be> lw	a4,36(a5)
1c00ad0a <udma_uart_open+0x1c0> ori	a4,a4,512
1c00ad0e <udma_uart_open+0x1c4> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:107
	puart->uart_setup_b.rx_clean_fifo = 1;
1c00ad10 <udma_uart_open+0x1c6> lw	a5,-28(s0)
1c00ad14 <udma_uart_open+0x1ca> lw	a4,36(a5)
1c00ad16 <udma_uart_open+0x1cc> ori	a4,a4,32
1c00ad1a <udma_uart_open+0x1d0> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:109
	
	if (uart_id == 1) {
1c00ad1c <udma_uart_open+0x1d2> lbu	a4,-33(s0)
1c00ad20 <udma_uart_open+0x1d6> li	a5,1
1c00ad22 <udma_uart_open+0x1d8> bne	a4,a5,1c00ad2e <udma_uart_open+0x1e4>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:110
		 u1rdptr = 0;
1c00ad26 <udma_uart_open+0x1dc> sw	zero,1068(gp) # 1c00eb94 <u1rdptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:111
	 	 u1wrptr = 0;
1c00ad2a <udma_uart_open+0x1e0> sw	zero,1072(gp) # 1c00eb98 <u1wrptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:113
	}
	if (uart_id == 0) {
1c00ad2e <udma_uart_open+0x1e4> lbu	a5,-33(s0)
1c00ad32 <udma_uart_open+0x1e8> bnez	a5,1c00ad3c <udma_uart_open+0x1f2>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:114
		 u0rdptr = 0;
1c00ad34 <udma_uart_open+0x1ea> sw	zero,1076(gp) # 1c00eb9c <u0rdptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:115
	 	 u0wrptr = 0;
1c00ad38 <udma_uart_open+0x1ee> sw	zero,1080(gp) # 1c00eba0 <u0wrptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:118
	}

	return 0;
1c00ad3c <udma_uart_open+0x1f2> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:119
}
1c00ad3e <udma_uart_open+0x1f4> mv	a0,a5
1c00ad40 <udma_uart_open+0x1f6> lw	ra,44(sp)
1c00ad42 <udma_uart_open+0x1f8> lw	s0,40(sp)
1c00ad44 <udma_uart_open+0x1fa> addi	sp,sp,48
1c00ad46 <udma_uart_open+0x1fc> ret
setFLLFrequencyInIntegerMode():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:119
/**
 * Board init code. Always call this before anything else.
 */

uint8_t setFLLFrequencyInIntegerMode(uint8_t aFLLNum, uint8_t aRefFreqInMHz, uint16_t aMultiplier, uint8_t aDivideRatio_R_Prescale, uint8_t aPS0_L1, uint8_t aPS0_L2)
{
1c00ad48 <setFLLFrequencyInIntegerMode> addi	sp,sp,-64
1c00ad4a <setFLLFrequencyInIntegerMode+0x2> sw	s0,60(sp)
1c00ad4c <setFLLFrequencyInIntegerMode+0x4> addi	s0,sp,64
1c00ad4e <setFLLFrequencyInIntegerMode+0x6> mv	a6,a0
1c00ad50 <setFLLFrequencyInIntegerMode+0x8> mv	a0,a1
1c00ad52 <setFLLFrequencyInIntegerMode+0xa> mv	a1,a2
1c00ad54 <setFLLFrequencyInIntegerMode+0xc> mv	a2,a3
1c00ad56 <setFLLFrequencyInIntegerMode+0xe> mv	a3,a4
1c00ad58 <setFLLFrequencyInIntegerMode+0x10> mv	a4,a5
1c00ad5a <setFLLFrequencyInIntegerMode+0x12> mv	a5,a6
1c00ad5c <setFLLFrequencyInIntegerMode+0x14> sb	a5,-49(s0)
1c00ad60 <setFLLFrequencyInIntegerMode+0x18> mv	a5,a0
1c00ad62 <setFLLFrequencyInIntegerMode+0x1a> sb	a5,-50(s0)
1c00ad66 <setFLLFrequencyInIntegerMode+0x1e> mv	a5,a1
1c00ad68 <setFLLFrequencyInIntegerMode+0x20> sh	a5,-52(s0)
1c00ad6c <setFLLFrequencyInIntegerMode+0x24> mv	a5,a2
1c00ad6e <setFLLFrequencyInIntegerMode+0x26> sb	a5,-53(s0)
1c00ad72 <setFLLFrequencyInIntegerMode+0x2a> mv	a5,a3
1c00ad74 <setFLLFrequencyInIntegerMode+0x2c> sb	a5,-54(s0)
1c00ad78 <setFLLFrequencyInIntegerMode+0x30> mv	a5,a4
1c00ad7a <setFLLFrequencyInIntegerMode+0x32> sb	a5,-55(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:120
	uint8_t lSts = 0;
1c00ad7e <setFLLFrequencyInIntegerMode+0x36> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:121
	volatile uint32_t *lPLLStartAddress = (uint32_t *)NULL;
1c00ad82 <setFLLFrequencyInIntegerMode+0x3a> sw	zero,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:122
	uint32_t lCounter = 0;
1c00ad86 <setFLLFrequencyInIntegerMode+0x3e> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:123
	uint32_t lCfgVal = 0;
1c00ad8a <setFLLFrequencyInIntegerMode+0x42> sw	zero,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:125

	uint8_t lPS0_L1 = aPS0_L1 & 0x03;
1c00ad8e <setFLLFrequencyInIntegerMode+0x46> lbu	a5,-54(s0)
1c00ad92 <setFLLFrequencyInIntegerMode+0x4a> andi	a5,a5,3
1c00ad94 <setFLLFrequencyInIntegerMode+0x4c> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:126
	uint8_t lPS0_L2 = aPS0_L2 & 0xFF;
1c00ad98 <setFLLFrequencyInIntegerMode+0x50> lbu	a5,-55(s0)
1c00ad9c <setFLLFrequencyInIntegerMode+0x54> sb	a5,-34(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:128

	if (aFLLNum == 0)
1c00ada0 <setFLLFrequencyInIntegerMode+0x58> lbu	a5,-49(s0)
1c00ada4 <setFLLFrequencyInIntegerMode+0x5c> bnez	a5,1c00adb0 <setFLLFrequencyInIntegerMode+0x68>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:129
		lPLLStartAddress = (uint32_t *)FLL1_START_ADDR;
1c00ada6 <setFLLFrequencyInIntegerMode+0x5e> lui	a5,0x1a100
1c00adaa <setFLLFrequencyInIntegerMode+0x62> sw	a5,-24(s0)
1c00adae <setFLLFrequencyInIntegerMode+0x66> j	1c00ade4 <setFLLFrequencyInIntegerMode+0x9c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:130
	else if (aFLLNum == 1)
1c00adb0 <setFLLFrequencyInIntegerMode+0x68> lbu	a4,-49(s0)
1c00adb4 <setFLLFrequencyInIntegerMode+0x6c> li	a5,1
1c00adb6 <setFLLFrequencyInIntegerMode+0x6e> bne	a4,a5,1c00adc8 <setFLLFrequencyInIntegerMode+0x80>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:131
		lPLLStartAddress = (uint32_t *)FLL2_START_ADDR;
1c00adba <setFLLFrequencyInIntegerMode+0x72> lui	a5,0x1a100
1c00adbe <setFLLFrequencyInIntegerMode+0x76> addi	a5,a5,32 # 1a100020 <__stack_size+0x1a0ff820>
1c00adc2 <setFLLFrequencyInIntegerMode+0x7a> sw	a5,-24(s0)
1c00adc6 <setFLLFrequencyInIntegerMode+0x7e> j	1c00ade4 <setFLLFrequencyInIntegerMode+0x9c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:132
	else if (aFLLNum == 2)
1c00adc8 <setFLLFrequencyInIntegerMode+0x80> lbu	a4,-49(s0)
1c00adcc <setFLLFrequencyInIntegerMode+0x84> li	a5,2
1c00adce <setFLLFrequencyInIntegerMode+0x86> bne	a4,a5,1c00ade0 <setFLLFrequencyInIntegerMode+0x98>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:133
		lPLLStartAddress = (uint32_t *)FLL3_START_ADDR;
1c00add2 <setFLLFrequencyInIntegerMode+0x8a> lui	a5,0x1a100
1c00add6 <setFLLFrequencyInIntegerMode+0x8e> addi	a5,a5,64 # 1a100040 <__stack_size+0x1a0ff840>
1c00adda <setFLLFrequencyInIntegerMode+0x92> sw	a5,-24(s0)
1c00adde <setFLLFrequencyInIntegerMode+0x96> j	1c00ade4 <setFLLFrequencyInIntegerMode+0x9c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:135
	else
		lPLLStartAddress = (uint32_t *)NULL;
1c00ade0 <setFLLFrequencyInIntegerMode+0x98> sw	zero,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:137

	if (lPLLStartAddress != NULL)
1c00ade4 <setFLLFrequencyInIntegerMode+0x9c> lw	a5,-24(s0)
1c00ade8 <setFLLFrequencyInIntegerMode+0xa0> beqz	a5,1c00af7e <setFLLFrequencyInIntegerMode+0x236>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:139
	{
		if ((aRefFreqInMHz >= 5) && (aRefFreqInMHz <= 500))
1c00adec <setFLLFrequencyInIntegerMode+0xa4> lbu	a4,-50(s0)
1c00adf0 <setFLLFrequencyInIntegerMode+0xa8> li	a5,4
1c00adf2 <setFLLFrequencyInIntegerMode+0xaa> bgeu	a5,a4,1c00af76 <setFLLFrequencyInIntegerMode+0x22e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:141
		{
			if ((aMultiplier > 0) && (aMultiplier < 2048))
1c00adf6 <setFLLFrequencyInIntegerMode+0xae> lhu	a5,-52(s0)
1c00adfa <setFLLFrequencyInIntegerMode+0xb2> beqz	a5,1c00af6e <setFLLFrequencyInIntegerMode+0x226>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:141 (discriminator 1)
1c00adfe <setFLLFrequencyInIntegerMode+0xb6> lhu	a4,-52(s0)
1c00ae02 <setFLLFrequencyInIntegerMode+0xba> li	a5,2047
1c00ae06 <setFLLFrequencyInIntegerMode+0xbe> bltu	a5,a4,1c00af6e <setFLLFrequencyInIntegerMode+0x226>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:143
			{
				if (aDivideRatio_R_Prescale < 16)
1c00ae0a <setFLLFrequencyInIntegerMode+0xc2> lbu	a4,-53(s0)
1c00ae0e <setFLLFrequencyInIntegerMode+0xc6> li	a5,15
1c00ae10 <setFLLFrequencyInIntegerMode+0xc8> bltu	a5,a4,1c00af66 <setFLLFrequencyInIntegerMode+0x21e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:145
				{
					*lPLLStartAddress |= (1 << 19);	     // Bypass on;
1c00ae14 <setFLLFrequencyInIntegerMode+0xcc> lw	a5,-24(s0)
1c00ae18 <setFLLFrequencyInIntegerMode+0xd0> lw	a4,0(a5)
1c00ae1a <setFLLFrequencyInIntegerMode+0xd2> lui	a5,0x80
1c00ae1e <setFLLFrequencyInIntegerMode+0xd6> or	a4,a4,a5
1c00ae20 <setFLLFrequencyInIntegerMode+0xd8> lw	a5,-24(s0)
1c00ae24 <setFLLFrequencyInIntegerMode+0xdc> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:146
					*lPLLStartAddress |= (1 << 2);	     // Reset high
1c00ae26 <setFLLFrequencyInIntegerMode+0xde> lw	a5,-24(s0)
1c00ae2a <setFLLFrequencyInIntegerMode+0xe2> lw	a5,0(a5)
1c00ae2c <setFLLFrequencyInIntegerMode+0xe4> ori	a4,a5,4
1c00ae30 <setFLLFrequencyInIntegerMode+0xe8> lw	a5,-24(s0)
1c00ae34 <setFLLFrequencyInIntegerMode+0xec> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:147
					*lPLLStartAddress &= ~(1 << 2);	     // Reset low;
1c00ae36 <setFLLFrequencyInIntegerMode+0xee> lw	a5,-24(s0)
1c00ae3a <setFLLFrequencyInIntegerMode+0xf2> lw	a5,0(a5)
1c00ae3c <setFLLFrequencyInIntegerMode+0xf4> andi	a4,a5,-5
1c00ae40 <setFLLFrequencyInIntegerMode+0xf8> lw	a5,-24(s0)
1c00ae44 <setFLLFrequencyInIntegerMode+0xfc> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:148
					*lPLLStartAddress &= ~(1 << 18);     // PS0_EN is set to low
1c00ae46 <setFLLFrequencyInIntegerMode+0xfe> lw	a5,-24(s0)
1c00ae4a <setFLLFrequencyInIntegerMode+0x102> lw	a4,0(a5)
1c00ae4c <setFLLFrequencyInIntegerMode+0x104> lui	a5,0xfffc0
1c00ae50 <setFLLFrequencyInIntegerMode+0x108> addi	a5,a5,-1
1c00ae52 <setFLLFrequencyInIntegerMode+0x10a> and	a4,a4,a5
1c00ae54 <setFLLFrequencyInIntegerMode+0x10c> lw	a5,-24(s0)
1c00ae58 <setFLLFrequencyInIntegerMode+0x110> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:149
					*lPLLStartAddress |= (lPS0_L1 << 0); // PS0_L1 0 which gives L01 = 1
1c00ae5a <setFLLFrequencyInIntegerMode+0x112> lw	a5,-24(s0)
1c00ae5e <setFLLFrequencyInIntegerMode+0x116> lw	a4,0(a5)
1c00ae60 <setFLLFrequencyInIntegerMode+0x118> lbu	a5,-33(s0)
1c00ae64 <setFLLFrequencyInIntegerMode+0x11c> or	a4,a4,a5
1c00ae66 <setFLLFrequencyInIntegerMode+0x11e> lw	a5,-24(s0)
1c00ae6a <setFLLFrequencyInIntegerMode+0x122> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:150
					*lPLLStartAddress |= (lPS0_L2 << 4); // PS0_L2_INT 0 and PS0_L2_FRAC 0 which gives L02 = 1
1c00ae6c <setFLLFrequencyInIntegerMode+0x124> lw	a5,-24(s0)
1c00ae70 <setFLLFrequencyInIntegerMode+0x128> lw	a5,0(a5)
1c00ae72 <setFLLFrequencyInIntegerMode+0x12a> lbu	a4,-34(s0)
1c00ae76 <setFLLFrequencyInIntegerMode+0x12e> slli	a4,a4,0x4
1c00ae78 <setFLLFrequencyInIntegerMode+0x130> or	a4,a4,a5
1c00ae7a <setFLLFrequencyInIntegerMode+0x132> lw	a5,-24(s0)
1c00ae7e <setFLLFrequencyInIntegerMode+0x136> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:151
					*lPLLStartAddress |= (0 << 12);	     // PS0_L2_INT 0 and PS0_L2_FRAC 0 which gives L02 = 1
1c00ae80 <setFLLFrequencyInIntegerMode+0x138> lw	a5,-24(s0)
1c00ae84 <setFLLFrequencyInIntegerMode+0x13c> lw	a4,0(a5)
1c00ae86 <setFLLFrequencyInIntegerMode+0x13e> lw	a5,-24(s0)
1c00ae8a <setFLLFrequencyInIntegerMode+0x142> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:154

					// FLL1 Config 1 register not configuring PS1
					*(lPLLStartAddress + 1) = 0;
1c00ae8c <setFLLFrequencyInIntegerMode+0x144> lw	a5,-24(s0)
1c00ae90 <setFLLFrequencyInIntegerMode+0x148> addi	a5,a5,4
1c00ae92 <setFLLFrequencyInIntegerMode+0x14a> sw	zero,0(a5) # fffc0000 <__l2_shared_end+0xe3fa0890>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:157

					// FLL1 Config 2 register
					lCfgVal = 0;
1c00ae96 <setFLLFrequencyInIntegerMode+0x14e> sw	zero,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:158
					lCfgVal |= (aMultiplier << 4);		    // MULT_INT	0x28 = 40 (40*10 = 400MHz) Multiplier cannot hold 0
1c00ae9a <setFLLFrequencyInIntegerMode+0x152> lhu	a5,-52(s0)
1c00ae9e <setFLLFrequencyInIntegerMode+0x156> slli	a5,a5,0x4
1c00aea0 <setFLLFrequencyInIntegerMode+0x158> mv	a4,a5
1c00aea2 <setFLLFrequencyInIntegerMode+0x15a> lw	a5,-32(s0)
1c00aea6 <setFLLFrequencyInIntegerMode+0x15e> or	a5,a5,a4
1c00aea8 <setFLLFrequencyInIntegerMode+0x160> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:159
					lCfgVal |= (1 << 27);			    // INTEGER_MODE is enabled
1c00aeac <setFLLFrequencyInIntegerMode+0x164> lw	a4,-32(s0)
1c00aeb0 <setFLLFrequencyInIntegerMode+0x168> lui	a5,0x8000
1c00aeb4 <setFLLFrequencyInIntegerMode+0x16c> or	a5,a5,a4
1c00aeb6 <setFLLFrequencyInIntegerMode+0x16e> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:160
					lCfgVal |= (aDivideRatio_R_Prescale << 28); // PRESCALE value (Divide Ratio R = 1)
1c00aeba <setFLLFrequencyInIntegerMode+0x172> lbu	a5,-53(s0)
1c00aebe <setFLLFrequencyInIntegerMode+0x176> slli	a5,a5,0x1c
1c00aec0 <setFLLFrequencyInIntegerMode+0x178> mv	a4,a5
1c00aec2 <setFLLFrequencyInIntegerMode+0x17a> lw	a5,-32(s0)
1c00aec6 <setFLLFrequencyInIntegerMode+0x17e> or	a5,a5,a4
1c00aec8 <setFLLFrequencyInIntegerMode+0x180> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:162

					*(lPLLStartAddress + 2) = lCfgVal;
1c00aecc <setFLLFrequencyInIntegerMode+0x184> lw	a5,-24(s0)
1c00aed0 <setFLLFrequencyInIntegerMode+0x188> addi	a5,a5,8
1c00aed2 <setFLLFrequencyInIntegerMode+0x18a> lw	a4,-32(s0)
1c00aed6 <setFLLFrequencyInIntegerMode+0x18e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:165

					// FLL1 Config 3 register not configuring SSC
					*(lPLLStartAddress + 3) = 0;
1c00aed8 <setFLLFrequencyInIntegerMode+0x190> lw	a5,-24(s0)
1c00aedc <setFLLFrequencyInIntegerMode+0x194> addi	a5,a5,12
1c00aede <setFLLFrequencyInIntegerMode+0x196> sw	zero,0(a5) # 08000000 <__stack_size+0x7fff800>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:168

					// FLL1 Config 4 register
					*(lPLLStartAddress + 4) = 0x64;
1c00aee2 <setFLLFrequencyInIntegerMode+0x19a> lw	a5,-24(s0)
1c00aee6 <setFLLFrequencyInIntegerMode+0x19e> addi	a5,a5,16
1c00aee8 <setFLLFrequencyInIntegerMode+0x1a0> li	a4,100
1c00aeec <setFLLFrequencyInIntegerMode+0x1a4> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:171

					// FLL1 Config 5 register
					*(lPLLStartAddress + 5) = 0x269;
1c00aeee <setFLLFrequencyInIntegerMode+0x1a6> lw	a5,-24(s0)
1c00aef2 <setFLLFrequencyInIntegerMode+0x1aa> addi	a5,a5,20
1c00aef4 <setFLLFrequencyInIntegerMode+0x1ac> li	a4,617
1c00aef8 <setFLLFrequencyInIntegerMode+0x1b0> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:173

					*lPLLStartAddress |= (1 << 2);	// Reset high
1c00aefa <setFLLFrequencyInIntegerMode+0x1b2> lw	a5,-24(s0)
1c00aefe <setFLLFrequencyInIntegerMode+0x1b6> lw	a5,0(a5)
1c00af00 <setFLLFrequencyInIntegerMode+0x1b8> ori	a4,a5,4
1c00af04 <setFLLFrequencyInIntegerMode+0x1bc> lw	a5,-24(s0)
1c00af08 <setFLLFrequencyInIntegerMode+0x1c0> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:174
					*lPLLStartAddress |= (1 << 18); // PS0_EN;
1c00af0a <setFLLFrequencyInIntegerMode+0x1c2> lw	a5,-24(s0)
1c00af0e <setFLLFrequencyInIntegerMode+0x1c6> lw	a4,0(a5)
1c00af10 <setFLLFrequencyInIntegerMode+0x1c8> lui	a5,0x40
1c00af14 <setFLLFrequencyInIntegerMode+0x1cc> or	a4,a4,a5
1c00af16 <setFLLFrequencyInIntegerMode+0x1ce> lw	a5,-24(s0)
1c00af1a <setFLLFrequencyInIntegerMode+0x1d2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:176
					// lCounter = 0;
					while ((*(lPLLStartAddress + 4) & 0x80000000) == 0) // Wait for lock detect to go high
1c00af1c <setFLLFrequencyInIntegerMode+0x1d4> j	1c00af3e <setFLLFrequencyInIntegerMode+0x1f6>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:178
					{
						lCounter++;
1c00af1e <setFLLFrequencyInIntegerMode+0x1d6> lw	a5,-28(s0)
1c00af22 <setFLLFrequencyInIntegerMode+0x1da> addi	a5,a5,1
1c00af24 <setFLLFrequencyInIntegerMode+0x1dc> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:179
						if (lCounter >= 0x00010000)
1c00af28 <setFLLFrequencyInIntegerMode+0x1e0> lw	a4,-28(s0)
1c00af2c <setFLLFrequencyInIntegerMode+0x1e4> lui	a5,0x10
1c00af2e <setFLLFrequencyInIntegerMode+0x1e6> bltu	a4,a5,1c00af3e <setFLLFrequencyInIntegerMode+0x1f6>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:181
						{
							lSts = 5; // Unable to achieve lock
1c00af32 <setFLLFrequencyInIntegerMode+0x1ea> li	a5,5
1c00af34 <setFLLFrequencyInIntegerMode+0x1ec> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:182
							lCounter = 0;
1c00af38 <setFLLFrequencyInIntegerMode+0x1f0> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:183
							break;
1c00af3c <setFLLFrequencyInIntegerMode+0x1f4> j	1c00af4a <setFLLFrequencyInIntegerMode+0x202>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:176
					while ((*(lPLLStartAddress + 4) & 0x80000000) == 0) // Wait for lock detect to go high
1c00af3e <setFLLFrequencyInIntegerMode+0x1f6> lw	a5,-24(s0)
1c00af42 <setFLLFrequencyInIntegerMode+0x1fa> addi	a5,a5,16
1c00af44 <setFLLFrequencyInIntegerMode+0x1fc> lw	a5,0(a5)
1c00af46 <setFLLFrequencyInIntegerMode+0x1fe> bgez	a5,1c00af1e <setFLLFrequencyInIntegerMode+0x1d6>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:186
						}
					}
					if (lSts == 0)
1c00af4a <setFLLFrequencyInIntegerMode+0x202> lbu	a5,-17(s0)
1c00af4e <setFLLFrequencyInIntegerMode+0x206> bnez	a5,1c00af86 <setFLLFrequencyInIntegerMode+0x23e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:187
						*(lPLLStartAddress) &= ~(1 << 19); // Bypass off;
1c00af50 <setFLLFrequencyInIntegerMode+0x208> lw	a5,-24(s0)
1c00af54 <setFLLFrequencyInIntegerMode+0x20c> lw	a4,0(a5)
1c00af56 <setFLLFrequencyInIntegerMode+0x20e> lui	a5,0xfff80
1c00af5a <setFLLFrequencyInIntegerMode+0x212> addi	a5,a5,-1
1c00af5c <setFLLFrequencyInIntegerMode+0x214> and	a4,a4,a5
1c00af5e <setFLLFrequencyInIntegerMode+0x216> lw	a5,-24(s0)
1c00af62 <setFLLFrequencyInIntegerMode+0x21a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:143
				if (aDivideRatio_R_Prescale < 16)
1c00af64 <setFLLFrequencyInIntegerMode+0x21c> j	1c00af86 <setFLLFrequencyInIntegerMode+0x23e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:191
				}
				else
				{
					lSts = 1; // aDivideRatio_R_Prescale
1c00af66 <setFLLFrequencyInIntegerMode+0x21e> li	a5,1
1c00af68 <setFLLFrequencyInIntegerMode+0x220> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:143
				if (aDivideRatio_R_Prescale < 16)
1c00af6c <setFLLFrequencyInIntegerMode+0x224> j	1c00af86 <setFLLFrequencyInIntegerMode+0x23e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:196
				}
			}
			else
			{
				lSts = 2; // Invalid aMultiplier
1c00af6e <setFLLFrequencyInIntegerMode+0x226> li	a5,2
1c00af70 <setFLLFrequencyInIntegerMode+0x228> sb	a5,-17(s0)
1c00af74 <setFLLFrequencyInIntegerMode+0x22c> j	1c00af88 <setFLLFrequencyInIntegerMode+0x240>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:201
			}
		}
		else
		{
			lSts = 3; // Invalid reference freq
1c00af76 <setFLLFrequencyInIntegerMode+0x22e> li	a5,3
1c00af78 <setFLLFrequencyInIntegerMode+0x230> sb	a5,-17(s0)
1c00af7c <setFLLFrequencyInIntegerMode+0x234> j	1c00af88 <setFLLFrequencyInIntegerMode+0x240>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:206
		}
	}
	else
	{
		lSts = 4; // Invalid PLL number
1c00af7e <setFLLFrequencyInIntegerMode+0x236> li	a5,4
1c00af80 <setFLLFrequencyInIntegerMode+0x238> sb	a5,-17(s0)
1c00af84 <setFLLFrequencyInIntegerMode+0x23c> j	1c00af88 <setFLLFrequencyInIntegerMode+0x240>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:143
				if (aDivideRatio_R_Prescale < 16)
1c00af86 <setFLLFrequencyInIntegerMode+0x23e> nop
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:208
	}
	return lSts;
1c00af88 <setFLLFrequencyInIntegerMode+0x240> lbu	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:209
}
1c00af8c <setFLLFrequencyInIntegerMode+0x244> mv	a0,a5
1c00af8e <setFLLFrequencyInIntegerMode+0x246> lw	s0,60(sp)
1c00af90 <setFLLFrequencyInIntegerMode+0x248> addi	sp,sp,64
1c00af92 <setFLLFrequencyInIntegerMode+0x24a> ret
system_init():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:216
int handler_count[32];
uint32_t gSpecialHandlingIRQCnt = 0;
uint8_t gQSPIIdNum = 0;

void system_init(void)
{
1c00af94 <system_init> addi	sp,sp,-64
1c00af96 <system_init+0x2> sw	ra,60(sp)
1c00af98 <system_init+0x4> sw	s0,56(sp)
1c00af9a <system_init+0x6> addi	s0,sp,64
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:217
	uint32_t lFlashID = 0;
1c00af9c <system_init+0x8> sw	zero,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:218
	SocCtrl_t *soc = APB_SOC_CTRL_ADDR;
1c00afa0 <system_init+0xc> lui	a5,0x1a104
1c00afa4 <system_init+0x10> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:219
	soc->soft_reset = 1;
1c00afa8 <system_init+0x14> lw	a5,-36(s0)
1c00afac <system_init+0x18> li	a4,1
1c00afae <system_init+0x1a> sw	a4,252(a5) # 1a1040fc <__stack_size+0x1a1038fc>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:220
	uint32_t val = 0;
1c00afb2 <system_init+0x1e> sw	zero,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:221
	uint8_t i = 0;
1c00afb6 <system_init+0x22> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:222
	timer_irq_disable();
1c00afba <system_init+0x26> jal	ra,1c009fce <timer_irq_disable>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:224

	uint32_t *lFFL1StartAddress = (uint32_t *)FLL1_START_ADDR;
1c00afbe <system_init+0x2a> lui	a5,0x1a100
1c00afc2 <system_init+0x2e> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:225
	uint32_t *lFFL2StartAddress = (uint32_t *)FLL2_START_ADDR;
1c00afc6 <system_init+0x32> lui	a5,0x1a100
1c00afca <system_init+0x36> addi	a5,a5,32 # 1a100020 <__stack_size+0x1a0ff820>
1c00afce <system_init+0x3a> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:226
	uint32_t *lFFL3StartAddress = (uint32_t *)FLL3_START_ADDR;
1c00afd2 <system_init+0x3e> lui	a5,0x1a100
1c00afd6 <system_init+0x42> addi	a5,a5,64 # 1a100040 <__stack_size+0x1a0ff840>
1c00afda <system_init+0x46> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:228

	setFLLFrequencyInIntegerMode(0, 10, 40, 1, 0, 1); // 400
1c00afde <system_init+0x4a> li	a5,1
1c00afe0 <system_init+0x4c> li	a4,0
1c00afe2 <system_init+0x4e> li	a3,1
1c00afe4 <system_init+0x50> li	a2,40
1c00afe8 <system_init+0x54> li	a1,10
1c00afea <system_init+0x56> li	a0,0
1c00afec <system_init+0x58> jal	1c00ad48 <setFLLFrequencyInIntegerMode>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:230

	setFLLFrequencyInIntegerMode(1, 10, 40, 1, 0, 2); // 200
1c00afee <system_init+0x5a> li	a5,2
1c00aff0 <system_init+0x5c> li	a4,0
1c00aff2 <system_init+0x5e> li	a3,1
1c00aff4 <system_init+0x60> li	a2,40
1c00aff8 <system_init+0x64> li	a1,10
1c00affa <system_init+0x66> li	a0,1
1c00affc <system_init+0x68> jal	ra,1c00ad48 <setFLLFrequencyInIntegerMode>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:232

	setFLLFrequencyInIntegerMode(2, 10, 40, 1, 0, 4); // 100
1c00b000 <system_init+0x6c> li	a5,4
1c00b002 <system_init+0x6e> li	a4,0
1c00b004 <system_init+0x70> li	a3,1
1c00b006 <system_init+0x72> li	a2,40
1c00b00a <system_init+0x76> li	a1,10
1c00b00c <system_init+0x78> li	a0,2
1c00b00e <system_init+0x7a> jal	ra,1c00ad48 <setFLLFrequencyInIntegerMode>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:235

	/* Hook up isr table. This table is temporary until we figure out how to  do proper vectored interrupts. */
	for (int i = 0; i < 32; i++)
1c00b012 <system_init+0x7e> sw	zero,-24(s0)
1c00b016 <system_init+0x82> j	1c00b04c <system_init+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:237 (discriminator 3)
	{
		isr_table[i] = undefined_handler;
1c00b018 <system_init+0x84> addi	a4,gp,1588 # 1c00ed9c <isr_table>
1c00b01c <system_init+0x88> lw	a5,-24(s0)
1c00b020 <system_init+0x8c> slli	a5,a5,0x2
1c00b022 <system_init+0x8e> add	a5,a5,a4
1c00b024 <system_init+0x90> lui	a4,0x1c00b
1c00b028 <system_init+0x94> addi	a4,a4,532 # 1c00b214 <undefined_handler>
1c00b02c <system_init+0x98> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:238 (discriminator 3)
		handler_count[i] = 0;
1c00b02e <system_init+0x9a> lui	a5,0x1c00f
1c00b032 <system_init+0x9e> addi	a4,a5,-484 # 1c00ee1c <handler_count>
1c00b036 <system_init+0xa2> lw	a5,-24(s0)
1c00b03a <system_init+0xa6> slli	a5,a5,0x2
1c00b03c <system_init+0xa8> add	a5,a5,a4
1c00b03e <system_init+0xaa> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:235 (discriminator 3)
	for (int i = 0; i < 32; i++)
1c00b042 <system_init+0xae> lw	a5,-24(s0)
1c00b046 <system_init+0xb2> addi	a5,a5,1
1c00b048 <system_init+0xb4> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:235 (discriminator 1)
1c00b04c <system_init+0xb8> lw	a4,-24(s0)
1c00b050 <system_init+0xbc> li	a5,31
1c00b052 <system_init+0xbe> bge	a5,a4,1c00b018 <system_init+0x84>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:240
	}
	isr_table[0x7] = timer_irq_handler;
1c00b056 <system_init+0xc2> addi	a5,gp,1588 # 1c00ed9c <isr_table>
1c00b05a <system_init+0xc6> lui	a4,0x1c00b
1c00b05e <system_init+0xca> addi	a4,a4,456 # 1c00b1c8 <timer_irq_handler>
1c00b062 <system_init+0xce> sw	a4,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:241
	isr_table[0xb] = (void (*)(uint32_t))fc_soc_event_handler1; // 11 for cv32
1c00b064 <system_init+0xd0> addi	a5,gp,1588 # 1c00ed9c <isr_table>
1c00b068 <system_init+0xd4> lui	a4,0x1c00a
1c00b06c <system_init+0xd8> addi	a4,a4,-618 # 1c009d96 <fc_soc_event_handler1>
1c00b070 <system_init+0xdc> sw	a4,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:246

	/* mtvec is set in crt0.S */

	/* deactivate all soc events as they are enabled by default */
	pulp_soc_eu_event_init();
1c00b072 <system_init+0xde> jal	ra,1c009f74 <pulp_soc_eu_event_init>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:250

	/* Setup soc events handler. */
	// pi_fc_event_handler_init(FC_SOC_EVENT);
	pi_fc_event_handler_init(11);
1c00b076 <system_init+0xe2> li	a0,11
1c00b078 <system_init+0xe4> jal	ra,1c009cd2 <pi_fc_event_handler_init>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:254

	/* TODO: I$ enable*/
	/* enable core level interrupt (mie) */
	irq_clint_enable();
1c00b07c <system_init+0xe8> jal	ra,1c009e30 <irq_clint_enable>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:256

	val = csr_read(CSR_MIE);
1c00b080 <system_init+0xec> csrr	a5,mie
1c00b084 <system_init+0xf0> mv	ra,a5
1c00b086 <system_init+0xf2> mv	a5,ra
1c00b088 <system_init+0xf4> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:259

	/* TODO: enable uart */
	for (uint8_t id = 0; id != N_UART; id++)
1c00b08c <system_init+0xf8> sb	zero,-25(s0)
1c00b090 <system_init+0xfc> j	1c00b0ac <system_init+0x118>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:261 (discriminator 3)
	{
		udma_uart_open(id, 115200);
1c00b092 <system_init+0xfe> lbu	a4,-25(s0)
1c00b096 <system_init+0x102> lui	a5,0x1c
1c00b098 <system_init+0x104> addi	a1,a5,512 # 0001c200 <__stack_size+0x1ba00>
1c00b09c <system_init+0x108> mv	a0,a4
1c00b09e <system_init+0x10a> jal	ra,1c00ab4a <udma_uart_open>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:259 (discriminator 3)
	for (uint8_t id = 0; id != N_UART; id++)
1c00b0a2 <system_init+0x10e> lbu	a5,-25(s0)
1c00b0a6 <system_init+0x112> addi	a5,a5,1
1c00b0a8 <system_init+0x114> sb	a5,-25(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:259 (discriminator 1)
1c00b0ac <system_init+0x118> lbu	a4,-25(s0)
1c00b0b0 <system_init+0x11c> li	a5,2
1c00b0b2 <system_init+0x11e> bne	a4,a5,1c00b092 <system_init+0xfe>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:263
	}
	for (uint8_t id = 0; id != N_I2CM; id++)
1c00b0b6 <system_init+0x122> sb	zero,-26(s0)
1c00b0ba <system_init+0x126> j	1c00b0d8 <system_init+0x144>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:265 (discriminator 3)
	{
		udma_i2cm_open(id, 400000); // 200000
1c00b0bc <system_init+0x128> lbu	a4,-26(s0)
1c00b0c0 <system_init+0x12c> lui	a5,0x62
1c00b0c4 <system_init+0x130> addi	a1,a5,-1408 # 00061a80 <__stack_size+0x61280>
1c00b0c8 <system_init+0x134> mv	a0,a4
1c00b0ca <system_init+0x136> jal	ra,1c00a1ae <udma_i2cm_open>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:263 (discriminator 3)
	for (uint8_t id = 0; id != N_I2CM; id++)
1c00b0ce <system_init+0x13a> lbu	a5,-26(s0)
1c00b0d2 <system_init+0x13e> addi	a5,a5,1
1c00b0d4 <system_init+0x140> sb	a5,-26(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:263 (discriminator 1)
1c00b0d8 <system_init+0x144> lbu	a4,-26(s0)
1c00b0dc <system_init+0x148> li	a5,2
1c00b0de <system_init+0x14a> bne	a4,a5,1c00b0bc <system_init+0x128>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:267
	}
	for (i = 0; i < N_QSPIM; i++)
1c00b0e2 <system_init+0x14e> sb	zero,-17(s0)
1c00b0e6 <system_init+0x152> j	1c00b196 <system_init+0x202>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:269
	{
		setQspimPinMux(i);
1c00b0e8 <system_init+0x154> lbu	a5,-17(s0)
1c00b0ec <system_init+0x158> mv	a0,a5
1c00b0ee <system_init+0x15a> jal	1c00b2e2 <setQspimPinMux>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:270
		udma_qspim_open(i, 2500000);
1c00b0f0 <system_init+0x15c> lbu	a4,-17(s0)
1c00b0f4 <system_init+0x160> lui	a5,0x262
1c00b0f8 <system_init+0x164> addi	a1,a5,1440 # 002625a0 <__stack_size+0x261da0>
1c00b0fc <system_init+0x168> mv	a0,a4
1c00b0fe <system_init+0x16a> jal	ra,1c00a4e0 <udma_qspim_open>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:271
		udma_qspim_control((uint8_t)i, (udma_qspim_control_type_t)kQSPImReset, (void *)0);
1c00b102 <system_init+0x16e> lbu	a5,-17(s0)
1c00b106 <system_init+0x172> li	a2,0
1c00b108 <system_init+0x174> li	a1,0
1c00b10a <system_init+0x176> mv	a0,a5
1c00b10c <system_init+0x178> jal	ra,1c00a790 <udma_qspim_control>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:273

		lFlashID = udma_flash_readid(i, 0);
1c00b110 <system_init+0x17c> lbu	a5,-17(s0)
1c00b114 <system_init+0x180> li	a1,0
1c00b116 <system_init+0x182> mv	a0,a5
1c00b118 <system_init+0x184> jal	ra,1c00a82c <udma_flash_readid>
1c00b11c <system_init+0x188> sw	a0,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:274
		if ((lFlashID == 0xFFFFFFFF) || (lFlashID == 0))
1c00b120 <system_init+0x18c> lw	a4,-32(s0)
1c00b124 <system_init+0x190> li	a5,-1
1c00b126 <system_init+0x192> beq	a4,a5,1c00b130 <system_init+0x19c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:274 (discriminator 1)
1c00b12a <system_init+0x196> lw	a5,-32(s0)
1c00b12e <system_init+0x19a> bnez	a5,1c00b140 <system_init+0x1ac>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:276
		{
			gQSPIFlashPresentFlg[i] = 0;
1c00b130 <system_init+0x19c> lbu	a4,-17(s0)
1c00b134 <system_init+0x1a0> addi	a5,gp,1084 # 1c00eba4 <gQSPIFlashPresentFlg>
1c00b138 <system_init+0x1a4> add	a5,a5,a4
1c00b13a <system_init+0x1a6> sb	zero,0(a5)
1c00b13e <system_init+0x1aa> j	1c00b184 <system_init+0x1f0>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:280
		}
		else
		{
			gQSPIFlashPresentFlg[i] = 1;
1c00b140 <system_init+0x1ac> lbu	a4,-17(s0)
1c00b144 <system_init+0x1b0> addi	a5,gp,1084 # 1c00eba4 <gQSPIFlashPresentFlg>
1c00b148 <system_init+0x1b4> add	a5,a5,a4
1c00b14a <system_init+0x1b6> li	a4,1
1c00b14c <system_init+0x1b8> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:281
			if ((lFlashID & 0xFF) == 0x20)
1c00b150 <system_init+0x1bc> lw	a5,-32(s0)
1c00b154 <system_init+0x1c0> andi	a4,a5,255
1c00b158 <system_init+0x1c4> li	a5,32
1c00b15c <system_init+0x1c8> bne	a4,a5,1c00b176 <system_init+0x1e2>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:283
			{
				gMicronFlashDetectedFlg[i] = 1;
1c00b160 <system_init+0x1cc> lbu	a4,-17(s0)
1c00b164 <system_init+0x1d0> addi	a5,gp,1088 # 1c00eba8 <gMicronFlashDetectedFlg>
1c00b168 <system_init+0x1d4> add	a5,a5,a4
1c00b16a <system_init+0x1d6> li	a4,1
1c00b16c <system_init+0x1d8> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:284
				gQSPIIdNum = 0;
1c00b170 <system_init+0x1dc> sb	zero,1096(gp) # 1c00ebb0 <gQSPIIdNum>
1c00b174 <system_init+0x1e0> j	1c00b184 <system_init+0x1f0>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:287
			}
			else
				gMicronFlashDetectedFlg[i] = 0;
1c00b176 <system_init+0x1e2> lbu	a4,-17(s0)
1c00b17a <system_init+0x1e6> addi	a5,gp,1088 # 1c00eba8 <gMicronFlashDetectedFlg>
1c00b17e <system_init+0x1ea> add	a5,a5,a4
1c00b180 <system_init+0x1ec> sb	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:289 (discriminator 2)
		}
		restoreQspimPinMux(i);
1c00b184 <system_init+0x1f0> lbu	a5,-17(s0)
1c00b188 <system_init+0x1f4> mv	a0,a5
1c00b18a <system_init+0x1f6> jal	1c00b44e <restoreQspimPinMux>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:267 (discriminator 2)
	for (i = 0; i < N_QSPIM; i++)
1c00b18c <system_init+0x1f8> lbu	a5,-17(s0)
1c00b190 <system_init+0x1fc> addi	a5,a5,1
1c00b192 <system_init+0x1fe> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:267 (discriminator 1)
1c00b196 <system_init+0x202> lbu	a4,-17(s0)
1c00b19a <system_init+0x206> li	a5,1
1c00b19c <system_init+0x208> bgeu	a5,a4,1c00b0e8 <system_init+0x154>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:296

#if (FOR_SIMULATION_TESTING == 1)
	forSimulationTesting();
#endif

	hal_set_apb_i2cs_slave_on_off(1);
1c00b1a0 <system_init+0x20c> li	a0,1
1c00b1a2 <system_init+0x20e> jal	ra,1c009c68 <hal_set_apb_i2cs_slave_on_off>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:297
	if (hal_get_apb_i2cs_slave_address() != MY_I2C_SLAVE_ADDRESS)
1c00b1a6 <system_init+0x212> jal	ra,1c009c02 <hal_get_apb_i2cs_slave_address>
1c00b1aa <system_init+0x216> mv	a5,a0
1c00b1ac <system_init+0x218> mv	a4,a5
1c00b1ae <system_init+0x21a> li	a5,98
1c00b1b2 <system_init+0x21e> beq	a4,a5,1c00b1be <system_init+0x22a>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:298
		hal_set_apb_i2cs_slave_address(MY_I2C_SLAVE_ADDRESS);
1c00b1b6 <system_init+0x222> li	a0,98
1c00b1ba <system_init+0x226> jal	ra,1c009c26 <hal_set_apb_i2cs_slave_address>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:299
}
1c00b1be <system_init+0x22a> nop
1c00b1c0 <system_init+0x22c> lw	ra,60(sp)
1c00b1c2 <system_init+0x22e> lw	s0,56(sp)
1c00b1c4 <system_init+0x230> addi	sp,sp,64
1c00b1c6 <system_init+0x232> ret
timer_irq_handler():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:326

	return 0;
}

void timer_irq_handler(uint32_t mcause)
{
1c00b1c8 <timer_irq_handler> addi	sp,sp,-32
1c00b1ca <timer_irq_handler+0x2> sw	ra,28(sp)
1c00b1cc <timer_irq_handler+0x4> sw	s0,24(sp)
1c00b1ce <timer_irq_handler+0x6> addi	s0,sp,32
1c00b1d0 <timer_irq_handler+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:329
#warning requires critical section if interrupt nesting is used.
//	Writeraw(0, 1 ,(uint8_t*)a);
	rt_interrupt_enter();
1c00b1d4 <timer_irq_handler+0xc> jal	1c00b74a <rt_interrupt_enter>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:330
	rt_tick_increase();
1c00b1d6 <timer_irq_handler+0xe> jal	1c00b698 <rt_tick_increase>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:331
	rt_interrupt_leave();
1c00b1d8 <timer_irq_handler+0x10> jal	1c00b786 <rt_interrupt_leave>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:332
}
1c00b1da <timer_irq_handler+0x12> nop
1c00b1dc <timer_irq_handler+0x14> lw	ra,28(sp)
1c00b1de <timer_irq_handler+0x16> lw	s0,24(sp)
1c00b1e0 <timer_irq_handler+0x18> addi	sp,sp,32
1c00b1e2 <timer_irq_handler+0x1a> ret
vSystemIrqHandler():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:335

void vSystemIrqHandler(uint32_t mcause)
{
1c00b1e4 <vSystemIrqHandler> addi	sp,sp,-32
1c00b1e6 <vSystemIrqHandler+0x2> sw	ra,28(sp)
1c00b1e8 <vSystemIrqHandler+0x4> sw	s0,24(sp)
1c00b1ea <vSystemIrqHandler+0x6> addi	s0,sp,32
1c00b1ec <vSystemIrqHandler+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:337
//	Writeraw(0, 1,(uint8_t*)b);
	isr_table[mcause & 0x1f](mcause & 0x1f);
1c00b1f0 <vSystemIrqHandler+0xc> lw	a5,-20(s0)
1c00b1f4 <vSystemIrqHandler+0x10> andi	a5,a5,31
1c00b1f6 <vSystemIrqHandler+0x12> addi	a4,gp,1588 # 1c00ed9c <isr_table>
1c00b1fa <vSystemIrqHandler+0x16> slli	a5,a5,0x2
1c00b1fc <vSystemIrqHandler+0x18> add	a5,a5,a4
1c00b1fe <vSystemIrqHandler+0x1a> lw	a4,0(a5)
1c00b200 <vSystemIrqHandler+0x1c> lw	a5,-20(s0)
1c00b204 <vSystemIrqHandler+0x20> andi	a5,a5,31
1c00b206 <vSystemIrqHandler+0x22> mv	a0,a5
1c00b208 <vSystemIrqHandler+0x24> jalr	a4
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:338
}
1c00b20a <vSystemIrqHandler+0x26> nop
1c00b20c <vSystemIrqHandler+0x28> lw	ra,28(sp)
1c00b20e <vSystemIrqHandler+0x2a> lw	s0,24(sp)
1c00b210 <vSystemIrqHandler+0x2c> addi	sp,sp,32
1c00b212 <vSystemIrqHandler+0x2e> ret
undefined_handler():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:341

void undefined_handler(uint32_t mcause)
{
1c00b214 <undefined_handler> addi	sp,sp,-48
1c00b216 <undefined_handler+0x2> sw	s0,44(sp)
1c00b218 <undefined_handler+0x4> sw	s1,40(sp)
1c00b21a <undefined_handler+0x6> addi	s0,sp,48
1c00b21c <undefined_handler+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:342
	uint32_t RegReadVal = 0;
1c00b220 <undefined_handler+0xc> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:348
#ifdef __PULP_USE_LIBC
	abort();
#else
	//	taskDISABLE_INTERRUPTS();
	//	for(;;);
	if ((mcause == 18) || (mcause == 19) || (mcause == 31))
1c00b224 <undefined_handler+0x10> lw	a4,-36(s0)
1c00b228 <undefined_handler+0x14> li	a5,18
1c00b22a <undefined_handler+0x16> beq	a4,a5,1c00b242 <undefined_handler+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:348 (discriminator 1)
1c00b22e <undefined_handler+0x1a> lw	a4,-36(s0)
1c00b232 <undefined_handler+0x1e> li	a5,19
1c00b234 <undefined_handler+0x20> beq	a4,a5,1c00b242 <undefined_handler+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:348 (discriminator 2)
1c00b238 <undefined_handler+0x24> lw	a4,-36(s0)
1c00b23c <undefined_handler+0x28> li	a5,31
1c00b23e <undefined_handler+0x2a> bne	a4,a5,1c00b290 <undefined_handler+0x7c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:350
	{
		gSpecialHandlingIRQCnt++;
1c00b242 <undefined_handler+0x2e> lw	a5,1092(gp) # 1c00ebac <gSpecialHandlingIRQCnt>
1c00b246 <undefined_handler+0x32> addi	a4,a5,1
1c00b24a <undefined_handler+0x36> sw	a4,1092(gp) # 1c00ebac <gSpecialHandlingIRQCnt>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:351
		if (gSpecialHandlingIRQCnt >= 20)
1c00b24e <undefined_handler+0x3a> lw	a4,1092(gp) # 1c00ebac <gSpecialHandlingIRQCnt>
1c00b252 <undefined_handler+0x3e> li	a5,19
1c00b254 <undefined_handler+0x40> bgeu	a5,a4,1c00b2ba <undefined_handler+0xa6>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:353
		{
			RegReadVal = csr_read(CSR_MIE);
1c00b258 <undefined_handler+0x44> csrr	a5,mie
1c00b25c <undefined_handler+0x48> mv	s1,a5
1c00b25e <undefined_handler+0x4a> mv	a5,s1
1c00b260 <undefined_handler+0x4c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:354
			if ((RegReadVal & BIT(mcause)) != 0) // Check if the event interrupt mask is open.
1c00b264 <undefined_handler+0x50> lw	a4,-20(s0)
1c00b268 <undefined_handler+0x54> lw	a5,-36(s0)
1c00b26c <undefined_handler+0x58> srl	a5,a4,a5
1c00b270 <undefined_handler+0x5c> andi	a5,a5,1
1c00b272 <undefined_handler+0x5e> beqz	a5,1c00b2ba <undefined_handler+0xa6>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:357
			{
				// close the event interrupt mask.
				csr_read_clear(CSR_MIE, BIT(mcause));
1c00b274 <undefined_handler+0x60> li	a4,1
1c00b276 <undefined_handler+0x62> lw	a5,-36(s0)
1c00b27a <undefined_handler+0x66> sll	a5,a4,a5
1c00b27e <undefined_handler+0x6a> sw	a5,-24(s0)
1c00b282 <undefined_handler+0x6e> lw	a5,-24(s0)
1c00b286 <undefined_handler+0x72> csrrc	a5,mie,a5
1c00b28a <undefined_handler+0x76> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:351
		if (gSpecialHandlingIRQCnt >= 20)
1c00b28e <undefined_handler+0x7a> j	1c00b2ba <undefined_handler+0xa6>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:363
			}
		}
	}
	else
	{
		handler_count[mcause]++;
1c00b290 <undefined_handler+0x7c> lui	a5,0x1c00f
1c00b294 <undefined_handler+0x80> addi	a4,a5,-484 # 1c00ee1c <handler_count>
1c00b298 <undefined_handler+0x84> lw	a5,-36(s0)
1c00b29c <undefined_handler+0x88> slli	a5,a5,0x2
1c00b29e <undefined_handler+0x8a> add	a5,a5,a4
1c00b2a0 <undefined_handler+0x8c> lw	a5,0(a5)
1c00b2a2 <undefined_handler+0x8e> addi	a4,a5,1
1c00b2a6 <undefined_handler+0x92> lui	a5,0x1c00f
1c00b2aa <undefined_handler+0x96> addi	a3,a5,-484 # 1c00ee1c <handler_count>
1c00b2ae <undefined_handler+0x9a> lw	a5,-36(s0)
1c00b2b2 <undefined_handler+0x9e> slli	a5,a5,0x2
1c00b2b4 <undefined_handler+0xa0> add	a5,a5,a3
1c00b2b6 <undefined_handler+0xa2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:367
	}

#endif
}
1c00b2b8 <undefined_handler+0xa4> j	1c00b2bc <undefined_handler+0xa8>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:351
		if (gSpecialHandlingIRQCnt >= 20)
1c00b2ba <undefined_handler+0xa6> nop
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:367
}
1c00b2bc <undefined_handler+0xa8> nop
1c00b2be <undefined_handler+0xaa> lw	s0,44(sp)
1c00b2c0 <undefined_handler+0xac> lw	s1,40(sp)
1c00b2c2 <undefined_handler+0xae> addi	sp,sp,48
1c00b2c4 <undefined_handler+0xb0> ret
vPortSetupTimerInterrupt():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:370

void vPortSetupTimerInterrupt(void)
{
1c00b2c6 <vPortSetupTimerInterrupt> addi	sp,sp,-16
1c00b2c8 <vPortSetupTimerInterrupt+0x2> sw	ra,12(sp)
1c00b2ca <vPortSetupTimerInterrupt+0x4> sw	s0,8(sp)
1c00b2cc <vPortSetupTimerInterrupt+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:373

	extern int timer_irq_init(uint32_t ticks);
	timer_irq_init(ARCHI_FPGA_FREQUENCY / configTICK_RATE_HZ);
1c00b2ce <vPortSetupTimerInterrupt+0x8> lui	a5,0xc
1c00b2d0 <vPortSetupTimerInterrupt+0xa> addi	a0,a5,848 # 0000c350 <__stack_size+0xbb50>
1c00b2d4 <vPortSetupTimerInterrupt+0xe> jal	ra,1c009ff6 <timer_irq_init>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:374
}
1c00b2d8 <vPortSetupTimerInterrupt+0x12> nop
1c00b2da <vPortSetupTimerInterrupt+0x14> lw	ra,12(sp)
1c00b2dc <vPortSetupTimerInterrupt+0x16> lw	s0,8(sp)
1c00b2de <vPortSetupTimerInterrupt+0x18> addi	sp,sp,16
1c00b2e0 <vPortSetupTimerInterrupt+0x1a> ret
setQspimPinMux():
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:81
  CLI_CMD_SIMPLE( "program", program, "Program <filename>"),
  CLI_CMD_TERMINATE()
};

void setQspimPinMux(uint8_t aQspimID)
{
1c00b2e2 <setQspimPinMux> addi	sp,sp,-48
1c00b2e4 <setQspimPinMux+0x2> sw	ra,44(sp)
1c00b2e6 <setQspimPinMux+0x4> sw	s0,40(sp)
1c00b2e8 <setQspimPinMux+0x6> sw	s1,36(sp)
1c00b2ea <setQspimPinMux+0x8> addi	s0,sp,48
1c00b2ec <setQspimPinMux+0xa> mv	a5,a0
1c00b2ee <setQspimPinMux+0xc> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:82
	uint8_t i = 0;
1c00b2f2 <setQspimPinMux+0x10> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:84

	if( aQspimID == 0 )
1c00b2f6 <setQspimPinMux+0x14> lbu	a5,-33(s0)
1c00b2fa <setQspimPinMux+0x18> bnez	a5,1c00b3ea <setQspimPinMux+0x108>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:86
	{
		for(i=0; i<4; i++ )
1c00b2fe <setQspimPinMux+0x1c> sb	zero,-17(s0)
1c00b302 <setQspimPinMux+0x20> j	1c00b342 <setQspimPinMux+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:89 (discriminator 3)
		{
			//Save pin muxes
			gMuxSelSaveBuf[i] = hal_getpinmux(13+i);
1c00b304 <setQspimPinMux+0x22> lbu	a5,-17(s0)
1c00b308 <setQspimPinMux+0x26> addi	a5,a5,13
1c00b30a <setQspimPinMux+0x28> andi	a5,a5,255
1c00b30e <setQspimPinMux+0x2c> lbu	s1,-17(s0)
1c00b312 <setQspimPinMux+0x30> mv	a0,a5
1c00b314 <setQspimPinMux+0x32> jal	ra,1c009ee2 <hal_getpinmux>
1c00b318 <setQspimPinMux+0x36> mv	a5,a0
1c00b31a <setQspimPinMux+0x38> mv	a4,a5
1c00b31c <setQspimPinMux+0x3a> addi	a5,gp,340 # 1c00e8bc <gMuxSelSaveBuf>
1c00b320 <setQspimPinMux+0x3e> add	a5,a5,s1
1c00b322 <setQspimPinMux+0x40> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:90 (discriminator 3)
			hal_setpinmux(13+i, 0);
1c00b326 <setQspimPinMux+0x44> lbu	a5,-17(s0)
1c00b32a <setQspimPinMux+0x48> addi	a5,a5,13
1c00b32c <setQspimPinMux+0x4a> andi	a5,a5,255
1c00b330 <setQspimPinMux+0x4e> li	a1,0
1c00b332 <setQspimPinMux+0x50> mv	a0,a5
1c00b334 <setQspimPinMux+0x52> jal	ra,1c009e7c <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:86 (discriminator 3)
		for(i=0; i<4; i++ )
1c00b338 <setQspimPinMux+0x56> lbu	a5,-17(s0)
1c00b33c <setQspimPinMux+0x5a> addi	a5,a5,1
1c00b33e <setQspimPinMux+0x5c> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:86 (discriminator 1)
1c00b342 <setQspimPinMux+0x60> lbu	a4,-17(s0)
1c00b346 <setQspimPinMux+0x64> li	a5,3
1c00b348 <setQspimPinMux+0x66> bgeu	a5,a4,1c00b304 <setQspimPinMux+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:92
		}
		for(i=0; i<2; i++ )
1c00b34c <setQspimPinMux+0x6a> sb	zero,-17(s0)
1c00b350 <setQspimPinMux+0x6e> j	1c00b390 <setQspimPinMux+0xae>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:95 (discriminator 3)
		{
			//Save pin muxes
			gMuxSelSaveBuf[i] = hal_getpinmux(19+i);
1c00b352 <setQspimPinMux+0x70> lbu	a5,-17(s0)
1c00b356 <setQspimPinMux+0x74> addi	a5,a5,19
1c00b358 <setQspimPinMux+0x76> andi	a5,a5,255
1c00b35c <setQspimPinMux+0x7a> lbu	s1,-17(s0)
1c00b360 <setQspimPinMux+0x7e> mv	a0,a5
1c00b362 <setQspimPinMux+0x80> jal	ra,1c009ee2 <hal_getpinmux>
1c00b366 <setQspimPinMux+0x84> mv	a5,a0
1c00b368 <setQspimPinMux+0x86> mv	a4,a5
1c00b36a <setQspimPinMux+0x88> addi	a5,gp,340 # 1c00e8bc <gMuxSelSaveBuf>
1c00b36e <setQspimPinMux+0x8c> add	a5,a5,s1
1c00b370 <setQspimPinMux+0x8e> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:96 (discriminator 3)
			hal_setpinmux(19+i, 0);
1c00b374 <setQspimPinMux+0x92> lbu	a5,-17(s0)
1c00b378 <setQspimPinMux+0x96> addi	a5,a5,19
1c00b37a <setQspimPinMux+0x98> andi	a5,a5,255
1c00b37e <setQspimPinMux+0x9c> li	a1,0
1c00b380 <setQspimPinMux+0x9e> mv	a0,a5
1c00b382 <setQspimPinMux+0xa0> jal	ra,1c009e7c <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:92 (discriminator 3)
		for(i=0; i<2; i++ )
1c00b386 <setQspimPinMux+0xa4> lbu	a5,-17(s0)
1c00b38a <setQspimPinMux+0xa8> addi	a5,a5,1
1c00b38c <setQspimPinMux+0xaa> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:92 (discriminator 1)
1c00b390 <setQspimPinMux+0xae> lbu	a4,-17(s0)
1c00b394 <setQspimPinMux+0xb2> li	a5,1
1c00b396 <setQspimPinMux+0xb4> bgeu	a5,a4,1c00b352 <setQspimPinMux+0x70>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:98
		}
		for(i=0; i<3; i++ )
1c00b39a <setQspimPinMux+0xb8> sb	zero,-17(s0)
1c00b39e <setQspimPinMux+0xbc> j	1c00b3de <setQspimPinMux+0xfc>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:101 (discriminator 3)
		{
			//Save pin muxes
			gMuxSelSaveBuf[i] = hal_getpinmux(26+i);
1c00b3a0 <setQspimPinMux+0xbe> lbu	a5,-17(s0)
1c00b3a4 <setQspimPinMux+0xc2> addi	a5,a5,26
1c00b3a6 <setQspimPinMux+0xc4> andi	a5,a5,255
1c00b3aa <setQspimPinMux+0xc8> lbu	s1,-17(s0)
1c00b3ae <setQspimPinMux+0xcc> mv	a0,a5
1c00b3b0 <setQspimPinMux+0xce> jal	ra,1c009ee2 <hal_getpinmux>
1c00b3b4 <setQspimPinMux+0xd2> mv	a5,a0
1c00b3b6 <setQspimPinMux+0xd4> mv	a4,a5
1c00b3b8 <setQspimPinMux+0xd6> addi	a5,gp,340 # 1c00e8bc <gMuxSelSaveBuf>
1c00b3bc <setQspimPinMux+0xda> add	a5,a5,s1
1c00b3be <setQspimPinMux+0xdc> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:102 (discriminator 3)
			hal_setpinmux(26+i, 1);
1c00b3c2 <setQspimPinMux+0xe0> lbu	a5,-17(s0)
1c00b3c6 <setQspimPinMux+0xe4> addi	a5,a5,26
1c00b3c8 <setQspimPinMux+0xe6> andi	a5,a5,255
1c00b3cc <setQspimPinMux+0xea> li	a1,1
1c00b3ce <setQspimPinMux+0xec> mv	a0,a5
1c00b3d0 <setQspimPinMux+0xee> jal	ra,1c009e7c <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:98 (discriminator 3)
		for(i=0; i<3; i++ )
1c00b3d4 <setQspimPinMux+0xf2> lbu	a5,-17(s0)
1c00b3d8 <setQspimPinMux+0xf6> addi	a5,a5,1
1c00b3da <setQspimPinMux+0xf8> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:98 (discriminator 1)
1c00b3de <setQspimPinMux+0xfc> lbu	a4,-17(s0)
1c00b3e2 <setQspimPinMux+0x100> li	a5,2
1c00b3e4 <setQspimPinMux+0x102> bgeu	a5,a4,1c00b3a0 <setQspimPinMux+0xbe>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:114
			//Save pin muxes
			gMuxSelSaveBuf[i] = hal_getpinmux(29+i);
			hal_setpinmux(29+i, 1);
		}
	}
}
1c00b3e8 <setQspimPinMux+0x106> j	1c00b442 <setQspimPinMux+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:105
	else if( aQspimID == 1 )
1c00b3ea <setQspimPinMux+0x108> lbu	a4,-33(s0)
1c00b3ee <setQspimPinMux+0x10c> li	a5,1
1c00b3f0 <setQspimPinMux+0x10e> bne	a4,a5,1c00b442 <setQspimPinMux+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:107
		for(i=0; i<8; i++ )
1c00b3f4 <setQspimPinMux+0x112> sb	zero,-17(s0)
1c00b3f8 <setQspimPinMux+0x116> j	1c00b438 <setQspimPinMux+0x156>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:110 (discriminator 3)
			gMuxSelSaveBuf[i] = hal_getpinmux(29+i);
1c00b3fa <setQspimPinMux+0x118> lbu	a5,-17(s0)
1c00b3fe <setQspimPinMux+0x11c> addi	a5,a5,29
1c00b400 <setQspimPinMux+0x11e> andi	a5,a5,255
1c00b404 <setQspimPinMux+0x122> lbu	s1,-17(s0)
1c00b408 <setQspimPinMux+0x126> mv	a0,a5
1c00b40a <setQspimPinMux+0x128> jal	ra,1c009ee2 <hal_getpinmux>
1c00b40e <setQspimPinMux+0x12c> mv	a5,a0
1c00b410 <setQspimPinMux+0x12e> mv	a4,a5
1c00b412 <setQspimPinMux+0x130> addi	a5,gp,340 # 1c00e8bc <gMuxSelSaveBuf>
1c00b416 <setQspimPinMux+0x134> add	a5,a5,s1
1c00b418 <setQspimPinMux+0x136> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:111 (discriminator 3)
			hal_setpinmux(29+i, 1);
1c00b41c <setQspimPinMux+0x13a> lbu	a5,-17(s0)
1c00b420 <setQspimPinMux+0x13e> addi	a5,a5,29
1c00b422 <setQspimPinMux+0x140> andi	a5,a5,255
1c00b426 <setQspimPinMux+0x144> li	a1,1
1c00b428 <setQspimPinMux+0x146> mv	a0,a5
1c00b42a <setQspimPinMux+0x148> jal	ra,1c009e7c <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:107 (discriminator 3)
		for(i=0; i<8; i++ )
1c00b42e <setQspimPinMux+0x14c> lbu	a5,-17(s0)
1c00b432 <setQspimPinMux+0x150> addi	a5,a5,1
1c00b434 <setQspimPinMux+0x152> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:107 (discriminator 1)
1c00b438 <setQspimPinMux+0x156> lbu	a4,-17(s0)
1c00b43c <setQspimPinMux+0x15a> li	a5,7
1c00b43e <setQspimPinMux+0x15c> bgeu	a5,a4,1c00b3fa <setQspimPinMux+0x118>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:114
}
1c00b442 <setQspimPinMux+0x160> nop
1c00b444 <setQspimPinMux+0x162> lw	ra,44(sp)
1c00b446 <setQspimPinMux+0x164> lw	s0,40(sp)
1c00b448 <setQspimPinMux+0x166> lw	s1,36(sp)
1c00b44a <setQspimPinMux+0x168> addi	sp,sp,48
1c00b44c <setQspimPinMux+0x16a> ret
restoreQspimPinMux():
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:117

void restoreQspimPinMux(uint8_t aQspimID)
{
1c00b44e <restoreQspimPinMux> addi	sp,sp,-48
1c00b450 <restoreQspimPinMux+0x2> sw	ra,44(sp)
1c00b452 <restoreQspimPinMux+0x4> sw	s0,40(sp)
1c00b454 <restoreQspimPinMux+0x6> addi	s0,sp,48
1c00b456 <restoreQspimPinMux+0x8> mv	a5,a0
1c00b458 <restoreQspimPinMux+0xa> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:118
	uint8_t i = 0;
1c00b45c <restoreQspimPinMux+0xe> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:120

	if( aQspimID == 0 )
1c00b460 <restoreQspimPinMux+0x12> lbu	a5,-33(s0)
1c00b464 <restoreQspimPinMux+0x16> bnez	a5,1c00b516 <restoreQspimPinMux+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:122
	{
		for(i=0; i<4; i++ )
1c00b466 <restoreQspimPinMux+0x18> sb	zero,-17(s0)
1c00b46a <restoreQspimPinMux+0x1c> j	1c00b496 <restoreQspimPinMux+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:124 (discriminator 3)
		{
			hal_setpinmux(13+i, gMuxSelSaveBuf[i]);
1c00b46c <restoreQspimPinMux+0x1e> lbu	a5,-17(s0)
1c00b470 <restoreQspimPinMux+0x22> addi	a5,a5,13
1c00b472 <restoreQspimPinMux+0x24> andi	a3,a5,255
1c00b476 <restoreQspimPinMux+0x28> lbu	a5,-17(s0)
1c00b47a <restoreQspimPinMux+0x2c> addi	a4,gp,340 # 1c00e8bc <gMuxSelSaveBuf>
1c00b47e <restoreQspimPinMux+0x30> add	a5,a5,a4
1c00b480 <restoreQspimPinMux+0x32> lbu	a5,0(a5)
1c00b484 <restoreQspimPinMux+0x36> mv	a1,a5
1c00b486 <restoreQspimPinMux+0x38> mv	a0,a3
1c00b488 <restoreQspimPinMux+0x3a> jal	ra,1c009e7c <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:122 (discriminator 3)
		for(i=0; i<4; i++ )
1c00b48c <restoreQspimPinMux+0x3e> lbu	a5,-17(s0)
1c00b490 <restoreQspimPinMux+0x42> addi	a5,a5,1
1c00b492 <restoreQspimPinMux+0x44> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:122 (discriminator 1)
1c00b496 <restoreQspimPinMux+0x48> lbu	a4,-17(s0)
1c00b49a <restoreQspimPinMux+0x4c> li	a5,3
1c00b49c <restoreQspimPinMux+0x4e> bgeu	a5,a4,1c00b46c <restoreQspimPinMux+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:126
		}
		for(i=0; i<2; i++ )
1c00b4a0 <restoreQspimPinMux+0x52> sb	zero,-17(s0)
1c00b4a4 <restoreQspimPinMux+0x56> j	1c00b4d0 <restoreQspimPinMux+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:128 (discriminator 3)
		{
			hal_setpinmux(19+i, gMuxSelSaveBuf[i]);
1c00b4a6 <restoreQspimPinMux+0x58> lbu	a5,-17(s0)
1c00b4aa <restoreQspimPinMux+0x5c> addi	a5,a5,19
1c00b4ac <restoreQspimPinMux+0x5e> andi	a3,a5,255
1c00b4b0 <restoreQspimPinMux+0x62> lbu	a5,-17(s0)
1c00b4b4 <restoreQspimPinMux+0x66> addi	a4,gp,340 # 1c00e8bc <gMuxSelSaveBuf>
1c00b4b8 <restoreQspimPinMux+0x6a> add	a5,a5,a4
1c00b4ba <restoreQspimPinMux+0x6c> lbu	a5,0(a5)
1c00b4be <restoreQspimPinMux+0x70> mv	a1,a5
1c00b4c0 <restoreQspimPinMux+0x72> mv	a0,a3
1c00b4c2 <restoreQspimPinMux+0x74> jal	ra,1c009e7c <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:126 (discriminator 3)
		for(i=0; i<2; i++ )
1c00b4c6 <restoreQspimPinMux+0x78> lbu	a5,-17(s0)
1c00b4ca <restoreQspimPinMux+0x7c> addi	a5,a5,1
1c00b4cc <restoreQspimPinMux+0x7e> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:126 (discriminator 1)
1c00b4d0 <restoreQspimPinMux+0x82> lbu	a4,-17(s0)
1c00b4d4 <restoreQspimPinMux+0x86> li	a5,1
1c00b4d6 <restoreQspimPinMux+0x88> bgeu	a5,a4,1c00b4a6 <restoreQspimPinMux+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:130
		}
		for(i=0; i<3; i++ )
1c00b4da <restoreQspimPinMux+0x8c> sb	zero,-17(s0)
1c00b4de <restoreQspimPinMux+0x90> j	1c00b50a <restoreQspimPinMux+0xbc>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:132 (discriminator 3)
		{
			hal_setpinmux(26+i, gMuxSelSaveBuf[i]);
1c00b4e0 <restoreQspimPinMux+0x92> lbu	a5,-17(s0)
1c00b4e4 <restoreQspimPinMux+0x96> addi	a5,a5,26
1c00b4e6 <restoreQspimPinMux+0x98> andi	a3,a5,255
1c00b4ea <restoreQspimPinMux+0x9c> lbu	a5,-17(s0)
1c00b4ee <restoreQspimPinMux+0xa0> addi	a4,gp,340 # 1c00e8bc <gMuxSelSaveBuf>
1c00b4f2 <restoreQspimPinMux+0xa4> add	a5,a5,a4
1c00b4f4 <restoreQspimPinMux+0xa6> lbu	a5,0(a5)
1c00b4f8 <restoreQspimPinMux+0xaa> mv	a1,a5
1c00b4fa <restoreQspimPinMux+0xac> mv	a0,a3
1c00b4fc <restoreQspimPinMux+0xae> jal	ra,1c009e7c <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:130 (discriminator 3)
		for(i=0; i<3; i++ )
1c00b500 <restoreQspimPinMux+0xb2> lbu	a5,-17(s0)
1c00b504 <restoreQspimPinMux+0xb6> addi	a5,a5,1
1c00b506 <restoreQspimPinMux+0xb8> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:130 (discriminator 1)
1c00b50a <restoreQspimPinMux+0xbc> lbu	a4,-17(s0)
1c00b50e <restoreQspimPinMux+0xc0> li	a5,2
1c00b510 <restoreQspimPinMux+0xc2> bgeu	a5,a4,1c00b4e0 <restoreQspimPinMux+0x92>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:142
		for(i=0; i<8; i++ )
		{
			hal_setpinmux(29+i, gMuxSelSaveBuf[i]);
		}
	}
}
1c00b514 <restoreQspimPinMux+0xc6> j	1c00b55a <restoreQspimPinMux+0x10c>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:135
	else if( aQspimID == 1 )
1c00b516 <restoreQspimPinMux+0xc8> lbu	a4,-33(s0)
1c00b51a <restoreQspimPinMux+0xcc> li	a5,1
1c00b51c <restoreQspimPinMux+0xce> bne	a4,a5,1c00b55a <restoreQspimPinMux+0x10c>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:137
		for(i=0; i<8; i++ )
1c00b520 <restoreQspimPinMux+0xd2> sb	zero,-17(s0)
1c00b524 <restoreQspimPinMux+0xd6> j	1c00b550 <restoreQspimPinMux+0x102>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:139 (discriminator 3)
			hal_setpinmux(29+i, gMuxSelSaveBuf[i]);
1c00b526 <restoreQspimPinMux+0xd8> lbu	a5,-17(s0)
1c00b52a <restoreQspimPinMux+0xdc> addi	a5,a5,29
1c00b52c <restoreQspimPinMux+0xde> andi	a3,a5,255
1c00b530 <restoreQspimPinMux+0xe2> lbu	a5,-17(s0)
1c00b534 <restoreQspimPinMux+0xe6> addi	a4,gp,340 # 1c00e8bc <gMuxSelSaveBuf>
1c00b538 <restoreQspimPinMux+0xea> add	a5,a5,a4
1c00b53a <restoreQspimPinMux+0xec> lbu	a5,0(a5)
1c00b53e <restoreQspimPinMux+0xf0> mv	a1,a5
1c00b540 <restoreQspimPinMux+0xf2> mv	a0,a3
1c00b542 <restoreQspimPinMux+0xf4> jal	ra,1c009e7c <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:137 (discriminator 3)
		for(i=0; i<8; i++ )
1c00b546 <restoreQspimPinMux+0xf8> lbu	a5,-17(s0)
1c00b54a <restoreQspimPinMux+0xfc> addi	a5,a5,1
1c00b54c <restoreQspimPinMux+0xfe> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:137 (discriminator 1)
1c00b550 <restoreQspimPinMux+0x102> lbu	a4,-17(s0)
1c00b554 <restoreQspimPinMux+0x106> li	a5,7
1c00b556 <restoreQspimPinMux+0x108> bgeu	a5,a4,1c00b526 <restoreQspimPinMux+0xd8>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:142
}
1c00b55a <restoreQspimPinMux+0x10c> nop
1c00b55c <restoreQspimPinMux+0x10e> lw	ra,44(sp)
1c00b55e <restoreQspimPinMux+0x110> lw	s0,40(sp)
1c00b560 <restoreQspimPinMux+0x112> addi	sp,sp,48
1c00b562 <restoreQspimPinMux+0x114> ret
writeraw():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:96
}

#include <stdint.h>
#include "hal/include/hal_udma_ctrl_reg_defs.h"
#include "hal/include/hal_udma_uart_reg_defs.h"
uint16_t writeraw(uint8_t uart_id, uint16_t write_len, uint8_t* write_buffer) {
1c00b564 <writeraw> addi	sp,sp,-48
1c00b566 <writeraw+0x2> sw	s0,44(sp)
1c00b568 <writeraw+0x4> addi	s0,sp,48
1c00b56a <writeraw+0x6> mv	a5,a0
1c00b56c <writeraw+0x8> mv	a4,a1
1c00b56e <writeraw+0xa> sw	a2,-40(s0)
1c00b572 <writeraw+0xe> sb	a5,-33(s0)
1c00b576 <writeraw+0x12> mv	a5,a4
1c00b578 <writeraw+0x14> sh	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:97
	UdmaUart_t*				puart = (UdmaUart_t*)(UDMA_CH_ADDR_UART + uart_id * UDMA_CH_SIZE);
1c00b57c <writeraw+0x18> lbu	a4,-33(s0)
1c00b580 <writeraw+0x1c> lui	a5,0x342
1c00b584 <writeraw+0x20> addi	a5,a5,65 # 00342041 <__stack_size+0x341841>
1c00b588 <writeraw+0x24> add	a5,a5,a4
1c00b58a <writeraw+0x26> slli	a5,a5,0x7
1c00b58c <writeraw+0x28> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:99

	while (puart->status_b.tx_busy) {  // ToDo: Why is this necessary?  Thought the semaphore should have protected
1c00b590 <writeraw+0x2c> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:99 (discriminator 1)
1c00b592 <writeraw+0x2e> lw	a5,-20(s0)
1c00b596 <writeraw+0x32> lw	a5,32(a5)
1c00b598 <writeraw+0x34> andi	a5,a5,1
1c00b59a <writeraw+0x36> andi	a5,a5,255
1c00b59e <writeraw+0x3a> bnez	a5,1c00b592 <writeraw+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:102
	}

	puart->tx_saddr = (uint32_t)write_buffer;
1c00b5a0 <writeraw+0x3c> lw	a4,-40(s0)
1c00b5a4 <writeraw+0x40> lw	a5,-20(s0)
1c00b5a8 <writeraw+0x44> sw	a4,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:103
	puart->tx_size = write_len;
1c00b5aa <writeraw+0x46> lhu	a4,-36(s0)
1c00b5ae <writeraw+0x4a> lw	a5,-20(s0)
1c00b5b2 <writeraw+0x4e> sw	a4,20(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:104
	puart->tx_cfg_b.en = 1; //enable the transfer
1c00b5b4 <writeraw+0x50> lw	a5,-20(s0)
1c00b5b8 <writeraw+0x54> lbu	a4,24(a5)
1c00b5bc <writeraw+0x58> ori	a4,a4,16
1c00b5c0 <writeraw+0x5c> sb	a4,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:106

	return 0;
1c00b5c4 <writeraw+0x60> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:107
}
1c00b5c6 <writeraw+0x62> mv	a0,a5
1c00b5c8 <writeraw+0x64> lw	s0,44(sp)
1c00b5ca <writeraw+0x66> addi	sp,sp,48
1c00b5cc <writeraw+0x68> ret
rt_hw_console_output():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:110

rt_hw_console_output(const char *str)
{
1c00b5ce <rt_hw_console_output> addi	sp,sp,-32
1c00b5d0 <rt_hw_console_output+0x2> sw	ra,28(sp)
1c00b5d2 <rt_hw_console_output+0x4> sw	s0,24(sp)
1c00b5d4 <rt_hw_console_output+0x6> addi	s0,sp,32
1c00b5d6 <rt_hw_console_output+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:111
	writeraw(0, strlen(str), (uint8_t*)str);
1c00b5da <rt_hw_console_output+0xc> lw	a0,-20(s0)
1c00b5de <rt_hw_console_output+0x10> jal	ra,1c0088ce <strlen>
1c00b5e2 <rt_hw_console_output+0x14> mv	a5,a0
1c00b5e4 <rt_hw_console_output+0x16> slli	a5,a5,0x10
1c00b5e6 <rt_hw_console_output+0x18> srli	a5,a5,0x10
1c00b5e8 <rt_hw_console_output+0x1a> lw	a2,-20(s0)
1c00b5ec <rt_hw_console_output+0x1e> mv	a1,a5
1c00b5ee <rt_hw_console_output+0x20> li	a0,0
1c00b5f0 <rt_hw_console_output+0x22> jal	1c00b564 <writeraw>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:112
}
1c00b5f2 <rt_hw_console_output+0x24> nop
1c00b5f4 <rt_hw_console_output+0x26> mv	a0,a5
1c00b5f6 <rt_hw_console_output+0x28> lw	ra,28(sp)
1c00b5f8 <rt_hw_console_output+0x2a> lw	s0,24(sp)
1c00b5fa <rt_hw_console_output+0x2c> addi	sp,sp,32
1c00b5fc <rt_hw_console_output+0x2e> ret
main():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:140
#include "hal/include/hal_udma_ctrl_reg_defs.h"
#include "hal/include/hal_udma_uart_reg_defs.h"

extern void vPortSetupTimerInterrupt(void);
int main(void)
{
1c00b5fe <main> addi	sp,sp,-32
1c00b600 <main+0x2> sw	ra,28(sp)
1c00b602 <main+0x4> sw	s0,24(sp)
1c00b604 <main+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:141
	volatile uint32_t mtvec = 0;
1c00b606 <main+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:142
	vPortSetupTimerInterrupt();
1c00b60a <main+0xc> jal	ra,1c00b2c6 <vPortSetupTimerInterrupt>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:143
	__asm volatile( "csrr %0, mtvec" : "=r"( mtvec ) );
1c00b60e <main+0x10> csrr	a5,mtvec
1c00b612 <main+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:144
	__asm volatile( "csrs mstatus, 8" );
1c00b616 <main+0x18> csrsi	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:145
	__asm volatile( "csrs mie, %0" :: "r"(0x880) );
1c00b61a <main+0x1c> lui	a5,0x1
1c00b61c <main+0x1e> addi	a5,a5,-1920 # 00000880 <__stack_size+0x80>
1c00b620 <main+0x22> csrs	mie,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:149 (discriminator 1)

	while(1)
	{
		rt_kprintf("Hello RT-Thread\r\n");
1c00b624 <main+0x26> lui	a5,0x1c00e
1c00b628 <main+0x2a> addi	a0,a5,-1588 # 1c00d9cc <__l2_priv0_end+0x18>
1c00b62c <main+0x2e> jal	ra,1c00c340 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:150 (discriminator 1)
		rt_thread_delay(1000);
1c00b630 <main+0x32> li	a0,1000
1c00b634 <main+0x36> jal	ra,1c00ce90 <rt_thread_delay>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:149 (discriminator 1)
		rt_kprintf("Hello RT-Thread\r\n");
1c00b638 <main+0x3a> j	1c00b624 <main+0x26>
rt_hw_board_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:154
	}
}
void rt_hw_board_init()
{
1c00b63a <rt_hw_board_init> addi	sp,sp,-16
1c00b63c <rt_hw_board_init+0x2> sw	ra,12(sp)
1c00b63e <rt_hw_board_init+0x4> sw	s0,8(sp)
1c00b640 <rt_hw_board_init+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:156
    /* System Clock Update */
	system_init();
1c00b642 <rt_hw_board_init+0x8> jal	ra,1c00af94 <system_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:162
    /* System Tick Configuration */
    //SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);

    /* Call components board initial (use INIT_BOARD_EXPORT()) */
#ifdef RT_USING_COMPONENTS_INIT
    rt_components_board_init();
1c00b646 <rt_hw_board_init+0xc> jal	ra,1c00d6aa <rt_components_board_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:168
#endif

#if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
    rt_system_heap_init(rt_heap_begin_get(), rt_heap_end_get());
#endif
}
1c00b64a <rt_hw_board_init+0x10> nop
1c00b64c <rt_hw_board_init+0x12> lw	ra,12(sp)
1c00b64e <rt_hw_board_init+0x14> lw	s0,8(sp)
1c00b650 <rt_hw_board_init+0x16> addi	sp,sp,16
1c00b652 <rt_hw_board_init+0x18> ret
vApplicationMallocFailedHook():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:195
}
/*---------------------------------------------------------*/


void vApplicationMallocFailedHook( void )
{
1c00b654 <vApplicationMallocFailedHook> addi	sp,sp,-16
1c00b656 <vApplicationMallocFailedHook+0x2> sw	s0,12(sp)
1c00b658 <vApplicationMallocFailedHook+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:205
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
1c00b65a <vApplicationMallocFailedHook+0x6> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:207
//	printf( "error: application malloc failed\n" );
	__asm volatile( "ebreak" );
1c00b65e <vApplicationMallocFailedHook+0xa> ebreak
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:208 (discriminator 1)
	for( ;; );
1c00b660 <vApplicationMallocFailedHook+0xc> j	1c00b660 <vApplicationMallocFailedHook+0xc>
vApplicationStackOverflowHook():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:227
	memory allocated by the kernel to any task that has since been deleted. */
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1c00b662 <vApplicationStackOverflowHook> addi	sp,sp,-32
1c00b664 <vApplicationStackOverflowHook+0x2> sw	s0,28(sp)
1c00b666 <vApplicationStackOverflowHook+0x4> addi	s0,sp,32
1c00b668 <vApplicationStackOverflowHook+0x6> sw	a0,-20(s0)
1c00b66c <vApplicationStackOverflowHook+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:234
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
1c00b670 <vApplicationStackOverflowHook+0xe> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:235
	__asm volatile( "ebreak" );
1c00b674 <vApplicationStackOverflowHook+0x12> ebreak
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:236 (discriminator 1)
	for( ;; );
1c00b676 <vApplicationStackOverflowHook+0x14> j	1c00b676 <vApplicationStackOverflowHook+0x14>
vApplicationTickHook():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:241
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
1c00b678 <vApplicationTickHook> addi	sp,sp,-16
1c00b67a <vApplicationTickHook+0x2> sw	s0,12(sp)
1c00b67c <vApplicationTickHook+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:249
	{
		extern void vFullDemoTickHook( void );
		vFullDemoTickHook();
	}
	#endif
}
1c00b67e <vApplicationTickHook+0x6> nop
1c00b680 <vApplicationTickHook+0x8> lw	s0,12(sp)
1c00b682 <vApplicationTickHook+0xa> addi	sp,sp,16
1c00b684 <vApplicationTickHook+0xc> ret
rt_tick_get():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:46
 * This function will return current tick from operating system startup
 *
 * @return current tick
 */
rt_tick_t rt_tick_get(void)
{
1c00b686 <rt_tick_get> addi	sp,sp,-16
1c00b688 <rt_tick_get+0x2> sw	s0,12(sp)
1c00b68a <rt_tick_get+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:48
    /* return the global tick */
    return rt_tick;
1c00b68c <rt_tick_get+0x6> lw	a5,1100(gp) # 1c00ebb4 <rt_tick>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:49
}
1c00b690 <rt_tick_get+0xa> mv	a0,a5
1c00b692 <rt_tick_get+0xc> lw	s0,12(sp)
1c00b694 <rt_tick_get+0xe> addi	sp,sp,16
1c00b696 <rt_tick_get+0x10> ret
rt_tick_increase():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:68
/**
 * This function will notify kernel there is one tick passed. Normally,
 * this function is invoked by clock ISR.
 */
void rt_tick_increase(void)
{
1c00b698 <rt_tick_increase> addi	sp,sp,-32
1c00b69a <rt_tick_increase+0x2> sw	ra,28(sp)
1c00b69c <rt_tick_increase+0x4> sw	s0,24(sp)
1c00b69e <rt_tick_increase+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:72
    struct rt_thread *thread;

    /* increase the global tick */
    ++ rt_tick;
1c00b6a0 <rt_tick_increase+0x8> lw	a5,1100(gp) # 1c00ebb4 <rt_tick>
1c00b6a4 <rt_tick_increase+0xc> addi	a4,a5,1
1c00b6a8 <rt_tick_increase+0x10> sw	a4,1100(gp) # 1c00ebb4 <rt_tick>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:75

    /* check time slice */
    thread = rt_thread_self();
1c00b6ac <rt_tick_increase+0x14> jal	ra,1c00cd28 <rt_thread_self>
1c00b6b0 <rt_tick_increase+0x18> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:77

    -- thread->remaining_tick;
1c00b6b4 <rt_tick_increase+0x1c> lw	a5,-20(s0)
1c00b6b8 <rt_tick_increase+0x20> lw	a5,64(a5)
1c00b6ba <rt_tick_increase+0x22> addi	a4,a5,-1
1c00b6be <rt_tick_increase+0x26> lw	a5,-20(s0)
1c00b6c2 <rt_tick_increase+0x2a> sw	a4,64(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:78
    if (thread->remaining_tick == 0)
1c00b6c4 <rt_tick_increase+0x2c> lw	a5,-20(s0)
1c00b6c8 <rt_tick_increase+0x30> lw	a5,64(a5)
1c00b6ca <rt_tick_increase+0x32> bnez	a5,1c00b6dc <rt_tick_increase+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:81
    {
        /* change to initialized tick */
        thread->remaining_tick = thread->init_tick;
1c00b6cc <rt_tick_increase+0x34> lw	a5,-20(s0)
1c00b6d0 <rt_tick_increase+0x38> lw	a4,60(a5)
1c00b6d2 <rt_tick_increase+0x3a> lw	a5,-20(s0)
1c00b6d6 <rt_tick_increase+0x3e> sw	a4,64(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:84

        /* yield */
        rt_thread_yield();
1c00b6d8 <rt_tick_increase+0x40> jal	ra,1c00cd96 <rt_thread_yield>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:88
    }

    /* check timer */
    rt_timer_check();
1c00b6dc <rt_tick_increase+0x44> jal	ra,1c00d51e <rt_timer_check>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:89
}
1c00b6e0 <rt_tick_increase+0x48> nop
1c00b6e2 <rt_tick_increase+0x4a> lw	ra,28(sp)
1c00b6e4 <rt_tick_increase+0x4c> lw	s0,24(sp)
1c00b6e6 <rt_tick_increase+0x4e> addi	sp,sp,32
1c00b6e8 <rt_tick_increase+0x50> ret
rt_thread_idle_excute():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:142
 * @ingroup Thread
 *
 * This function will perform system background job when system idle.
 */
void rt_thread_idle_excute(void)
{
1c00b6ea <rt_thread_idle_excute> addi	sp,sp,-16
1c00b6ec <rt_thread_idle_excute+0x2> sw	s0,12(sp)
1c00b6ee <rt_thread_idle_excute+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:176
        /* delete thread object */
        rt_object_delete((rt_object_t)thread);
        rt_hw_interrupt_enable(lock);
    }
#endif
}
1c00b6f0 <rt_thread_idle_excute+0x6> nop
1c00b6f2 <rt_thread_idle_excute+0x8> lw	s0,12(sp)
1c00b6f4 <rt_thread_idle_excute+0xa> addi	sp,sp,16
1c00b6f6 <rt_thread_idle_excute+0xc> ret
rt_thread_idle_entry():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:180

extern void rt_system_power_manager(void);
static void rt_thread_idle_entry(void *parameter)
{
1c00b6f8 <rt_thread_idle_entry> addi	sp,sp,-32
1c00b6fa <rt_thread_idle_entry+0x2> sw	ra,28(sp)
1c00b6fc <rt_thread_idle_entry+0x4> sw	s0,24(sp)
1c00b6fe <rt_thread_idle_entry+0x6> addi	s0,sp,32
1c00b700 <rt_thread_idle_entry+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:196 (discriminator 1)
                idle_hook_list[i]();
            }
        }
#endif

        rt_thread_idle_excute();
1c00b704 <rt_thread_idle_entry+0xc> jal	1c00b6ea <rt_thread_idle_excute>
1c00b706 <rt_thread_idle_entry+0xe> j	1c00b704 <rt_thread_idle_entry+0xc>
rt_thread_idle_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:211
 * This function will initialize idle thread, then start it.
 *
 * @note this function must be invoked when system init.
 */
void rt_thread_idle_init(void)
{
1c00b708 <rt_thread_idle_init> addi	sp,sp,-16
1c00b70a <rt_thread_idle_init+0x2> sw	ra,12(sp)
1c00b70c <rt_thread_idle_init+0x4> sw	s0,8(sp)
1c00b70e <rt_thread_idle_init+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:213
    /* initialize thread */
    rt_thread_init(&idle,
1c00b710 <rt_thread_idle_init+0x8> li	a7,32
1c00b714 <rt_thread_idle_init+0xc> li	a6,7
1c00b716 <rt_thread_idle_init+0xe> li	a5,128
1c00b71a <rt_thread_idle_init+0x12> addi	a4,gp,472 # 1c00e940 <rt_thread_stack>
1c00b71e <rt_thread_idle_init+0x16> li	a3,0
1c00b720 <rt_thread_idle_init+0x18> lui	a2,0x1c00b
1c00b724 <rt_thread_idle_init+0x1c> addi	a2,a2,1784 # 1c00b6f8 <rt_thread_idle_entry>
1c00b728 <rt_thread_idle_init+0x20> lui	a1,0x1c00e
1c00b72c <rt_thread_idle_init+0x24> addi	a1,a1,-1568 # 1c00d9e0 <__l2_priv0_end+0x2c>
1c00b730 <rt_thread_idle_init+0x28> addi	a0,gp,352 # 1c00e8c8 <idle>
1c00b734 <rt_thread_idle_init+0x2c> jal	ra,1c00ccbe <rt_thread_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:223
                   sizeof(rt_thread_stack),
                   RT_THREAD_PRIORITY_MAX - 1,
                   32);

    /* startup */
    rt_thread_startup(&idle);
1c00b738 <rt_thread_idle_init+0x30> addi	a0,gp,352 # 1c00e8c8 <idle>
1c00b73c <rt_thread_idle_init+0x34> jal	ra,1c00cd3a <rt_thread_startup>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:224
}
1c00b740 <rt_thread_idle_init+0x38> nop
1c00b742 <rt_thread_idle_init+0x3a> lw	ra,12(sp)
1c00b744 <rt_thread_idle_init+0x3c> lw	s0,8(sp)
1c00b746 <rt_thread_idle_init+0x3e> addi	sp,sp,16
1c00b748 <rt_thread_idle_init+0x40> ret
rt_interrupt_enter():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:62
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_leave
 */
void rt_interrupt_enter(void)
{
1c00b74a <rt_interrupt_enter> addi	sp,sp,-32
1c00b74c <rt_interrupt_enter+0x2> sw	ra,28(sp)
1c00b74e <rt_interrupt_enter+0x4> sw	s0,24(sp)
1c00b750 <rt_interrupt_enter+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:68
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq coming..., irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
1c00b752 <rt_interrupt_enter+0x8> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00b756 <rt_interrupt_enter+0xc> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:69
    rt_interrupt_nest ++;
1c00b75a <rt_interrupt_enter+0x10> lui	a5,0x1c00f
1c00b75e <rt_interrupt_enter+0x14> lbu	a5,-356(a5) # 1c00ee9c <rt_interrupt_nest>
1c00b762 <rt_interrupt_enter+0x18> andi	a5,a5,255
1c00b766 <rt_interrupt_enter+0x1c> addi	a5,a5,1
1c00b768 <rt_interrupt_enter+0x1e> andi	a4,a5,255
1c00b76c <rt_interrupt_enter+0x22> lui	a5,0x1c00f
1c00b770 <rt_interrupt_enter+0x26> sb	a4,-356(a5) # 1c00ee9c <rt_interrupt_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:71
    RT_OBJECT_HOOK_CALL(rt_interrupt_enter_hook,());
    rt_hw_interrupt_enable(level);
1c00b774 <rt_interrupt_enter+0x2a> lw	a0,-20(s0)
1c00b778 <rt_interrupt_enter+0x2e> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:72
}
1c00b77c <rt_interrupt_enter+0x32> nop
1c00b77e <rt_interrupt_enter+0x34> lw	ra,28(sp)
1c00b780 <rt_interrupt_enter+0x36> lw	s0,24(sp)
1c00b782 <rt_interrupt_enter+0x38> addi	sp,sp,32
1c00b784 <rt_interrupt_enter+0x3a> ret
rt_interrupt_leave():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:82
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_enter
 */
void rt_interrupt_leave(void)
{
1c00b786 <rt_interrupt_leave> addi	sp,sp,-32
1c00b788 <rt_interrupt_leave+0x2> sw	ra,28(sp)
1c00b78a <rt_interrupt_leave+0x4> sw	s0,24(sp)
1c00b78c <rt_interrupt_leave+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:88
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq leave, irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
1c00b78e <rt_interrupt_leave+0x8> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00b792 <rt_interrupt_leave+0xc> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:89
    rt_interrupt_nest --;
1c00b796 <rt_interrupt_leave+0x10> lui	a5,0x1c00f
1c00b79a <rt_interrupt_leave+0x14> lbu	a5,-356(a5) # 1c00ee9c <rt_interrupt_nest>
1c00b79e <rt_interrupt_leave+0x18> andi	a5,a5,255
1c00b7a2 <rt_interrupt_leave+0x1c> addi	a5,a5,-1
1c00b7a4 <rt_interrupt_leave+0x1e> andi	a4,a5,255
1c00b7a8 <rt_interrupt_leave+0x22> lui	a5,0x1c00f
1c00b7ac <rt_interrupt_leave+0x26> sb	a4,-356(a5) # 1c00ee9c <rt_interrupt_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:91
    RT_OBJECT_HOOK_CALL(rt_interrupt_leave_hook,());
    rt_hw_interrupt_enable(level);
1c00b7b0 <rt_interrupt_leave+0x2a> lw	a0,-20(s0)
1c00b7b4 <rt_interrupt_leave+0x2e> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:92
}
1c00b7b8 <rt_interrupt_leave+0x32> nop
1c00b7ba <rt_interrupt_leave+0x34> lw	ra,28(sp)
1c00b7bc <rt_interrupt_leave+0x36> lw	s0,24(sp)
1c00b7be <rt_interrupt_leave+0x38> addi	sp,sp,32
1c00b7c0 <rt_interrupt_leave+0x3a> ret
rt_memset():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:120
 * @param count the copied length
 *
 * @return the address of source memory
 */
void *rt_memset(void *s, int c, rt_ubase_t count)
{
1c00b7c2 <rt_memset> addi	sp,sp,-48
1c00b7c4 <rt_memset+0x2> sw	s0,44(sp)
1c00b7c6 <rt_memset+0x4> addi	s0,sp,48
1c00b7c8 <rt_memset+0x6> sw	a0,-36(s0)
1c00b7cc <rt_memset+0xa> sw	a1,-40(s0)
1c00b7d0 <rt_memset+0xe> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:134
#define LBLOCKSIZE      (sizeof(long))
#define UNALIGNED(X)    ((long)X & (LBLOCKSIZE - 1))
#define TOO_SMALL(LEN)  ((LEN) < LBLOCKSIZE)

    unsigned int i;
    char *m = (char *)s;
1c00b7d4 <rt_memset+0x12> lw	a5,-36(s0)
1c00b7d8 <rt_memset+0x16> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:137
    unsigned long buffer;
    unsigned long *aligned_addr;
    unsigned int d = c & 0xff;  /* To avoid sign extension, copy C to an
1c00b7dc <rt_memset+0x1a> lw	a5,-40(s0)
1c00b7e0 <rt_memset+0x1e> andi	a5,a5,255
1c00b7e4 <rt_memset+0x22> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:140
                                unsigned variable.  */

    if (!TOO_SMALL(count) && !UNALIGNED(s))
1c00b7e8 <rt_memset+0x26> lw	a4,-44(s0)
1c00b7ec <rt_memset+0x2a> li	a5,3
1c00b7ee <rt_memset+0x2c> bgeu	a5,a4,1c00b8ca <rt_memset+0x108>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:140 (discriminator 1)
1c00b7f2 <rt_memset+0x30> lw	a5,-36(s0)
1c00b7f6 <rt_memset+0x34> andi	a5,a5,3
1c00b7f8 <rt_memset+0x36> bnez	a5,1c00b8ca <rt_memset+0x108>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:143
    {
        /* If we get this far, we know that n is large and m is word-aligned. */
        aligned_addr = (unsigned long *)s;
1c00b7fa <rt_memset+0x38> lw	a5,-36(s0)
1c00b7fe <rt_memset+0x3c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:150
        /* Store D into each char sized location in BUFFER so that
         * we can set large blocks quickly.
         */
        if (LBLOCKSIZE == 4)
        {
            buffer = (d << 8) | d;
1c00b802 <rt_memset+0x40> lw	a5,-28(s0)
1c00b806 <rt_memset+0x44> slli	a5,a5,0x8
1c00b808 <rt_memset+0x46> lw	a4,-28(s0)
1c00b80c <rt_memset+0x4a> or	a5,a5,a4
1c00b80e <rt_memset+0x4c> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:151
            buffer |= (buffer << 16);
1c00b812 <rt_memset+0x50> lw	a5,-32(s0)
1c00b816 <rt_memset+0x54> slli	a5,a5,0x10
1c00b818 <rt_memset+0x56> lw	a4,-32(s0)
1c00b81c <rt_memset+0x5a> or	a5,a5,a4
1c00b81e <rt_memset+0x5c> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:160
            buffer = 0;
            for (i = 0; i < LBLOCKSIZE; i ++)
                buffer = (buffer << 8) | d;
        }

        while (count >= LBLOCKSIZE * 4)
1c00b822 <rt_memset+0x60> j	1c00b876 <rt_memset+0xb4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:162
        {
            *aligned_addr++ = buffer;
1c00b824 <rt_memset+0x62> lw	a5,-24(s0)
1c00b828 <rt_memset+0x66> addi	a4,a5,4
1c00b82c <rt_memset+0x6a> sw	a4,-24(s0)
1c00b830 <rt_memset+0x6e> lw	a4,-32(s0)
1c00b834 <rt_memset+0x72> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:163
            *aligned_addr++ = buffer;
1c00b836 <rt_memset+0x74> lw	a5,-24(s0)
1c00b83a <rt_memset+0x78> addi	a4,a5,4
1c00b83e <rt_memset+0x7c> sw	a4,-24(s0)
1c00b842 <rt_memset+0x80> lw	a4,-32(s0)
1c00b846 <rt_memset+0x84> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:164
            *aligned_addr++ = buffer;
1c00b848 <rt_memset+0x86> lw	a5,-24(s0)
1c00b84c <rt_memset+0x8a> addi	a4,a5,4
1c00b850 <rt_memset+0x8e> sw	a4,-24(s0)
1c00b854 <rt_memset+0x92> lw	a4,-32(s0)
1c00b858 <rt_memset+0x96> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:165
            *aligned_addr++ = buffer;
1c00b85a <rt_memset+0x98> lw	a5,-24(s0)
1c00b85e <rt_memset+0x9c> addi	a4,a5,4
1c00b862 <rt_memset+0xa0> sw	a4,-24(s0)
1c00b866 <rt_memset+0xa4> lw	a4,-32(s0)
1c00b86a <rt_memset+0xa8> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:166
            count -= 4 * LBLOCKSIZE;
1c00b86c <rt_memset+0xaa> lw	a5,-44(s0)
1c00b870 <rt_memset+0xae> addi	a5,a5,-16
1c00b872 <rt_memset+0xb0> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:160
        while (count >= LBLOCKSIZE * 4)
1c00b876 <rt_memset+0xb4> lw	a4,-44(s0)
1c00b87a <rt_memset+0xb8> li	a5,15
1c00b87c <rt_memset+0xba> bltu	a5,a4,1c00b824 <rt_memset+0x62>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:169
        }

        while (count >= LBLOCKSIZE)
1c00b880 <rt_memset+0xbe> j	1c00b89e <rt_memset+0xdc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:171
        {
            *aligned_addr++ = buffer;
1c00b882 <rt_memset+0xc0> lw	a5,-24(s0)
1c00b886 <rt_memset+0xc4> addi	a4,a5,4
1c00b88a <rt_memset+0xc8> sw	a4,-24(s0)
1c00b88e <rt_memset+0xcc> lw	a4,-32(s0)
1c00b892 <rt_memset+0xd0> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:172
            count -= LBLOCKSIZE;
1c00b894 <rt_memset+0xd2> lw	a5,-44(s0)
1c00b898 <rt_memset+0xd6> addi	a5,a5,-4
1c00b89a <rt_memset+0xd8> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:169
        while (count >= LBLOCKSIZE)
1c00b89e <rt_memset+0xdc> lw	a4,-44(s0)
1c00b8a2 <rt_memset+0xe0> li	a5,3
1c00b8a4 <rt_memset+0xe2> bltu	a5,a4,1c00b882 <rt_memset+0xc0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:176
        }

        /* Pick up the remainder with a bytewise loop. */
        m = (char *)aligned_addr;
1c00b8a8 <rt_memset+0xe6> lw	a5,-24(s0)
1c00b8ac <rt_memset+0xea> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:179
    }

    while (count--)
1c00b8b0 <rt_memset+0xee> j	1c00b8ca <rt_memset+0x108>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:181
    {
        *m++ = (char)d;
1c00b8b2 <rt_memset+0xf0> lw	a5,-20(s0)
1c00b8b6 <rt_memset+0xf4> addi	a4,a5,1
1c00b8ba <rt_memset+0xf8> sw	a4,-20(s0)
1c00b8be <rt_memset+0xfc> lw	a4,-28(s0)
1c00b8c2 <rt_memset+0x100> slli	a4,a4,0x18
1c00b8c4 <rt_memset+0x102> srai	a4,a4,0x18
1c00b8c6 <rt_memset+0x104> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:179
    while (count--)
1c00b8ca <rt_memset+0x108> lw	a5,-44(s0)
1c00b8ce <rt_memset+0x10c> addi	a4,a5,-1
1c00b8d2 <rt_memset+0x110> sw	a4,-44(s0)
1c00b8d6 <rt_memset+0x114> bnez	a5,1c00b8b2 <rt_memset+0xf0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:184
    }

    return s;
1c00b8d8 <rt_memset+0x116> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:190

#undef LBLOCKSIZE
#undef UNALIGNED
#undef TOO_SMALL
#endif
}
1c00b8dc <rt_memset+0x11a> mv	a0,a5
1c00b8de <rt_memset+0x11c> lw	s0,44(sp)
1c00b8e0 <rt_memset+0x11e> addi	sp,sp,48
1c00b8e2 <rt_memset+0x120> ret
rt_strncpy():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:389
 * @param n the maximum copied length
 *
 * @return the result
 */
char *rt_strncpy(char *dst, const char *src, rt_ubase_t n)
{
1c00b8e4 <rt_strncpy> addi	sp,sp,-48
1c00b8e6 <rt_strncpy+0x2> sw	s0,44(sp)
1c00b8e8 <rt_strncpy+0x4> addi	s0,sp,48
1c00b8ea <rt_strncpy+0x6> sw	a0,-36(s0)
1c00b8ee <rt_strncpy+0xa> sw	a1,-40(s0)
1c00b8f2 <rt_strncpy+0xe> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:390
    if (n != 0)
1c00b8f6 <rt_strncpy+0x12> lw	a5,-44(s0)
1c00b8fa <rt_strncpy+0x16> beqz	a5,1c00b966 <rt_strncpy+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:392
    {
        char *d = dst;
1c00b8fc <rt_strncpy+0x18> lw	a5,-36(s0)
1c00b900 <rt_strncpy+0x1c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:393
        const char *s = src;
1c00b904 <rt_strncpy+0x20> lw	a5,-40(s0)
1c00b908 <rt_strncpy+0x24> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:397

        do
        {
            if ((*d++ = *s++) == 0)
1c00b90c <rt_strncpy+0x28> lw	a4,-24(s0)
1c00b910 <rt_strncpy+0x2c> addi	a5,a4,1
1c00b914 <rt_strncpy+0x30> sw	a5,-24(s0)
1c00b918 <rt_strncpy+0x34> lw	a5,-20(s0)
1c00b91c <rt_strncpy+0x38> addi	a3,a5,1
1c00b920 <rt_strncpy+0x3c> sw	a3,-20(s0)
1c00b924 <rt_strncpy+0x40> lb	a4,0(a4)
1c00b928 <rt_strncpy+0x44> sb	a4,0(a5)
1c00b92c <rt_strncpy+0x48> lb	a5,0(a5)
1c00b930 <rt_strncpy+0x4c> bnez	a5,1c00b956 <rt_strncpy+0x72>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:400
            {
                /* NUL pad the remaining n-1 bytes */
                while (--n != 0)
1c00b932 <rt_strncpy+0x4e> j	1c00b944 <rt_strncpy+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:401
                    *d++ = 0;
1c00b934 <rt_strncpy+0x50> lw	a5,-20(s0)
1c00b938 <rt_strncpy+0x54> addi	a4,a5,1
1c00b93c <rt_strncpy+0x58> sw	a4,-20(s0)
1c00b940 <rt_strncpy+0x5c> sb	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:400
                while (--n != 0)
1c00b944 <rt_strncpy+0x60> lw	a5,-44(s0)
1c00b948 <rt_strncpy+0x64> addi	a5,a5,-1
1c00b94a <rt_strncpy+0x66> sw	a5,-44(s0)
1c00b94e <rt_strncpy+0x6a> lw	a5,-44(s0)
1c00b952 <rt_strncpy+0x6e> bnez	a5,1c00b934 <rt_strncpy+0x50>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:402
                break;
1c00b954 <rt_strncpy+0x70> j	1c00b966 <rt_strncpy+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:404
            }
        } while (--n != 0);
1c00b956 <rt_strncpy+0x72> lw	a5,-44(s0)
1c00b95a <rt_strncpy+0x76> addi	a5,a5,-1
1c00b95c <rt_strncpy+0x78> sw	a5,-44(s0)
1c00b960 <rt_strncpy+0x7c> lw	a5,-44(s0)
1c00b964 <rt_strncpy+0x80> bnez	a5,1c00b90c <rt_strncpy+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:407
    }

    return (dst);
1c00b966 <rt_strncpy+0x82> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:408
}
1c00b96a <rt_strncpy+0x86> mv	a0,a5
1c00b96c <rt_strncpy+0x88> lw	s0,44(sp)
1c00b96e <rt_strncpy+0x8a> addi	sp,sp,48
1c00b970 <rt_strncpy+0x8c> ret
rt_show_version():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:521

/**
 * This function will show the version of rt-thread rtos
 */
void rt_show_version(void)
{
1c00b972 <rt_show_version> addi	sp,sp,-16
1c00b974 <rt_show_version+0x2> sw	ra,12(sp)
1c00b976 <rt_show_version+0x4> sw	s0,8(sp)
1c00b978 <rt_show_version+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:522
    rt_kprintf("\n \\ | /\n");
1c00b97a <rt_show_version+0x8> lui	a5,0x1c00e
1c00b97e <rt_show_version+0xc> addi	a0,a5,-1560 # 1c00d9e8 <__l2_priv0_end+0x34>
1c00b982 <rt_show_version+0x10> jal	ra,1c00c340 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:523
    rt_kprintf("- RT -     Thread Operating System\n");
1c00b986 <rt_show_version+0x14> lui	a5,0x1c00e
1c00b98a <rt_show_version+0x18> addi	a0,a5,-1548 # 1c00d9f4 <__l2_priv0_end+0x40>
1c00b98e <rt_show_version+0x1c> jal	ra,1c00c340 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:524
    rt_kprintf(" / | \\     %d.%d.%d build %s\n",
1c00b992 <rt_show_version+0x20> lui	a5,0x1c00e
1c00b996 <rt_show_version+0x24> addi	a4,a5,-1512 # 1c00da18 <__l2_priv0_end+0x64>
1c00b99a <rt_show_version+0x28> li	a3,5
1c00b99c <rt_show_version+0x2a> li	a2,1
1c00b99e <rt_show_version+0x2c> li	a1,3
1c00b9a0 <rt_show_version+0x2e> lui	a5,0x1c00e
1c00b9a4 <rt_show_version+0x32> addi	a0,a5,-1500 # 1c00da24 <__l2_priv0_end+0x70>
1c00b9a8 <rt_show_version+0x36> jal	ra,1c00c340 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:526
               RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__);
    rt_kprintf(" 2006 - 2020 Copyright by rt-thread team\n");
1c00b9ac <rt_show_version+0x3a> lui	a5,0x1c00e
1c00b9b0 <rt_show_version+0x3e> addi	a0,a5,-1468 # 1c00da44 <__l2_priv0_end+0x90>
1c00b9b4 <rt_show_version+0x42> jal	ra,1c00c340 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:527
}
1c00b9b8 <rt_show_version+0x46> nop
1c00b9ba <rt_show_version+0x48> lw	ra,12(sp)
1c00b9bc <rt_show_version+0x4a> lw	s0,8(sp)
1c00b9be <rt_show_version+0x4c> addi	sp,sp,16
1c00b9c0 <rt_show_version+0x4e> ret
divide():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:553

    return res;
}
#else
rt_inline int divide(long *n, int base)
{
1c00b9c2 <divide> addi	sp,sp,-48
1c00b9c4 <divide+0x2> sw	s0,44(sp)
1c00b9c6 <divide+0x4> addi	s0,sp,48
1c00b9c8 <divide+0x6> sw	a0,-36(s0)
1c00b9cc <divide+0xa> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:557
    int res;

    /* optimized for processor which does not support divide instructions. */
    if (base == 10)
1c00b9d0 <divide+0xe> lw	a4,-40(s0)
1c00b9d4 <divide+0x12> li	a5,10
1c00b9d6 <divide+0x14> bne	a4,a5,1c00ba04 <divide+0x42>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:559
    {
        res = (int)(((unsigned long)*n) % 10U);
1c00b9da <divide+0x18> lw	a5,-36(s0)
1c00b9de <divide+0x1c> lw	a5,0(a5)
1c00b9e0 <divide+0x1e> mv	a4,a5
1c00b9e2 <divide+0x20> li	a5,10
1c00b9e4 <divide+0x22> remu	a5,a4,a5
1c00b9e8 <divide+0x26> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:560
        *n = (long)(((unsigned long)*n) / 10U);
1c00b9ec <divide+0x2a> lw	a5,-36(s0)
1c00b9f0 <divide+0x2e> lw	a5,0(a5)
1c00b9f2 <divide+0x30> mv	a4,a5
1c00b9f4 <divide+0x32> li	a5,10
1c00b9f6 <divide+0x34> divu	a5,a4,a5
1c00b9fa <divide+0x38> mv	a4,a5
1c00b9fc <divide+0x3a> lw	a5,-36(s0)
1c00ba00 <divide+0x3e> sw	a4,0(a5)
1c00ba02 <divide+0x40> j	1c00ba20 <divide+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:564
    }
    else
    {
        res = (int)(((unsigned long)*n) % 16U);
1c00ba04 <divide+0x42> lw	a5,-36(s0)
1c00ba08 <divide+0x46> lw	a5,0(a5)
1c00ba0a <divide+0x48> andi	a5,a5,15
1c00ba0c <divide+0x4a> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:565
        *n = (long)(((unsigned long)*n) / 16U);
1c00ba10 <divide+0x4e> lw	a5,-36(s0)
1c00ba14 <divide+0x52> lw	a5,0(a5)
1c00ba16 <divide+0x54> srli	a5,a5,0x4
1c00ba18 <divide+0x56> mv	a4,a5
1c00ba1a <divide+0x58> lw	a5,-36(s0)
1c00ba1e <divide+0x5c> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:568
    }

    return res;
1c00ba20 <divide+0x5e> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:569
}
1c00ba24 <divide+0x62> mv	a0,a5
1c00ba26 <divide+0x64> lw	s0,44(sp)
1c00ba28 <divide+0x66> addi	sp,sp,48
1c00ba2a <divide+0x68> ret
skip_atoi():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:573
#endif

rt_inline int skip_atoi(const char **s)
{
1c00ba2c <skip_atoi> addi	sp,sp,-32
1c00ba2e <skip_atoi+0x2> sw	s0,28(sp)
1c00ba30 <skip_atoi+0x4> sw	s1,24(sp)
1c00ba32 <skip_atoi+0x6> addi	s0,sp,32
1c00ba34 <skip_atoi+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:574
    register int i = 0;
1c00ba38 <skip_atoi+0xc> li	s1,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:575
    while (_ISDIGIT(**s))
1c00ba3a <skip_atoi+0xe> j	1c00ba60 <skip_atoi+0x34>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:576
        i = i * 10 + *((*s)++) - '0';
1c00ba3c <skip_atoi+0x10> mv	a5,s1
1c00ba3e <skip_atoi+0x12> slli	a5,a5,0x2
1c00ba40 <skip_atoi+0x14> add	a5,a5,s1
1c00ba42 <skip_atoi+0x16> slli	a5,a5,0x1
1c00ba44 <skip_atoi+0x18> mv	a2,a5
1c00ba46 <skip_atoi+0x1a> lw	a5,-20(s0)
1c00ba4a <skip_atoi+0x1e> lw	a5,0(a5)
1c00ba4c <skip_atoi+0x20> addi	a3,a5,1
1c00ba50 <skip_atoi+0x24> lw	a4,-20(s0)
1c00ba54 <skip_atoi+0x28> sw	a3,0(a4)
1c00ba56 <skip_atoi+0x2a> lb	a5,0(a5)
1c00ba5a <skip_atoi+0x2e> add	a5,a5,a2
1c00ba5c <skip_atoi+0x30> addi	s1,a5,-48
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:575
    while (_ISDIGIT(**s))
1c00ba60 <skip_atoi+0x34> lw	a5,-20(s0)
1c00ba64 <skip_atoi+0x38> lw	a5,0(a5)
1c00ba66 <skip_atoi+0x3a> lb	a5,0(a5)
1c00ba6a <skip_atoi+0x3e> addi	a5,a5,-48
1c00ba6e <skip_atoi+0x42> mv	a4,a5
1c00ba70 <skip_atoi+0x44> li	a5,9
1c00ba72 <skip_atoi+0x46> bgeu	a5,a4,1c00ba3c <skip_atoi+0x10>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:578

    return i;
1c00ba76 <skip_atoi+0x4a> mv	a5,s1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:579
}
1c00ba78 <skip_atoi+0x4c> mv	a0,a5
1c00ba7a <skip_atoi+0x4e> lw	s0,28(sp)
1c00ba7c <skip_atoi+0x50> lw	s1,24(sp)
1c00ba7e <skip_atoi+0x52> addi	sp,sp,32
1c00ba80 <skip_atoi+0x54> ret
print_number():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:613
#endif
                          int   base,
                          int   s,
                          int   type)
#endif
{
1c00ba82 <print_number> addi	sp,sp,-80
1c00ba84 <print_number+0x2> sw	ra,76(sp)
1c00ba86 <print_number+0x4> sw	s0,72(sp)
1c00ba88 <print_number+0x6> sw	s1,68(sp)
1c00ba8a <print_number+0x8> sw	s2,64(sp)
1c00ba8c <print_number+0xa> addi	s0,sp,80
1c00ba8e <print_number+0xc> sw	a0,-52(s0)
1c00ba92 <print_number+0x10> sw	a1,-56(s0)
1c00ba96 <print_number+0x14> sw	a2,-60(s0)
1c00ba9a <print_number+0x18> sw	a3,-64(s0)
1c00ba9e <print_number+0x1c> sw	a4,-68(s0)
1c00baa2 <print_number+0x20> sw	a5,-72(s0)
1c00baa6 <print_number+0x24> sw	a6,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:620
#ifdef RT_PRINTF_LONGLONG
    char tmp[32];
#else
    char tmp[16];
#endif
    int precision_bak = precision;
1c00baaa <print_number+0x28> lw	a5,-72(s0)
1c00baae <print_number+0x2c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:627
    static const char small_digits[] = "0123456789abcdef";
    static const char large_digits[] = "0123456789ABCDEF";
    register int i;
    register int size;

    size = s;
1c00bab2 <print_number+0x30> lw	s1,-68(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:629

    digits = (type & LARGE) ? large_digits : small_digits;
1c00bab6 <print_number+0x34> lw	a5,-76(s0)
1c00baba <print_number+0x38> andi	a5,a5,64
1c00babe <print_number+0x3c> beqz	a5,1c00baca <print_number+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:629 (discriminator 1)
1c00bac0 <print_number+0x3e> lui	a5,0x1c00e
1c00bac4 <print_number+0x42> addi	a5,a5,-824 # 1c00dcc8 <large_digits.2067>
1c00bac8 <print_number+0x46> j	1c00bad2 <print_number+0x50>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:629 (discriminator 2)
1c00baca <print_number+0x48> lui	a5,0x1c00e
1c00bace <print_number+0x4c> addi	a5,a5,-804 # 1c00dcdc <small_digits.2066>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:629 (discriminator 4)
1c00bad2 <print_number+0x50> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:630 (discriminator 4)
    if (type & LEFT)
1c00bad6 <print_number+0x54> lw	a5,-76(s0)
1c00bada <print_number+0x58> andi	a5,a5,16
1c00badc <print_number+0x5a> beqz	a5,1c00bae8 <print_number+0x66>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:631
        type &= ~ZEROPAD;
1c00bade <print_number+0x5c> lw	a5,-76(s0)
1c00bae2 <print_number+0x60> andi	a5,a5,-2
1c00bae4 <print_number+0x62> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:633

    c = (type & ZEROPAD) ? '0' : ' ';
1c00bae8 <print_number+0x66> lw	a5,-76(s0)
1c00baec <print_number+0x6a> andi	a5,a5,1
1c00baee <print_number+0x6c> beqz	a5,1c00baf6 <print_number+0x74>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:633 (discriminator 1)
1c00baf0 <print_number+0x6e> li	a5,48
1c00baf4 <print_number+0x72> j	1c00bafa <print_number+0x78>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:633 (discriminator 2)
1c00baf6 <print_number+0x74> li	a5,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:633 (discriminator 4)
1c00bafa <print_number+0x78> sb	a5,-29(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:636 (discriminator 4)

    /* get sign */
    sign = 0;
1c00bafe <print_number+0x7c> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:637 (discriminator 4)
    if (type & SIGN)
1c00bb02 <print_number+0x80> lw	a5,-76(s0)
1c00bb06 <print_number+0x84> andi	a5,a5,2
1c00bb08 <print_number+0x86> beqz	a5,1c00bb4a <print_number+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:639
    {
        if (num < 0)
1c00bb0a <print_number+0x88> lw	a5,-60(s0)
1c00bb0e <print_number+0x8c> bgez	a5,1c00bb28 <print_number+0xa6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:641
        {
            sign = '-';
1c00bb12 <print_number+0x90> li	a5,45
1c00bb16 <print_number+0x94> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:642
            num = -num;
1c00bb1a <print_number+0x98> lw	a5,-60(s0)
1c00bb1e <print_number+0x9c> neg	a5,a5
1c00bb22 <print_number+0xa0> sw	a5,-60(s0)
1c00bb26 <print_number+0xa4> j	1c00bb4a <print_number+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:644
        }
        else if (type & PLUS)
1c00bb28 <print_number+0xa6> lw	a5,-76(s0)
1c00bb2c <print_number+0xaa> andi	a5,a5,4
1c00bb2e <print_number+0xac> beqz	a5,1c00bb3a <print_number+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:645
            sign = '+';
1c00bb30 <print_number+0xae> li	a5,43
1c00bb34 <print_number+0xb2> sb	a5,-17(s0)
1c00bb38 <print_number+0xb6> j	1c00bb4a <print_number+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:646
        else if (type & SPACE)
1c00bb3a <print_number+0xb8> lw	a5,-76(s0)
1c00bb3e <print_number+0xbc> andi	a5,a5,8
1c00bb40 <print_number+0xbe> beqz	a5,1c00bb4a <print_number+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:647
            sign = ' ';
1c00bb42 <print_number+0xc0> li	a5,32
1c00bb46 <print_number+0xc4> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:660
        else if (base == 8)
            size--;
    }
#endif

    i = 0;
1c00bb4a <print_number+0xc8> li	s2,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:661
    if (num == 0)
1c00bb4c <print_number+0xca> lw	a5,-60(s0)
1c00bb50 <print_number+0xce> bnez	a5,1c00bb94 <print_number+0x112>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:662
        tmp[i++] = '0';
1c00bb52 <print_number+0xd0> mv	a5,s2
1c00bb54 <print_number+0xd2> addi	s2,a5,1
1c00bb58 <print_number+0xd6> addi	a4,s0,-16
1c00bb5c <print_number+0xda> add	a5,a5,a4
1c00bb5e <print_number+0xdc> li	a4,48
1c00bb62 <print_number+0xe0> sb	a4,-32(a5)
1c00bb66 <print_number+0xe4> j	1c00bb9a <print_number+0x118>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:666
    else
    {
        while (num != 0)
            tmp[i++] = digits[divide(&num, base)];
1c00bb68 <print_number+0xe6> addi	a5,s0,-60
1c00bb6c <print_number+0xea> lw	a1,-64(s0)
1c00bb70 <print_number+0xee> mv	a0,a5
1c00bb72 <print_number+0xf0> jal	ra,1c00b9c2 <divide>
1c00bb76 <print_number+0xf4> mv	a5,a0
1c00bb78 <print_number+0xf6> mv	a4,a5
1c00bb7a <print_number+0xf8> lw	a5,-28(s0)
1c00bb7e <print_number+0xfc> add	a4,a4,a5
1c00bb80 <print_number+0xfe> mv	a5,s2
1c00bb82 <print_number+0x100> addi	s2,a5,1
1c00bb86 <print_number+0x104> lb	a4,0(a4)
1c00bb8a <print_number+0x108> addi	a3,s0,-16
1c00bb8e <print_number+0x10c> add	a5,a5,a3
1c00bb90 <print_number+0x10e> sb	a4,-32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:665
        while (num != 0)
1c00bb94 <print_number+0x112> lw	a5,-60(s0)
1c00bb98 <print_number+0x116> bnez	a5,1c00bb68 <print_number+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:670
    }

#ifdef RT_PRINTF_PRECISION
    if (i > precision)
1c00bb9a <print_number+0x118> lw	a5,-72(s0)
1c00bb9e <print_number+0x11c> bge	a5,s2,1c00bba6 <print_number+0x124>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:671
        precision = i;
1c00bba2 <print_number+0x120> sw	s2,-72(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:672
    size -= precision;
1c00bba6 <print_number+0x124> lw	a5,-72(s0)
1c00bbaa <print_number+0x128> sub	s1,s1,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:677
#else
    size -= i;
#endif

    if (!(type & (ZEROPAD | LEFT)))
1c00bbac <print_number+0x12a> lw	a5,-76(s0)
1c00bbb0 <print_number+0x12e> andi	a5,a5,17
1c00bbb2 <print_number+0x130> bnez	a5,1c00bbee <print_number+0x16c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:679
    {
        if ((sign) && (size > 0))
1c00bbb4 <print_number+0x132> lb	a5,-17(s0)
1c00bbb8 <print_number+0x136> beqz	a5,1c00bbe4 <print_number+0x162>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:679 (discriminator 1)
1c00bbba <print_number+0x138> blez	s1,1c00bbe4 <print_number+0x162>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:680
            size--;
1c00bbbe <print_number+0x13c> addi	s1,s1,-1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:682

        while (size-- > 0)
1c00bbc0 <print_number+0x13e> j	1c00bbe4 <print_number+0x162>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:684
        {
            if (buf < end)
1c00bbc2 <print_number+0x140> lw	a4,-52(s0)
1c00bbc6 <print_number+0x144> lw	a5,-56(s0)
1c00bbca <print_number+0x148> bgeu	a4,a5,1c00bbda <print_number+0x158>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:685
                *buf = ' ';
1c00bbce <print_number+0x14c> lw	a5,-52(s0)
1c00bbd2 <print_number+0x150> li	a4,32
1c00bbd6 <print_number+0x154> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:686
            ++ buf;
1c00bbda <print_number+0x158> lw	a5,-52(s0)
1c00bbde <print_number+0x15c> addi	a5,a5,1
1c00bbe0 <print_number+0x15e> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:682
        while (size-- > 0)
1c00bbe4 <print_number+0x162> mv	a5,s1
1c00bbe6 <print_number+0x164> addi	s1,a5,-1
1c00bbea <print_number+0x168> bgtz	a5,1c00bbc2 <print_number+0x140>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:690
        }
    }

    if (sign)
1c00bbee <print_number+0x16c> lb	a5,-17(s0)
1c00bbf2 <print_number+0x170> beqz	a5,1c00bc18 <print_number+0x196>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:692
    {
        if (buf < end)
1c00bbf4 <print_number+0x172> lw	a4,-52(s0)
1c00bbf8 <print_number+0x176> lw	a5,-56(s0)
1c00bbfc <print_number+0x17a> bgeu	a4,a5,1c00bc0c <print_number+0x18a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:694
        {
            *buf = sign;
1c00bc00 <print_number+0x17e> lw	a5,-52(s0)
1c00bc04 <print_number+0x182> lbu	a4,-17(s0)
1c00bc08 <print_number+0x186> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:696
        }
        -- size;
1c00bc0c <print_number+0x18a> addi	s1,s1,-1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:697
        ++ buf;
1c00bc0e <print_number+0x18c> lw	a5,-52(s0)
1c00bc12 <print_number+0x190> addi	a5,a5,1
1c00bc14 <print_number+0x192> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:724
        }
    }
#endif

    /* no align to the left */
    if (!(type & LEFT))
1c00bc18 <print_number+0x196> lw	a5,-76(s0)
1c00bc1c <print_number+0x19a> andi	a5,a5,16
1c00bc1e <print_number+0x19c> bnez	a5,1c00bc72 <print_number+0x1f0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:726
    {
        while (size-- > 0)
1c00bc20 <print_number+0x19e> j	1c00bc44 <print_number+0x1c2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:728
        {
            if (buf < end)
1c00bc22 <print_number+0x1a0> lw	a4,-52(s0)
1c00bc26 <print_number+0x1a4> lw	a5,-56(s0)
1c00bc2a <print_number+0x1a8> bgeu	a4,a5,1c00bc3a <print_number+0x1b8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:729
                *buf = c;
1c00bc2e <print_number+0x1ac> lw	a5,-52(s0)
1c00bc32 <print_number+0x1b0> lbu	a4,-29(s0)
1c00bc36 <print_number+0x1b4> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:730
            ++ buf;
1c00bc3a <print_number+0x1b8> lw	a5,-52(s0)
1c00bc3e <print_number+0x1bc> addi	a5,a5,1
1c00bc40 <print_number+0x1be> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:726
        while (size-- > 0)
1c00bc44 <print_number+0x1c2> mv	a5,s1
1c00bc46 <print_number+0x1c4> addi	s1,a5,-1
1c00bc4a <print_number+0x1c8> bgtz	a5,1c00bc22 <print_number+0x1a0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:735
        }
    }

#ifdef RT_PRINTF_PRECISION
    while (i < precision--)
1c00bc4e <print_number+0x1cc> j	1c00bc72 <print_number+0x1f0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:737
    {
        if (buf < end)
1c00bc50 <print_number+0x1ce> lw	a4,-52(s0)
1c00bc54 <print_number+0x1d2> lw	a5,-56(s0)
1c00bc58 <print_number+0x1d6> bgeu	a4,a5,1c00bc68 <print_number+0x1e6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:738
            *buf = '0';
1c00bc5c <print_number+0x1da> lw	a5,-52(s0)
1c00bc60 <print_number+0x1de> li	a4,48
1c00bc64 <print_number+0x1e2> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:739
        ++ buf;
1c00bc68 <print_number+0x1e6> lw	a5,-52(s0)
1c00bc6c <print_number+0x1ea> addi	a5,a5,1
1c00bc6e <print_number+0x1ec> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:735
    while (i < precision--)
1c00bc72 <print_number+0x1f0> lw	a5,-72(s0)
1c00bc76 <print_number+0x1f4> addi	a4,a5,-1
1c00bc7a <print_number+0x1f8> sw	a4,-72(s0)
1c00bc7e <print_number+0x1fc> blt	s2,a5,1c00bc50 <print_number+0x1ce>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:744
    }
#endif

    /* put number in the temporary buffer */
    while (i-- > 0 && (precision_bak != 0))
1c00bc82 <print_number+0x200> j	1c00bcac <print_number+0x22a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:746
    {
        if (buf < end)
1c00bc84 <print_number+0x202> lw	a4,-52(s0)
1c00bc88 <print_number+0x206> lw	a5,-56(s0)
1c00bc8c <print_number+0x20a> bgeu	a4,a5,1c00bca2 <print_number+0x220>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:747
            *buf = tmp[i];
1c00bc90 <print_number+0x20e> addi	a5,s0,-16
1c00bc94 <print_number+0x212> add	a5,a5,s2
1c00bc96 <print_number+0x214> lb	a4,-32(a5)
1c00bc9a <print_number+0x218> lw	a5,-52(s0)
1c00bc9e <print_number+0x21c> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:748
        ++ buf;
1c00bca2 <print_number+0x220> lw	a5,-52(s0)
1c00bca6 <print_number+0x224> addi	a5,a5,1
1c00bca8 <print_number+0x226> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:744
    while (i-- > 0 && (precision_bak != 0))
1c00bcac <print_number+0x22a> mv	a5,s2
1c00bcae <print_number+0x22c> addi	s2,a5,-1
1c00bcb2 <print_number+0x230> blez	a5,1c00bce0 <print_number+0x25e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:744 (discriminator 1)
1c00bcb6 <print_number+0x234> lw	a5,-24(s0)
1c00bcba <print_number+0x238> bnez	a5,1c00bc84 <print_number+0x202>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:751
    }

    while (size-- > 0)
1c00bcbc <print_number+0x23a> j	1c00bce0 <print_number+0x25e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:753
    {
        if (buf < end)
1c00bcbe <print_number+0x23c> lw	a4,-52(s0)
1c00bcc2 <print_number+0x240> lw	a5,-56(s0)
1c00bcc6 <print_number+0x244> bgeu	a4,a5,1c00bcd6 <print_number+0x254>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:754
            *buf = ' ';
1c00bcca <print_number+0x248> lw	a5,-52(s0)
1c00bcce <print_number+0x24c> li	a4,32
1c00bcd2 <print_number+0x250> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:755
        ++ buf;
1c00bcd6 <print_number+0x254> lw	a5,-52(s0)
1c00bcda <print_number+0x258> addi	a5,a5,1
1c00bcdc <print_number+0x25a> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:751
    while (size-- > 0)
1c00bce0 <print_number+0x25e> mv	a5,s1
1c00bce2 <print_number+0x260> addi	s1,a5,-1
1c00bce6 <print_number+0x264> bgtz	a5,1c00bcbe <print_number+0x23c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:758
    }

    return buf;
1c00bcea <print_number+0x268> lw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:759
}
1c00bcee <print_number+0x26c> mv	a0,a5
1c00bcf0 <print_number+0x26e> lw	ra,76(sp)
1c00bcf2 <print_number+0x270> lw	s0,72(sp)
1c00bcf4 <print_number+0x272> lw	s1,68(sp)
1c00bcf6 <print_number+0x274> lw	s2,64(sp)
1c00bcf8 <print_number+0x276> addi	sp,sp,80
1c00bcfa <print_number+0x278> ret
rt_vsnprintf():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:765

rt_int32_t rt_vsnprintf(char       *buf,
                        rt_size_t   size,
                        const char *fmt,
                        va_list     args)
{
1c00bcfc <rt_vsnprintf> addi	sp,sp,-80
1c00bcfe <rt_vsnprintf+0x2> sw	ra,76(sp)
1c00bd00 <rt_vsnprintf+0x4> sw	s0,72(sp)
1c00bd02 <rt_vsnprintf+0x6> addi	s0,sp,80
1c00bd04 <rt_vsnprintf+0x8> sw	a0,-68(s0)
1c00bd08 <rt_vsnprintf+0xc> sw	a1,-72(s0)
1c00bd0c <rt_vsnprintf+0x10> sw	a2,-76(s0)
1c00bd10 <rt_vsnprintf+0x14> sw	a3,-80(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:784

#ifdef RT_PRINTF_PRECISION
    int precision;      /* min. # of digits for integers and max for a string */
#endif

    str = buf;
1c00bd14 <rt_vsnprintf+0x18> lw	a5,-68(s0)
1c00bd18 <rt_vsnprintf+0x1c> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:785
    end = buf + size;
1c00bd1c <rt_vsnprintf+0x20> lw	a4,-68(s0)
1c00bd20 <rt_vsnprintf+0x24> lw	a5,-72(s0)
1c00bd24 <rt_vsnprintf+0x28> add	a5,a5,a4
1c00bd26 <rt_vsnprintf+0x2a> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:788

    /* Make sure end is always >= buf */
    if (end < buf)
1c00bd2a <rt_vsnprintf+0x2e> lw	a4,-36(s0)
1c00bd2e <rt_vsnprintf+0x32> lw	a5,-68(s0)
1c00bd32 <rt_vsnprintf+0x36> bgeu	a4,a5,1c00c2f8 <rt_vsnprintf+0x5fc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:790
    {
        end  = ((char *) - 1);
1c00bd36 <rt_vsnprintf+0x3a> li	a5,-1
1c00bd38 <rt_vsnprintf+0x3c> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:791
        size = end - buf;
1c00bd3c <rt_vsnprintf+0x40> lw	a4,-36(s0)
1c00bd40 <rt_vsnprintf+0x44> lw	a5,-68(s0)
1c00bd44 <rt_vsnprintf+0x48> sub	a5,a4,a5
1c00bd48 <rt_vsnprintf+0x4c> sw	a5,-72(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:794
    }

    for (; *fmt ; ++fmt)
1c00bd4c <rt_vsnprintf+0x50> j	1c00c2f8 <rt_vsnprintf+0x5fc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:796
    {
        if (*fmt != '%')
1c00bd4e <rt_vsnprintf+0x52> lw	a5,-76(s0)
1c00bd52 <rt_vsnprintf+0x56> lb	a4,0(a5)
1c00bd56 <rt_vsnprintf+0x5a> li	a5,37
1c00bd5a <rt_vsnprintf+0x5e> beq	a4,a5,1c00bd86 <rt_vsnprintf+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:798
        {
            if (str < end)
1c00bd5e <rt_vsnprintf+0x62> lw	a4,-32(s0)
1c00bd62 <rt_vsnprintf+0x66> lw	a5,-36(s0)
1c00bd66 <rt_vsnprintf+0x6a> bgeu	a4,a5,1c00bd7a <rt_vsnprintf+0x7e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:799
                *str = *fmt;
1c00bd6a <rt_vsnprintf+0x6e> lw	a5,-76(s0)
1c00bd6e <rt_vsnprintf+0x72> lb	a4,0(a5)
1c00bd72 <rt_vsnprintf+0x76> lw	a5,-32(s0)
1c00bd76 <rt_vsnprintf+0x7a> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:800
            ++ str;
1c00bd7a <rt_vsnprintf+0x7e> lw	a5,-32(s0)
1c00bd7e <rt_vsnprintf+0x82> addi	a5,a5,1
1c00bd80 <rt_vsnprintf+0x84> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:801
            continue;
1c00bd84 <rt_vsnprintf+0x88> j	1c00c2ee <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:805
        }

        /* process flags */
        flags = 0;
1c00bd86 <rt_vsnprintf+0x8a> sb	zero,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:810

        while (1)
        {
            /* skips the first '%' also */
            ++ fmt;
1c00bd8a <rt_vsnprintf+0x8e> lw	a5,-76(s0)
1c00bd8e <rt_vsnprintf+0x92> addi	a5,a5,1
1c00bd90 <rt_vsnprintf+0x94> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:811
            if (*fmt == '-') flags |= LEFT;
1c00bd94 <rt_vsnprintf+0x98> lw	a5,-76(s0)
1c00bd98 <rt_vsnprintf+0x9c> lb	a4,0(a5)
1c00bd9c <rt_vsnprintf+0xa0> li	a5,45
1c00bda0 <rt_vsnprintf+0xa4> bne	a4,a5,1c00bdb2 <rt_vsnprintf+0xb6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:811 (discriminator 1)
1c00bda4 <rt_vsnprintf+0xa8> lbu	a5,-42(s0)
1c00bda8 <rt_vsnprintf+0xac> ori	a5,a5,16
1c00bdac <rt_vsnprintf+0xb0> sb	a5,-42(s0)
1c00bdb0 <rt_vsnprintf+0xb4> j	1c00bd8a <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:812
            else if (*fmt == '+') flags |= PLUS;
1c00bdb2 <rt_vsnprintf+0xb6> lw	a5,-76(s0)
1c00bdb6 <rt_vsnprintf+0xba> lb	a4,0(a5)
1c00bdba <rt_vsnprintf+0xbe> li	a5,43
1c00bdbe <rt_vsnprintf+0xc2> bne	a4,a5,1c00bdd0 <rt_vsnprintf+0xd4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:812 (discriminator 1)
1c00bdc2 <rt_vsnprintf+0xc6> lbu	a5,-42(s0)
1c00bdc6 <rt_vsnprintf+0xca> ori	a5,a5,4
1c00bdca <rt_vsnprintf+0xce> sb	a5,-42(s0)
1c00bdce <rt_vsnprintf+0xd2> j	1c00bd8a <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:813
            else if (*fmt == ' ') flags |= SPACE;
1c00bdd0 <rt_vsnprintf+0xd4> lw	a5,-76(s0)
1c00bdd4 <rt_vsnprintf+0xd8> lb	a4,0(a5)
1c00bdd8 <rt_vsnprintf+0xdc> li	a5,32
1c00bddc <rt_vsnprintf+0xe0> bne	a4,a5,1c00bdee <rt_vsnprintf+0xf2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:813 (discriminator 1)
1c00bde0 <rt_vsnprintf+0xe4> lbu	a5,-42(s0)
1c00bde4 <rt_vsnprintf+0xe8> ori	a5,a5,8
1c00bde8 <rt_vsnprintf+0xec> sb	a5,-42(s0)
1c00bdec <rt_vsnprintf+0xf0> j	1c00bd8a <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:814
            else if (*fmt == '#') flags |= SPECIAL;
1c00bdee <rt_vsnprintf+0xf2> lw	a5,-76(s0)
1c00bdf2 <rt_vsnprintf+0xf6> lb	a4,0(a5)
1c00bdf6 <rt_vsnprintf+0xfa> li	a5,35
1c00bdfa <rt_vsnprintf+0xfe> bne	a4,a5,1c00be0c <rt_vsnprintf+0x110>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:814 (discriminator 1)
1c00bdfe <rt_vsnprintf+0x102> lbu	a5,-42(s0)
1c00be02 <rt_vsnprintf+0x106> ori	a5,a5,32
1c00be06 <rt_vsnprintf+0x10a> sb	a5,-42(s0)
1c00be0a <rt_vsnprintf+0x10e> j	1c00bd8a <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:815
            else if (*fmt == '0') flags |= ZEROPAD;
1c00be0c <rt_vsnprintf+0x110> lw	a5,-76(s0)
1c00be10 <rt_vsnprintf+0x114> lb	a4,0(a5)
1c00be14 <rt_vsnprintf+0x118> li	a5,48
1c00be18 <rt_vsnprintf+0x11c> bne	a4,a5,1c00be2a <rt_vsnprintf+0x12e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:815 (discriminator 1)
1c00be1c <rt_vsnprintf+0x120> lbu	a5,-42(s0)
1c00be20 <rt_vsnprintf+0x124> ori	a5,a5,1
1c00be24 <rt_vsnprintf+0x128> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:810 (discriminator 1)
            ++ fmt;
1c00be28 <rt_vsnprintf+0x12c> j	1c00bd8a <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:816
            else break;
1c00be2a <rt_vsnprintf+0x12e> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:820
        }

        /* get field width */
        field_width = -1;
1c00be2c <rt_vsnprintf+0x130> li	a5,-1
1c00be2e <rt_vsnprintf+0x132> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:821
        if (_ISDIGIT(*fmt)) field_width = skip_atoi(&fmt);
1c00be32 <rt_vsnprintf+0x136> lw	a5,-76(s0)
1c00be36 <rt_vsnprintf+0x13a> lb	a5,0(a5)
1c00be3a <rt_vsnprintf+0x13e> addi	a5,a5,-48
1c00be3e <rt_vsnprintf+0x142> mv	a4,a5
1c00be40 <rt_vsnprintf+0x144> li	a5,9
1c00be42 <rt_vsnprintf+0x146> bltu	a5,a4,1c00be56 <rt_vsnprintf+0x15a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:821 (discriminator 1)
1c00be46 <rt_vsnprintf+0x14a> addi	a5,s0,-76
1c00be4a <rt_vsnprintf+0x14e> mv	a0,a5
1c00be4c <rt_vsnprintf+0x150> jal	ra,1c00ba2c <skip_atoi>
1c00be50 <rt_vsnprintf+0x154> sw	a0,-48(s0)
1c00be54 <rt_vsnprintf+0x158> j	1c00bea2 <rt_vsnprintf+0x1a6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:822
        else if (*fmt == '*')
1c00be56 <rt_vsnprintf+0x15a> lw	a5,-76(s0)
1c00be5a <rt_vsnprintf+0x15e> lb	a4,0(a5)
1c00be5e <rt_vsnprintf+0x162> li	a5,42
1c00be62 <rt_vsnprintf+0x166> bne	a4,a5,1c00bea2 <rt_vsnprintf+0x1a6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:824
        {
            ++ fmt;
1c00be66 <rt_vsnprintf+0x16a> lw	a5,-76(s0)
1c00be6a <rt_vsnprintf+0x16e> addi	a5,a5,1
1c00be6c <rt_vsnprintf+0x170> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:826
            /* it's the next argument */
            field_width = va_arg(args, int);
1c00be70 <rt_vsnprintf+0x174> lw	a5,-80(s0)
1c00be74 <rt_vsnprintf+0x178> addi	a4,a5,4
1c00be78 <rt_vsnprintf+0x17c> sw	a4,-80(s0)
1c00be7c <rt_vsnprintf+0x180> lw	a5,0(a5)
1c00be7e <rt_vsnprintf+0x182> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:827
            if (field_width < 0)
1c00be82 <rt_vsnprintf+0x186> lw	a5,-48(s0)
1c00be86 <rt_vsnprintf+0x18a> bgez	a5,1c00bea2 <rt_vsnprintf+0x1a6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:829
            {
                field_width = -field_width;
1c00be8a <rt_vsnprintf+0x18e> lw	a5,-48(s0)
1c00be8e <rt_vsnprintf+0x192> neg	a5,a5
1c00be92 <rt_vsnprintf+0x196> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:830
                flags |= LEFT;
1c00be96 <rt_vsnprintf+0x19a> lbu	a5,-42(s0)
1c00be9a <rt_vsnprintf+0x19e> ori	a5,a5,16
1c00be9e <rt_vsnprintf+0x1a2> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:836
            }
        }

#ifdef RT_PRINTF_PRECISION
        /* get the precision */
        precision = -1;
1c00bea2 <rt_vsnprintf+0x1a6> li	a5,-1
1c00bea4 <rt_vsnprintf+0x1a8> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:837
        if (*fmt == '.')
1c00bea8 <rt_vsnprintf+0x1ac> lw	a5,-76(s0)
1c00beac <rt_vsnprintf+0x1b0> lb	a4,0(a5)
1c00beb0 <rt_vsnprintf+0x1b4> li	a5,46
1c00beb4 <rt_vsnprintf+0x1b8> bne	a4,a5,1c00bf1e <rt_vsnprintf+0x222>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:839
        {
            ++ fmt;
1c00beb8 <rt_vsnprintf+0x1bc> lw	a5,-76(s0)
1c00bebc <rt_vsnprintf+0x1c0> addi	a5,a5,1
1c00bebe <rt_vsnprintf+0x1c2> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:840
            if (_ISDIGIT(*fmt)) precision = skip_atoi(&fmt);
1c00bec2 <rt_vsnprintf+0x1c6> lw	a5,-76(s0)
1c00bec6 <rt_vsnprintf+0x1ca> lb	a5,0(a5)
1c00beca <rt_vsnprintf+0x1ce> addi	a5,a5,-48
1c00bece <rt_vsnprintf+0x1d2> mv	a4,a5
1c00bed0 <rt_vsnprintf+0x1d4> li	a5,9
1c00bed2 <rt_vsnprintf+0x1d6> bltu	a5,a4,1c00bee6 <rt_vsnprintf+0x1ea>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:840 (discriminator 1)
1c00bed6 <rt_vsnprintf+0x1da> addi	a5,s0,-76
1c00beda <rt_vsnprintf+0x1de> mv	a0,a5
1c00bedc <rt_vsnprintf+0x1e0> jal	ra,1c00ba2c <skip_atoi>
1c00bee0 <rt_vsnprintf+0x1e4> sw	a0,-52(s0)
1c00bee4 <rt_vsnprintf+0x1e8> j	1c00bf12 <rt_vsnprintf+0x216>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:841
            else if (*fmt == '*')
1c00bee6 <rt_vsnprintf+0x1ea> lw	a5,-76(s0)
1c00beea <rt_vsnprintf+0x1ee> lb	a4,0(a5)
1c00beee <rt_vsnprintf+0x1f2> li	a5,42
1c00bef2 <rt_vsnprintf+0x1f6> bne	a4,a5,1c00bf12 <rt_vsnprintf+0x216>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:843
            {
                ++ fmt;
1c00bef6 <rt_vsnprintf+0x1fa> lw	a5,-76(s0)
1c00befa <rt_vsnprintf+0x1fe> addi	a5,a5,1
1c00befc <rt_vsnprintf+0x200> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:845
                /* it's the next argument */
                precision = va_arg(args, int);
1c00bf00 <rt_vsnprintf+0x204> lw	a5,-80(s0)
1c00bf04 <rt_vsnprintf+0x208> addi	a4,a5,4
1c00bf08 <rt_vsnprintf+0x20c> sw	a4,-80(s0)
1c00bf0c <rt_vsnprintf+0x210> lw	a5,0(a5)
1c00bf0e <rt_vsnprintf+0x212> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:847
            }
            if (precision < 0) precision = 0;
1c00bf12 <rt_vsnprintf+0x216> lw	a5,-52(s0)
1c00bf16 <rt_vsnprintf+0x21a> bgez	a5,1c00bf1e <rt_vsnprintf+0x222>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:847 (discriminator 1)
1c00bf1a <rt_vsnprintf+0x21e> sw	zero,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:851
        }
#endif
        /* get the conversion qualifier */
        qualifier = 0;
1c00bf1e <rt_vsnprintf+0x222> sb	zero,-43(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:855
#ifdef RT_PRINTF_LONGLONG
        if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
#else
        if (*fmt == 'h' || *fmt == 'l')
1c00bf22 <rt_vsnprintf+0x226> lw	a5,-76(s0)
1c00bf26 <rt_vsnprintf+0x22a> lb	a4,0(a5)
1c00bf2a <rt_vsnprintf+0x22e> li	a5,104
1c00bf2e <rt_vsnprintf+0x232> beq	a4,a5,1c00bf42 <rt_vsnprintf+0x246>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:855 (discriminator 1)
1c00bf32 <rt_vsnprintf+0x236> lw	a5,-76(s0)
1c00bf36 <rt_vsnprintf+0x23a> lb	a4,0(a5)
1c00bf3a <rt_vsnprintf+0x23e> li	a5,108
1c00bf3e <rt_vsnprintf+0x242> bne	a4,a5,1c00bf58 <rt_vsnprintf+0x25c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:858
#endif
        {
            qualifier = *fmt;
1c00bf42 <rt_vsnprintf+0x246> lw	a5,-76(s0)
1c00bf46 <rt_vsnprintf+0x24a> lb	a5,0(a5)
1c00bf4a <rt_vsnprintf+0x24e> sb	a5,-43(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:859
            ++ fmt;
1c00bf4e <rt_vsnprintf+0x252> lw	a5,-76(s0)
1c00bf52 <rt_vsnprintf+0x256> addi	a5,a5,1
1c00bf54 <rt_vsnprintf+0x258> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:870
            }
#endif
        }

        /* the default base */
        base = 10;
1c00bf58 <rt_vsnprintf+0x25c> li	a5,10
1c00bf5a <rt_vsnprintf+0x25e> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:872

        switch (*fmt)
1c00bf5e <rt_vsnprintf+0x262> lw	a5,-76(s0)
1c00bf62 <rt_vsnprintf+0x266> lb	a5,0(a5)
1c00bf66 <rt_vsnprintf+0x26a> addi	a5,a5,-37
1c00bf6a <rt_vsnprintf+0x26e> li	a4,83
1c00bf6e <rt_vsnprintf+0x272> bltu	a4,a5,1c00c1fc <rt_vsnprintf+0x500>
1c00bf72 <rt_vsnprintf+0x276> slli	a4,a5,0x2
1c00bf76 <rt_vsnprintf+0x27a> lui	a5,0x1c00e
1c00bf7a <rt_vsnprintf+0x27e> addi	a5,a5,-1416 # 1c00da78 <__l2_priv0_end+0xc4>
1c00bf7e <rt_vsnprintf+0x282> add	a5,a5,a4
1c00bf80 <rt_vsnprintf+0x284> lw	a5,0(a5)
1c00bf82 <rt_vsnprintf+0x286> jr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:875
        {
        case 'c':
            if (!(flags & LEFT))
1c00bf84 <rt_vsnprintf+0x288> lbu	a5,-42(s0)
1c00bf88 <rt_vsnprintf+0x28c> andi	a5,a5,16
1c00bf8a <rt_vsnprintf+0x28e> bnez	a5,1c00bfc2 <rt_vsnprintf+0x2c6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:877
            {
                while (--field_width > 0)
1c00bf8c <rt_vsnprintf+0x290> j	1c00bfb0 <rt_vsnprintf+0x2b4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:879
                {
                    if (str < end) *str = ' ';
1c00bf8e <rt_vsnprintf+0x292> lw	a4,-32(s0)
1c00bf92 <rt_vsnprintf+0x296> lw	a5,-36(s0)
1c00bf96 <rt_vsnprintf+0x29a> bgeu	a4,a5,1c00bfa6 <rt_vsnprintf+0x2aa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:879 (discriminator 1)
1c00bf9a <rt_vsnprintf+0x29e> lw	a5,-32(s0)
1c00bf9e <rt_vsnprintf+0x2a2> li	a4,32
1c00bfa2 <rt_vsnprintf+0x2a6> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:880
                    ++ str;
1c00bfa6 <rt_vsnprintf+0x2aa> lw	a5,-32(s0)
1c00bfaa <rt_vsnprintf+0x2ae> addi	a5,a5,1
1c00bfac <rt_vsnprintf+0x2b0> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:877
                while (--field_width > 0)
1c00bfb0 <rt_vsnprintf+0x2b4> lw	a5,-48(s0)
1c00bfb4 <rt_vsnprintf+0x2b8> addi	a5,a5,-1
1c00bfb6 <rt_vsnprintf+0x2ba> sw	a5,-48(s0)
1c00bfba <rt_vsnprintf+0x2be> lw	a5,-48(s0)
1c00bfbe <rt_vsnprintf+0x2c2> bgtz	a5,1c00bf8e <rt_vsnprintf+0x292>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:885
                }
            }

            /* get character */
            c = (rt_uint8_t)va_arg(args, int);
1c00bfc2 <rt_vsnprintf+0x2c6> lw	a5,-80(s0)
1c00bfc6 <rt_vsnprintf+0x2ca> addi	a4,a5,4
1c00bfca <rt_vsnprintf+0x2ce> sw	a4,-80(s0)
1c00bfce <rt_vsnprintf+0x2d2> lw	a5,0(a5)
1c00bfd0 <rt_vsnprintf+0x2d4> sb	a5,-53(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:886
            if (str < end) *str = c;
1c00bfd4 <rt_vsnprintf+0x2d8> lw	a4,-32(s0)
1c00bfd8 <rt_vsnprintf+0x2dc> lw	a5,-36(s0)
1c00bfdc <rt_vsnprintf+0x2e0> bgeu	a4,a5,1c00bfec <rt_vsnprintf+0x2f0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:886 (discriminator 1)
1c00bfe0 <rt_vsnprintf+0x2e4> lw	a5,-32(s0)
1c00bfe4 <rt_vsnprintf+0x2e8> lbu	a4,-53(s0)
1c00bfe8 <rt_vsnprintf+0x2ec> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:887
            ++ str;
1c00bfec <rt_vsnprintf+0x2f0> lw	a5,-32(s0)
1c00bff0 <rt_vsnprintf+0x2f4> addi	a5,a5,1
1c00bff2 <rt_vsnprintf+0x2f6> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:890

            /* put width */
            while (--field_width > 0)
1c00bff6 <rt_vsnprintf+0x2fa> j	1c00c01a <rt_vsnprintf+0x31e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:892
            {
                if (str < end) *str = ' ';
1c00bff8 <rt_vsnprintf+0x2fc> lw	a4,-32(s0)
1c00bffc <rt_vsnprintf+0x300> lw	a5,-36(s0)
1c00c000 <rt_vsnprintf+0x304> bgeu	a4,a5,1c00c010 <rt_vsnprintf+0x314>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:892 (discriminator 1)
1c00c004 <rt_vsnprintf+0x308> lw	a5,-32(s0)
1c00c008 <rt_vsnprintf+0x30c> li	a4,32
1c00c00c <rt_vsnprintf+0x310> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:893
                ++ str;
1c00c010 <rt_vsnprintf+0x314> lw	a5,-32(s0)
1c00c014 <rt_vsnprintf+0x318> addi	a5,a5,1
1c00c016 <rt_vsnprintf+0x31a> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:890
            while (--field_width > 0)
1c00c01a <rt_vsnprintf+0x31e> lw	a5,-48(s0)
1c00c01e <rt_vsnprintf+0x322> addi	a5,a5,-1
1c00c020 <rt_vsnprintf+0x324> sw	a5,-48(s0)
1c00c024 <rt_vsnprintf+0x328> lw	a5,-48(s0)
1c00c028 <rt_vsnprintf+0x32c> bgtz	a5,1c00bff8 <rt_vsnprintf+0x2fc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:895
            }
            continue;
1c00c02c <rt_vsnprintf+0x330> j	1c00c2ee <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:898

        case 's':
            s = va_arg(args, char *);
1c00c02e <rt_vsnprintf+0x332> lw	a5,-80(s0)
1c00c032 <rt_vsnprintf+0x336> addi	a4,a5,4
1c00c036 <rt_vsnprintf+0x33a> sw	a4,-80(s0)
1c00c03a <rt_vsnprintf+0x33e> lw	a5,0(a5)
1c00c03c <rt_vsnprintf+0x340> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:899
            if (!s) s = "(NULL)";
1c00c040 <rt_vsnprintf+0x344> lw	a5,-40(s0)
1c00c044 <rt_vsnprintf+0x348> bnez	a5,1c00c052 <rt_vsnprintf+0x356>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:899 (discriminator 1)
1c00c046 <rt_vsnprintf+0x34a> lui	a5,0x1c00e
1c00c04a <rt_vsnprintf+0x34e> addi	a5,a5,-1424 # 1c00da70 <__l2_priv0_end+0xbc>
1c00c04e <rt_vsnprintf+0x352> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:901

            for (len = 0; (len != field_width) && (s[len] != '\0'); len++);
1c00c052 <rt_vsnprintf+0x356> sw	zero,-28(s0)
1c00c056 <rt_vsnprintf+0x35a> j	1c00c062 <rt_vsnprintf+0x366>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:901 (discriminator 4)
1c00c058 <rt_vsnprintf+0x35c> lw	a5,-28(s0)
1c00c05c <rt_vsnprintf+0x360> addi	a5,a5,1
1c00c05e <rt_vsnprintf+0x362> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:901 (discriminator 1)
1c00c062 <rt_vsnprintf+0x366> lw	a4,-28(s0)
1c00c066 <rt_vsnprintf+0x36a> lw	a5,-48(s0)
1c00c06a <rt_vsnprintf+0x36e> beq	a4,a5,1c00c07e <rt_vsnprintf+0x382>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:901 (discriminator 3)
1c00c06e <rt_vsnprintf+0x372> lw	a5,-28(s0)
1c00c072 <rt_vsnprintf+0x376> lw	a4,-40(s0)
1c00c076 <rt_vsnprintf+0x37a> add	a5,a5,a4
1c00c078 <rt_vsnprintf+0x37c> lb	a5,0(a5)
1c00c07c <rt_vsnprintf+0x380> bnez	a5,1c00c058 <rt_vsnprintf+0x35c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:903
#ifdef RT_PRINTF_PRECISION
            if (precision > 0 && len > precision) len = precision;
1c00c07e <rt_vsnprintf+0x382> lw	a5,-52(s0)
1c00c082 <rt_vsnprintf+0x386> blez	a5,1c00c09a <rt_vsnprintf+0x39e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:903 (discriminator 1)
1c00c086 <rt_vsnprintf+0x38a> lw	a4,-28(s0)
1c00c08a <rt_vsnprintf+0x38e> lw	a5,-52(s0)
1c00c08e <rt_vsnprintf+0x392> bge	a5,a4,1c00c09a <rt_vsnprintf+0x39e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:903 (discriminator 2)
1c00c092 <rt_vsnprintf+0x396> lw	a5,-52(s0)
1c00c096 <rt_vsnprintf+0x39a> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:906
#endif

            if (!(flags & LEFT))
1c00c09a <rt_vsnprintf+0x39e> lbu	a5,-42(s0)
1c00c09e <rt_vsnprintf+0x3a2> andi	a5,a5,16
1c00c0a0 <rt_vsnprintf+0x3a4> bnez	a5,1c00c0da <rt_vsnprintf+0x3de>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:908
            {
                while (len < field_width--)
1c00c0a2 <rt_vsnprintf+0x3a6> j	1c00c0c6 <rt_vsnprintf+0x3ca>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:910
                {
                    if (str < end) *str = ' ';
1c00c0a4 <rt_vsnprintf+0x3a8> lw	a4,-32(s0)
1c00c0a8 <rt_vsnprintf+0x3ac> lw	a5,-36(s0)
1c00c0ac <rt_vsnprintf+0x3b0> bgeu	a4,a5,1c00c0bc <rt_vsnprintf+0x3c0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:910 (discriminator 1)
1c00c0b0 <rt_vsnprintf+0x3b4> lw	a5,-32(s0)
1c00c0b4 <rt_vsnprintf+0x3b8> li	a4,32
1c00c0b8 <rt_vsnprintf+0x3bc> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:911
                    ++ str;
1c00c0bc <rt_vsnprintf+0x3c0> lw	a5,-32(s0)
1c00c0c0 <rt_vsnprintf+0x3c4> addi	a5,a5,1
1c00c0c2 <rt_vsnprintf+0x3c6> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:908
                while (len < field_width--)
1c00c0c6 <rt_vsnprintf+0x3ca> lw	a5,-48(s0)
1c00c0ca <rt_vsnprintf+0x3ce> addi	a4,a5,-1
1c00c0ce <rt_vsnprintf+0x3d2> sw	a4,-48(s0)
1c00c0d2 <rt_vsnprintf+0x3d6> lw	a4,-28(s0)
1c00c0d6 <rt_vsnprintf+0x3da> blt	a4,a5,1c00c0a4 <rt_vsnprintf+0x3a8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:915
                }
            }

            for (i = 0; i < len; ++i)
1c00c0da <rt_vsnprintf+0x3de> sw	zero,-24(s0)
1c00c0de <rt_vsnprintf+0x3e2> j	1c00c11a <rt_vsnprintf+0x41e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:917
            {
                if (str < end) *str = *s;
1c00c0e0 <rt_vsnprintf+0x3e4> lw	a4,-32(s0)
1c00c0e4 <rt_vsnprintf+0x3e8> lw	a5,-36(s0)
1c00c0e8 <rt_vsnprintf+0x3ec> bgeu	a4,a5,1c00c0fc <rt_vsnprintf+0x400>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:917 (discriminator 1)
1c00c0ec <rt_vsnprintf+0x3f0> lw	a5,-40(s0)
1c00c0f0 <rt_vsnprintf+0x3f4> lb	a4,0(a5)
1c00c0f4 <rt_vsnprintf+0x3f8> lw	a5,-32(s0)
1c00c0f8 <rt_vsnprintf+0x3fc> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:918 (discriminator 2)
                ++ str;
1c00c0fc <rt_vsnprintf+0x400> lw	a5,-32(s0)
1c00c100 <rt_vsnprintf+0x404> addi	a5,a5,1
1c00c102 <rt_vsnprintf+0x406> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:919 (discriminator 2)
                ++ s;
1c00c106 <rt_vsnprintf+0x40a> lw	a5,-40(s0)
1c00c10a <rt_vsnprintf+0x40e> addi	a5,a5,1
1c00c10c <rt_vsnprintf+0x410> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:915 (discriminator 2)
            for (i = 0; i < len; ++i)
1c00c110 <rt_vsnprintf+0x414> lw	a5,-24(s0)
1c00c114 <rt_vsnprintf+0x418> addi	a5,a5,1
1c00c116 <rt_vsnprintf+0x41a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:915 (discriminator 1)
1c00c11a <rt_vsnprintf+0x41e> lw	a4,-24(s0)
1c00c11e <rt_vsnprintf+0x422> lw	a5,-28(s0)
1c00c122 <rt_vsnprintf+0x426> blt	a4,a5,1c00c0e0 <rt_vsnprintf+0x3e4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:922
            }

            while (len < field_width--)
1c00c126 <rt_vsnprintf+0x42a> j	1c00c14a <rt_vsnprintf+0x44e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:924
            {
                if (str < end) *str = ' ';
1c00c128 <rt_vsnprintf+0x42c> lw	a4,-32(s0)
1c00c12c <rt_vsnprintf+0x430> lw	a5,-36(s0)
1c00c130 <rt_vsnprintf+0x434> bgeu	a4,a5,1c00c140 <rt_vsnprintf+0x444>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:924 (discriminator 1)
1c00c134 <rt_vsnprintf+0x438> lw	a5,-32(s0)
1c00c138 <rt_vsnprintf+0x43c> li	a4,32
1c00c13c <rt_vsnprintf+0x440> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:925
                ++ str;
1c00c140 <rt_vsnprintf+0x444> lw	a5,-32(s0)
1c00c144 <rt_vsnprintf+0x448> addi	a5,a5,1
1c00c146 <rt_vsnprintf+0x44a> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:922
            while (len < field_width--)
1c00c14a <rt_vsnprintf+0x44e> lw	a5,-48(s0)
1c00c14e <rt_vsnprintf+0x452> addi	a4,a5,-1
1c00c152 <rt_vsnprintf+0x456> sw	a4,-48(s0)
1c00c156 <rt_vsnprintf+0x45a> lw	a4,-28(s0)
1c00c15a <rt_vsnprintf+0x45e> blt	a4,a5,1c00c128 <rt_vsnprintf+0x42c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:927
            }
            continue;
1c00c15e <rt_vsnprintf+0x462> j	1c00c2ee <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:930

        case 'p':
            if (field_width == -1)
1c00c160 <rt_vsnprintf+0x464> lw	a4,-48(s0)
1c00c164 <rt_vsnprintf+0x468> li	a5,-1
1c00c166 <rt_vsnprintf+0x46a> bne	a4,a5,1c00c17c <rt_vsnprintf+0x480>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:932
            {
                field_width = sizeof(void *) << 1;
1c00c16a <rt_vsnprintf+0x46e> li	a5,8
1c00c16c <rt_vsnprintf+0x470> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:933
                flags |= ZEROPAD;
1c00c170 <rt_vsnprintf+0x474> lbu	a5,-42(s0)
1c00c174 <rt_vsnprintf+0x478> ori	a5,a5,1
1c00c178 <rt_vsnprintf+0x47c> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:937
            }
#ifdef RT_PRINTF_PRECISION
            str = print_number(str, end,
                               (long)va_arg(args, void *),
1c00c17c <rt_vsnprintf+0x480> lw	a5,-80(s0)
1c00c180 <rt_vsnprintf+0x484> addi	a4,a5,4
1c00c184 <rt_vsnprintf+0x488> sw	a4,-80(s0)
1c00c188 <rt_vsnprintf+0x48c> lw	a5,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:936
            str = print_number(str, end,
1c00c18a <rt_vsnprintf+0x48e> mv	a2,a5
1c00c18c <rt_vsnprintf+0x490> lbu	a5,-42(s0)
1c00c190 <rt_vsnprintf+0x494> mv	a6,a5
1c00c192 <rt_vsnprintf+0x496> lw	a5,-52(s0)
1c00c196 <rt_vsnprintf+0x49a> lw	a4,-48(s0)
1c00c19a <rt_vsnprintf+0x49e> li	a3,16
1c00c19c <rt_vsnprintf+0x4a0> lw	a1,-36(s0)
1c00c1a0 <rt_vsnprintf+0x4a4> lw	a0,-32(s0)
1c00c1a4 <rt_vsnprintf+0x4a8> jal	ra,1c00ba82 <print_number>
1c00c1a8 <rt_vsnprintf+0x4ac> sw	a0,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:944
#else
            str = print_number(str, end,
                               (long)va_arg(args, void *),
                               16, field_width, flags);
#endif
            continue;
1c00c1ac <rt_vsnprintf+0x4b0> j	1c00c2ee <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:947

        case '%':
            if (str < end) *str = '%';
1c00c1ae <rt_vsnprintf+0x4b2> lw	a4,-32(s0)
1c00c1b2 <rt_vsnprintf+0x4b6> lw	a5,-36(s0)
1c00c1b6 <rt_vsnprintf+0x4ba> bgeu	a4,a5,1c00c1c6 <rt_vsnprintf+0x4ca>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:947 (discriminator 1)
1c00c1ba <rt_vsnprintf+0x4be> lw	a5,-32(s0)
1c00c1be <rt_vsnprintf+0x4c2> li	a4,37
1c00c1c2 <rt_vsnprintf+0x4c6> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:948
            ++ str;
1c00c1c6 <rt_vsnprintf+0x4ca> lw	a5,-32(s0)
1c00c1ca <rt_vsnprintf+0x4ce> addi	a5,a5,1
1c00c1cc <rt_vsnprintf+0x4d0> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:949
            continue;
1c00c1d0 <rt_vsnprintf+0x4d4> j	1c00c2ee <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:953

        /* integer number formats - set up the flags and "break" */
        case 'o':
            base = 8;
1c00c1d2 <rt_vsnprintf+0x4d6> li	a5,8
1c00c1d4 <rt_vsnprintf+0x4d8> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:954
            break;
1c00c1d8 <rt_vsnprintf+0x4dc> j	1c00c25e <rt_vsnprintf+0x562>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:957

        case 'X':
            flags |= LARGE;
1c00c1da <rt_vsnprintf+0x4de> lbu	a5,-42(s0)
1c00c1de <rt_vsnprintf+0x4e2> ori	a5,a5,64
1c00c1e2 <rt_vsnprintf+0x4e6> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:959
        case 'x':
            base = 16;
1c00c1e6 <rt_vsnprintf+0x4ea> li	a5,16
1c00c1e8 <rt_vsnprintf+0x4ec> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:960
            break;
1c00c1ec <rt_vsnprintf+0x4f0> j	1c00c25e <rt_vsnprintf+0x562>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:964

        case 'd':
        case 'i':
            flags |= SIGN;
1c00c1ee <rt_vsnprintf+0x4f2> lbu	a5,-42(s0)
1c00c1f2 <rt_vsnprintf+0x4f6> ori	a5,a5,2
1c00c1f6 <rt_vsnprintf+0x4fa> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:966
        case 'u':
            break;
1c00c1fa <rt_vsnprintf+0x4fe> j	1c00c25c <rt_vsnprintf+0x560>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:969

        default:
            if (str < end) *str = '%';
1c00c1fc <rt_vsnprintf+0x500> lw	a4,-32(s0)
1c00c200 <rt_vsnprintf+0x504> lw	a5,-36(s0)
1c00c204 <rt_vsnprintf+0x508> bgeu	a4,a5,1c00c214 <rt_vsnprintf+0x518>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:969 (discriminator 1)
1c00c208 <rt_vsnprintf+0x50c> lw	a5,-32(s0)
1c00c20c <rt_vsnprintf+0x510> li	a4,37
1c00c210 <rt_vsnprintf+0x514> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:970
            ++ str;
1c00c214 <rt_vsnprintf+0x518> lw	a5,-32(s0)
1c00c218 <rt_vsnprintf+0x51c> addi	a5,a5,1
1c00c21a <rt_vsnprintf+0x51e> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:972

            if (*fmt)
1c00c21e <rt_vsnprintf+0x522> lw	a5,-76(s0)
1c00c222 <rt_vsnprintf+0x526> lb	a5,0(a5)
1c00c226 <rt_vsnprintf+0x52a> beqz	a5,1c00c250 <rt_vsnprintf+0x554>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:974
            {
                if (str < end) *str = *fmt;
1c00c228 <rt_vsnprintf+0x52c> lw	a4,-32(s0)
1c00c22c <rt_vsnprintf+0x530> lw	a5,-36(s0)
1c00c230 <rt_vsnprintf+0x534> bgeu	a4,a5,1c00c244 <rt_vsnprintf+0x548>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:974 (discriminator 1)
1c00c234 <rt_vsnprintf+0x538> lw	a5,-76(s0)
1c00c238 <rt_vsnprintf+0x53c> lb	a4,0(a5)
1c00c23c <rt_vsnprintf+0x540> lw	a5,-32(s0)
1c00c240 <rt_vsnprintf+0x544> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:975
                ++ str;
1c00c244 <rt_vsnprintf+0x548> lw	a5,-32(s0)
1c00c248 <rt_vsnprintf+0x54c> addi	a5,a5,1
1c00c24a <rt_vsnprintf+0x54e> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:981
            }
            else
            {
                -- fmt;
            }
            continue;
1c00c24e <rt_vsnprintf+0x552> j	1c00c2ee <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:979
                -- fmt;
1c00c250 <rt_vsnprintf+0x554> lw	a5,-76(s0)
1c00c254 <rt_vsnprintf+0x558> addi	a5,a5,-1
1c00c256 <rt_vsnprintf+0x55a> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:981
            continue;
1c00c25a <rt_vsnprintf+0x55e> j	1c00c2ee <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:966
            break;
1c00c25c <rt_vsnprintf+0x560> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:988

#ifdef RT_PRINTF_LONGLONG
        if (qualifier == 'L') num = va_arg(args, long long);
        else if (qualifier == 'l')
#else
        if (qualifier == 'l')
1c00c25e <rt_vsnprintf+0x562> lbu	a4,-43(s0)
1c00c262 <rt_vsnprintf+0x566> li	a5,108
1c00c266 <rt_vsnprintf+0x56a> bne	a4,a5,1c00c27e <rt_vsnprintf+0x582>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:991
#endif
        {
            num = va_arg(args, rt_uint32_t);
1c00c26a <rt_vsnprintf+0x56e> lw	a5,-80(s0)
1c00c26e <rt_vsnprintf+0x572> addi	a4,a5,4
1c00c272 <rt_vsnprintf+0x576> sw	a4,-80(s0)
1c00c276 <rt_vsnprintf+0x57a> lw	a5,0(a5)
1c00c278 <rt_vsnprintf+0x57c> sw	a5,-20(s0)
1c00c27c <rt_vsnprintf+0x580> j	1c00c2c8 <rt_vsnprintf+0x5cc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:994
            if (flags & SIGN) num = (rt_int32_t)num;
        }
        else if (qualifier == 'h')
1c00c27e <rt_vsnprintf+0x582> lbu	a4,-43(s0)
1c00c282 <rt_vsnprintf+0x586> li	a5,104
1c00c286 <rt_vsnprintf+0x58a> bne	a4,a5,1c00c2b6 <rt_vsnprintf+0x5ba>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:996
        {
            num = (rt_uint16_t)va_arg(args, rt_int32_t);
1c00c28a <rt_vsnprintf+0x58e> lw	a5,-80(s0)
1c00c28e <rt_vsnprintf+0x592> addi	a4,a5,4
1c00c292 <rt_vsnprintf+0x596> sw	a4,-80(s0)
1c00c296 <rt_vsnprintf+0x59a> lw	a5,0(a5)
1c00c298 <rt_vsnprintf+0x59c> slli	a5,a5,0x10
1c00c29a <rt_vsnprintf+0x59e> srli	a5,a5,0x10
1c00c29c <rt_vsnprintf+0x5a0> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:997
            if (flags & SIGN) num = (rt_int16_t)num;
1c00c2a0 <rt_vsnprintf+0x5a4> lbu	a5,-42(s0)
1c00c2a4 <rt_vsnprintf+0x5a8> andi	a5,a5,2
1c00c2a6 <rt_vsnprintf+0x5aa> beqz	a5,1c00c2c8 <rt_vsnprintf+0x5cc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:997 (discriminator 1)
1c00c2a8 <rt_vsnprintf+0x5ac> lw	a5,-20(s0)
1c00c2ac <rt_vsnprintf+0x5b0> slli	a5,a5,0x10
1c00c2ae <rt_vsnprintf+0x5b2> srai	a5,a5,0x10
1c00c2b0 <rt_vsnprintf+0x5b4> sw	a5,-20(s0)
1c00c2b4 <rt_vsnprintf+0x5b8> j	1c00c2c8 <rt_vsnprintf+0x5cc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1001
        }
        else
        {
            num = va_arg(args, rt_uint32_t);
1c00c2b6 <rt_vsnprintf+0x5ba> lw	a5,-80(s0)
1c00c2ba <rt_vsnprintf+0x5be> addi	a4,a5,4
1c00c2be <rt_vsnprintf+0x5c2> sw	a4,-80(s0)
1c00c2c2 <rt_vsnprintf+0x5c6> lw	a5,0(a5)
1c00c2c4 <rt_vsnprintf+0x5c8> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1005
            if (flags & SIGN) num = (rt_int32_t)num;
        }
#ifdef RT_PRINTF_PRECISION
        str = print_number(str, end, num, base, field_width, precision, flags);
1c00c2c8 <rt_vsnprintf+0x5cc> lw	a2,-20(s0)
1c00c2cc <rt_vsnprintf+0x5d0> lbu	a3,-41(s0)
1c00c2d0 <rt_vsnprintf+0x5d4> lbu	a5,-42(s0)
1c00c2d4 <rt_vsnprintf+0x5d8> mv	a6,a5
1c00c2d6 <rt_vsnprintf+0x5da> lw	a5,-52(s0)
1c00c2da <rt_vsnprintf+0x5de> lw	a4,-48(s0)
1c00c2de <rt_vsnprintf+0x5e2> lw	a1,-36(s0)
1c00c2e2 <rt_vsnprintf+0x5e6> lw	a0,-32(s0)
1c00c2e6 <rt_vsnprintf+0x5ea> jal	ra,1c00ba82 <print_number>
1c00c2ea <rt_vsnprintf+0x5ee> sw	a0,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:794
    for (; *fmt ; ++fmt)
1c00c2ee <rt_vsnprintf+0x5f2> lw	a5,-76(s0)
1c00c2f2 <rt_vsnprintf+0x5f6> addi	a5,a5,1
1c00c2f4 <rt_vsnprintf+0x5f8> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:794 (discriminator 1)
1c00c2f8 <rt_vsnprintf+0x5fc> lw	a5,-76(s0)
1c00c2fc <rt_vsnprintf+0x600> lb	a5,0(a5)
1c00c300 <rt_vsnprintf+0x604> bnez	a5,1c00bd4e <rt_vsnprintf+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1011
#else
        str = print_number(str, end, num, base, field_width, flags);
#endif
    }

    if (size > 0)
1c00c304 <rt_vsnprintf+0x608> lw	a5,-72(s0)
1c00c308 <rt_vsnprintf+0x60c> beqz	a5,1c00c32a <rt_vsnprintf+0x62e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1013
    {
        if (str < end) *str = '\0';
1c00c30a <rt_vsnprintf+0x60e> lw	a4,-32(s0)
1c00c30e <rt_vsnprintf+0x612> lw	a5,-36(s0)
1c00c312 <rt_vsnprintf+0x616> bgeu	a4,a5,1c00c320 <rt_vsnprintf+0x624>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1013 (discriminator 1)
1c00c316 <rt_vsnprintf+0x61a> lw	a5,-32(s0)
1c00c31a <rt_vsnprintf+0x61e> sb	zero,0(a5)
1c00c31e <rt_vsnprintf+0x622> j	1c00c32a <rt_vsnprintf+0x62e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1016
        else
        {
            end[-1] = '\0';
1c00c320 <rt_vsnprintf+0x624> lw	a5,-36(s0)
1c00c324 <rt_vsnprintf+0x628> addi	a5,a5,-1
1c00c326 <rt_vsnprintf+0x62a> sb	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1023
    }

    /* the trailing null byte doesn't count towards the total
    * ++str;
    */
    return str - buf;
1c00c32a <rt_vsnprintf+0x62e> lw	a4,-32(s0)
1c00c32e <rt_vsnprintf+0x632> lw	a5,-68(s0)
1c00c332 <rt_vsnprintf+0x636> sub	a5,a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1024
}
1c00c336 <rt_vsnprintf+0x63a> mv	a0,a5
1c00c338 <rt_vsnprintf+0x63c> lw	ra,76(sp)
1c00c33a <rt_vsnprintf+0x63e> lw	s0,72(sp)
1c00c33c <rt_vsnprintf+0x640> addi	sp,sp,80
1c00c33e <rt_vsnprintf+0x642> ret
rt_kprintf():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1165
 * This function will print a formatted string on system console
 *
 * @param fmt the format
 */
void rt_kprintf(const char *fmt, ...)
{
1c00c340 <rt_kprintf> addi	sp,sp,-80
1c00c342 <rt_kprintf+0x2> sw	ra,44(sp)
1c00c344 <rt_kprintf+0x4> sw	s0,40(sp)
1c00c346 <rt_kprintf+0x6> addi	s0,sp,48
1c00c348 <rt_kprintf+0x8> sw	a0,-36(s0)
1c00c34c <rt_kprintf+0xc> sw	a1,4(s0)
1c00c34e <rt_kprintf+0xe> sw	a2,8(s0)
1c00c350 <rt_kprintf+0x10> sw	a3,12(s0)
1c00c352 <rt_kprintf+0x12> sw	a4,16(s0)
1c00c354 <rt_kprintf+0x14> sw	a5,20(s0)
1c00c356 <rt_kprintf+0x16> sw	a6,24(s0)
1c00c35a <rt_kprintf+0x1a> sw	a7,28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1170
    va_list args;
    rt_size_t length;
    static char rt_log_buf[RT_CONSOLEBUF_SIZE];

    va_start(args, fmt);
1c00c35e <rt_kprintf+0x1e> addi	a5,s0,32
1c00c362 <rt_kprintf+0x22> addi	a5,a5,-28
1c00c364 <rt_kprintf+0x24> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1176
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
1c00c368 <rt_kprintf+0x28> lw	a5,-24(s0)
1c00c36c <rt_kprintf+0x2c> mv	a3,a5
1c00c36e <rt_kprintf+0x2e> lw	a2,-36(s0)
1c00c372 <rt_kprintf+0x32> li	a1,127
1c00c376 <rt_kprintf+0x36> addi	a0,gp,600 # 1c00e9c0 <rt_log_buf.2171>
1c00c37a <rt_kprintf+0x3a> jal	ra,1c00bcfc <rt_vsnprintf>
1c00c37e <rt_kprintf+0x3e> mv	a5,a0
1c00c380 <rt_kprintf+0x40> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1177
    if (length > RT_CONSOLEBUF_SIZE - 1)
1c00c384 <rt_kprintf+0x44> lw	a4,-20(s0)
1c00c388 <rt_kprintf+0x48> li	a5,127
1c00c38c <rt_kprintf+0x4c> bgeu	a5,a4,1c00c398 <rt_kprintf+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1178
        length = RT_CONSOLEBUF_SIZE - 1;
1c00c390 <rt_kprintf+0x50> li	a5,127
1c00c394 <rt_kprintf+0x54> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1193
        _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
        rt_device_write(_console_device, 0, rt_log_buf, length);
        _console_device->open_flag = old_flag;
    }
#else
    rt_hw_console_output(rt_log_buf);
1c00c398 <rt_kprintf+0x58> addi	a0,gp,600 # 1c00e9c0 <rt_log_buf.2171>
1c00c39c <rt_kprintf+0x5c> jal	ra,1c00b5ce <rt_hw_console_output>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1196
#endif
    va_end(args);
}
1c00c3a0 <rt_kprintf+0x60> nop
1c00c3a2 <rt_kprintf+0x62> lw	ra,44(sp)
1c00c3a4 <rt_kprintf+0x64> lw	s0,40(sp)
1c00c3a6 <rt_kprintf+0x66> addi	sp,sp,80
1c00c3a8 <rt_kprintf+0x68> ret
__rt_ffs():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1295
 *
 * @return return the index of the first bit set. If value is 0, then this function
 * shall return 0.
 */
int __rt_ffs(int value)
{
1c00c3aa <__rt_ffs> addi	sp,sp,-32
1c00c3ac <__rt_ffs+0x2> sw	s0,28(sp)
1c00c3ae <__rt_ffs+0x4> addi	s0,sp,32
1c00c3b0 <__rt_ffs+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1296
    if (value == 0) return 0;
1c00c3b4 <__rt_ffs+0xa> lw	a5,-20(s0)
1c00c3b8 <__rt_ffs+0xe> bnez	a5,1c00c3be <__rt_ffs+0x14>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1296 (discriminator 1)
1c00c3ba <__rt_ffs+0x10> li	a5,0
1c00c3bc <__rt_ffs+0x12> j	1c00c44a <__rt_ffs+0xa0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1298

    if (value & 0xff)
1c00c3be <__rt_ffs+0x14> lw	a5,-20(s0)
1c00c3c2 <__rt_ffs+0x18> andi	a5,a5,255
1c00c3c6 <__rt_ffs+0x1c> beqz	a5,1c00c3e2 <__rt_ffs+0x38>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1299
        return __lowest_bit_bitmap[value & 0xff] + 1;
1c00c3c8 <__rt_ffs+0x1e> lw	a5,-20(s0)
1c00c3cc <__rt_ffs+0x22> andi	a5,a5,255
1c00c3d0 <__rt_ffs+0x26> lui	a4,0x1c00e
1c00c3d4 <__rt_ffs+0x2a> addi	a4,a4,-1080 # 1c00dbc8 <__lowest_bit_bitmap>
1c00c3d8 <__rt_ffs+0x2e> add	a5,a5,a4
1c00c3da <__rt_ffs+0x30> lbu	a5,0(a5)
1c00c3de <__rt_ffs+0x34> addi	a5,a5,1
1c00c3e0 <__rt_ffs+0x36> j	1c00c44a <__rt_ffs+0xa0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1301

    if (value & 0xff00)
1c00c3e2 <__rt_ffs+0x38> lw	a4,-20(s0)
1c00c3e6 <__rt_ffs+0x3c> lui	a5,0x10
1c00c3e8 <__rt_ffs+0x3e> addi	a5,a5,-256 # 0000ff00 <__stack_size+0xf700>
1c00c3ec <__rt_ffs+0x42> and	a5,a5,a4
1c00c3ee <__rt_ffs+0x44> beqz	a5,1c00c40c <__rt_ffs+0x62>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1302
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
1c00c3f0 <__rt_ffs+0x46> lw	a5,-20(s0)
1c00c3f4 <__rt_ffs+0x4a> srai	a5,a5,0x8
1c00c3f6 <__rt_ffs+0x4c> andi	a5,a5,255
1c00c3fa <__rt_ffs+0x50> lui	a4,0x1c00e
1c00c3fe <__rt_ffs+0x54> addi	a4,a4,-1080 # 1c00dbc8 <__lowest_bit_bitmap>
1c00c402 <__rt_ffs+0x58> add	a5,a5,a4
1c00c404 <__rt_ffs+0x5a> lbu	a5,0(a5)
1c00c408 <__rt_ffs+0x5e> addi	a5,a5,9
1c00c40a <__rt_ffs+0x60> j	1c00c44a <__rt_ffs+0xa0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1304

    if (value & 0xff0000)
1c00c40c <__rt_ffs+0x62> lw	a4,-20(s0)
1c00c410 <__rt_ffs+0x66> lui	a5,0xff0
1c00c414 <__rt_ffs+0x6a> and	a5,a5,a4
1c00c416 <__rt_ffs+0x6c> beqz	a5,1c00c434 <__rt_ffs+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1305
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
1c00c418 <__rt_ffs+0x6e> lw	a5,-20(s0)
1c00c41c <__rt_ffs+0x72> srai	a5,a5,0x10
1c00c41e <__rt_ffs+0x74> andi	a5,a5,255
1c00c422 <__rt_ffs+0x78> lui	a4,0x1c00e
1c00c426 <__rt_ffs+0x7c> addi	a4,a4,-1080 # 1c00dbc8 <__lowest_bit_bitmap>
1c00c42a <__rt_ffs+0x80> add	a5,a5,a4
1c00c42c <__rt_ffs+0x82> lbu	a5,0(a5) # 00ff0000 <__stack_size+0xfef800>
1c00c430 <__rt_ffs+0x86> addi	a5,a5,17
1c00c432 <__rt_ffs+0x88> j	1c00c44a <__rt_ffs+0xa0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1307

    return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
1c00c434 <__rt_ffs+0x8a> lw	a5,-20(s0)
1c00c438 <__rt_ffs+0x8e> srli	a5,a5,0x18
1c00c43a <__rt_ffs+0x90> lui	a4,0x1c00e
1c00c43e <__rt_ffs+0x94> addi	a4,a4,-1080 # 1c00dbc8 <__lowest_bit_bitmap>
1c00c442 <__rt_ffs+0x98> add	a5,a5,a4
1c00c444 <__rt_ffs+0x9a> lbu	a5,0(a5)
1c00c448 <__rt_ffs+0x9e> addi	a5,a5,25
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1308
}
1c00c44a <__rt_ffs+0xa0> mv	a0,a5
1c00c44c <__rt_ffs+0xa2> lw	s0,28(sp)
1c00c44e <__rt_ffs+0xa4> addi	sp,sp,32
1c00c450 <__rt_ffs+0xa6> ret
rt_list_insert_after():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:59
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
1c00c452 <rt_list_insert_after> addi	sp,sp,-32
1c00c454 <rt_list_insert_after+0x2> sw	s0,28(sp)
1c00c456 <rt_list_insert_after+0x4> addi	s0,sp,32
1c00c458 <rt_list_insert_after+0x6> sw	a0,-20(s0)
1c00c45c <rt_list_insert_after+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:60
    l->next->prev = n;
1c00c460 <rt_list_insert_after+0xe> lw	a5,-20(s0)
1c00c464 <rt_list_insert_after+0x12> lw	a5,0(a5)
1c00c466 <rt_list_insert_after+0x14> lw	a4,-24(s0)
1c00c46a <rt_list_insert_after+0x18> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:61
    n->next = l->next;
1c00c46c <rt_list_insert_after+0x1a> lw	a5,-20(s0)
1c00c470 <rt_list_insert_after+0x1e> lw	a4,0(a5)
1c00c472 <rt_list_insert_after+0x20> lw	a5,-24(s0)
1c00c476 <rt_list_insert_after+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:63

    l->next = n;
1c00c478 <rt_list_insert_after+0x26> lw	a5,-20(s0)
1c00c47c <rt_list_insert_after+0x2a> lw	a4,-24(s0)
1c00c480 <rt_list_insert_after+0x2e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:64
    n->prev = l;
1c00c482 <rt_list_insert_after+0x30> lw	a5,-24(s0)
1c00c486 <rt_list_insert_after+0x34> lw	a4,-20(s0)
1c00c48a <rt_list_insert_after+0x38> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:65
}
1c00c48c <rt_list_insert_after+0x3a> nop
1c00c48e <rt_list_insert_after+0x3c> lw	s0,28(sp)
1c00c490 <rt_list_insert_after+0x3e> addi	sp,sp,32
1c00c492 <rt_list_insert_after+0x40> ret
rt_list_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:87
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
1c00c494 <rt_list_remove> addi	sp,sp,-32
1c00c496 <rt_list_remove+0x2> sw	s0,28(sp)
1c00c498 <rt_list_remove+0x4> addi	s0,sp,32
1c00c49a <rt_list_remove+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:88
    n->next->prev = n->prev;
1c00c49e <rt_list_remove+0xa> lw	a5,-20(s0)
1c00c4a2 <rt_list_remove+0xe> lw	a5,0(a5)
1c00c4a4 <rt_list_remove+0x10> lw	a4,-20(s0)
1c00c4a8 <rt_list_remove+0x14> lw	a4,4(a4)
1c00c4aa <rt_list_remove+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:89
    n->prev->next = n->next;
1c00c4ac <rt_list_remove+0x18> lw	a5,-20(s0)
1c00c4b0 <rt_list_remove+0x1c> lw	a5,4(a5)
1c00c4b2 <rt_list_remove+0x1e> lw	a4,-20(s0)
1c00c4b6 <rt_list_remove+0x22> lw	a4,0(a4)
1c00c4b8 <rt_list_remove+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:91

    n->next = n->prev = n;
1c00c4ba <rt_list_remove+0x26> lw	a5,-20(s0)
1c00c4be <rt_list_remove+0x2a> lw	a4,-20(s0)
1c00c4c2 <rt_list_remove+0x2e> sw	a4,4(a5)
1c00c4c4 <rt_list_remove+0x30> lw	a5,-20(s0)
1c00c4c8 <rt_list_remove+0x34> lw	a4,4(a5)
1c00c4ca <rt_list_remove+0x36> lw	a5,-20(s0)
1c00c4ce <rt_list_remove+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:92
}
1c00c4d0 <rt_list_remove+0x3c> nop
1c00c4d2 <rt_list_remove+0x3e> lw	s0,28(sp)
1c00c4d4 <rt_list_remove+0x40> addi	sp,sp,32
1c00c4d6 <rt_list_remove+0x42> ret
rt_object_get_information():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:211
 *
 * @return the object type information or RT_NULL
 */
struct rt_object_information *
rt_object_get_information(enum rt_object_class_type type)
{
1c00c4d8 <rt_object_get_information> addi	sp,sp,-48
1c00c4da <rt_object_get_information+0x2> sw	s0,44(sp)
1c00c4dc <rt_object_get_information+0x4> addi	s0,sp,48
1c00c4de <rt_object_get_information+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:214
    int index;

    for (index = 0; index < RT_Object_Info_Unknown; index ++)
1c00c4e2 <rt_object_get_information+0xa> sw	zero,-20(s0)
1c00c4e6 <rt_object_get_information+0xe> j	1c00c518 <rt_object_get_information+0x40>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:215
        if (rt_object_container[index].type == type) return &rt_object_container[index];
1c00c4e8 <rt_object_get_information+0x10> addi	a4,gp,-1568 # 1c00e148 <rt_object_container>
1c00c4ec <rt_object_get_information+0x14> lw	a5,-20(s0)
1c00c4f0 <rt_object_get_information+0x18> slli	a5,a5,0x4
1c00c4f2 <rt_object_get_information+0x1a> add	a5,a5,a4
1c00c4f4 <rt_object_get_information+0x1c> lw	a5,0(a5)
1c00c4f6 <rt_object_get_information+0x1e> lw	a4,-36(s0)
1c00c4fa <rt_object_get_information+0x22> bne	a4,a5,1c00c50e <rt_object_get_information+0x36>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:215 (discriminator 1)
1c00c4fe <rt_object_get_information+0x26> lw	a5,-20(s0)
1c00c502 <rt_object_get_information+0x2a> slli	a4,a5,0x4
1c00c506 <rt_object_get_information+0x2e> addi	a5,gp,-1568 # 1c00e148 <rt_object_container>
1c00c50a <rt_object_get_information+0x32> add	a5,a5,a4
1c00c50c <rt_object_get_information+0x34> j	1c00c524 <rt_object_get_information+0x4c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:214 (discriminator 2)
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
1c00c50e <rt_object_get_information+0x36> lw	a5,-20(s0)
1c00c512 <rt_object_get_information+0x3a> addi	a5,a5,1
1c00c514 <rt_object_get_information+0x3c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:214 (discriminator 1)
1c00c518 <rt_object_get_information+0x40> lw	a4,-20(s0)
1c00c51c <rt_object_get_information+0x44> li	a5,3
1c00c51e <rt_object_get_information+0x46> bge	a5,a4,1c00c4e8 <rt_object_get_information+0x10>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:217

    return RT_NULL;
1c00c522 <rt_object_get_information+0x4a> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:218
}
1c00c524 <rt_object_get_information+0x4c> mv	a0,a5
1c00c526 <rt_object_get_information+0x4e> lw	s0,44(sp)
1c00c528 <rt_object_get_information+0x50> addi	sp,sp,48
1c00c52a <rt_object_get_information+0x52> ret
rt_object_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:300
 * @param name the object name. In system, the object's name must be unique.
 */
void rt_object_init(struct rt_object         *object,
                    enum rt_object_class_type type,
                    const char               *name)
{
1c00c52c <rt_object_init> addi	sp,sp,-48
1c00c52e <rt_object_init+0x2> sw	ra,44(sp)
1c00c530 <rt_object_init+0x4> sw	s0,40(sp)
1c00c532 <rt_object_init+0x6> sw	s1,36(sp)
1c00c534 <rt_object_init+0x8> addi	s0,sp,48
1c00c536 <rt_object_init+0xa> sw	a0,-36(s0)
1c00c53a <rt_object_init+0xe> sw	a1,-40(s0)
1c00c53e <rt_object_init+0x12> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:302
    register rt_base_t temp;
    struct rt_list_node *node = RT_NULL;
1c00c542 <rt_object_init+0x16> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:306
    struct rt_object_information *information;

    /* get object information */
    information = rt_object_get_information(type);
1c00c546 <rt_object_init+0x1a> lw	a0,-40(s0)
1c00c54a <rt_object_init+0x1e> jal	1c00c4d8 <rt_object_get_information>
1c00c54c <rt_object_init+0x20> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:312
    RT_ASSERT(information != RT_NULL);

    /* check object type to avoid re-initialization */

    /* enter critical */
    rt_enter_critical();
1c00c550 <rt_object_init+0x24> jal	1c00c964 <rt_enter_critical>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:314
    /* try to find object */
    for (node  = information->object_list.next;
1c00c552 <rt_object_init+0x26> lw	a5,-24(s0)
1c00c556 <rt_object_init+0x2a> lw	a5,4(a5)
1c00c558 <rt_object_init+0x2c> sw	a5,-20(s0)
1c00c55c <rt_object_init+0x30> j	1c00c572 <rt_object_init+0x46>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:320
            node != &(information->object_list);
            node  = node->next)
    {
        struct rt_object *obj;

        obj = rt_list_entry(node, struct rt_object, list);
1c00c55e <rt_object_init+0x32> lw	a5,-20(s0)
1c00c562 <rt_object_init+0x36> addi	a5,a5,-12
1c00c564 <rt_object_init+0x38> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:316
            node  = node->next)
1c00c568 <rt_object_init+0x3c> lw	a5,-20(s0)
1c00c56c <rt_object_init+0x40> lw	a5,0(a5)
1c00c56e <rt_object_init+0x42> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:315 (discriminator 1)
            node != &(information->object_list);
1c00c572 <rt_object_init+0x46> lw	a5,-24(s0)
1c00c576 <rt_object_init+0x4a> addi	a5,a5,4
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:314 (discriminator 1)
    for (node  = information->object_list.next;
1c00c578 <rt_object_init+0x4c> lw	a4,-20(s0)
1c00c57c <rt_object_init+0x50> bne	a4,a5,1c00c55e <rt_object_init+0x32>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:327
        {
            RT_ASSERT(obj != object);
        }
    }
    /* leave critical */
    rt_exit_critical();
1c00c580 <rt_object_init+0x54> jal	1c00c99a <rt_exit_critical>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:331

    /* initialize object's parameters */
    /* set object type to static */
    object->type = type | RT_Object_Class_Static;
1c00c582 <rt_object_init+0x56> lw	a5,-40(s0)
1c00c586 <rt_object_init+0x5a> andi	a5,a5,255
1c00c58a <rt_object_init+0x5e> ori	a5,a5,-128
1c00c58e <rt_object_init+0x62> andi	a4,a5,255
1c00c592 <rt_object_init+0x66> lw	a5,-36(s0)
1c00c596 <rt_object_init+0x6a> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:333
    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
1c00c59a <rt_object_init+0x6e> lw	a5,-36(s0)
1c00c59e <rt_object_init+0x72> li	a2,8
1c00c5a0 <rt_object_init+0x74> lw	a1,-44(s0)
1c00c5a4 <rt_object_init+0x78> mv	a0,a5
1c00c5a6 <rt_object_init+0x7a> jal	ra,1c00b8e4 <rt_strncpy>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:338

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
1c00c5aa <rt_object_init+0x7e> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00c5ae <rt_object_init+0x82> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:341

    /* insert object into information object list */
    rt_list_insert_after(&(information->object_list), &(object->list));
1c00c5b0 <rt_object_init+0x84> lw	a5,-24(s0)
1c00c5b4 <rt_object_init+0x88> addi	a4,a5,4
1c00c5b8 <rt_object_init+0x8c> lw	a5,-36(s0)
1c00c5bc <rt_object_init+0x90> addi	a5,a5,12
1c00c5be <rt_object_init+0x92> mv	a1,a5
1c00c5c0 <rt_object_init+0x94> mv	a0,a4
1c00c5c2 <rt_object_init+0x96> jal	ra,1c00c452 <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:344

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
1c00c5c6 <rt_object_init+0x9a> mv	a0,s1
1c00c5c8 <rt_object_init+0x9c> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:345
}
1c00c5cc <rt_object_init+0xa0> nop
1c00c5ce <rt_object_init+0xa2> lw	ra,44(sp)
1c00c5d0 <rt_object_init+0xa4> lw	s0,40(sp)
1c00c5d2 <rt_object_init+0xa6> lw	s1,36(sp)
1c00c5d4 <rt_object_init+0xa8> addi	sp,sp,48
1c00c5d6 <rt_object_init+0xaa> ret
rt_object_detach():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:354
 * and the memory of static object is not freed.
 *
 * @param object the specified object to be detached.
 */
void rt_object_detach(rt_object_t object)
{
1c00c5d8 <rt_object_detach> addi	sp,sp,-32
1c00c5da <rt_object_detach+0x2> sw	ra,28(sp)
1c00c5dc <rt_object_detach+0x4> sw	s0,24(sp)
1c00c5de <rt_object_detach+0x6> sw	s1,20(sp)
1c00c5e0 <rt_object_detach+0x8> addi	s0,sp,32
1c00c5e2 <rt_object_detach+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:363
    RT_ASSERT(object != RT_NULL);

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));

    /* reset object type */
    object->type = 0;
1c00c5e6 <rt_object_detach+0xe> lw	a5,-20(s0)
1c00c5ea <rt_object_detach+0x12> sb	zero,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:366

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
1c00c5ee <rt_object_detach+0x16> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00c5f2 <rt_object_detach+0x1a> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:369

    /* remove from old list */
    rt_list_remove(&(object->list));
1c00c5f4 <rt_object_detach+0x1c> lw	a5,-20(s0)
1c00c5f8 <rt_object_detach+0x20> addi	a5,a5,12
1c00c5fa <rt_object_detach+0x22> mv	a0,a5
1c00c5fc <rt_object_detach+0x24> jal	ra,1c00c494 <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:372

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
1c00c600 <rt_object_detach+0x28> mv	a0,s1
1c00c602 <rt_object_detach+0x2a> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:373
}
1c00c606 <rt_object_detach+0x2e> nop
1c00c608 <rt_object_detach+0x30> lw	ra,28(sp)
1c00c60a <rt_object_detach+0x32> lw	s0,24(sp)
1c00c60c <rt_object_detach+0x34> lw	s1,20(sp)
1c00c60e <rt_object_detach+0x36> addi	sp,sp,32
1c00c610 <rt_object_detach+0x38> ret
rt_object_is_systemobject():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:474
 * @param object the specified object to be judged.
 *
 * @return RT_TRUE if a system object, RT_FALSE for others.
 */
rt_bool_t rt_object_is_systemobject(rt_object_t object)
{
1c00c612 <rt_object_is_systemobject> addi	sp,sp,-32
1c00c614 <rt_object_is_systemobject+0x2> sw	s0,28(sp)
1c00c616 <rt_object_is_systemobject+0x4> addi	s0,sp,32
1c00c618 <rt_object_is_systemobject+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:478
    /* object check */
    RT_ASSERT(object != RT_NULL);

    if (object->type & RT_Object_Class_Static)
1c00c61c <rt_object_is_systemobject+0xa> lw	a5,-20(s0)
1c00c620 <rt_object_is_systemobject+0xe> lbu	a5,8(a5)
1c00c624 <rt_object_is_systemobject+0x12> slli	a5,a5,0x18
1c00c626 <rt_object_is_systemobject+0x14> srai	a5,a5,0x18
1c00c628 <rt_object_is_systemobject+0x16> bgez	a5,1c00c630 <rt_object_is_systemobject+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:479
        return RT_TRUE;
1c00c62c <rt_object_is_systemobject+0x1a> li	a5,1
1c00c62e <rt_object_is_systemobject+0x1c> j	1c00c632 <rt_object_is_systemobject+0x20>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:481

    return RT_FALSE;
1c00c630 <rt_object_is_systemobject+0x1e> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:482
}
1c00c632 <rt_object_is_systemobject+0x20> mv	a0,a5
1c00c634 <rt_object_is_systemobject+0x22> lw	s0,28(sp)
1c00c636 <rt_object_is_systemobject+0x24> addi	sp,sp,32
1c00c638 <rt_object_is_systemobject+0x26> ret
rt_list_init():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:48
{
1c00c63a <rt_list_init> addi	sp,sp,-32
1c00c63c <rt_list_init+0x2> sw	s0,28(sp)
1c00c63e <rt_list_init+0x4> addi	s0,sp,32
1c00c640 <rt_list_init+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:49
    l->next = l->prev = l;
1c00c644 <rt_list_init+0xa> lw	a5,-20(s0)
1c00c648 <rt_list_init+0xe> lw	a4,-20(s0)
1c00c64c <rt_list_init+0x12> sw	a4,4(a5)
1c00c64e <rt_list_init+0x14> lw	a5,-20(s0)
1c00c652 <rt_list_init+0x18> lw	a4,4(a5)
1c00c654 <rt_list_init+0x1a> lw	a5,-20(s0)
1c00c658 <rt_list_init+0x1e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:50
}
1c00c65a <rt_list_init+0x20> nop
1c00c65c <rt_list_init+0x22> lw	s0,28(sp)
1c00c65e <rt_list_init+0x24> addi	sp,sp,32
1c00c660 <rt_list_init+0x26> ret
rt_list_insert_before():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:74
{
1c00c662 <rt_list_insert_before> addi	sp,sp,-32
1c00c664 <rt_list_insert_before+0x2> sw	s0,28(sp)
1c00c666 <rt_list_insert_before+0x4> addi	s0,sp,32
1c00c668 <rt_list_insert_before+0x6> sw	a0,-20(s0)
1c00c66c <rt_list_insert_before+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:75
    l->prev->next = n;
1c00c670 <rt_list_insert_before+0xe> lw	a5,-20(s0)
1c00c674 <rt_list_insert_before+0x12> lw	a5,4(a5)
1c00c676 <rt_list_insert_before+0x14> lw	a4,-24(s0)
1c00c67a <rt_list_insert_before+0x18> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:76
    n->prev = l->prev;
1c00c67c <rt_list_insert_before+0x1a> lw	a5,-20(s0)
1c00c680 <rt_list_insert_before+0x1e> lw	a4,4(a5)
1c00c682 <rt_list_insert_before+0x20> lw	a5,-24(s0)
1c00c686 <rt_list_insert_before+0x24> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:78
    l->prev = n;
1c00c688 <rt_list_insert_before+0x26> lw	a5,-20(s0)
1c00c68c <rt_list_insert_before+0x2a> lw	a4,-24(s0)
1c00c690 <rt_list_insert_before+0x2e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:79
    n->next = l;
1c00c692 <rt_list_insert_before+0x30> lw	a5,-24(s0)
1c00c696 <rt_list_insert_before+0x34> lw	a4,-20(s0)
1c00c69a <rt_list_insert_before+0x38> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:80
}
1c00c69c <rt_list_insert_before+0x3a> nop
1c00c69e <rt_list_insert_before+0x3c> lw	s0,28(sp)
1c00c6a0 <rt_list_insert_before+0x3e> addi	sp,sp,32
1c00c6a2 <rt_list_insert_before+0x40> ret
rt_list_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:87
{
1c00c6a4 <rt_list_remove> addi	sp,sp,-32
1c00c6a6 <rt_list_remove+0x2> sw	s0,28(sp)
1c00c6a8 <rt_list_remove+0x4> addi	s0,sp,32
1c00c6aa <rt_list_remove+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:88
    n->next->prev = n->prev;
1c00c6ae <rt_list_remove+0xa> lw	a5,-20(s0)
1c00c6b2 <rt_list_remove+0xe> lw	a5,0(a5)
1c00c6b4 <rt_list_remove+0x10> lw	a4,-20(s0)
1c00c6b8 <rt_list_remove+0x14> lw	a4,4(a4)
1c00c6ba <rt_list_remove+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:89
    n->prev->next = n->next;
1c00c6bc <rt_list_remove+0x18> lw	a5,-20(s0)
1c00c6c0 <rt_list_remove+0x1c> lw	a5,4(a5)
1c00c6c2 <rt_list_remove+0x1e> lw	a4,-20(s0)
1c00c6c6 <rt_list_remove+0x22> lw	a4,0(a4)
1c00c6c8 <rt_list_remove+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:91
    n->next = n->prev = n;
1c00c6ca <rt_list_remove+0x26> lw	a5,-20(s0)
1c00c6ce <rt_list_remove+0x2a> lw	a4,-20(s0)
1c00c6d2 <rt_list_remove+0x2e> sw	a4,4(a5)
1c00c6d4 <rt_list_remove+0x30> lw	a5,-20(s0)
1c00c6d8 <rt_list_remove+0x34> lw	a4,4(a5)
1c00c6da <rt_list_remove+0x36> lw	a5,-20(s0)
1c00c6de <rt_list_remove+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:92
}
1c00c6e0 <rt_list_remove+0x3c> nop
1c00c6e2 <rt_list_remove+0x3e> lw	s0,28(sp)
1c00c6e4 <rt_list_remove+0x40> addi	sp,sp,32
1c00c6e6 <rt_list_remove+0x42> ret
rt_list_isempty():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:99
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
1c00c6e8 <rt_list_isempty> addi	sp,sp,-32
1c00c6ea <rt_list_isempty+0x2> sw	s0,28(sp)
1c00c6ec <rt_list_isempty+0x4> addi	s0,sp,32
1c00c6ee <rt_list_isempty+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:100
    return l->next == l;
1c00c6f2 <rt_list_isempty+0xa> lw	a5,-20(s0)
1c00c6f6 <rt_list_isempty+0xe> lw	a5,0(a5)
1c00c6f8 <rt_list_isempty+0x10> lw	a4,-20(s0)
1c00c6fc <rt_list_isempty+0x14> sub	a5,a4,a5
1c00c700 <rt_list_isempty+0x18> seqz	a5,a5
1c00c704 <rt_list_isempty+0x1c> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:101
}
1c00c708 <rt_list_isempty+0x20> mv	a0,a5
1c00c70a <rt_list_isempty+0x22> lw	s0,28(sp)
1c00c70c <rt_list_isempty+0x24> addi	sp,sp,32
1c00c70e <rt_list_isempty+0x26> ret
rt_system_scheduler_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:124
/**
 * @ingroup SystemInit
 * This function will initialize the system scheduler
 */
void rt_system_scheduler_init(void)
{
1c00c710 <rt_system_scheduler_init> addi	sp,sp,-16
1c00c712 <rt_system_scheduler_init+0x2> sw	ra,12(sp)
1c00c714 <rt_system_scheduler_init+0x4> sw	s0,8(sp)
1c00c716 <rt_system_scheduler_init+0x6> sw	s1,4(sp)
1c00c718 <rt_system_scheduler_init+0x8> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:127
    register rt_base_t offset;

    rt_scheduler_lock_nest = 0;
1c00c71a <rt_system_scheduler_init+0xa> sh	zero,1104(gp) # 1c00ebb8 <rt_scheduler_lock_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:132

    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
                                      RT_THREAD_PRIORITY_MAX));

    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
1c00c71e <rt_system_scheduler_init+0xe> li	s1,0
1c00c720 <rt_system_scheduler_init+0x10> j	1c00c736 <rt_system_scheduler_init+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:134 (discriminator 3)
    {
        rt_list_init(&rt_thread_priority_table[offset]);
1c00c722 <rt_system_scheduler_init+0x12> slli	a4,s1,0x3
1c00c726 <rt_system_scheduler_init+0x16> lui	a5,0x1c00f
1c00c72a <rt_system_scheduler_init+0x1a> addi	a5,a5,-352 # 1c00eea0 <rt_thread_priority_table>
1c00c72e <rt_system_scheduler_init+0x1e> add	a5,a5,a4
1c00c730 <rt_system_scheduler_init+0x20> mv	a0,a5
1c00c732 <rt_system_scheduler_init+0x22> jal	1c00c63a <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:132 (discriminator 3)
    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
1c00c734 <rt_system_scheduler_init+0x24> addi	s1,s1,1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:132 (discriminator 1)
1c00c736 <rt_system_scheduler_init+0x26> li	a5,7
1c00c738 <rt_system_scheduler_init+0x28> bge	a5,s1,1c00c722 <rt_system_scheduler_init+0x12>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:137
    }

    rt_current_priority = RT_THREAD_PRIORITY_MAX - 1;
1c00c73c <rt_system_scheduler_init+0x2c> lui	a5,0x1c00f
1c00c740 <rt_system_scheduler_init+0x30> li	a4,7
1c00c742 <rt_system_scheduler_init+0x32> sb	a4,-288(a5) # 1c00eee0 <rt_current_priority>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:138
    rt_current_thread = RT_NULL;
1c00c746 <rt_system_scheduler_init+0x36> sw	zero,1108(gp) # 1c00ebbc <rt_current_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:141

    /* initialize ready priority group */
    rt_thread_ready_priority_group = 0;
1c00c74a <rt_system_scheduler_init+0x3a> lui	a5,0x1c00f
1c00c74e <rt_system_scheduler_init+0x3e> sw	zero,-284(a5) # 1c00eee4 <rt_thread_ready_priority_group>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:149
    /* initialize ready table */
    rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
#endif

    /* initialize thread defunct */
    rt_list_init(&rt_thread_defunct);
1c00c752 <rt_system_scheduler_init+0x42> lui	a5,0x1c00f
1c00c756 <rt_system_scheduler_init+0x46> addi	a0,a5,-280 # 1c00eee8 <rt_thread_defunct>
1c00c75a <rt_system_scheduler_init+0x4a> jal	ra,1c00c63a <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:150
}
1c00c75e <rt_system_scheduler_init+0x4e> nop
1c00c760 <rt_system_scheduler_init+0x50> lw	ra,12(sp)
1c00c762 <rt_system_scheduler_init+0x52> lw	s0,8(sp)
1c00c764 <rt_system_scheduler_init+0x54> lw	s1,4(sp)
1c00c766 <rt_system_scheduler_init+0x56> addi	sp,sp,16
1c00c768 <rt_system_scheduler_init+0x58> ret
rt_system_scheduler_start():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:158
 * @ingroup SystemInit
 * This function will startup scheduler. It will select one thread
 * with the highest priority level, then switch to it.
 */
void rt_system_scheduler_start(void)
{
1c00c76a <rt_system_scheduler_start> addi	sp,sp,-16
1c00c76c <rt_system_scheduler_start+0x2> sw	ra,12(sp)
1c00c76e <rt_system_scheduler_start+0x4> sw	s0,8(sp)
1c00c770 <rt_system_scheduler_start+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:168
    register rt_ubase_t number;

    number = __rt_ffs(rt_thread_ready_priority_group) - 1;
    highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#else
    highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
1c00c772 <rt_system_scheduler_start+0x8> lui	a5,0x1c00f
1c00c776 <rt_system_scheduler_start+0xc> lw	a5,-284(a5) # 1c00eee4 <rt_thread_ready_priority_group>
1c00c77a <rt_system_scheduler_start+0x10> mv	a0,a5
1c00c77c <rt_system_scheduler_start+0x12> jal	ra,1c00c3aa <__rt_ffs>
1c00c780 <rt_system_scheduler_start+0x16> mv	a5,a0
1c00c782 <rt_system_scheduler_start+0x18> addi	a5,a5,-1
1c00c784 <rt_system_scheduler_start+0x1a> mv	ra,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:172
#endif

    /* get switch to thread */
    to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
1c00c786 <rt_system_scheduler_start+0x1c> lui	a5,0x1c00f
1c00c78a <rt_system_scheduler_start+0x20> addi	a4,a5,-352 # 1c00eea0 <rt_thread_priority_table>
1c00c78e <rt_system_scheduler_start+0x24> slli	a5,ra,0x3
1c00c792 <rt_system_scheduler_start+0x28> add	a5,a5,a4
1c00c794 <rt_system_scheduler_start+0x2a> lw	a5,0(a5)
1c00c796 <rt_system_scheduler_start+0x2c> addi	ra,a5,-20
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:176
                              struct rt_thread,
                              tlist);

    rt_current_thread = to_thread;
1c00c79a <rt_system_scheduler_start+0x30> sw	ra,1108(gp) # 1c00ebbc <rt_current_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:179

    /* switch to new thread */
    rt_hw_context_switch_to((rt_uint32_t)&to_thread->sp);
1c00c79e <rt_system_scheduler_start+0x34> addi	a5,ra,28
1c00c7a2 <rt_system_scheduler_start+0x38> mv	a0,a5
1c00c7a4 <rt_system_scheduler_start+0x3a> jal	ra,1c00873c <rt_hw_context_switch_to>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:182

    /* never come back */
}
1c00c7a8 <rt_system_scheduler_start+0x3e> nop
1c00c7aa <rt_system_scheduler_start+0x40> lw	ra,12(sp)
1c00c7ac <rt_system_scheduler_start+0x42> lw	s0,8(sp)
1c00c7ae <rt_system_scheduler_start+0x44> addi	sp,sp,16
1c00c7b0 <rt_system_scheduler_start+0x46> ret
rt_schedule():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:195
/**
 * This function will perform one schedule. It will select one thread
 * with the highest priority level, then switch to it.
 */
void rt_schedule(void)
{
1c00c7b2 <rt_schedule> addi	sp,sp,-32
1c00c7b4 <rt_schedule+0x2> sw	ra,28(sp)
1c00c7b6 <rt_schedule+0x4> sw	s0,24(sp)
1c00c7b8 <rt_schedule+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:201
    rt_base_t level;
    struct rt_thread *to_thread;
    struct rt_thread *from_thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00c7ba <rt_schedule+0x8> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00c7be <rt_schedule+0xc> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:204

    /* check the scheduler is enabled or not */
    if (rt_scheduler_lock_nest == 0)
1c00c7c2 <rt_schedule+0x10> lh	a5,1104(gp) # 1c00ebb8 <rt_scheduler_lock_nest>
1c00c7c6 <rt_schedule+0x14> bnez	a5,1c00c85e <rt_schedule+0xac>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:209
    {
        register rt_ubase_t highest_ready_priority;

#if RT_THREAD_PRIORITY_MAX <= 32
        highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
1c00c7c8 <rt_schedule+0x16> lui	a5,0x1c00f
1c00c7cc <rt_schedule+0x1a> lw	a5,-284(a5) # 1c00eee4 <rt_thread_ready_priority_group>
1c00c7d0 <rt_schedule+0x1e> mv	a0,a5
1c00c7d2 <rt_schedule+0x20> jal	ra,1c00c3aa <__rt_ffs>
1c00c7d6 <rt_schedule+0x24> mv	a5,a0
1c00c7d8 <rt_schedule+0x26> addi	a5,a5,-1
1c00c7da <rt_schedule+0x28> mv	ra,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:218
        number = __rt_ffs(rt_thread_ready_priority_group) - 1;
        highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#endif

        /* get switch to thread */
        to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
1c00c7dc <rt_schedule+0x2a> lui	a5,0x1c00f
1c00c7e0 <rt_schedule+0x2e> addi	a4,a5,-352 # 1c00eea0 <rt_thread_priority_table>
1c00c7e4 <rt_schedule+0x32> slli	a5,ra,0x3
1c00c7e8 <rt_schedule+0x36> add	a5,a5,a4
1c00c7ea <rt_schedule+0x38> lw	a5,0(a5)
1c00c7ec <rt_schedule+0x3a> addi	a5,a5,-20
1c00c7ee <rt_schedule+0x3c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:223
                                  struct rt_thread,
                                  tlist);

        /* if the destination thread is not the same as current thread */
        if (to_thread != rt_current_thread)
1c00c7f2 <rt_schedule+0x40> lw	a5,1108(gp) # 1c00ebbc <rt_current_thread>
1c00c7f6 <rt_schedule+0x44> lw	a4,-24(s0)
1c00c7fa <rt_schedule+0x48> beq	a4,a5,1c00c85e <rt_schedule+0xac>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:225
        {
            rt_current_priority = (rt_uint8_t)highest_ready_priority;
1c00c7fe <rt_schedule+0x4c> andi	a4,ra,255
1c00c802 <rt_schedule+0x50> lui	a5,0x1c00f
1c00c806 <rt_schedule+0x54> sb	a4,-288(a5) # 1c00eee0 <rt_current_priority>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:226
            from_thread         = rt_current_thread;
1c00c80a <rt_schedule+0x58> lw	a5,1108(gp) # 1c00ebbc <rt_current_thread>
1c00c80e <rt_schedule+0x5c> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:227
            rt_current_thread   = to_thread;
1c00c812 <rt_schedule+0x60> lw	a4,-24(s0)
1c00c816 <rt_schedule+0x64> sw	a4,1108(gp) # 1c00ebbc <rt_current_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:244

#ifdef RT_USING_OVERFLOW_CHECK
            _rt_scheduler_stack_check(to_thread);
#endif

            if (rt_interrupt_nest == 0)
1c00c81a <rt_schedule+0x68> lui	a5,0x1c00f
1c00c81e <rt_schedule+0x6c> lbu	a5,-356(a5) # 1c00ee9c <rt_interrupt_nest>
1c00c822 <rt_schedule+0x70> andi	a5,a5,255
1c00c826 <rt_schedule+0x74> bnez	a5,1c00c848 <rt_schedule+0x96>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:246
            {
                rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
1c00c828 <rt_schedule+0x76> lw	a5,-28(s0)
1c00c82c <rt_schedule+0x7a> addi	a5,a5,28
1c00c82e <rt_schedule+0x7c> mv	a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:247
                                     (rt_ubase_t)&to_thread->sp);
1c00c830 <rt_schedule+0x7e> lw	a5,-24(s0)
1c00c834 <rt_schedule+0x82> addi	a5,a5,28
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:246
                rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
1c00c836 <rt_schedule+0x84> mv	a1,a5
1c00c838 <rt_schedule+0x86> mv	a0,a4
1c00c83a <rt_schedule+0x88> jal	ra,1c008748 <rt_hw_context_switch>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:250

                /* enable interrupt */
                rt_hw_interrupt_enable(level);
1c00c83e <rt_schedule+0x8c> lw	a0,-20(s0)
1c00c842 <rt_schedule+0x90> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:252

                return ;
1c00c846 <rt_schedule+0x94> j	1c00c866 <rt_schedule+0xb4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:258
            }
            else
            {
                RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("switch in interrupt\n"));

                rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
1c00c848 <rt_schedule+0x96> lw	a5,-28(s0)
1c00c84c <rt_schedule+0x9a> addi	a5,a5,28
1c00c84e <rt_schedule+0x9c> mv	a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:259
                                               (rt_ubase_t)&to_thread->sp);
1c00c850 <rt_schedule+0x9e> lw	a5,-24(s0)
1c00c854 <rt_schedule+0xa2> addi	a5,a5,28
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:258
                rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
1c00c856 <rt_schedule+0xa4> mv	a1,a5
1c00c858 <rt_schedule+0xa6> mv	a0,a4
1c00c85a <rt_schedule+0xa8> jal	ra,1c00d972 <rt_hw_context_switch_interrupt>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:265
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00c85e <rt_schedule+0xac> lw	a0,-20(s0)
1c00c862 <rt_schedule+0xb0> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:266
}
1c00c866 <rt_schedule+0xb4> lw	ra,28(sp)
1c00c868 <rt_schedule+0xb6> lw	s0,24(sp)
1c00c86a <rt_schedule+0xb8> addi	sp,sp,32
1c00c86c <rt_schedule+0xba> ret
rt_schedule_insert_thread():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:276
 *
 * @param thread the thread to be inserted
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_insert_thread(struct rt_thread *thread)
{
1c00c86e <rt_schedule_insert_thread> addi	sp,sp,-32
1c00c870 <rt_schedule_insert_thread+0x2> sw	ra,28(sp)
1c00c872 <rt_schedule_insert_thread+0x4> sw	s0,24(sp)
1c00c874 <rt_schedule_insert_thread+0x6> sw	s1,20(sp)
1c00c876 <rt_schedule_insert_thread+0x8> addi	s0,sp,32
1c00c878 <rt_schedule_insert_thread+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:282
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00c87c <rt_schedule_insert_thread+0xe> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00c880 <rt_schedule_insert_thread+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:285

    /* change stat */
    thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
1c00c882 <rt_schedule_insert_thread+0x14> lw	a5,-20(s0)
1c00c886 <rt_schedule_insert_thread+0x18> lbu	a5,52(a5)
1c00c88a <rt_schedule_insert_thread+0x1c> slli	a5,a5,0x18
1c00c88c <rt_schedule_insert_thread+0x1e> srai	a5,a5,0x18
1c00c88e <rt_schedule_insert_thread+0x20> andi	a5,a5,-16
1c00c890 <rt_schedule_insert_thread+0x22> slli	a5,a5,0x18
1c00c892 <rt_schedule_insert_thread+0x24> srai	a5,a5,0x18
1c00c894 <rt_schedule_insert_thread+0x26> ori	a5,a5,1
1c00c898 <rt_schedule_insert_thread+0x2a> slli	a5,a5,0x18
1c00c89a <rt_schedule_insert_thread+0x2c> srai	a5,a5,0x18
1c00c89c <rt_schedule_insert_thread+0x2e> andi	a4,a5,255
1c00c8a0 <rt_schedule_insert_thread+0x32> lw	a5,-20(s0)
1c00c8a4 <rt_schedule_insert_thread+0x36> sb	a4,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:288

    /* insert thread to ready list */
    rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
1c00c8a8 <rt_schedule_insert_thread+0x3a> lw	a5,-20(s0)
1c00c8ac <rt_schedule_insert_thread+0x3e> lbu	a5,53(a5)
1c00c8b0 <rt_schedule_insert_thread+0x42> slli	a4,a5,0x3
1c00c8b4 <rt_schedule_insert_thread+0x46> lui	a5,0x1c00f
1c00c8b8 <rt_schedule_insert_thread+0x4a> addi	a5,a5,-352 # 1c00eea0 <rt_thread_priority_table>
1c00c8bc <rt_schedule_insert_thread+0x4e> add	a4,a4,a5
1c00c8be <rt_schedule_insert_thread+0x50> lw	a5,-20(s0)
1c00c8c2 <rt_schedule_insert_thread+0x54> addi	a5,a5,20
1c00c8c4 <rt_schedule_insert_thread+0x56> mv	a1,a5
1c00c8c6 <rt_schedule_insert_thread+0x58> mv	a0,a4
1c00c8c8 <rt_schedule_insert_thread+0x5a> jal	ra,1c00c662 <rt_list_insert_before>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:308
#endif

#if RT_THREAD_PRIORITY_MAX > 32
    rt_thread_ready_table[thread->number] |= thread->high_mask;
#endif
    rt_thread_ready_priority_group |= thread->number_mask;
1c00c8cc <rt_schedule_insert_thread+0x5e> lw	a5,-20(s0)
1c00c8d0 <rt_schedule_insert_thread+0x62> lw	a4,56(a5)
1c00c8d2 <rt_schedule_insert_thread+0x64> lui	a5,0x1c00f
1c00c8d6 <rt_schedule_insert_thread+0x68> lw	a5,-284(a5) # 1c00eee4 <rt_thread_ready_priority_group>
1c00c8da <rt_schedule_insert_thread+0x6c> or	a4,a4,a5
1c00c8dc <rt_schedule_insert_thread+0x6e> lui	a5,0x1c00f
1c00c8e0 <rt_schedule_insert_thread+0x72> sw	a4,-284(a5) # 1c00eee4 <rt_thread_ready_priority_group>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:311

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00c8e4 <rt_schedule_insert_thread+0x76> mv	a0,s1
1c00c8e6 <rt_schedule_insert_thread+0x78> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:312
}
1c00c8ea <rt_schedule_insert_thread+0x7c> nop
1c00c8ec <rt_schedule_insert_thread+0x7e> lw	ra,28(sp)
1c00c8ee <rt_schedule_insert_thread+0x80> lw	s0,24(sp)
1c00c8f0 <rt_schedule_insert_thread+0x82> lw	s1,20(sp)
1c00c8f2 <rt_schedule_insert_thread+0x84> addi	sp,sp,32
1c00c8f4 <rt_schedule_insert_thread+0x86> ret
rt_schedule_remove_thread():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:322
 * @param thread the thread to be removed
 *
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_remove_thread(struct rt_thread *thread)
{
1c00c8f6 <rt_schedule_remove_thread> addi	sp,sp,-32
1c00c8f8 <rt_schedule_remove_thread+0x2> sw	ra,28(sp)
1c00c8fa <rt_schedule_remove_thread+0x4> sw	s0,24(sp)
1c00c8fc <rt_schedule_remove_thread+0x6> sw	s1,20(sp)
1c00c8fe <rt_schedule_remove_thread+0x8> addi	s0,sp,32
1c00c900 <rt_schedule_remove_thread+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:328
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00c904 <rt_schedule_remove_thread+0xe> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00c908 <rt_schedule_remove_thread+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:345
                  thread->number_mask,
                  thread->high_mask));
#endif

    /* remove thread from ready list */
    rt_list_remove(&(thread->tlist));
1c00c90a <rt_schedule_remove_thread+0x14> lw	a5,-20(s0)
1c00c90e <rt_schedule_remove_thread+0x18> addi	a5,a5,20
1c00c910 <rt_schedule_remove_thread+0x1a> mv	a0,a5
1c00c912 <rt_schedule_remove_thread+0x1c> jal	ra,1c00c6a4 <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:346
    if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
1c00c916 <rt_schedule_remove_thread+0x20> lw	a5,-20(s0)
1c00c91a <rt_schedule_remove_thread+0x24> lbu	a5,53(a5)
1c00c91e <rt_schedule_remove_thread+0x28> slli	a4,a5,0x3
1c00c922 <rt_schedule_remove_thread+0x2c> lui	a5,0x1c00f
1c00c926 <rt_schedule_remove_thread+0x30> addi	a5,a5,-352 # 1c00eea0 <rt_thread_priority_table>
1c00c92a <rt_schedule_remove_thread+0x34> add	a5,a5,a4
1c00c92c <rt_schedule_remove_thread+0x36> mv	a0,a5
1c00c92e <rt_schedule_remove_thread+0x38> jal	ra,1c00c6e8 <rt_list_isempty>
1c00c932 <rt_schedule_remove_thread+0x3c> mv	a5,a0
1c00c934 <rt_schedule_remove_thread+0x3e> beqz	a5,1c00c952 <rt_schedule_remove_thread+0x5c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:355
        if (rt_thread_ready_table[thread->number] == 0)
        {
            rt_thread_ready_priority_group &= ~thread->number_mask;
        }
#else
        rt_thread_ready_priority_group &= ~thread->number_mask;
1c00c936 <rt_schedule_remove_thread+0x40> lw	a5,-20(s0)
1c00c93a <rt_schedule_remove_thread+0x44> lw	a5,56(a5)
1c00c93c <rt_schedule_remove_thread+0x46> not	a4,a5
1c00c940 <rt_schedule_remove_thread+0x4a> lui	a5,0x1c00f
1c00c944 <rt_schedule_remove_thread+0x4e> lw	a5,-284(a5) # 1c00eee4 <rt_thread_ready_priority_group>
1c00c948 <rt_schedule_remove_thread+0x52> and	a4,a4,a5
1c00c94a <rt_schedule_remove_thread+0x54> lui	a5,0x1c00f
1c00c94e <rt_schedule_remove_thread+0x58> sw	a4,-284(a5) # 1c00eee4 <rt_thread_ready_priority_group>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:360
#endif
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00c952 <rt_schedule_remove_thread+0x5c> mv	a0,s1
1c00c954 <rt_schedule_remove_thread+0x5e> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:361
}
1c00c958 <rt_schedule_remove_thread+0x62> nop
1c00c95a <rt_schedule_remove_thread+0x64> lw	ra,28(sp)
1c00c95c <rt_schedule_remove_thread+0x66> lw	s0,24(sp)
1c00c95e <rt_schedule_remove_thread+0x68> lw	s1,20(sp)
1c00c960 <rt_schedule_remove_thread+0x6a> addi	sp,sp,32
1c00c962 <rt_schedule_remove_thread+0x6c> ret
rt_enter_critical():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:367

/**
 * This function will lock the thread scheduler.
 */
void rt_enter_critical(void)
{
1c00c964 <rt_enter_critical> addi	sp,sp,-16
1c00c966 <rt_enter_critical+0x2> sw	ra,12(sp)
1c00c968 <rt_enter_critical+0x4> sw	s0,8(sp)
1c00c96a <rt_enter_critical+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:371
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00c96c <rt_enter_critical+0x8> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00c970 <rt_enter_critical+0xc> mv	ra,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:377

    /*
     * the maximal number of nest is RT_UINT16_MAX, which is big
     * enough and does not check here
     */
    rt_scheduler_lock_nest ++;
1c00c972 <rt_enter_critical+0xe> lh	a5,1104(gp) # 1c00ebb8 <rt_scheduler_lock_nest>
1c00c976 <rt_enter_critical+0x12> slli	a5,a5,0x10
1c00c978 <rt_enter_critical+0x14> srli	a5,a5,0x10
1c00c97a <rt_enter_critical+0x16> addi	a5,a5,1
1c00c97c <rt_enter_critical+0x18> slli	a5,a5,0x10
1c00c97e <rt_enter_critical+0x1a> srli	a5,a5,0x10
1c00c980 <rt_enter_critical+0x1c> slli	a4,a5,0x10
1c00c984 <rt_enter_critical+0x20> srai	a4,a4,0x10
1c00c986 <rt_enter_critical+0x22> sh	a4,1104(gp) # 1c00ebb8 <rt_scheduler_lock_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:380

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00c98a <rt_enter_critical+0x26> mv	a0,ra
1c00c98c <rt_enter_critical+0x28> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:381
}
1c00c990 <rt_enter_critical+0x2c> nop
1c00c992 <rt_enter_critical+0x2e> lw	ra,12(sp)
1c00c994 <rt_enter_critical+0x30> lw	s0,8(sp)
1c00c996 <rt_enter_critical+0x32> addi	sp,sp,16
1c00c998 <rt_enter_critical+0x34> ret
rt_exit_critical():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:387

/**
 * This function will unlock the thread scheduler.
 */
void rt_exit_critical(void)
{
1c00c99a <rt_exit_critical> addi	sp,sp,-16
1c00c99c <rt_exit_critical+0x2> sw	ra,12(sp)
1c00c99e <rt_exit_critical+0x4> sw	s0,8(sp)
1c00c9a0 <rt_exit_critical+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:391
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00c9a2 <rt_exit_critical+0x8> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00c9a6 <rt_exit_critical+0xc> mv	ra,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:393

    rt_scheduler_lock_nest --;
1c00c9a8 <rt_exit_critical+0xe> lh	a5,1104(gp) # 1c00ebb8 <rt_scheduler_lock_nest>
1c00c9ac <rt_exit_critical+0x12> slli	a5,a5,0x10
1c00c9ae <rt_exit_critical+0x14> srli	a5,a5,0x10
1c00c9b0 <rt_exit_critical+0x16> addi	a5,a5,-1
1c00c9b2 <rt_exit_critical+0x18> slli	a5,a5,0x10
1c00c9b4 <rt_exit_critical+0x1a> srli	a5,a5,0x10
1c00c9b6 <rt_exit_critical+0x1c> slli	a4,a5,0x10
1c00c9ba <rt_exit_critical+0x20> srai	a4,a4,0x10
1c00c9bc <rt_exit_critical+0x22> sh	a4,1104(gp) # 1c00ebb8 <rt_scheduler_lock_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:394
    if (rt_scheduler_lock_nest <= 0)
1c00c9c0 <rt_exit_critical+0x26> lh	a5,1104(gp) # 1c00ebb8 <rt_scheduler_lock_nest>
1c00c9c4 <rt_exit_critical+0x2a> bgtz	a5,1c00c9de <rt_exit_critical+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:396
    {
        rt_scheduler_lock_nest = 0;
1c00c9c8 <rt_exit_critical+0x2e> sh	zero,1104(gp) # 1c00ebb8 <rt_scheduler_lock_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:398
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
1c00c9cc <rt_exit_critical+0x32> mv	a0,ra
1c00c9ce <rt_exit_critical+0x34> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:400

        if (rt_current_thread)
1c00c9d2 <rt_exit_critical+0x38> lw	a5,1108(gp) # 1c00ebbc <rt_current_thread>
1c00c9d6 <rt_exit_critical+0x3c> beqz	a5,1c00c9e4 <rt_exit_critical+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:403
        {
            /* if scheduler is started, do a schedule */
            rt_schedule();
1c00c9d8 <rt_exit_critical+0x3e> jal	ra,1c00c7b2 <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:411
    else
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    }
}
1c00c9dc <rt_exit_critical+0x42> j	1c00c9e4 <rt_exit_critical+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:409
        rt_hw_interrupt_enable(level);
1c00c9de <rt_exit_critical+0x44> mv	a0,ra
1c00c9e0 <rt_exit_critical+0x46> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:411
}
1c00c9e4 <rt_exit_critical+0x4a> nop
1c00c9e6 <rt_exit_critical+0x4c> lw	ra,12(sp)
1c00c9e8 <rt_exit_critical+0x4e> lw	s0,8(sp)
1c00c9ea <rt_exit_critical+0x50> addi	sp,sp,16
1c00c9ec <rt_exit_critical+0x52> ret
rt_list_init():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:48
{
1c00c9ee <rt_list_init> addi	sp,sp,-32
1c00c9f0 <rt_list_init+0x2> sw	s0,28(sp)
1c00c9f2 <rt_list_init+0x4> addi	s0,sp,32
1c00c9f4 <rt_list_init+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:49
    l->next = l->prev = l;
1c00c9f8 <rt_list_init+0xa> lw	a5,-20(s0)
1c00c9fc <rt_list_init+0xe> lw	a4,-20(s0)
1c00ca00 <rt_list_init+0x12> sw	a4,4(a5)
1c00ca02 <rt_list_init+0x14> lw	a5,-20(s0)
1c00ca06 <rt_list_init+0x18> lw	a4,4(a5)
1c00ca08 <rt_list_init+0x1a> lw	a5,-20(s0)
1c00ca0c <rt_list_init+0x1e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:50
}
1c00ca0e <rt_list_init+0x20> nop
1c00ca10 <rt_list_init+0x22> lw	s0,28(sp)
1c00ca12 <rt_list_init+0x24> addi	sp,sp,32
1c00ca14 <rt_list_init+0x26> ret
rt_list_insert_after():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:59
{
1c00ca16 <rt_list_insert_after> addi	sp,sp,-32
1c00ca18 <rt_list_insert_after+0x2> sw	s0,28(sp)
1c00ca1a <rt_list_insert_after+0x4> addi	s0,sp,32
1c00ca1c <rt_list_insert_after+0x6> sw	a0,-20(s0)
1c00ca20 <rt_list_insert_after+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:60
    l->next->prev = n;
1c00ca24 <rt_list_insert_after+0xe> lw	a5,-20(s0)
1c00ca28 <rt_list_insert_after+0x12> lw	a5,0(a5)
1c00ca2a <rt_list_insert_after+0x14> lw	a4,-24(s0)
1c00ca2e <rt_list_insert_after+0x18> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:61
    n->next = l->next;
1c00ca30 <rt_list_insert_after+0x1a> lw	a5,-20(s0)
1c00ca34 <rt_list_insert_after+0x1e> lw	a4,0(a5)
1c00ca36 <rt_list_insert_after+0x20> lw	a5,-24(s0)
1c00ca3a <rt_list_insert_after+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:63
    l->next = n;
1c00ca3c <rt_list_insert_after+0x26> lw	a5,-20(s0)
1c00ca40 <rt_list_insert_after+0x2a> lw	a4,-24(s0)
1c00ca44 <rt_list_insert_after+0x2e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:64
    n->prev = l;
1c00ca46 <rt_list_insert_after+0x30> lw	a5,-24(s0)
1c00ca4a <rt_list_insert_after+0x34> lw	a4,-20(s0)
1c00ca4e <rt_list_insert_after+0x38> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:65
}
1c00ca50 <rt_list_insert_after+0x3a> nop
1c00ca52 <rt_list_insert_after+0x3c> lw	s0,28(sp)
1c00ca54 <rt_list_insert_after+0x3e> addi	sp,sp,32
1c00ca56 <rt_list_insert_after+0x40> ret
rt_list_insert_before():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:74
{
1c00ca58 <rt_list_insert_before> addi	sp,sp,-32
1c00ca5a <rt_list_insert_before+0x2> sw	s0,28(sp)
1c00ca5c <rt_list_insert_before+0x4> addi	s0,sp,32
1c00ca5e <rt_list_insert_before+0x6> sw	a0,-20(s0)
1c00ca62 <rt_list_insert_before+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:75
    l->prev->next = n;
1c00ca66 <rt_list_insert_before+0xe> lw	a5,-20(s0)
1c00ca6a <rt_list_insert_before+0x12> lw	a5,4(a5)
1c00ca6c <rt_list_insert_before+0x14> lw	a4,-24(s0)
1c00ca70 <rt_list_insert_before+0x18> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:76
    n->prev = l->prev;
1c00ca72 <rt_list_insert_before+0x1a> lw	a5,-20(s0)
1c00ca76 <rt_list_insert_before+0x1e> lw	a4,4(a5)
1c00ca78 <rt_list_insert_before+0x20> lw	a5,-24(s0)
1c00ca7c <rt_list_insert_before+0x24> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:78
    l->prev = n;
1c00ca7e <rt_list_insert_before+0x26> lw	a5,-20(s0)
1c00ca82 <rt_list_insert_before+0x2a> lw	a4,-24(s0)
1c00ca86 <rt_list_insert_before+0x2e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:79
    n->next = l;
1c00ca88 <rt_list_insert_before+0x30> lw	a5,-24(s0)
1c00ca8c <rt_list_insert_before+0x34> lw	a4,-20(s0)
1c00ca90 <rt_list_insert_before+0x38> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:80
}
1c00ca92 <rt_list_insert_before+0x3a> nop
1c00ca94 <rt_list_insert_before+0x3c> lw	s0,28(sp)
1c00ca96 <rt_list_insert_before+0x3e> addi	sp,sp,32
1c00ca98 <rt_list_insert_before+0x40> ret
rt_list_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:87
{
1c00ca9a <rt_list_remove> addi	sp,sp,-32
1c00ca9c <rt_list_remove+0x2> sw	s0,28(sp)
1c00ca9e <rt_list_remove+0x4> addi	s0,sp,32
1c00caa0 <rt_list_remove+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:88
    n->next->prev = n->prev;
1c00caa4 <rt_list_remove+0xa> lw	a5,-20(s0)
1c00caa8 <rt_list_remove+0xe> lw	a5,0(a5)
1c00caaa <rt_list_remove+0x10> lw	a4,-20(s0)
1c00caae <rt_list_remove+0x14> lw	a4,4(a4)
1c00cab0 <rt_list_remove+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:89
    n->prev->next = n->next;
1c00cab2 <rt_list_remove+0x18> lw	a5,-20(s0)
1c00cab6 <rt_list_remove+0x1c> lw	a5,4(a5)
1c00cab8 <rt_list_remove+0x1e> lw	a4,-20(s0)
1c00cabc <rt_list_remove+0x22> lw	a4,0(a4)
1c00cabe <rt_list_remove+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:91
    n->next = n->prev = n;
1c00cac0 <rt_list_remove+0x26> lw	a5,-20(s0)
1c00cac4 <rt_list_remove+0x2a> lw	a4,-20(s0)
1c00cac8 <rt_list_remove+0x2e> sw	a4,4(a5)
1c00caca <rt_list_remove+0x30> lw	a5,-20(s0)
1c00cace <rt_list_remove+0x34> lw	a4,4(a5)
1c00cad0 <rt_list_remove+0x36> lw	a5,-20(s0)
1c00cad4 <rt_list_remove+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:92
}
1c00cad6 <rt_list_remove+0x3c> nop
1c00cad8 <rt_list_remove+0x3e> lw	s0,28(sp)
1c00cada <rt_list_remove+0x40> addi	sp,sp,32
1c00cadc <rt_list_remove+0x42> ret
_thread_cleanup_execute():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:85

#endif

/* must be invoke witch rt_hw_interrupt_disable */
static void _thread_cleanup_execute(rt_thread_t thread)
{
1c00cade <_thread_cleanup_execute> addi	sp,sp,-32
1c00cae0 <_thread_cleanup_execute+0x2> sw	ra,28(sp)
1c00cae2 <_thread_cleanup_execute+0x4> sw	s0,24(sp)
1c00cae4 <_thread_cleanup_execute+0x6> sw	s1,20(sp)
1c00cae6 <_thread_cleanup_execute+0x8> addi	s0,sp,32
1c00cae8 <_thread_cleanup_execute+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:88
    register rt_base_t level;

    level = rt_hw_interrupt_disable();
1c00caec <_thread_cleanup_execute+0xe> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00caf0 <_thread_cleanup_execute+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:91

    /* invoke thread cleanup */
    if (thread->cleanup != RT_NULL)
1c00caf2 <_thread_cleanup_execute+0x14> lw	a5,-20(s0)
1c00caf6 <_thread_cleanup_execute+0x18> lw	a5,112(a5)
1c00caf8 <_thread_cleanup_execute+0x1a> beqz	a5,1c00cb06 <_thread_cleanup_execute+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:92
        thread->cleanup(thread);
1c00cafa <_thread_cleanup_execute+0x1c> lw	a5,-20(s0)
1c00cafe <_thread_cleanup_execute+0x20> lw	a5,112(a5)
1c00cb00 <_thread_cleanup_execute+0x22> lw	a0,-20(s0)
1c00cb04 <_thread_cleanup_execute+0x26> jalr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:94

    rt_hw_interrupt_enable(level);
1c00cb06 <_thread_cleanup_execute+0x28> mv	a0,s1
1c00cb08 <_thread_cleanup_execute+0x2a> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:95
}
1c00cb0c <_thread_cleanup_execute+0x2e> nop
1c00cb0e <_thread_cleanup_execute+0x30> lw	ra,28(sp)
1c00cb10 <_thread_cleanup_execute+0x32> lw	s0,24(sp)
1c00cb12 <_thread_cleanup_execute+0x34> lw	s1,20(sp)
1c00cb14 <_thread_cleanup_execute+0x36> addi	sp,sp,32
1c00cb16 <_thread_cleanup_execute+0x38> ret
rt_thread_exit():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:98

void rt_thread_exit(void)
{
1c00cb18 <rt_thread_exit> addi	sp,sp,-32
1c00cb1a <rt_thread_exit+0x2> sw	ra,28(sp)
1c00cb1c <rt_thread_exit+0x4> sw	s0,24(sp)
1c00cb1e <rt_thread_exit+0x6> sw	s1,20(sp)
1c00cb20 <rt_thread_exit+0x8> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:103
    struct rt_thread *thread;
    register rt_base_t level;

    /* get current thread */
    thread = rt_current_thread;
1c00cb22 <rt_thread_exit+0xa> lw	a5,1108(gp) # 1c00ebbc <rt_current_thread>
1c00cb26 <rt_thread_exit+0xe> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:106

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00cb2a <rt_thread_exit+0x12> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00cb2e <rt_thread_exit+0x16> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:108

    _thread_cleanup_execute(thread);
1c00cb30 <rt_thread_exit+0x18> lw	a0,-20(s0)
1c00cb34 <rt_thread_exit+0x1c> jal	1c00cade <_thread_cleanup_execute>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:111

    /* remove from schedule */
    rt_schedule_remove_thread(thread);
1c00cb36 <rt_thread_exit+0x1e> lw	a0,-20(s0)
1c00cb3a <rt_thread_exit+0x22> jal	ra,1c00c8f6 <rt_schedule_remove_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:113
    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
1c00cb3e <rt_thread_exit+0x26> lw	a5,-20(s0)
1c00cb42 <rt_thread_exit+0x2a> li	a4,4
1c00cb44 <rt_thread_exit+0x2c> sb	a4,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:116

    /* remove it from timer list */
    rt_timer_detach(&thread->thread_timer);
1c00cb48 <rt_thread_exit+0x30> lw	a5,-20(s0)
1c00cb4c <rt_thread_exit+0x34> addi	a5,a5,68
1c00cb50 <rt_thread_exit+0x38> mv	a0,a5
1c00cb52 <rt_thread_exit+0x3a> jal	1c00d1ce <rt_timer_detach>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:118

    if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
1c00cb54 <rt_thread_exit+0x3c> lw	a0,-20(s0)
1c00cb58 <rt_thread_exit+0x40> jal	ra,1c00c612 <rt_object_is_systemobject>
1c00cb5c <rt_thread_exit+0x44> mv	a4,a0
1c00cb5e <rt_thread_exit+0x46> li	a5,1
1c00cb60 <rt_thread_exit+0x48> bne	a4,a5,1c00cb6e <rt_thread_exit+0x56>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:120
    {
        rt_object_detach((rt_object_t)thread);
1c00cb64 <rt_thread_exit+0x4c> lw	a0,-20(s0)
1c00cb68 <rt_thread_exit+0x50> jal	ra,1c00c5d8 <rt_object_detach>
1c00cb6c <rt_thread_exit+0x54> j	1c00cb82 <rt_thread_exit+0x6a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:125
    }
    else
    {
        /* insert to defunct thread list */
        rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
1c00cb6e <rt_thread_exit+0x56> lw	a5,-20(s0)
1c00cb72 <rt_thread_exit+0x5a> addi	a5,a5,20
1c00cb74 <rt_thread_exit+0x5c> mv	a1,a5
1c00cb76 <rt_thread_exit+0x5e> lui	a5,0x1c00f
1c00cb7a <rt_thread_exit+0x62> addi	a0,a5,-280 # 1c00eee8 <rt_thread_defunct>
1c00cb7e <rt_thread_exit+0x66> jal	ra,1c00ca16 <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:129
    }

    /* switch to next task */
    rt_schedule();
1c00cb82 <rt_thread_exit+0x6a> jal	ra,1c00c7b2 <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:132

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00cb86 <rt_thread_exit+0x6e> mv	a0,s1
1c00cb88 <rt_thread_exit+0x70> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:133
}
1c00cb8c <rt_thread_exit+0x74> nop
1c00cb8e <rt_thread_exit+0x76> lw	ra,28(sp)
1c00cb90 <rt_thread_exit+0x78> lw	s0,24(sp)
1c00cb92 <rt_thread_exit+0x7a> lw	s1,20(sp)
1c00cb94 <rt_thread_exit+0x7c> addi	sp,sp,32
1c00cb96 <rt_thread_exit+0x7e> ret
_rt_thread_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:143
                                void             *parameter,
                                void             *stack_start,
                                rt_uint32_t       stack_size,
                                rt_uint8_t        priority,
                                rt_uint32_t       tick)
{
1c00cb98 <_rt_thread_init> addi	sp,sp,-48
1c00cb9a <_rt_thread_init+0x2> sw	ra,44(sp)
1c00cb9c <_rt_thread_init+0x4> sw	s0,40(sp)
1c00cb9e <_rt_thread_init+0x6> addi	s0,sp,48
1c00cba0 <_rt_thread_init+0x8> sw	a0,-20(s0)
1c00cba4 <_rt_thread_init+0xc> sw	a1,-24(s0)
1c00cba8 <_rt_thread_init+0x10> sw	a2,-28(s0)
1c00cbac <_rt_thread_init+0x14> sw	a3,-32(s0)
1c00cbb0 <_rt_thread_init+0x18> sw	a4,-36(s0)
1c00cbb4 <_rt_thread_init+0x1c> sw	a5,-40(s0)
1c00cbb8 <_rt_thread_init+0x20> mv	a5,a6
1c00cbba <_rt_thread_init+0x22> sw	a7,-48(s0)
1c00cbbe <_rt_thread_init+0x26> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:145
    /* init thread list */
    rt_list_init(&(thread->tlist));
1c00cbc2 <_rt_thread_init+0x2a> lw	a5,-20(s0)
1c00cbc6 <_rt_thread_init+0x2e> addi	a5,a5,20
1c00cbc8 <_rt_thread_init+0x30> mv	a0,a5
1c00cbca <_rt_thread_init+0x32> jal	ra,1c00c9ee <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:147

    thread->entry = (void *)entry;
1c00cbce <_rt_thread_init+0x36> lw	a5,-20(s0)
1c00cbd2 <_rt_thread_init+0x3a> lw	a4,-28(s0)
1c00cbd6 <_rt_thread_init+0x3e> sw	a4,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:148
    thread->parameter = parameter;
1c00cbd8 <_rt_thread_init+0x40> lw	a5,-20(s0)
1c00cbdc <_rt_thread_init+0x44> lw	a4,-32(s0)
1c00cbe0 <_rt_thread_init+0x48> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:151

    /* stack init */
    thread->stack_addr = stack_start;
1c00cbe2 <_rt_thread_init+0x4a> lw	a5,-20(s0)
1c00cbe6 <_rt_thread_init+0x4e> lw	a4,-36(s0)
1c00cbea <_rt_thread_init+0x52> sw	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:152
    thread->stack_size = stack_size;
1c00cbec <_rt_thread_init+0x54> lw	a5,-20(s0)
1c00cbf0 <_rt_thread_init+0x58> lw	a4,-40(s0)
1c00cbf4 <_rt_thread_init+0x5c> sw	a4,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:155

    /* init thread stack */
    rt_memset(thread->stack_addr, '#', thread->stack_size);
1c00cbf6 <_rt_thread_init+0x5e> lw	a5,-20(s0)
1c00cbfa <_rt_thread_init+0x62> lw	a4,40(a5)
1c00cbfc <_rt_thread_init+0x64> lw	a5,-20(s0)
1c00cc00 <_rt_thread_init+0x68> lw	a5,44(a5)
1c00cc02 <_rt_thread_init+0x6a> mv	a2,a5
1c00cc04 <_rt_thread_init+0x6c> li	a1,35
1c00cc08 <_rt_thread_init+0x70> mv	a0,a4
1c00cc0a <_rt_thread_init+0x72> jal	ra,1c00b7c2 <rt_memset>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:161
#ifdef ARCH_CPU_STACK_GROWS_UPWARD
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
                                          (void *)((char *)thread->stack_addr),
                                          (void *)rt_thread_exit);
#else
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
1c00cc0e <_rt_thread_init+0x76> lw	a5,-20(s0)
1c00cc12 <_rt_thread_init+0x7a> lw	a0,32(a5)
1c00cc14 <_rt_thread_init+0x7c> lw	a5,-20(s0)
1c00cc18 <_rt_thread_init+0x80> lw	a1,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:162
                                          (rt_uint8_t *)((char *)thread->stack_addr + thread->stack_size - sizeof(rt_ubase_t)),
1c00cc1a <_rt_thread_init+0x82> lw	a5,-20(s0)
1c00cc1e <_rt_thread_init+0x86> lw	a4,40(a5)
1c00cc20 <_rt_thread_init+0x88> lw	a5,-20(s0)
1c00cc24 <_rt_thread_init+0x8c> lw	a5,44(a5)
1c00cc26 <_rt_thread_init+0x8e> addi	a5,a5,-4
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:161
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
1c00cc28 <_rt_thread_init+0x90> add	a4,a4,a5
1c00cc2a <_rt_thread_init+0x92> lui	a5,0x1c00d
1c00cc2e <_rt_thread_init+0x96> addi	a3,a5,-1256 # 1c00cb18 <rt_thread_exit>
1c00cc32 <_rt_thread_init+0x9a> mv	a2,a4
1c00cc34 <_rt_thread_init+0x9c> jal	ra,1c00d8ce <rt_hw_stack_init>
1c00cc38 <_rt_thread_init+0xa0> mv	a4,a0
1c00cc3a <_rt_thread_init+0xa2> lw	a5,-20(s0)
1c00cc3e <_rt_thread_init+0xa6> sw	a4,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:168
                                          (void *)rt_thread_exit);
#endif

    /* priority init */
    RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
    thread->init_priority    = priority;
1c00cc40 <_rt_thread_init+0xa8> lw	a5,-20(s0)
1c00cc44 <_rt_thread_init+0xac> lbu	a4,-41(s0)
1c00cc48 <_rt_thread_init+0xb0> sb	a4,54(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:169
    thread->current_priority = priority;
1c00cc4c <_rt_thread_init+0xb4> lw	a5,-20(s0)
1c00cc50 <_rt_thread_init+0xb8> lbu	a4,-41(s0)
1c00cc54 <_rt_thread_init+0xbc> sb	a4,53(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:171

    thread->number_mask = 0;
1c00cc58 <_rt_thread_init+0xc0> lw	a5,-20(s0)
1c00cc5c <_rt_thread_init+0xc4> sw	zero,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:178
    thread->number = 0;
    thread->high_mask = 0;
#endif

    /* tick init */
    thread->init_tick      = tick;
1c00cc60 <_rt_thread_init+0xc8> lw	a5,-20(s0)
1c00cc64 <_rt_thread_init+0xcc> lw	a4,-48(s0)
1c00cc68 <_rt_thread_init+0xd0> sw	a4,60(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:179
    thread->remaining_tick = tick;
1c00cc6a <_rt_thread_init+0xd2> lw	a5,-20(s0)
1c00cc6e <_rt_thread_init+0xd6> lw	a4,-48(s0)
1c00cc72 <_rt_thread_init+0xda> sw	a4,64(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:182

    /* error and flags */
    thread->error = RT_EOK;
1c00cc74 <_rt_thread_init+0xdc> lw	a5,-20(s0)
1c00cc78 <_rt_thread_init+0xe0> sw	zero,48(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:183
    thread->stat  = RT_THREAD_INIT;
1c00cc7c <_rt_thread_init+0xe4> lw	a5,-20(s0)
1c00cc80 <_rt_thread_init+0xe8> sb	zero,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:186

    /* initialize cleanup function and user data */
    thread->cleanup   = 0;
1c00cc84 <_rt_thread_init+0xec> lw	a5,-20(s0)
1c00cc88 <_rt_thread_init+0xf0> sw	zero,112(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:187
    thread->user_data = 0;
1c00cc8c <_rt_thread_init+0xf4> lw	a5,-20(s0)
1c00cc90 <_rt_thread_init+0xf8> sw	zero,116(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:190

    /* initialize thread timer */
    rt_timer_init(&(thread->thread_timer),
1c00cc94 <_rt_thread_init+0xfc> lw	a5,-20(s0)
1c00cc98 <_rt_thread_init+0x100> addi	a0,a5,68
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:191
                  thread->name,
1c00cc9c <_rt_thread_init+0x104> lw	a1,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:190
    rt_timer_init(&(thread->thread_timer),
1c00cca0 <_rt_thread_init+0x108> li	a5,0
1c00cca2 <_rt_thread_init+0x10a> li	a4,0
1c00cca4 <_rt_thread_init+0x10c> lw	a3,-20(s0)
1c00cca8 <_rt_thread_init+0x110> lui	a2,0x1c00d
1c00ccac <_rt_thread_init+0x114> addi	a2,a2,-122 # 1c00cf86 <rt_thread_timeout>
1c00ccb0 <_rt_thread_init+0x118> jal	1c00d17c <rt_timer_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:199
                  0,
                  RT_TIMER_FLAG_ONE_SHOT);

    RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));

    return RT_EOK;
1c00ccb2 <_rt_thread_init+0x11a> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:200
}
1c00ccb4 <_rt_thread_init+0x11c> mv	a0,a5
1c00ccb6 <_rt_thread_init+0x11e> lw	ra,44(sp)
1c00ccb8 <_rt_thread_init+0x120> lw	s0,40(sp)
1c00ccba <_rt_thread_init+0x122> addi	sp,sp,48
1c00ccbc <_rt_thread_init+0x124> ret
rt_thread_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:231
                        void             *parameter,
                        void             *stack_start,
                        rt_uint32_t       stack_size,
                        rt_uint8_t        priority,
                        rt_uint32_t       tick)
{
1c00ccbe <rt_thread_init> addi	sp,sp,-48
1c00ccc0 <rt_thread_init+0x2> sw	ra,44(sp)
1c00ccc2 <rt_thread_init+0x4> sw	s0,40(sp)
1c00ccc4 <rt_thread_init+0x6> addi	s0,sp,48
1c00ccc6 <rt_thread_init+0x8> sw	a0,-20(s0)
1c00ccca <rt_thread_init+0xc> sw	a1,-24(s0)
1c00ccce <rt_thread_init+0x10> sw	a2,-28(s0)
1c00ccd2 <rt_thread_init+0x14> sw	a3,-32(s0)
1c00ccd6 <rt_thread_init+0x18> sw	a4,-36(s0)
1c00ccda <rt_thread_init+0x1c> sw	a5,-40(s0)
1c00ccde <rt_thread_init+0x20> mv	a5,a6
1c00cce0 <rt_thread_init+0x22> sw	a7,-48(s0)
1c00cce4 <rt_thread_init+0x26> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:237
    /* thread check */
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(stack_start != RT_NULL);

    /* initialize thread object */
    rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
1c00cce8 <rt_thread_init+0x2a> lw	a2,-24(s0)
1c00ccec <rt_thread_init+0x2e> li	a1,1
1c00ccee <rt_thread_init+0x30> lw	a0,-20(s0)
1c00ccf2 <rt_thread_init+0x34> jal	ra,1c00c52c <rt_object_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:239

    return _rt_thread_init(thread,
1c00ccf6 <rt_thread_init+0x38> lbu	a5,-41(s0)
1c00ccfa <rt_thread_init+0x3c> lw	a7,-48(s0)
1c00ccfe <rt_thread_init+0x40> mv	a6,a5
1c00cd00 <rt_thread_init+0x42> lw	a5,-40(s0)
1c00cd04 <rt_thread_init+0x46> lw	a4,-36(s0)
1c00cd08 <rt_thread_init+0x4a> lw	a3,-32(s0)
1c00cd0c <rt_thread_init+0x4e> lw	a2,-28(s0)
1c00cd10 <rt_thread_init+0x52> lw	a1,-24(s0)
1c00cd14 <rt_thread_init+0x56> lw	a0,-20(s0)
1c00cd18 <rt_thread_init+0x5a> jal	ra,1c00cb98 <_rt_thread_init>
1c00cd1c <rt_thread_init+0x5e> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:247
                           parameter,
                           stack_start,
                           stack_size,
                           priority,
                           tick);
}
1c00cd1e <rt_thread_init+0x60> mv	a0,a5
1c00cd20 <rt_thread_init+0x62> lw	ra,44(sp)
1c00cd22 <rt_thread_init+0x64> lw	s0,40(sp)
1c00cd24 <rt_thread_init+0x66> addi	sp,sp,48
1c00cd26 <rt_thread_init+0x68> ret
rt_thread_self():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:255
 * This function will return self thread object
 *
 * @return the self thread object
 */
rt_thread_t rt_thread_self(void)
{
1c00cd28 <rt_thread_self> addi	sp,sp,-16
1c00cd2a <rt_thread_self+0x2> sw	s0,12(sp)
1c00cd2c <rt_thread_self+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:256
    return rt_current_thread;
1c00cd2e <rt_thread_self+0x6> lw	a5,1108(gp) # 1c00ebbc <rt_current_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:257
}
1c00cd32 <rt_thread_self+0xa> mv	a0,a5
1c00cd34 <rt_thread_self+0xc> lw	s0,12(sp)
1c00cd36 <rt_thread_self+0xe> addi	sp,sp,16
1c00cd38 <rt_thread_self+0x10> ret
rt_thread_startup():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:267
 * @param thread the thread to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_thread_startup(rt_thread_t thread)
{
1c00cd3a <rt_thread_startup> addi	sp,sp,-32
1c00cd3c <rt_thread_startup+0x2> sw	ra,28(sp)
1c00cd3e <rt_thread_startup+0x4> sw	s0,24(sp)
1c00cd40 <rt_thread_startup+0x6> addi	s0,sp,32
1c00cd42 <rt_thread_startup+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:274
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    /* set current priority to initialize priority */
    thread->current_priority = thread->init_priority;
1c00cd46 <rt_thread_startup+0xc> lw	a5,-20(s0)
1c00cd4a <rt_thread_startup+0x10> lbu	a4,54(a5)
1c00cd4e <rt_thread_startup+0x14> lw	a5,-20(s0)
1c00cd52 <rt_thread_startup+0x18> sb	a4,53(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:282
#if RT_THREAD_PRIORITY_MAX > 32
    thread->number      = thread->current_priority >> 3;            /* 5bit */
    thread->number_mask = 1L << thread->number;
    thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
#else
    thread->number_mask = 1L << thread->current_priority;
1c00cd56 <rt_thread_startup+0x1c> lw	a5,-20(s0)
1c00cd5a <rt_thread_startup+0x20> lbu	a5,53(a5)
1c00cd5e <rt_thread_startup+0x24> mv	a4,a5
1c00cd60 <rt_thread_startup+0x26> li	a5,1
1c00cd62 <rt_thread_startup+0x28> sll	a5,a5,a4
1c00cd66 <rt_thread_startup+0x2c> mv	a4,a5
1c00cd68 <rt_thread_startup+0x2e> lw	a5,-20(s0)
1c00cd6c <rt_thread_startup+0x32> sw	a4,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:288
#endif

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("startup a thread:%s with priority:%d\n",
                                   thread->name, thread->init_priority));
    /* change thread stat */
    thread->stat = RT_THREAD_SUSPEND;
1c00cd6e <rt_thread_startup+0x34> lw	a5,-20(s0)
1c00cd72 <rt_thread_startup+0x38> li	a4,2
1c00cd74 <rt_thread_startup+0x3a> sb	a4,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:290
    /* then resume it */
    rt_thread_resume(thread);
1c00cd78 <rt_thread_startup+0x3e> lw	a0,-20(s0)
1c00cd7c <rt_thread_startup+0x42> jal	1c00cf28 <rt_thread_resume>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:291
    if (rt_thread_self() != RT_NULL)
1c00cd7e <rt_thread_startup+0x44> jal	ra,1c00cd28 <rt_thread_self>
1c00cd82 <rt_thread_startup+0x48> mv	a5,a0
1c00cd84 <rt_thread_startup+0x4a> beqz	a5,1c00cd8a <rt_thread_startup+0x50>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:294
    {
        /* do a scheduling */
        rt_schedule();
1c00cd86 <rt_thread_startup+0x4c> jal	ra,1c00c7b2 <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:297
    }

    return RT_EOK;
1c00cd8a <rt_thread_startup+0x50> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:298
}
1c00cd8c <rt_thread_startup+0x52> mv	a0,a5
1c00cd8e <rt_thread_startup+0x54> lw	ra,28(sp)
1c00cd90 <rt_thread_startup+0x56> lw	s0,24(sp)
1c00cd92 <rt_thread_startup+0x58> addi	sp,sp,32
1c00cd94 <rt_thread_startup+0x5a> ret
rt_thread_yield():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:456
 * is still in READY state.
 *
 * @return RT_EOK
 */
rt_err_t rt_thread_yield(void)
{
1c00cd96 <rt_thread_yield> addi	sp,sp,-32
1c00cd98 <rt_thread_yield+0x2> sw	ra,28(sp)
1c00cd9a <rt_thread_yield+0x4> sw	s0,24(sp)
1c00cd9c <rt_thread_yield+0x6> sw	s1,20(sp)
1c00cd9e <rt_thread_yield+0x8> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:461
    register rt_base_t level;
    struct rt_thread *thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00cda0 <rt_thread_yield+0xa> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00cda4 <rt_thread_yield+0xe> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:464

    /* set to current thread */
    thread = rt_current_thread;
1c00cda6 <rt_thread_yield+0x10> lw	a5,1108(gp) # 1c00ebbc <rt_current_thread>
1c00cdaa <rt_thread_yield+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:467

    /* if the thread stat is READY and on ready queue list */
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
1c00cdae <rt_thread_yield+0x18> lw	a5,-20(s0)
1c00cdb2 <rt_thread_yield+0x1c> lbu	a5,52(a5)
1c00cdb6 <rt_thread_yield+0x20> andi	a4,a5,15
1c00cdba <rt_thread_yield+0x24> li	a5,1
1c00cdbc <rt_thread_yield+0x26> bne	a4,a5,1c00ce0e <rt_thread_yield+0x78>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:468 (discriminator 1)
        thread->tlist.next != thread->tlist.prev)
1c00cdc0 <rt_thread_yield+0x2a> lw	a5,-20(s0)
1c00cdc4 <rt_thread_yield+0x2e> lw	a4,20(a5)
1c00cdc6 <rt_thread_yield+0x30> lw	a5,-20(s0)
1c00cdca <rt_thread_yield+0x34> lw	a5,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:467 (discriminator 1)
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
1c00cdcc <rt_thread_yield+0x36> beq	a4,a5,1c00ce0e <rt_thread_yield+0x78>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:471
    {
        /* remove thread from thread list */
        rt_list_remove(&(thread->tlist));
1c00cdd0 <rt_thread_yield+0x3a> lw	a5,-20(s0)
1c00cdd4 <rt_thread_yield+0x3e> addi	a5,a5,20
1c00cdd6 <rt_thread_yield+0x40> mv	a0,a5
1c00cdd8 <rt_thread_yield+0x42> jal	ra,1c00ca9a <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:474

        /* put thread to end of ready queue */
        rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
1c00cddc <rt_thread_yield+0x46> lw	a5,-20(s0)
1c00cde0 <rt_thread_yield+0x4a> lbu	a5,53(a5)
1c00cde4 <rt_thread_yield+0x4e> slli	a4,a5,0x3
1c00cde8 <rt_thread_yield+0x52> lui	a5,0x1c00f
1c00cdec <rt_thread_yield+0x56> addi	a5,a5,-352 # 1c00eea0 <rt_thread_priority_table>
1c00cdf0 <rt_thread_yield+0x5a> add	a4,a4,a5
1c00cdf2 <rt_thread_yield+0x5c> lw	a5,-20(s0)
1c00cdf6 <rt_thread_yield+0x60> addi	a5,a5,20
1c00cdf8 <rt_thread_yield+0x62> mv	a1,a5
1c00cdfa <rt_thread_yield+0x64> mv	a0,a4
1c00cdfc <rt_thread_yield+0x66> jal	ra,1c00ca58 <rt_list_insert_before>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:478
                              &(thread->tlist));

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
1c00ce00 <rt_thread_yield+0x6a> mv	a0,s1
1c00ce02 <rt_thread_yield+0x6c> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:480

        rt_schedule();
1c00ce06 <rt_thread_yield+0x70> jal	ra,1c00c7b2 <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:482

        return RT_EOK;
1c00ce0a <rt_thread_yield+0x74> li	a5,0
1c00ce0c <rt_thread_yield+0x76> j	1c00ce16 <rt_thread_yield+0x80>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:486
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00ce0e <rt_thread_yield+0x78> mv	a0,s1
1c00ce10 <rt_thread_yield+0x7a> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:488

    return RT_EOK;
1c00ce14 <rt_thread_yield+0x7e> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:489
}
1c00ce16 <rt_thread_yield+0x80> mv	a0,a5
1c00ce18 <rt_thread_yield+0x82> lw	ra,28(sp)
1c00ce1a <rt_thread_yield+0x84> lw	s0,24(sp)
1c00ce1c <rt_thread_yield+0x86> lw	s1,20(sp)
1c00ce1e <rt_thread_yield+0x88> addi	sp,sp,32
1c00ce20 <rt_thread_yield+0x8a> ret
rt_thread_sleep():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:499
 * @param tick the sleep ticks
 *
 * @return RT_EOK
 */
rt_err_t rt_thread_sleep(rt_tick_t tick)
{
1c00ce22 <rt_thread_sleep> addi	sp,sp,-48
1c00ce24 <rt_thread_sleep+0x2> sw	ra,44(sp)
1c00ce26 <rt_thread_sleep+0x4> sw	s0,40(sp)
1c00ce28 <rt_thread_sleep+0x6> sw	s1,36(sp)
1c00ce2a <rt_thread_sleep+0x8> addi	s0,sp,48
1c00ce2c <rt_thread_sleep+0xa> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:504
    register rt_base_t temp;
    struct rt_thread *thread;

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00ce30 <rt_thread_sleep+0xe> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00ce34 <rt_thread_sleep+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:506
    /* set to current thread */
    thread = rt_current_thread;
1c00ce36 <rt_thread_sleep+0x14> lw	a5,1108(gp) # 1c00ebbc <rt_current_thread>
1c00ce3a <rt_thread_sleep+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:511
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    /* suspend thread */
    rt_thread_suspend(thread);
1c00ce3e <rt_thread_sleep+0x1c> lw	a0,-20(s0)
1c00ce42 <rt_thread_sleep+0x20> jal	1c00ceb0 <rt_thread_suspend>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:514

    /* reset the timeout of thread timer and start it */
    rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
1c00ce44 <rt_thread_sleep+0x22> lw	a5,-20(s0)
1c00ce48 <rt_thread_sleep+0x26> addi	a5,a5,68
1c00ce4c <rt_thread_sleep+0x2a> addi	a4,s0,-36
1c00ce50 <rt_thread_sleep+0x2e> mv	a2,a4
1c00ce52 <rt_thread_sleep+0x30> li	a1,0
1c00ce54 <rt_thread_sleep+0x32> mv	a0,a5
1c00ce56 <rt_thread_sleep+0x34> jal	1c00d462 <rt_timer_control>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:515
    rt_timer_start(&(thread->thread_timer));
1c00ce58 <rt_thread_sleep+0x36> lw	a5,-20(s0)
1c00ce5c <rt_thread_sleep+0x3a> addi	a5,a5,68
1c00ce60 <rt_thread_sleep+0x3e> mv	a0,a5
1c00ce62 <rt_thread_sleep+0x40> jal	1c00d21c <rt_timer_start>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:518

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00ce64 <rt_thread_sleep+0x42> mv	a0,s1
1c00ce66 <rt_thread_sleep+0x44> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:520

    rt_schedule();
1c00ce6a <rt_thread_sleep+0x48> jal	ra,1c00c7b2 <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:523

    /* clear error number of this thread to RT_EOK */
    if (thread->error == -RT_ETIMEOUT)
1c00ce6e <rt_thread_sleep+0x4c> lw	a5,-20(s0)
1c00ce72 <rt_thread_sleep+0x50> lw	a4,48(a5)
1c00ce74 <rt_thread_sleep+0x52> li	a5,-2
1c00ce76 <rt_thread_sleep+0x54> bne	a4,a5,1c00ce82 <rt_thread_sleep+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:524
        thread->error = RT_EOK;
1c00ce7a <rt_thread_sleep+0x58> lw	a5,-20(s0)
1c00ce7e <rt_thread_sleep+0x5c> sw	zero,48(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:526

    return RT_EOK;
1c00ce82 <rt_thread_sleep+0x60> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:527
}
1c00ce84 <rt_thread_sleep+0x62> mv	a0,a5
1c00ce86 <rt_thread_sleep+0x64> lw	ra,44(sp)
1c00ce88 <rt_thread_sleep+0x66> lw	s0,40(sp)
1c00ce8a <rt_thread_sleep+0x68> lw	s1,36(sp)
1c00ce8c <rt_thread_sleep+0x6a> addi	sp,sp,48
1c00ce8e <rt_thread_sleep+0x6c> ret
rt_thread_delay():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:537
 * @param tick the delay ticks
 *
 * @return RT_EOK
 */
rt_err_t rt_thread_delay(rt_tick_t tick)
{
1c00ce90 <rt_thread_delay> addi	sp,sp,-32
1c00ce92 <rt_thread_delay+0x2> sw	ra,28(sp)
1c00ce94 <rt_thread_delay+0x4> sw	s0,24(sp)
1c00ce96 <rt_thread_delay+0x6> addi	s0,sp,32
1c00ce98 <rt_thread_delay+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:538
    return rt_thread_sleep(tick);
1c00ce9c <rt_thread_delay+0xc> lw	a0,-20(s0)
1c00cea0 <rt_thread_delay+0x10> jal	ra,1c00ce22 <rt_thread_sleep>
1c00cea4 <rt_thread_delay+0x14> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:539
}
1c00cea6 <rt_thread_delay+0x16> mv	a0,a5
1c00cea8 <rt_thread_delay+0x18> lw	ra,28(sp)
1c00ceaa <rt_thread_delay+0x1a> lw	s0,24(sp)
1c00ceac <rt_thread_delay+0x1c> addi	sp,sp,32
1c00ceae <rt_thread_delay+0x1e> ret
rt_thread_suspend():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:713
 *
 * @note if suspend self thread, after this function call, the
 * rt_schedule() must be invoked.
 */
rt_err_t rt_thread_suspend(rt_thread_t thread)
{
1c00ceb0 <rt_thread_suspend> addi	sp,sp,-32
1c00ceb2 <rt_thread_suspend+0x2> sw	ra,28(sp)
1c00ceb4 <rt_thread_suspend+0x4> sw	s0,24(sp)
1c00ceb6 <rt_thread_suspend+0x6> sw	s1,20(sp)
1c00ceb8 <rt_thread_suspend+0x8> addi	s0,sp,32
1c00ceba <rt_thread_suspend+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:722
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend:  %s\n", thread->name));

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_READY)
1c00cebe <rt_thread_suspend+0xe> lw	a5,-20(s0)
1c00cec2 <rt_thread_suspend+0x12> lbu	a5,52(a5)
1c00cec6 <rt_thread_suspend+0x16> andi	a4,a5,15
1c00ceca <rt_thread_suspend+0x1a> li	a5,1
1c00cecc <rt_thread_suspend+0x1c> beq	a4,a5,1c00ced4 <rt_thread_suspend+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:727
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend: thread disorder, 0x%2x\n",
                                       thread->stat));

        return -RT_ERROR;
1c00ced0 <rt_thread_suspend+0x20> li	a5,-1
1c00ced2 <rt_thread_suspend+0x22> j	1c00cf1c <rt_thread_suspend+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:731
    }

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00ced4 <rt_thread_suspend+0x24> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00ced8 <rt_thread_suspend+0x28> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:734

    /* change thread stat */
    rt_schedule_remove_thread(thread);
1c00ceda <rt_thread_suspend+0x2a> lw	a0,-20(s0)
1c00cede <rt_thread_suspend+0x2e> jal	ra,1c00c8f6 <rt_schedule_remove_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:735
    thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
1c00cee2 <rt_thread_suspend+0x32> lw	a5,-20(s0)
1c00cee6 <rt_thread_suspend+0x36> lbu	a5,52(a5)
1c00ceea <rt_thread_suspend+0x3a> slli	a5,a5,0x18
1c00ceec <rt_thread_suspend+0x3c> srai	a5,a5,0x18
1c00ceee <rt_thread_suspend+0x3e> andi	a5,a5,-16
1c00cef0 <rt_thread_suspend+0x40> slli	a5,a5,0x18
1c00cef2 <rt_thread_suspend+0x42> srai	a5,a5,0x18
1c00cef4 <rt_thread_suspend+0x44> ori	a5,a5,2
1c00cef8 <rt_thread_suspend+0x48> slli	a5,a5,0x18
1c00cefa <rt_thread_suspend+0x4a> srai	a5,a5,0x18
1c00cefc <rt_thread_suspend+0x4c> andi	a4,a5,255
1c00cf00 <rt_thread_suspend+0x50> lw	a5,-20(s0)
1c00cf04 <rt_thread_suspend+0x54> sb	a4,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:738

    /* stop thread timer anyway */
    rt_timer_stop(&(thread->thread_timer));
1c00cf08 <rt_thread_suspend+0x58> lw	a5,-20(s0)
1c00cf0c <rt_thread_suspend+0x5c> addi	a5,a5,68
1c00cf10 <rt_thread_suspend+0x60> mv	a0,a5
1c00cf12 <rt_thread_suspend+0x62> jal	1c00d40c <rt_timer_stop>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:741

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00cf14 <rt_thread_suspend+0x64> mv	a0,s1
1c00cf16 <rt_thread_suspend+0x66> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:744

    RT_OBJECT_HOOK_CALL(rt_thread_suspend_hook, (thread));
    return RT_EOK;
1c00cf1a <rt_thread_suspend+0x6a> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:745
}
1c00cf1c <rt_thread_suspend+0x6c> mv	a0,a5
1c00cf1e <rt_thread_suspend+0x6e> lw	ra,28(sp)
1c00cf20 <rt_thread_suspend+0x70> lw	s0,24(sp)
1c00cf22 <rt_thread_suspend+0x72> lw	s1,20(sp)
1c00cf24 <rt_thread_suspend+0x74> addi	sp,sp,32
1c00cf26 <rt_thread_suspend+0x76> ret
rt_thread_resume():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:755
 * @param thread the thread to be resumed
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_thread_resume(rt_thread_t thread)
{
1c00cf28 <rt_thread_resume> addi	sp,sp,-32
1c00cf2a <rt_thread_resume+0x2> sw	ra,28(sp)
1c00cf2c <rt_thread_resume+0x4> sw	s0,24(sp)
1c00cf2e <rt_thread_resume+0x6> sw	s1,20(sp)
1c00cf30 <rt_thread_resume+0x8> addi	s0,sp,32
1c00cf32 <rt_thread_resume+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:764
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume:  %s\n", thread->name));

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
1c00cf36 <rt_thread_resume+0xe> lw	a5,-20(s0)
1c00cf3a <rt_thread_resume+0x12> lbu	a5,52(a5)
1c00cf3e <rt_thread_resume+0x16> andi	a4,a5,15
1c00cf42 <rt_thread_resume+0x1a> li	a5,2
1c00cf44 <rt_thread_resume+0x1c> beq	a4,a5,1c00cf4c <rt_thread_resume+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:769
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume: thread disorder, %d\n",
                                       thread->stat));

        return -RT_ERROR;
1c00cf48 <rt_thread_resume+0x20> li	a5,-1
1c00cf4a <rt_thread_resume+0x22> j	1c00cf7a <rt_thread_resume+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:773
    }

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00cf4c <rt_thread_resume+0x24> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00cf50 <rt_thread_resume+0x28> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:776

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
1c00cf52 <rt_thread_resume+0x2a> lw	a5,-20(s0)
1c00cf56 <rt_thread_resume+0x2e> addi	a5,a5,20
1c00cf58 <rt_thread_resume+0x30> mv	a0,a5
1c00cf5a <rt_thread_resume+0x32> jal	ra,1c00ca9a <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:778

    rt_timer_stop(&thread->thread_timer);
1c00cf5e <rt_thread_resume+0x36> lw	a5,-20(s0)
1c00cf62 <rt_thread_resume+0x3a> addi	a5,a5,68
1c00cf66 <rt_thread_resume+0x3e> mv	a0,a5
1c00cf68 <rt_thread_resume+0x40> jal	1c00d40c <rt_timer_stop>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:781

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00cf6a <rt_thread_resume+0x42> mv	a0,s1
1c00cf6c <rt_thread_resume+0x44> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:784

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
1c00cf70 <rt_thread_resume+0x48> lw	a0,-20(s0)
1c00cf74 <rt_thread_resume+0x4c> jal	ra,1c00c86e <rt_schedule_insert_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:787

    RT_OBJECT_HOOK_CALL(rt_thread_resume_hook, (thread));
    return RT_EOK;
1c00cf78 <rt_thread_resume+0x50> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:788
}
1c00cf7a <rt_thread_resume+0x52> mv	a0,a5
1c00cf7c <rt_thread_resume+0x54> lw	ra,28(sp)
1c00cf7e <rt_thread_resume+0x56> lw	s0,24(sp)
1c00cf80 <rt_thread_resume+0x58> lw	s1,20(sp)
1c00cf82 <rt_thread_resume+0x5a> addi	sp,sp,32
1c00cf84 <rt_thread_resume+0x5c> ret
rt_thread_timeout():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:797
 * when thread is timeout to wait some resource.
 *
 * @param parameter the parameter of thread timeout function
 */
void rt_thread_timeout(void *parameter)
{
1c00cf86 <rt_thread_timeout> addi	sp,sp,-48
1c00cf88 <rt_thread_timeout+0x2> sw	ra,44(sp)
1c00cf8a <rt_thread_timeout+0x4> sw	s0,40(sp)
1c00cf8c <rt_thread_timeout+0x6> addi	s0,sp,48
1c00cf8e <rt_thread_timeout+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:800
    struct rt_thread *thread;

    thread = (struct rt_thread *)parameter;
1c00cf92 <rt_thread_timeout+0xc> lw	a5,-36(s0)
1c00cf96 <rt_thread_timeout+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:808
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    /* set error number */
    thread->error = -RT_ETIMEOUT;
1c00cf9a <rt_thread_timeout+0x14> lw	a5,-20(s0)
1c00cf9e <rt_thread_timeout+0x18> li	a4,-2
1c00cfa0 <rt_thread_timeout+0x1a> sw	a4,48(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:811

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
1c00cfa2 <rt_thread_timeout+0x1c> lw	a5,-20(s0)
1c00cfa6 <rt_thread_timeout+0x20> addi	a5,a5,20
1c00cfa8 <rt_thread_timeout+0x22> mv	a0,a5
1c00cfaa <rt_thread_timeout+0x24> jal	ra,1c00ca9a <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:814

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
1c00cfae <rt_thread_timeout+0x28> lw	a0,-20(s0)
1c00cfb2 <rt_thread_timeout+0x2c> jal	ra,1c00c86e <rt_schedule_insert_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:817

    /* do schedule */
    rt_schedule();
1c00cfb6 <rt_thread_timeout+0x30> jal	ra,1c00c7b2 <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:818
}
1c00cfba <rt_thread_timeout+0x34> nop
1c00cfbc <rt_thread_timeout+0x36> lw	ra,44(sp)
1c00cfbe <rt_thread_timeout+0x38> lw	s0,40(sp)
1c00cfc0 <rt_thread_timeout+0x3a> addi	sp,sp,48
1c00cfc2 <rt_thread_timeout+0x3c> ret
rt_list_init():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:48
{
1c00cfc4 <rt_list_init> addi	sp,sp,-32
1c00cfc6 <rt_list_init+0x2> sw	s0,28(sp)
1c00cfc8 <rt_list_init+0x4> addi	s0,sp,32
1c00cfca <rt_list_init+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:49
    l->next = l->prev = l;
1c00cfce <rt_list_init+0xa> lw	a5,-20(s0)
1c00cfd2 <rt_list_init+0xe> lw	a4,-20(s0)
1c00cfd6 <rt_list_init+0x12> sw	a4,4(a5)
1c00cfd8 <rt_list_init+0x14> lw	a5,-20(s0)
1c00cfdc <rt_list_init+0x18> lw	a4,4(a5)
1c00cfde <rt_list_init+0x1a> lw	a5,-20(s0)
1c00cfe2 <rt_list_init+0x1e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:50
}
1c00cfe4 <rt_list_init+0x20> nop
1c00cfe6 <rt_list_init+0x22> lw	s0,28(sp)
1c00cfe8 <rt_list_init+0x24> addi	sp,sp,32
1c00cfea <rt_list_init+0x26> ret
rt_list_insert_after():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:59
{
1c00cfec <rt_list_insert_after> addi	sp,sp,-32
1c00cfee <rt_list_insert_after+0x2> sw	s0,28(sp)
1c00cff0 <rt_list_insert_after+0x4> addi	s0,sp,32
1c00cff2 <rt_list_insert_after+0x6> sw	a0,-20(s0)
1c00cff6 <rt_list_insert_after+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:60
    l->next->prev = n;
1c00cffa <rt_list_insert_after+0xe> lw	a5,-20(s0)
1c00cffe <rt_list_insert_after+0x12> lw	a5,0(a5)
1c00d000 <rt_list_insert_after+0x14> lw	a4,-24(s0)
1c00d004 <rt_list_insert_after+0x18> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:61
    n->next = l->next;
1c00d006 <rt_list_insert_after+0x1a> lw	a5,-20(s0)
1c00d00a <rt_list_insert_after+0x1e> lw	a4,0(a5)
1c00d00c <rt_list_insert_after+0x20> lw	a5,-24(s0)
1c00d010 <rt_list_insert_after+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:63
    l->next = n;
1c00d012 <rt_list_insert_after+0x26> lw	a5,-20(s0)
1c00d016 <rt_list_insert_after+0x2a> lw	a4,-24(s0)
1c00d01a <rt_list_insert_after+0x2e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:64
    n->prev = l;
1c00d01c <rt_list_insert_after+0x30> lw	a5,-24(s0)
1c00d020 <rt_list_insert_after+0x34> lw	a4,-20(s0)
1c00d024 <rt_list_insert_after+0x38> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:65
}
1c00d026 <rt_list_insert_after+0x3a> nop
1c00d028 <rt_list_insert_after+0x3c> lw	s0,28(sp)
1c00d02a <rt_list_insert_after+0x3e> addi	sp,sp,32
1c00d02c <rt_list_insert_after+0x40> ret
rt_list_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:87
{
1c00d02e <rt_list_remove> addi	sp,sp,-32
1c00d030 <rt_list_remove+0x2> sw	s0,28(sp)
1c00d032 <rt_list_remove+0x4> addi	s0,sp,32
1c00d034 <rt_list_remove+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:88
    n->next->prev = n->prev;
1c00d038 <rt_list_remove+0xa> lw	a5,-20(s0)
1c00d03c <rt_list_remove+0xe> lw	a5,0(a5)
1c00d03e <rt_list_remove+0x10> lw	a4,-20(s0)
1c00d042 <rt_list_remove+0x14> lw	a4,4(a4)
1c00d044 <rt_list_remove+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:89
    n->prev->next = n->next;
1c00d046 <rt_list_remove+0x18> lw	a5,-20(s0)
1c00d04a <rt_list_remove+0x1c> lw	a5,4(a5)
1c00d04c <rt_list_remove+0x1e> lw	a4,-20(s0)
1c00d050 <rt_list_remove+0x22> lw	a4,0(a4)
1c00d052 <rt_list_remove+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:91
    n->next = n->prev = n;
1c00d054 <rt_list_remove+0x26> lw	a5,-20(s0)
1c00d058 <rt_list_remove+0x2a> lw	a4,-20(s0)
1c00d05c <rt_list_remove+0x2e> sw	a4,4(a5)
1c00d05e <rt_list_remove+0x30> lw	a5,-20(s0)
1c00d062 <rt_list_remove+0x34> lw	a4,4(a5)
1c00d064 <rt_list_remove+0x36> lw	a5,-20(s0)
1c00d068 <rt_list_remove+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:92
}
1c00d06a <rt_list_remove+0x3c> nop
1c00d06c <rt_list_remove+0x3e> lw	s0,28(sp)
1c00d06e <rt_list_remove+0x40> addi	sp,sp,32
1c00d070 <rt_list_remove+0x42> ret
rt_list_isempty():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:99
{
1c00d072 <rt_list_isempty> addi	sp,sp,-32
1c00d074 <rt_list_isempty+0x2> sw	s0,28(sp)
1c00d076 <rt_list_isempty+0x4> addi	s0,sp,32
1c00d078 <rt_list_isempty+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:100
    return l->next == l;
1c00d07c <rt_list_isempty+0xa> lw	a5,-20(s0)
1c00d080 <rt_list_isempty+0xe> lw	a5,0(a5)
1c00d082 <rt_list_isempty+0x10> lw	a4,-20(s0)
1c00d086 <rt_list_isempty+0x14> sub	a5,a4,a5
1c00d08a <rt_list_isempty+0x18> seqz	a5,a5
1c00d08e <rt_list_isempty+0x1c> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:101
}
1c00d092 <rt_list_isempty+0x20> mv	a0,a5
1c00d094 <rt_list_isempty+0x22> lw	s0,28(sp)
1c00d096 <rt_list_isempty+0x24> addi	sp,sp,32
1c00d098 <rt_list_isempty+0x26> ret
_rt_timer_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:91
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
1c00d09a <_rt_timer_init> addi	sp,sp,-64
1c00d09c <_rt_timer_init+0x2> sw	ra,60(sp)
1c00d09e <_rt_timer_init+0x4> sw	s0,56(sp)
1c00d0a0 <_rt_timer_init+0x6> addi	s0,sp,64
1c00d0a2 <_rt_timer_init+0x8> sw	a0,-36(s0)
1c00d0a6 <_rt_timer_init+0xc> sw	a1,-40(s0)
1c00d0aa <_rt_timer_init+0x10> sw	a2,-44(s0)
1c00d0ae <_rt_timer_init+0x14> sw	a3,-48(s0)
1c00d0b2 <_rt_timer_init+0x18> mv	a5,a4
1c00d0b4 <_rt_timer_init+0x1a> sb	a5,-49(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:95
    int i;

    /* set flag */
    timer->parent.flag  = flag;
1c00d0b8 <_rt_timer_init+0x1e> lw	a5,-36(s0)
1c00d0bc <_rt_timer_init+0x22> lbu	a4,-49(s0)
1c00d0c0 <_rt_timer_init+0x26> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:98

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d0c4 <_rt_timer_init+0x2a> lw	a5,-36(s0)
1c00d0c8 <_rt_timer_init+0x2e> lbu	a5,9(a5)
1c00d0cc <_rt_timer_init+0x32> andi	a5,a5,-2
1c00d0ce <_rt_timer_init+0x34> andi	a4,a5,255
1c00d0d2 <_rt_timer_init+0x38> lw	a5,-36(s0)
1c00d0d6 <_rt_timer_init+0x3c> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:100

    timer->timeout_func = timeout;
1c00d0da <_rt_timer_init+0x40> lw	a5,-36(s0)
1c00d0de <_rt_timer_init+0x44> lw	a4,-40(s0)
1c00d0e2 <_rt_timer_init+0x48> sw	a4,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:101
    timer->parameter    = parameter;
1c00d0e4 <_rt_timer_init+0x4a> lw	a5,-36(s0)
1c00d0e8 <_rt_timer_init+0x4e> lw	a4,-44(s0)
1c00d0ec <_rt_timer_init+0x52> sw	a4,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:103

    timer->timeout_tick = 0;
1c00d0ee <_rt_timer_init+0x54> lw	a5,-36(s0)
1c00d0f2 <_rt_timer_init+0x58> sw	zero,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:104
    timer->init_tick    = time;
1c00d0f6 <_rt_timer_init+0x5c> lw	a5,-36(s0)
1c00d0fa <_rt_timer_init+0x60> lw	a4,-48(s0)
1c00d0fe <_rt_timer_init+0x64> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:107

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
1c00d100 <_rt_timer_init+0x66> sw	zero,-20(s0)
1c00d104 <_rt_timer_init+0x6a> j	1c00d126 <_rt_timer_init+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:109 (discriminator 3)
    {
        rt_list_init(&(timer->row[i]));
1c00d106 <_rt_timer_init+0x6c> lw	a5,-20(s0)
1c00d10a <_rt_timer_init+0x70> addi	a5,a5,2
1c00d10c <_rt_timer_init+0x72> slli	a5,a5,0x3
1c00d10e <_rt_timer_init+0x74> lw	a4,-36(s0)
1c00d112 <_rt_timer_init+0x78> add	a5,a5,a4
1c00d114 <_rt_timer_init+0x7a> addi	a5,a5,4
1c00d116 <_rt_timer_init+0x7c> mv	a0,a5
1c00d118 <_rt_timer_init+0x7e> jal	ra,1c00cfc4 <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:107 (discriminator 3)
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
1c00d11c <_rt_timer_init+0x82> lw	a5,-20(s0)
1c00d120 <_rt_timer_init+0x86> addi	a5,a5,1
1c00d122 <_rt_timer_init+0x88> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:107 (discriminator 1)
1c00d126 <_rt_timer_init+0x8c> lw	a5,-20(s0)
1c00d12a <_rt_timer_init+0x90> blez	a5,1c00d106 <_rt_timer_init+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:111
    }
}
1c00d12e <_rt_timer_init+0x94> nop
1c00d130 <_rt_timer_init+0x96> lw	ra,60(sp)
1c00d132 <_rt_timer_init+0x98> lw	s0,56(sp)
1c00d134 <_rt_timer_init+0x9a> addi	sp,sp,64
1c00d136 <_rt_timer_init+0x9c> ret
_rt_timer_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:137

    return timeout_tick;
}

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
1c00d138 <_rt_timer_remove> addi	sp,sp,-48
1c00d13a <_rt_timer_remove+0x2> sw	ra,44(sp)
1c00d13c <_rt_timer_remove+0x4> sw	s0,40(sp)
1c00d13e <_rt_timer_remove+0x6> addi	s0,sp,48
1c00d140 <_rt_timer_remove+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:140
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
1c00d144 <_rt_timer_remove+0xc> sw	zero,-20(s0)
1c00d148 <_rt_timer_remove+0x10> j	1c00d16a <_rt_timer_remove+0x32>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:142 (discriminator 3)
    {
        rt_list_remove(&timer->row[i]);
1c00d14a <_rt_timer_remove+0x12> lw	a5,-20(s0)
1c00d14e <_rt_timer_remove+0x16> addi	a5,a5,2
1c00d150 <_rt_timer_remove+0x18> slli	a5,a5,0x3
1c00d152 <_rt_timer_remove+0x1a> lw	a4,-36(s0)
1c00d156 <_rt_timer_remove+0x1e> add	a5,a5,a4
1c00d158 <_rt_timer_remove+0x20> addi	a5,a5,4
1c00d15a <_rt_timer_remove+0x22> mv	a0,a5
1c00d15c <_rt_timer_remove+0x24> jal	ra,1c00d02e <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:140 (discriminator 3)
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
1c00d160 <_rt_timer_remove+0x28> lw	a5,-20(s0)
1c00d164 <_rt_timer_remove+0x2c> addi	a5,a5,1
1c00d166 <_rt_timer_remove+0x2e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:140 (discriminator 1)
1c00d16a <_rt_timer_remove+0x32> lw	a5,-20(s0)
1c00d16e <_rt_timer_remove+0x36> blez	a5,1c00d14a <_rt_timer_remove+0x12>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:144
    }
}
1c00d172 <_rt_timer_remove+0x3a> nop
1c00d174 <_rt_timer_remove+0x3c> lw	ra,44(sp)
1c00d176 <_rt_timer_remove+0x3e> lw	s0,40(sp)
1c00d178 <_rt_timer_remove+0x40> addi	sp,sp,48
1c00d17a <_rt_timer_remove+0x42> ret
rt_timer_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:199
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
1c00d17c <rt_timer_init> addi	sp,sp,-48
1c00d17e <rt_timer_init+0x2> sw	ra,44(sp)
1c00d180 <rt_timer_init+0x4> sw	s0,40(sp)
1c00d182 <rt_timer_init+0x6> addi	s0,sp,48
1c00d184 <rt_timer_init+0x8> sw	a0,-20(s0)
1c00d188 <rt_timer_init+0xc> sw	a1,-24(s0)
1c00d18c <rt_timer_init+0x10> sw	a2,-28(s0)
1c00d190 <rt_timer_init+0x14> sw	a3,-32(s0)
1c00d194 <rt_timer_init+0x18> sw	a4,-36(s0)
1c00d198 <rt_timer_init+0x1c> sb	a5,-37(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:204
    /* timer check */
    RT_ASSERT(timer != RT_NULL);

    /* timer object initialization */
    rt_object_init((rt_object_t)timer, RT_Object_Class_Timer, name);
1c00d19c <rt_timer_init+0x20> lw	a2,-24(s0)
1c00d1a0 <rt_timer_init+0x24> li	a1,10
1c00d1a2 <rt_timer_init+0x26> lw	a0,-20(s0)
1c00d1a6 <rt_timer_init+0x2a> jal	ra,1c00c52c <rt_object_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:206

    _rt_timer_init(timer, timeout, parameter, time, flag);
1c00d1aa <rt_timer_init+0x2e> lbu	a5,-37(s0)
1c00d1ae <rt_timer_init+0x32> mv	a4,a5
1c00d1b0 <rt_timer_init+0x34> lw	a3,-36(s0)
1c00d1b4 <rt_timer_init+0x38> lw	a2,-32(s0)
1c00d1b8 <rt_timer_init+0x3c> lw	a1,-28(s0)
1c00d1bc <rt_timer_init+0x40> lw	a0,-20(s0)
1c00d1c0 <rt_timer_init+0x44> jal	ra,1c00d09a <_rt_timer_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:207
}
1c00d1c4 <rt_timer_init+0x48> nop
1c00d1c6 <rt_timer_init+0x4a> lw	ra,44(sp)
1c00d1c8 <rt_timer_init+0x4c> lw	s0,40(sp)
1c00d1ca <rt_timer_init+0x4e> addi	sp,sp,48
1c00d1cc <rt_timer_init+0x50> ret
rt_timer_detach():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:217
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
1c00d1ce <rt_timer_detach> addi	sp,sp,-32
1c00d1d0 <rt_timer_detach+0x2> sw	ra,28(sp)
1c00d1d2 <rt_timer_detach+0x4> sw	s0,24(sp)
1c00d1d4 <rt_timer_detach+0x6> sw	s1,20(sp)
1c00d1d6 <rt_timer_detach+0x8> addi	s0,sp,32
1c00d1d8 <rt_timer_detach+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:226
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    RT_ASSERT(rt_object_is_systemobject(&timer->parent));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00d1dc <rt_timer_detach+0xe> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00d1e0 <rt_timer_detach+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:228

    _rt_timer_remove(timer);
1c00d1e2 <rt_timer_detach+0x14> lw	a0,-20(s0)
1c00d1e6 <rt_timer_detach+0x18> jal	ra,1c00d138 <_rt_timer_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:230
    /* stop timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d1ea <rt_timer_detach+0x1c> lw	a5,-20(s0)
1c00d1ee <rt_timer_detach+0x20> lbu	a5,9(a5)
1c00d1f2 <rt_timer_detach+0x24> andi	a5,a5,-2
1c00d1f4 <rt_timer_detach+0x26> andi	a4,a5,255
1c00d1f8 <rt_timer_detach+0x2a> lw	a5,-20(s0)
1c00d1fc <rt_timer_detach+0x2e> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:233

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00d200 <rt_timer_detach+0x32> mv	a0,s1
1c00d202 <rt_timer_detach+0x34> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:235

    rt_object_detach((rt_object_t)timer);
1c00d206 <rt_timer_detach+0x38> lw	a0,-20(s0)
1c00d20a <rt_timer_detach+0x3c> jal	ra,1c00c5d8 <rt_object_detach>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:237

    return RT_EOK;
1c00d20e <rt_timer_detach+0x40> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:238
}
1c00d210 <rt_timer_detach+0x42> mv	a0,a5
1c00d212 <rt_timer_detach+0x44> lw	ra,28(sp)
1c00d214 <rt_timer_detach+0x46> lw	s0,24(sp)
1c00d216 <rt_timer_detach+0x48> lw	s1,20(sp)
1c00d218 <rt_timer_detach+0x4a> addi	sp,sp,32
1c00d21a <rt_timer_detach+0x4c> ret
rt_timer_start():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:312
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
1c00d21c <rt_timer_start> addi	sp,sp,-64
1c00d21e <rt_timer_start+0x2> sw	ra,60(sp)
1c00d220 <rt_timer_start+0x4> sw	s0,56(sp)
1c00d222 <rt_timer_start+0x6> sw	s1,52(sp)
1c00d224 <rt_timer_start+0x8> addi	s0,sp,64
1c00d226 <rt_timer_start+0xa> sw	a0,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:325
    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    /* stop timer firstly */
    level = rt_hw_interrupt_disable();
1c00d22a <rt_timer_start+0xe> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00d22e <rt_timer_start+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:327
    /* remove timer from list */
    _rt_timer_remove(timer);
1c00d230 <rt_timer_start+0x14> lw	a0,-52(s0)
1c00d234 <rt_timer_start+0x18> jal	ra,1c00d138 <_rt_timer_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:329
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d238 <rt_timer_start+0x1c> lw	a5,-52(s0)
1c00d23c <rt_timer_start+0x20> lbu	a5,9(a5)
1c00d240 <rt_timer_start+0x24> andi	a5,a5,-2
1c00d242 <rt_timer_start+0x26> andi	a4,a5,255
1c00d246 <rt_timer_start+0x2a> lw	a5,-52(s0)
1c00d24a <rt_timer_start+0x2e> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:338
    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    RT_ASSERT(timer->init_tick < RT_TICK_MAX / 2);
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
1c00d24e <rt_timer_start+0x32> jal	ra,1c00b686 <rt_tick_get>
1c00d252 <rt_timer_start+0x36> mv	a4,a0
1c00d254 <rt_timer_start+0x38> lw	a5,-52(s0)
1c00d258 <rt_timer_start+0x3c> lw	a5,36(a5)
1c00d25a <rt_timer_start+0x3e> add	a4,a4,a5
1c00d25c <rt_timer_start+0x40> lw	a5,-52(s0)
1c00d260 <rt_timer_start+0x44> sw	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:350
    }
    else
#endif
    {
        /* insert timer to system timer list */
        timer_list = rt_timer_list;
1c00d262 <rt_timer_start+0x46> addi	a5,gp,1112 # 1c00ebc0 <rt_timer_list>
1c00d266 <rt_timer_start+0x4a> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:353
    }

    row_head[0]  = &timer_list[0];
1c00d26a <rt_timer_start+0x4e> lw	a5,-28(s0)
1c00d26e <rt_timer_start+0x52> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:354
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
1c00d272 <rt_timer_start+0x56> sw	zero,-20(s0)
1c00d276 <rt_timer_start+0x5a> j	1c00d34e <rt_timer_start+0x132>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:360
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
1c00d278 <rt_timer_start+0x5c> lw	a5,-20(s0)
1c00d27c <rt_timer_start+0x60> slli	a5,a5,0x2
1c00d27e <rt_timer_start+0x62> addi	a4,s0,-16
1c00d282 <rt_timer_start+0x66> add	a5,a5,a4
1c00d284 <rt_timer_start+0x68> lw	a5,-24(a5)
1c00d288 <rt_timer_start+0x6c> lw	a5,0(a5)
1c00d28a <rt_timer_start+0x6e> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:363

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
1c00d28e <rt_timer_start+0x72> lw	a5,-20(s0)
1c00d292 <rt_timer_start+0x76> slli	a5,a5,0x3
1c00d294 <rt_timer_start+0x78> addi	a5,a5,20
1c00d296 <rt_timer_start+0x7a> neg	a5,a5
1c00d29a <rt_timer_start+0x7e> lw	a4,-32(s0)
1c00d29e <rt_timer_start+0x82> add	a5,a5,a4
1c00d2a0 <rt_timer_start+0x84> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:370
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
1c00d2a4 <rt_timer_start+0x88> lw	a5,-36(s0)
1c00d2a8 <rt_timer_start+0x8c> lw	a4,40(a5)
1c00d2aa <rt_timer_start+0x8e> lw	a5,-52(s0)
1c00d2ae <rt_timer_start+0x92> lw	a5,40(a5)
1c00d2b0 <rt_timer_start+0x94> beq	a4,a5,1c00d2d0 <rt_timer_start+0xb4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:374
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
1c00d2b4 <rt_timer_start+0x98> lw	a5,-36(s0)
1c00d2b8 <rt_timer_start+0x9c> lw	a4,40(a5)
1c00d2ba <rt_timer_start+0x9e> lw	a5,-52(s0)
1c00d2be <rt_timer_start+0xa2> lw	a5,40(a5)
1c00d2c0 <rt_timer_start+0xa4> sub	a4,a4,a5
1c00d2c2 <rt_timer_start+0xa6> lui	a5,0x80000
1c00d2c6 <rt_timer_start+0xaa> xori	a5,a5,-2
1c00d2ca <rt_timer_start+0xae> bgeu	a5,a4,1c00d318 <rt_timer_start+0xfc>
1c00d2ce <rt_timer_start+0xb2> j	1c00d2d2 <rt_timer_start+0xb6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:372
                continue;
1c00d2d0 <rt_timer_start+0xb4> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:357
             row_head[row_lvl]  = row_head[row_lvl]->next)
1c00d2d2 <rt_timer_start+0xb6> lw	a5,-20(s0)
1c00d2d6 <rt_timer_start+0xba> slli	a5,a5,0x2
1c00d2d8 <rt_timer_start+0xbc> addi	a4,s0,-16
1c00d2dc <rt_timer_start+0xc0> add	a5,a5,a4
1c00d2de <rt_timer_start+0xc2> lw	a5,-24(a5) # 7fffffe8 <__l2_shared_end+0x63fe0878>
1c00d2e2 <rt_timer_start+0xc6> lw	a4,0(a5)
1c00d2e4 <rt_timer_start+0xc8> lw	a5,-20(s0)
1c00d2e8 <rt_timer_start+0xcc> slli	a5,a5,0x2
1c00d2ea <rt_timer_start+0xce> addi	a3,s0,-16
1c00d2ee <rt_timer_start+0xd2> add	a5,a5,a3
1c00d2f0 <rt_timer_start+0xd4> sw	a4,-24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:356
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
1c00d2f4 <rt_timer_start+0xd8> lw	a5,-20(s0)
1c00d2f8 <rt_timer_start+0xdc> slli	a5,a5,0x2
1c00d2fa <rt_timer_start+0xde> addi	a4,s0,-16
1c00d2fe <rt_timer_start+0xe2> add	a5,a5,a4
1c00d300 <rt_timer_start+0xe4> lw	a4,-24(a5)
1c00d304 <rt_timer_start+0xe8> lw	a5,-20(s0)
1c00d308 <rt_timer_start+0xec> slli	a5,a5,0x3
1c00d30a <rt_timer_start+0xee> lw	a3,-28(s0)
1c00d30e <rt_timer_start+0xf2> add	a5,a5,a3
1c00d310 <rt_timer_start+0xf4> lw	a5,4(a5)
1c00d312 <rt_timer_start+0xf6> bne	a4,a5,1c00d278 <rt_timer_start+0x5c>
1c00d316 <rt_timer_start+0xfa> j	1c00d31a <rt_timer_start+0xfe>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:376
            {
                break;
1c00d318 <rt_timer_start+0xfc> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:379
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
1c00d31a <rt_timer_start+0xfe> lw	a5,-20(s0)
1c00d31e <rt_timer_start+0x102> beqz	a5,1c00d344 <rt_timer_start+0x128>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:380
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
1c00d320 <rt_timer_start+0x104> lw	a5,-20(s0)
1c00d324 <rt_timer_start+0x108> slli	a5,a5,0x2
1c00d326 <rt_timer_start+0x10a> addi	a4,s0,-16
1c00d32a <rt_timer_start+0x10e> add	a5,a5,a4
1c00d32c <rt_timer_start+0x110> lw	a4,-24(a5)
1c00d330 <rt_timer_start+0x114> lw	a5,-20(s0)
1c00d334 <rt_timer_start+0x118> addi	a5,a5,1
1c00d336 <rt_timer_start+0x11a> addi	a4,a4,8
1c00d338 <rt_timer_start+0x11c> slli	a5,a5,0x2
1c00d33a <rt_timer_start+0x11e> addi	a3,s0,-16
1c00d33e <rt_timer_start+0x122> add	a5,a5,a3
1c00d340 <rt_timer_start+0x124> sw	a4,-24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:354 (discriminator 2)
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
1c00d344 <rt_timer_start+0x128> lw	a5,-20(s0)
1c00d348 <rt_timer_start+0x12c> addi	a5,a5,1
1c00d34a <rt_timer_start+0x12e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:354 (discriminator 1)
1c00d34e <rt_timer_start+0x132> lw	a5,-20(s0)
1c00d352 <rt_timer_start+0x136> beqz	a5,1c00d2f4 <rt_timer_start+0xd8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:387

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
1c00d354 <rt_timer_start+0x138> lw	a5,1120(gp) # 1c00ebc8 <random_nr.1946>
1c00d358 <rt_timer_start+0x13c> addi	a4,a5,1
1c00d35c <rt_timer_start+0x140> sw	a4,1120(gp) # 1c00ebc8 <random_nr.1946>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:388
    tst_nr = random_nr;
1c00d360 <rt_timer_start+0x144> lw	a5,1120(gp) # 1c00ebc8 <random_nr.1946>
1c00d364 <rt_timer_start+0x148> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:390

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
1c00d368 <rt_timer_start+0x14c> lw	a4,-40(s0)
1c00d36c <rt_timer_start+0x150> lw	a5,-52(s0)
1c00d370 <rt_timer_start+0x154> addi	a5,a5,20
1c00d372 <rt_timer_start+0x156> mv	a1,a5
1c00d374 <rt_timer_start+0x158> mv	a0,a4
1c00d376 <rt_timer_start+0x15a> jal	ra,1c00cfec <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:392
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
1c00d37a <rt_timer_start+0x15e> li	a5,2
1c00d37c <rt_timer_start+0x160> sw	a5,-20(s0)
1c00d380 <rt_timer_start+0x164> j	1c00d3d2 <rt_timer_start+0x1b6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:394
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
1c00d382 <rt_timer_start+0x166> lw	a5,-24(s0)
1c00d386 <rt_timer_start+0x16a> andi	a5,a5,3
1c00d388 <rt_timer_start+0x16c> bnez	a5,1c00d3de <rt_timer_start+0x1c2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:395
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
1c00d38a <rt_timer_start+0x16e> li	a4,1
1c00d38c <rt_timer_start+0x170> lw	a5,-20(s0)
1c00d390 <rt_timer_start+0x174> sub	a5,a4,a5
1c00d394 <rt_timer_start+0x178> slli	a5,a5,0x2
1c00d396 <rt_timer_start+0x17a> addi	a4,s0,-16
1c00d39a <rt_timer_start+0x17e> add	a5,a5,a4
1c00d39c <rt_timer_start+0x180> lw	a3,-24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:396
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
1c00d3a0 <rt_timer_start+0x184> li	a4,1
1c00d3a2 <rt_timer_start+0x186> lw	a5,-20(s0)
1c00d3a6 <rt_timer_start+0x18a> sub	a5,a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:395
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
1c00d3aa <rt_timer_start+0x18e> addi	a5,a5,2
1c00d3ac <rt_timer_start+0x190> slli	a5,a5,0x3
1c00d3ae <rt_timer_start+0x192> lw	a4,-52(s0)
1c00d3b2 <rt_timer_start+0x196> add	a5,a5,a4
1c00d3b4 <rt_timer_start+0x198> addi	a5,a5,4
1c00d3b6 <rt_timer_start+0x19a> mv	a1,a5
1c00d3b8 <rt_timer_start+0x19c> mv	a0,a3
1c00d3ba <rt_timer_start+0x19e> jal	ra,1c00cfec <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:401
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
1c00d3be <rt_timer_start+0x1a2> lw	a5,-24(s0)
1c00d3c2 <rt_timer_start+0x1a6> srli	a5,a5,0x2
1c00d3c4 <rt_timer_start+0x1a8> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:392
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
1c00d3c8 <rt_timer_start+0x1ac> lw	a5,-20(s0)
1c00d3cc <rt_timer_start+0x1b0> addi	a5,a5,1
1c00d3ce <rt_timer_start+0x1b2> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:392 (discriminator 1)
1c00d3d2 <rt_timer_start+0x1b6> lw	a4,-20(s0)
1c00d3d6 <rt_timer_start+0x1ba> li	a5,1
1c00d3d8 <rt_timer_start+0x1bc> bgeu	a5,a4,1c00d382 <rt_timer_start+0x166>
1c00d3dc <rt_timer_start+0x1c0> j	1c00d3e0 <rt_timer_start+0x1c4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:398
            break;
1c00d3de <rt_timer_start+0x1c2> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:404
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
1c00d3e0 <rt_timer_start+0x1c4> lw	a5,-52(s0)
1c00d3e4 <rt_timer_start+0x1c8> lbu	a5,9(a5)
1c00d3e8 <rt_timer_start+0x1cc> ori	a5,a5,1
1c00d3ec <rt_timer_start+0x1d0> andi	a4,a5,255
1c00d3f0 <rt_timer_start+0x1d4> lw	a5,-52(s0)
1c00d3f4 <rt_timer_start+0x1d8> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:407

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00d3f8 <rt_timer_start+0x1dc> mv	a0,s1
1c00d3fa <rt_timer_start+0x1de> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:423
            rt_schedule();
        }
    }
#endif

    return RT_EOK;
1c00d3fe <rt_timer_start+0x1e2> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:424
}
1c00d400 <rt_timer_start+0x1e4> mv	a0,a5
1c00d402 <rt_timer_start+0x1e6> lw	ra,60(sp)
1c00d404 <rt_timer_start+0x1e8> lw	s0,56(sp)
1c00d406 <rt_timer_start+0x1ea> lw	s1,52(sp)
1c00d408 <rt_timer_start+0x1ec> addi	sp,sp,64
1c00d40a <rt_timer_start+0x1ee> ret
rt_timer_stop():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:434
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
1c00d40c <rt_timer_stop> addi	sp,sp,-32
1c00d40e <rt_timer_stop+0x2> sw	ra,28(sp)
1c00d410 <rt_timer_stop+0x4> sw	s0,24(sp)
1c00d412 <rt_timer_stop+0x6> sw	s1,20(sp)
1c00d414 <rt_timer_stop+0x8> addi	s0,sp,32
1c00d416 <rt_timer_stop+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:441

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
1c00d41a <rt_timer_stop+0xe> lw	a5,-20(s0)
1c00d41e <rt_timer_stop+0x12> lbu	a5,9(a5)
1c00d422 <rt_timer_stop+0x16> andi	a5,a5,1
1c00d424 <rt_timer_stop+0x18> bnez	a5,1c00d42a <rt_timer_stop+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:442
        return -RT_ERROR;
1c00d426 <rt_timer_stop+0x1a> li	a5,-1
1c00d428 <rt_timer_stop+0x1c> j	1c00d456 <rt_timer_stop+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:447

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00d42a <rt_timer_stop+0x1e> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00d42e <rt_timer_stop+0x22> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:449

    _rt_timer_remove(timer);
1c00d430 <rt_timer_stop+0x24> lw	a0,-20(s0)
1c00d434 <rt_timer_stop+0x28> jal	ra,1c00d138 <_rt_timer_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:451
    /* change status */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d438 <rt_timer_stop+0x2c> lw	a5,-20(s0)
1c00d43c <rt_timer_stop+0x30> lbu	a5,9(a5)
1c00d440 <rt_timer_stop+0x34> andi	a5,a5,-2
1c00d442 <rt_timer_stop+0x36> andi	a4,a5,255
1c00d446 <rt_timer_stop+0x3a> lw	a5,-20(s0)
1c00d44a <rt_timer_stop+0x3e> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:454

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00d44e <rt_timer_stop+0x42> mv	a0,s1
1c00d450 <rt_timer_stop+0x44> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:456

    return RT_EOK;
1c00d454 <rt_timer_stop+0x48> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:457
}
1c00d456 <rt_timer_stop+0x4a> mv	a0,a5
1c00d458 <rt_timer_stop+0x4c> lw	ra,28(sp)
1c00d45a <rt_timer_stop+0x4e> lw	s0,24(sp)
1c00d45c <rt_timer_stop+0x50> lw	s1,20(sp)
1c00d45e <rt_timer_stop+0x52> addi	sp,sp,32
1c00d460 <rt_timer_stop+0x54> ret
rt_timer_control():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:469
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
1c00d462 <rt_timer_control> addi	sp,sp,-32
1c00d464 <rt_timer_control+0x2> sw	ra,28(sp)
1c00d466 <rt_timer_control+0x4> sw	s0,24(sp)
1c00d468 <rt_timer_control+0x6> addi	s0,sp,32
1c00d46a <rt_timer_control+0x8> sw	a0,-20(s0)
1c00d46e <rt_timer_control+0xc> sw	a1,-24(s0)
1c00d472 <rt_timer_control+0x10> sw	a2,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:476

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    level = rt_hw_interrupt_disable();
1c00d476 <rt_timer_control+0x14> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00d47a <rt_timer_control+0x18> mv	ra,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:477
    switch (cmd)
1c00d47c <rt_timer_control+0x1a> lw	a4,-24(s0)
1c00d480 <rt_timer_control+0x1e> li	a5,4
1c00d482 <rt_timer_control+0x20> bltu	a5,a4,1c00d50a <rt_timer_control+0xa8>
1c00d486 <rt_timer_control+0x24> lw	a5,-24(s0)
1c00d48a <rt_timer_control+0x28> slli	a4,a5,0x2
1c00d48e <rt_timer_control+0x2c> lui	a5,0x1c00e
1c00d492 <rt_timer_control+0x30> addi	a5,a5,-784 # 1c00dcf0 <small_digits.2066+0x14>
1c00d496 <rt_timer_control+0x34> add	a5,a5,a4
1c00d498 <rt_timer_control+0x36> lw	a5,0(a5)
1c00d49a <rt_timer_control+0x38> jr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:480
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
1c00d49c <rt_timer_control+0x3a> lw	a5,-20(s0)
1c00d4a0 <rt_timer_control+0x3e> lw	a4,36(a5)
1c00d4a2 <rt_timer_control+0x40> lw	a5,-28(s0)
1c00d4a6 <rt_timer_control+0x44> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:481
        break;
1c00d4a8 <rt_timer_control+0x46> j	1c00d50c <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:484

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
1c00d4aa <rt_timer_control+0x48> lw	a5,-28(s0)
1c00d4ae <rt_timer_control+0x4c> lw	a4,0(a5)
1c00d4b0 <rt_timer_control+0x4e> lw	a5,-20(s0)
1c00d4b4 <rt_timer_control+0x52> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:485
        break;
1c00d4b6 <rt_timer_control+0x54> j	1c00d50c <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:488

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
1c00d4b8 <rt_timer_control+0x56> lw	a5,-20(s0)
1c00d4bc <rt_timer_control+0x5a> lbu	a5,9(a5)
1c00d4c0 <rt_timer_control+0x5e> andi	a5,a5,-3
1c00d4c2 <rt_timer_control+0x60> andi	a4,a5,255
1c00d4c6 <rt_timer_control+0x64> lw	a5,-20(s0)
1c00d4ca <rt_timer_control+0x68> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:489
        break;
1c00d4ce <rt_timer_control+0x6c> j	1c00d50c <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:492

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
1c00d4d0 <rt_timer_control+0x6e> lw	a5,-20(s0)
1c00d4d4 <rt_timer_control+0x72> lbu	a5,9(a5)
1c00d4d8 <rt_timer_control+0x76> ori	a5,a5,2
1c00d4dc <rt_timer_control+0x7a> andi	a4,a5,255
1c00d4e0 <rt_timer_control+0x7e> lw	a5,-20(s0)
1c00d4e4 <rt_timer_control+0x82> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:493
        break;
1c00d4e8 <rt_timer_control+0x86> j	1c00d50c <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:496

    case RT_TIMER_CTRL_GET_STATE:
        if(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
1c00d4ea <rt_timer_control+0x88> lw	a5,-20(s0)
1c00d4ee <rt_timer_control+0x8c> lbu	a5,9(a5)
1c00d4f2 <rt_timer_control+0x90> andi	a5,a5,1
1c00d4f4 <rt_timer_control+0x92> beqz	a5,1c00d500 <rt_timer_control+0x9e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:499
        {
            /*timer is start and run*/
            *(rt_tick_t *)arg = RT_TIMER_FLAG_ACTIVATED;
1c00d4f6 <rt_timer_control+0x94> lw	a5,-28(s0)
1c00d4fa <rt_timer_control+0x98> li	a4,1
1c00d4fc <rt_timer_control+0x9a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:506
        else
        {
            /*timer is stop*/
            *(rt_tick_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
        }
        break;
1c00d4fe <rt_timer_control+0x9c> j	1c00d50c <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:504
            *(rt_tick_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
1c00d500 <rt_timer_control+0x9e> lw	a5,-28(s0)
1c00d504 <rt_timer_control+0xa2> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:506
        break;
1c00d508 <rt_timer_control+0xa6> j	1c00d50c <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:509

    default:
        break;
1c00d50a <rt_timer_control+0xa8> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:511
    }
    rt_hw_interrupt_enable(level);
1c00d50c <rt_timer_control+0xaa> mv	a0,ra
1c00d50e <rt_timer_control+0xac> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:513

    return RT_EOK;
1c00d512 <rt_timer_control+0xb0> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:514
}
1c00d514 <rt_timer_control+0xb2> mv	a0,a5
1c00d516 <rt_timer_control+0xb4> lw	ra,28(sp)
1c00d518 <rt_timer_control+0xb6> lw	s0,24(sp)
1c00d51a <rt_timer_control+0xb8> addi	sp,sp,32
1c00d51c <rt_timer_control+0xba> ret
rt_timer_check():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:523
 * corresponding timeout function will be invoked.
 *
 * @note this function shall be invoked in operating system timer interrupt.
 */
void rt_timer_check(void)
{
1c00d51e <rt_timer_check> addi	sp,sp,-32
1c00d520 <rt_timer_check+0x2> sw	ra,28(sp)
1c00d522 <rt_timer_check+0x4> sw	s0,24(sp)
1c00d524 <rt_timer_check+0x6> sw	s1,20(sp)
1c00d526 <rt_timer_check+0x8> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:529
    struct rt_timer *t;
    rt_tick_t current_tick;
    register rt_base_t level;
    rt_list_t list;

    rt_list_init(&list);
1c00d528 <rt_timer_check+0xa> addi	a5,s0,-32
1c00d52c <rt_timer_check+0xe> mv	a0,a5
1c00d52e <rt_timer_check+0x10> jal	ra,1c00cfc4 <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:533

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));

    current_tick = rt_tick_get();
1c00d532 <rt_timer_check+0x14> jal	ra,1c00b686 <rt_tick_get>
1c00d536 <rt_timer_check+0x18> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:536

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00d53a <rt_timer_check+0x1c> jal	ra,1c008730 <rt_hw_interrupt_disable>
1c00d53e <rt_timer_check+0x20> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:538

    while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
1c00d540 <rt_timer_check+0x22> j	1c00d60e <rt_timer_check+0xf0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:540
    {
        t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
1c00d542 <rt_timer_check+0x24> addi	a5,gp,1112 # 1c00ebc0 <rt_timer_list>
1c00d546 <rt_timer_check+0x28> lw	a5,0(a5)
1c00d548 <rt_timer_check+0x2a> addi	a5,a5,-20
1c00d54a <rt_timer_check+0x2c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:547

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
1c00d54e <rt_timer_check+0x30> lw	a5,-24(s0)
1c00d552 <rt_timer_check+0x34> lw	a5,40(a5)
1c00d554 <rt_timer_check+0x36> lw	a4,-20(s0)
1c00d558 <rt_timer_check+0x3a> sub	a4,a4,a5
1c00d55a <rt_timer_check+0x3c> lui	a5,0x80000
1c00d55e <rt_timer_check+0x40> xori	a5,a5,-2
1c00d562 <rt_timer_check+0x44> bltu	a5,a4,1c00d61c <rt_timer_check+0xfe>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:552
        {
            RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
1c00d566 <rt_timer_check+0x48> lw	a0,-24(s0)
1c00d56a <rt_timer_check+0x4c> jal	ra,1c00d138 <_rt_timer_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:553
            if (!(t->parent.flag & RT_TIMER_FLAG_PERIODIC))
1c00d56e <rt_timer_check+0x50> lw	a5,-24(s0)
1c00d572 <rt_timer_check+0x54> lbu	a5,9(a5) # 80000009 <__l2_shared_end+0x63fe0899>
1c00d576 <rt_timer_check+0x58> andi	a5,a5,2
1c00d578 <rt_timer_check+0x5a> bnez	a5,1c00d590 <rt_timer_check+0x72>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:555
            {
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d57a <rt_timer_check+0x5c> lw	a5,-24(s0)
1c00d57e <rt_timer_check+0x60> lbu	a5,9(a5)
1c00d582 <rt_timer_check+0x64> andi	a5,a5,-2
1c00d584 <rt_timer_check+0x66> andi	a4,a5,255
1c00d588 <rt_timer_check+0x6a> lw	a5,-24(s0)
1c00d58c <rt_timer_check+0x6e> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:558
            }
            /* add timer to temporary list  */
            rt_list_insert_after(&list, &(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
1c00d590 <rt_timer_check+0x72> lw	a5,-24(s0)
1c00d594 <rt_timer_check+0x76> addi	a4,a5,20
1c00d598 <rt_timer_check+0x7a> addi	a5,s0,-32
1c00d59c <rt_timer_check+0x7e> mv	a1,a4
1c00d59e <rt_timer_check+0x80> mv	a0,a5
1c00d5a0 <rt_timer_check+0x82> jal	ra,1c00cfec <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:560
            /* call timeout function */
            t->timeout_func(t->parameter);
1c00d5a4 <rt_timer_check+0x86> lw	a5,-24(s0)
1c00d5a8 <rt_timer_check+0x8a> lw	a4,28(a5)
1c00d5aa <rt_timer_check+0x8c> lw	a5,-24(s0)
1c00d5ae <rt_timer_check+0x90> lw	a5,32(a5)
1c00d5b0 <rt_timer_check+0x92> mv	a0,a5
1c00d5b2 <rt_timer_check+0x94> jalr	a4
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:563

            /* re-get tick */
            current_tick = rt_tick_get();
1c00d5b4 <rt_timer_check+0x96> jal	ra,1c00b686 <rt_tick_get>
1c00d5b8 <rt_timer_check+0x9a> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:569

            RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* Check whether the timer object is detached or started again */
            if (rt_list_isempty(&list))
1c00d5bc <rt_timer_check+0x9e> addi	a5,s0,-32
1c00d5c0 <rt_timer_check+0xa2> mv	a0,a5
1c00d5c2 <rt_timer_check+0xa4> jal	ra,1c00d072 <rt_list_isempty>
1c00d5c6 <rt_timer_check+0xa8> mv	a5,a0
1c00d5c8 <rt_timer_check+0xaa> beqz	a5,1c00d5cc <rt_timer_check+0xae>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:571
            {
                continue;
1c00d5ca <rt_timer_check+0xac> j	1c00d60e <rt_timer_check+0xf0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:573
            }
            rt_list_remove(&(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
1c00d5cc <rt_timer_check+0xae> lw	a5,-24(s0)
1c00d5d0 <rt_timer_check+0xb2> addi	a5,a5,20
1c00d5d2 <rt_timer_check+0xb4> mv	a0,a5
1c00d5d4 <rt_timer_check+0xb6> jal	ra,1c00d02e <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:574
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
1c00d5d8 <rt_timer_check+0xba> lw	a5,-24(s0)
1c00d5dc <rt_timer_check+0xbe> lbu	a5,9(a5)
1c00d5e0 <rt_timer_check+0xc2> andi	a5,a5,2
1c00d5e2 <rt_timer_check+0xc4> beqz	a5,1c00d60e <rt_timer_check+0xf0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:575 (discriminator 1)
                (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
1c00d5e4 <rt_timer_check+0xc6> lw	a5,-24(s0)
1c00d5e8 <rt_timer_check+0xca> lbu	a5,9(a5)
1c00d5ec <rt_timer_check+0xce> andi	a5,a5,1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:574 (discriminator 1)
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
1c00d5ee <rt_timer_check+0xd0> beqz	a5,1c00d60e <rt_timer_check+0xf0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:578
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d5f0 <rt_timer_check+0xd2> lw	a5,-24(s0)
1c00d5f4 <rt_timer_check+0xd6> lbu	a5,9(a5)
1c00d5f8 <rt_timer_check+0xda> andi	a5,a5,-2
1c00d5fa <rt_timer_check+0xdc> andi	a4,a5,255
1c00d5fe <rt_timer_check+0xe0> lw	a5,-24(s0)
1c00d602 <rt_timer_check+0xe4> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:579
                rt_timer_start(t);
1c00d606 <rt_timer_check+0xe8> lw	a0,-24(s0)
1c00d60a <rt_timer_check+0xec> jal	ra,1c00d21c <rt_timer_start>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:538
    while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
1c00d60e <rt_timer_check+0xf0> addi	a0,gp,1112 # 1c00ebc0 <rt_timer_list>
1c00d612 <rt_timer_check+0xf4> jal	ra,1c00d072 <rt_list_isempty>
1c00d616 <rt_timer_check+0xf8> mv	a5,a0
1c00d618 <rt_timer_check+0xfa> beqz	a5,1c00d542 <rt_timer_check+0x24>
1c00d61a <rt_timer_check+0xfc> j	1c00d61e <rt_timer_check+0x100>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:582
            }
        }
        else break;
1c00d61c <rt_timer_check+0xfe> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:586
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00d61e <rt_timer_check+0x100> mv	a0,s1
1c00d620 <rt_timer_check+0x102> jal	ra,1c008736 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:589

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
}
1c00d624 <rt_timer_check+0x106> nop
1c00d626 <rt_timer_check+0x108> lw	ra,28(sp)
1c00d628 <rt_timer_check+0x10a> lw	s0,24(sp)
1c00d62a <rt_timer_check+0x10c> lw	s1,20(sp)
1c00d62c <rt_timer_check+0x10e> addi	sp,sp,32
1c00d62e <rt_timer_check+0x110> ret
rt_system_timer_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:722
 * @ingroup SystemInit
 *
 * This function will initialize system timer
 */
void rt_system_timer_init(void)
{
1c00d630 <rt_system_timer_init> addi	sp,sp,-32
1c00d632 <rt_system_timer_init+0x2> sw	ra,28(sp)
1c00d634 <rt_system_timer_init+0x4> sw	s0,24(sp)
1c00d636 <rt_system_timer_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:725
    int i;

    for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
1c00d638 <rt_system_timer_init+0x8> sw	zero,-20(s0)
1c00d63c <rt_system_timer_init+0xc> j	1c00d65c <rt_system_timer_init+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:727 (discriminator 3)
    {
        rt_list_init(rt_timer_list + i);
1c00d63e <rt_system_timer_init+0xe> lw	a5,-20(s0)
1c00d642 <rt_system_timer_init+0x12> slli	a4,a5,0x3
1c00d646 <rt_system_timer_init+0x16> addi	a5,gp,1112 # 1c00ebc0 <rt_timer_list>
1c00d64a <rt_system_timer_init+0x1a> add	a5,a5,a4
1c00d64c <rt_system_timer_init+0x1c> mv	a0,a5
1c00d64e <rt_system_timer_init+0x1e> jal	ra,1c00cfc4 <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:725 (discriminator 3)
    for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
1c00d652 <rt_system_timer_init+0x22> lw	a5,-20(s0)
1c00d656 <rt_system_timer_init+0x26> addi	a5,a5,1
1c00d658 <rt_system_timer_init+0x28> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:725 (discriminator 1)
1c00d65c <rt_system_timer_init+0x2c> lw	a5,-20(s0)
1c00d660 <rt_system_timer_init+0x30> beqz	a5,1c00d63e <rt_system_timer_init+0xe>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:729
    }
}
1c00d662 <rt_system_timer_init+0x32> nop
1c00d664 <rt_system_timer_init+0x34> lw	ra,28(sp)
1c00d666 <rt_system_timer_init+0x36> lw	s0,24(sp)
1c00d668 <rt_system_timer_init+0x38> addi	sp,sp,32
1c00d66a <rt_system_timer_init+0x3a> ret
rt_system_timer_thread_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:737
 * @ingroup SystemInit
 *
 * This function will initialize system timer thread
 */
void rt_system_timer_thread_init(void)
{
1c00d66c <rt_system_timer_thread_init> addi	sp,sp,-16
1c00d66e <rt_system_timer_thread_init+0x2> sw	s0,12(sp)
1c00d670 <rt_system_timer_thread_init+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:761
                   10);

    /* startup */
    rt_thread_startup(&timer_thread);
#endif
}
1c00d672 <rt_system_timer_thread_init+0x6> nop
1c00d674 <rt_system_timer_thread_init+0x8> lw	s0,12(sp)
1c00d676 <rt_system_timer_thread_init+0xa> addi	sp,sp,16
1c00d678 <rt_system_timer_thread_init+0xc> ret
rti_board_start():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:63
    return 0;
}
INIT_EXPORT(rti_start, "0");

static int rti_board_start(void)
{
1c00d67a <rti_board_start> addi	sp,sp,-16
1c00d67c <rti_board_start+0x2> sw	s0,12(sp)
1c00d67e <rti_board_start+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:64
    return 0;
1c00d680 <rti_board_start+0x6> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:65
}
1c00d682 <rti_board_start+0x8> mv	a0,a5
1c00d684 <rti_board_start+0xa> lw	s0,12(sp)
1c00d686 <rti_board_start+0xc> addi	sp,sp,16
1c00d688 <rti_board_start+0xe> ret
rti_board_end():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:69
INIT_EXPORT(rti_board_start, "0.end");

static int rti_board_end(void)
{
1c00d68a <rti_board_end> addi	sp,sp,-16
1c00d68c <rti_board_end+0x2> sw	s0,12(sp)
1c00d68e <rti_board_end+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:70
    return 0;
1c00d690 <rti_board_end+0x6> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:71
}
1c00d692 <rti_board_end+0x8> mv	a0,a5
1c00d694 <rti_board_end+0xa> lw	s0,12(sp)
1c00d696 <rti_board_end+0xc> addi	sp,sp,16
1c00d698 <rti_board_end+0xe> ret
rti_end():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:75
INIT_EXPORT(rti_board_end, "1.end");

static int rti_end(void)
{
1c00d69a <rti_end> addi	sp,sp,-16
1c00d69c <rti_end+0x2> sw	s0,12(sp)
1c00d69e <rti_end+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:76
    return 0;
1c00d6a0 <rti_end+0x6> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:77
}
1c00d6a2 <rti_end+0x8> mv	a0,a5
1c00d6a4 <rti_end+0xa> lw	s0,12(sp)
1c00d6a6 <rti_end+0xc> addi	sp,sp,16
1c00d6a8 <rti_end+0xe> ret
rt_components_board_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:84

/**
 * RT-Thread Components Initialization for board
 */
void rt_components_board_init(void)
{
1c00d6aa <rt_components_board_init> addi	sp,sp,-32
1c00d6ac <rt_components_board_init+0x2> sw	ra,28(sp)
1c00d6ae <rt_components_board_init+0x4> sw	s0,24(sp)
1c00d6b0 <rt_components_board_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:97
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
1c00d6b2 <rt_components_board_init+0x8> lui	a5,0x1c00e
1c00d6b6 <rt_components_board_init+0xc> addi	a5,a5,-756 # 1c00dd0c <__rt_init_rti_board_start>
1c00d6ba <rt_components_board_init+0x10> sw	a5,-20(s0)
1c00d6be <rt_components_board_init+0x14> j	1c00d6d2 <rt_components_board_init+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:99 (discriminator 3)
    {
        (*fn_ptr)();
1c00d6c0 <rt_components_board_init+0x16> lw	a5,-20(s0)
1c00d6c4 <rt_components_board_init+0x1a> lw	a5,0(a5)
1c00d6c6 <rt_components_board_init+0x1c> jalr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:97 (discriminator 3)
    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
1c00d6c8 <rt_components_board_init+0x1e> lw	a5,-20(s0)
1c00d6cc <rt_components_board_init+0x22> addi	a5,a5,4
1c00d6ce <rt_components_board_init+0x24> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:97 (discriminator 1)
1c00d6d2 <rt_components_board_init+0x28> lw	a4,-20(s0)
1c00d6d6 <rt_components_board_init+0x2c> lui	a5,0x1c00e
1c00d6da <rt_components_board_init+0x30> addi	a5,a5,-752 # 1c00dd10 <__rt_init_rti_board_end>
1c00d6de <rt_components_board_init+0x34> bltu	a4,a5,1c00d6c0 <rt_components_board_init+0x16>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:102
    }
#endif
}
1c00d6e2 <rt_components_board_init+0x38> nop
1c00d6e4 <rt_components_board_init+0x3a> lw	ra,28(sp)
1c00d6e6 <rt_components_board_init+0x3c> lw	s0,24(sp)
1c00d6e8 <rt_components_board_init+0x3e> addi	sp,sp,32
1c00d6ea <rt_components_board_init+0x40> ret
rt_components_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:108

/**
 * RT-Thread Components Initialization
 */
void rt_components_init(void)
{
1c00d6ec <rt_components_init> addi	sp,sp,-32
1c00d6ee <rt_components_init+0x2> sw	ra,28(sp)
1c00d6f0 <rt_components_init+0x4> sw	s0,24(sp)
1c00d6f2 <rt_components_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:123
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
1c00d6f4 <rt_components_init+0x8> lui	a5,0x1c00e
1c00d6f8 <rt_components_init+0xc> addi	a5,a5,-752 # 1c00dd10 <__rt_init_rti_board_end>
1c00d6fc <rt_components_init+0x10> sw	a5,-20(s0)
1c00d700 <rt_components_init+0x14> j	1c00d714 <rt_components_init+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:125 (discriminator 3)
    {
        (*fn_ptr)();
1c00d702 <rt_components_init+0x16> lw	a5,-20(s0)
1c00d706 <rt_components_init+0x1a> lw	a5,0(a5)
1c00d708 <rt_components_init+0x1c> jalr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:123 (discriminator 3)
    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
1c00d70a <rt_components_init+0x1e> lw	a5,-20(s0)
1c00d70e <rt_components_init+0x22> addi	a5,a5,4
1c00d710 <rt_components_init+0x24> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:123 (discriminator 1)
1c00d714 <rt_components_init+0x28> lw	a4,-20(s0)
1c00d718 <rt_components_init+0x2c> lui	a5,0x1c00e
1c00d71c <rt_components_init+0x30> addi	a5,a5,-748 # 1c00dd14 <__rt_init_rti_end>
1c00d720 <rt_components_init+0x34> bltu	a4,a5,1c00d702 <rt_components_init+0x16>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:128
    }
#endif
}
1c00d724 <rt_components_init+0x38> nop
1c00d726 <rt_components_init+0x3a> lw	ra,28(sp)
1c00d728 <rt_components_init+0x3c> lw	s0,24(sp)
1c00d72a <rt_components_init+0x3e> addi	sp,sp,32
1c00d72c <rt_components_init+0x40> ret
entry():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:159
    return 0;
}
#elif defined(__GNUC__)
/* Add -eentry to arm-none-eabi-gcc argument */
int entry(void)
{
1c00d72e <entry> addi	sp,sp,-16
1c00d730 <entry+0x2> sw	ra,12(sp)
1c00d732 <entry+0x4> sw	s0,8(sp)
1c00d734 <entry+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:160
    rtthread_startup();
1c00d736 <entry+0x8> jal	1c00d7b2 <rtthread_startup>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:161
    return 0;
1c00d738 <entry+0xa> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:162
}
1c00d73a <entry+0xc> mv	a0,a5
1c00d73c <entry+0xe> lw	ra,12(sp)
1c00d73e <entry+0x10> lw	s0,8(sp)
1c00d740 <entry+0x12> addi	sp,sp,16
1c00d742 <entry+0x14> ret
main_thread_entry():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:174
struct rt_thread main_thread;
#endif

/* the system main thread */
void main_thread_entry(void *parameter)
{
1c00d744 <main_thread_entry> addi	sp,sp,-32
1c00d746 <main_thread_entry+0x2> sw	ra,28(sp)
1c00d748 <main_thread_entry+0x4> sw	s0,24(sp)
1c00d74a <main_thread_entry+0x6> addi	s0,sp,32
1c00d74c <main_thread_entry+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:180
    extern int main(void);
    extern int $Super$$main(void);

#ifdef RT_USING_COMPONENTS_INIT
    /* RT-Thread components initialization */
    rt_components_init();
1c00d750 <main_thread_entry+0xc> jal	ra,1c00d6ec <rt_components_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:186
#endif
    /* invoke system main function */
#if defined(__CC_ARM) || defined(__CLANG_ARM)
    $Super$$main(); /* for ARMCC. */
#elif defined(__ICCARM__) || defined(__GNUC__)
    main();
1c00d754 <main_thread_entry+0x10> jal	ra,1c00b5fe <main>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:188
#endif
}
1c00d758 <main_thread_entry+0x14> nop
1c00d75a <main_thread_entry+0x16> lw	ra,28(sp)
1c00d75c <main_thread_entry+0x18> lw	s0,24(sp)
1c00d75e <main_thread_entry+0x1a> addi	sp,sp,32
1c00d760 <main_thread_entry+0x1c> ret
rt_application_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:191

void rt_application_init(void)
{
1c00d762 <rt_application_init> addi	sp,sp,-32
1c00d764 <rt_application_init+0x2> sw	ra,28(sp)
1c00d766 <rt_application_init+0x4> sw	s0,24(sp)
1c00d768 <rt_application_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:201
                           RT_MAIN_THREAD_STACK_SIZE, RT_MAIN_THREAD_PRIORITY, 20);
    RT_ASSERT(tid != RT_NULL);
#else
    rt_err_t result;

    tid = &main_thread;
1c00d76a <rt_application_init+0x8> lui	a5,0x1c00f
1c00d76e <rt_application_init+0xc> addi	a5,a5,-272 # 1c00eef0 <main_thread>
1c00d772 <rt_application_init+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:202
    result = rt_thread_init(tid, "main", main_thread_entry, RT_NULL,
1c00d776 <rt_application_init+0x14> li	a7,20
1c00d778 <rt_application_init+0x16> li	a6,2
1c00d77a <rt_application_init+0x18> li	a5,256
1c00d77e <rt_application_init+0x1c> addi	a4,gp,728 # 1c00ea40 <main_stack>
1c00d782 <rt_application_init+0x20> li	a3,0
1c00d784 <rt_application_init+0x22> lui	a2,0x1c00d
1c00d788 <rt_application_init+0x26> addi	a2,a2,1860 # 1c00d744 <main_thread_entry>
1c00d78c <rt_application_init+0x2a> lui	a1,0x1c00e
1c00d790 <rt_application_init+0x2e> addi	a1,a1,-764 # 1c00dd04 <small_digits.2066+0x28>
1c00d794 <rt_application_init+0x32> lw	a0,-20(s0)
1c00d798 <rt_application_init+0x36> jal	ra,1c00ccbe <rt_thread_init>
1c00d79c <rt_application_init+0x3a> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:210

    /* if not define RT_USING_HEAP, using to eliminate the warning */
    (void)result;
#endif

    rt_thread_startup(tid);
1c00d7a0 <rt_application_init+0x3e> lw	a0,-20(s0)
1c00d7a4 <rt_application_init+0x42> jal	ra,1c00cd3a <rt_thread_startup>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:211
}
1c00d7a8 <rt_application_init+0x46> nop
1c00d7aa <rt_application_init+0x48> lw	ra,28(sp)
1c00d7ac <rt_application_init+0x4a> lw	s0,24(sp)
1c00d7ae <rt_application_init+0x4c> addi	sp,sp,32
1c00d7b0 <rt_application_init+0x4e> ret
rtthread_startup():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:214

int rtthread_startup(void)
{
1c00d7b2 <rtthread_startup> addi	sp,sp,-16
1c00d7b4 <rtthread_startup+0x2> sw	ra,12(sp)
1c00d7b6 <rtthread_startup+0x4> sw	s0,8(sp)
1c00d7b8 <rtthread_startup+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:215
    rt_hw_interrupt_disable();
1c00d7ba <rtthread_startup+0x8> jal	ra,1c008730 <rt_hw_interrupt_disable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:220

    /* board level initialization
     * NOTE: please initialize heap inside board initialization.
     */
    rt_hw_board_init();
1c00d7be <rtthread_startup+0xc> jal	ra,1c00b63a <rt_hw_board_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:223

    /* show RT-Thread version */
    rt_show_version();
1c00d7c2 <rtthread_startup+0x10> jal	ra,1c00b972 <rt_show_version>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:226

    /* timer system initialization */
    rt_system_timer_init();
1c00d7c6 <rtthread_startup+0x14> jal	ra,1c00d630 <rt_system_timer_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:229

    /* scheduler system initialization */
    rt_system_scheduler_init();
1c00d7ca <rtthread_startup+0x18> jal	ra,1c00c710 <rt_system_scheduler_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:232

    /* create init_thread */
    rt_application_init();
1c00d7ce <rtthread_startup+0x1c> jal	ra,1c00d762 <rt_application_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:235

    /* timer thread initialization */
    rt_system_timer_thread_init();
1c00d7d2 <rtthread_startup+0x20> jal	ra,1c00d66c <rt_system_timer_thread_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:238

    /* idle thread initialization */
    rt_thread_idle_init();
1c00d7d6 <rtthread_startup+0x24> jal	ra,1c00b708 <rt_thread_idle_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:241

    /* start scheduler */
    rt_system_scheduler_start();
1c00d7da <rtthread_startup+0x28> jal	ra,1c00c76a <rt_system_scheduler_start>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:244

    /* never reach here */
    return 0;
1c00d7de <rtthread_startup+0x2c> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:245
}
1c00d7e0 <rtthread_startup+0x2e> mv	a0,a5
1c00d7e2 <rtthread_startup+0x30> lw	ra,12(sp)
1c00d7e4 <rtthread_startup+0x32> lw	s0,8(sp)
1c00d7e6 <rtthread_startup+0x34> addi	sp,sp,16
1c00d7e8 <rtthread_startup+0x36> ret
	...
IRQ_Handler():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:19
  .align 2
  .global IRQ_Handler
IRQ_Handler:

    /* save all from thread context */
    addi sp, sp, -32 * REGBYTES
1c00d7ec <IRQ_Handler> addi	sp,sp,-128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:21

    STORE x1,   1 * REGBYTES(sp)
1c00d7ee <IRQ_Handler+0x2> sw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:22
    li    t0,   0x80
1c00d7f0 <IRQ_Handler+0x4> li	t0,128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:23
    STORE t0,   2 * REGBYTES(sp)
1c00d7f4 <IRQ_Handler+0x8> sw	t0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:25

    STORE x4,   4 * REGBYTES(sp)
1c00d7f6 <IRQ_Handler+0xa> sw	tp,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:26
    STORE x5,   5 * REGBYTES(sp)
1c00d7f8 <IRQ_Handler+0xc> sw	t0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:27
    STORE x6,   6 * REGBYTES(sp)
1c00d7fa <IRQ_Handler+0xe> sw	t1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:28
    STORE x7,   7 * REGBYTES(sp)
1c00d7fc <IRQ_Handler+0x10> sw	t2,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:29
    STORE x8,   8 * REGBYTES(sp)
1c00d7fe <IRQ_Handler+0x12> sw	s0,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:30
    STORE x9,   9 * REGBYTES(sp)
1c00d800 <IRQ_Handler+0x14> sw	s1,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:31
    STORE x10, 10 * REGBYTES(sp)
1c00d802 <IRQ_Handler+0x16> sw	a0,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:32
    STORE x11, 11 * REGBYTES(sp)
1c00d804 <IRQ_Handler+0x18> sw	a1,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:33
    STORE x12, 12 * REGBYTES(sp)
1c00d806 <IRQ_Handler+0x1a> sw	a2,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:34
    STORE x13, 13 * REGBYTES(sp)
1c00d808 <IRQ_Handler+0x1c> sw	a3,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:35
    STORE x14, 14 * REGBYTES(sp)
1c00d80a <IRQ_Handler+0x1e> sw	a4,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:36
    STORE x15, 15 * REGBYTES(sp)
1c00d80c <IRQ_Handler+0x20> sw	a5,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:37
    STORE x16, 16 * REGBYTES(sp)
1c00d80e <IRQ_Handler+0x22> sw	a6,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:38
    STORE x17, 17 * REGBYTES(sp)
1c00d810 <IRQ_Handler+0x24> sw	a7,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:39
    STORE x18, 18 * REGBYTES(sp)
1c00d812 <IRQ_Handler+0x26> sw	s2,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:40
    STORE x19, 19 * REGBYTES(sp)
1c00d814 <IRQ_Handler+0x28> sw	s3,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:41
    STORE x20, 20 * REGBYTES(sp)
1c00d816 <IRQ_Handler+0x2a> sw	s4,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:42
    STORE x21, 21 * REGBYTES(sp)
1c00d818 <IRQ_Handler+0x2c> sw	s5,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:43
    STORE x22, 22 * REGBYTES(sp)
1c00d81a <IRQ_Handler+0x2e> sw	s6,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:44
    STORE x23, 23 * REGBYTES(sp)
1c00d81c <IRQ_Handler+0x30> sw	s7,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:45
    STORE x24, 24 * REGBYTES(sp)
1c00d81e <IRQ_Handler+0x32> sw	s8,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:46
    STORE x25, 25 * REGBYTES(sp)
1c00d820 <IRQ_Handler+0x34> sw	s9,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:47
    STORE x26, 26 * REGBYTES(sp)
1c00d822 <IRQ_Handler+0x36> sw	s10,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:48
    STORE x27, 27 * REGBYTES(sp)
1c00d824 <IRQ_Handler+0x38> sw	s11,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:49
    STORE x28, 28 * REGBYTES(sp)
1c00d826 <IRQ_Handler+0x3a> sw	t3,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:50
    STORE x29, 29 * REGBYTES(sp)
1c00d828 <IRQ_Handler+0x3c> sw	t4,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:51
    STORE x30, 30 * REGBYTES(sp)
1c00d82a <IRQ_Handler+0x3e> sw	t5,120(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:52
    STORE x31, 31 * REGBYTES(sp)
1c00d82c <IRQ_Handler+0x40> sw	t6,124(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:54

    move  s0, sp
1c00d82e <IRQ_Handler+0x42> mv	s0,sp
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:57

    /* switch to interrupt stack */
    la    sp, xISRStackTop
1c00d830 <IRQ_Handler+0x44> addi	sp,gp,-1496 # 1c00e190 <xISRStackTop>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:60

    /* interrupt handle */
    call  rt_interrupt_enter
1c00d834 <IRQ_Handler+0x48> jal	ra,1c00b74a <rt_interrupt_enter>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:61
    csrr  a0, mcause
1c00d838 <IRQ_Handler+0x4c> csrr	a0,mcause
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:62
    csrr  a1, mepc
1c00d83c <IRQ_Handler+0x50> csrr	a1,mepc
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:63
    mv    a2, sp
1c00d840 <IRQ_Handler+0x54> mv	a2,sp
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:64
    call  vSystemIrqHandler
1c00d842 <IRQ_Handler+0x56> jal	ra,1c00b1e4 <vSystemIrqHandler>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:65
    call  rt_interrupt_leave
1c00d846 <IRQ_Handler+0x5a> jal	ra,1c00b786 <rt_interrupt_leave>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:68

    /* switch to from thread stack */
    move  sp, s0
1c00d84a <IRQ_Handler+0x5e> mv	sp,s0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:71

    /* need to switch new thread */
    la    s0, rt_thread_switch_interrupt_flag
1c00d84c <IRQ_Handler+0x60> addi	s0,gp,1132 # 1c00ebd4 <rt_thread_switch_interrupt_flag>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:72
    lw    s2, 0(s0)
1c00d850 <IRQ_Handler+0x64> lw	s2,0(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:73
    beqz  s2, spurious_interrupt
1c00d854 <IRQ_Handler+0x68> beqz	s2,1c00d87c <spurious_interrupt>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:75
    /* clear switch interrupt flag */
    sw    zero, 0(s0)
1c00d858 <IRQ_Handler+0x6c> sw	zero,0(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:77

    csrr  a0, mepc
1c00d85c <IRQ_Handler+0x70> csrr	a0,mepc
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:78
    STORE a0, 0 * REGBYTES(sp)
1c00d860 <IRQ_Handler+0x74> sw	a0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:80

    la    s0, rt_interrupt_from_thread
1c00d862 <IRQ_Handler+0x76> addi	s0,gp,1124 # 1c00ebcc <rt_interrupt_from_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:81
    LOAD  s1, 0(s0)
1c00d866 <IRQ_Handler+0x7a> lw	s1,0(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:82
    STORE sp, 0(s1)
1c00d868 <IRQ_Handler+0x7c> sw	sp,0(s1)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:84

    la    s0, rt_interrupt_to_thread
1c00d86c <IRQ_Handler+0x80> addi	s0,gp,1128 # 1c00ebd0 <rt_interrupt_to_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:85
    LOAD  s1, 0(s0)
1c00d870 <IRQ_Handler+0x84> lw	s1,0(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:86
    LOAD  sp, 0(s1)
1c00d872 <IRQ_Handler+0x86> lw	sp,0(s1)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:88

    LOAD  a0,  0 * REGBYTES(sp)
1c00d876 <IRQ_Handler+0x8a> lw	a0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:89
    csrw  mepc, a0
1c00d878 <IRQ_Handler+0x8c> csrw	mepc,a0
spurious_interrupt():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:92

spurious_interrupt:
    LOAD  x1,   1 * REGBYTES(sp)
1c00d87c <spurious_interrupt> lw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:95

    /* Remain in M-mode after mret */
    li    t0, 0x00001800
1c00d87e <spurious_interrupt+0x2> lui	t0,0x2
1c00d882 <spurious_interrupt+0x6> addi	t0,t0,-2048 # 00001800 <__stack_size+0x1000>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:96
    csrs  mstatus, t0
1c00d886 <spurious_interrupt+0xa> csrs	mstatus,t0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:97
    LOAD  t0,   2 * REGBYTES(sp)
1c00d88a <spurious_interrupt+0xe> lw	t0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:98
    csrs  mstatus, t0
1c00d88c <spurious_interrupt+0x10> csrs	mstatus,t0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:100

    LOAD  x4,   4 * REGBYTES(sp)
1c00d890 <spurious_interrupt+0x14> lw	tp,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:101
    LOAD  x5,   5 * REGBYTES(sp)
1c00d892 <spurious_interrupt+0x16> lw	t0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:102
    LOAD  x6,   6 * REGBYTES(sp)
1c00d894 <spurious_interrupt+0x18> lw	t1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:103
    LOAD  x7,   7 * REGBYTES(sp)
1c00d896 <spurious_interrupt+0x1a> lw	t2,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:104
    LOAD  x8,   8 * REGBYTES(sp)
1c00d898 <spurious_interrupt+0x1c> lw	s0,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:105
    LOAD  x9,   9 * REGBYTES(sp)
1c00d89a <spurious_interrupt+0x1e> lw	s1,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:106
    LOAD  x10, 10 * REGBYTES(sp)
1c00d89c <spurious_interrupt+0x20> lw	a0,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:107
    LOAD  x11, 11 * REGBYTES(sp)
1c00d89e <spurious_interrupt+0x22> lw	a1,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:108
    LOAD  x12, 12 * REGBYTES(sp)
1c00d8a0 <spurious_interrupt+0x24> lw	a2,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:109
    LOAD  x13, 13 * REGBYTES(sp)
1c00d8a2 <spurious_interrupt+0x26> lw	a3,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:110
    LOAD  x14, 14 * REGBYTES(sp)
1c00d8a4 <spurious_interrupt+0x28> lw	a4,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:111
    LOAD  x15, 15 * REGBYTES(sp)
1c00d8a6 <spurious_interrupt+0x2a> lw	a5,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:112
    LOAD  x16, 16 * REGBYTES(sp)
1c00d8a8 <spurious_interrupt+0x2c> lw	a6,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:113
    LOAD  x17, 17 * REGBYTES(sp)
1c00d8aa <spurious_interrupt+0x2e> lw	a7,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:114
    LOAD  x18, 18 * REGBYTES(sp)
1c00d8ac <spurious_interrupt+0x30> lw	s2,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:115
    LOAD  x19, 19 * REGBYTES(sp)
1c00d8ae <spurious_interrupt+0x32> lw	s3,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:116
    LOAD  x20, 20 * REGBYTES(sp)
1c00d8b0 <spurious_interrupt+0x34> lw	s4,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:117
    LOAD  x21, 21 * REGBYTES(sp)
1c00d8b2 <spurious_interrupt+0x36> lw	s5,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:118
    LOAD  x22, 22 * REGBYTES(sp)
1c00d8b4 <spurious_interrupt+0x38> lw	s6,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:119
    LOAD  x23, 23 * REGBYTES(sp)
1c00d8b6 <spurious_interrupt+0x3a> lw	s7,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:120
    LOAD  x24, 24 * REGBYTES(sp)
1c00d8b8 <spurious_interrupt+0x3c> lw	s8,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:121
    LOAD  x25, 25 * REGBYTES(sp)
1c00d8ba <spurious_interrupt+0x3e> lw	s9,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:122
    LOAD  x26, 26 * REGBYTES(sp)
1c00d8bc <spurious_interrupt+0x40> lw	s10,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:123
    LOAD  x27, 27 * REGBYTES(sp)
1c00d8be <spurious_interrupt+0x42> lw	s11,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:124
    LOAD  x28, 28 * REGBYTES(sp)
1c00d8c0 <spurious_interrupt+0x44> lw	t3,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:125
    LOAD  x29, 29 * REGBYTES(sp)
1c00d8c2 <spurious_interrupt+0x46> lw	t4,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:126
    LOAD  x30, 30 * REGBYTES(sp)
1c00d8c4 <spurious_interrupt+0x48> lw	t5,120(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:127
    LOAD  x31, 31 * REGBYTES(sp)
1c00d8c6 <spurious_interrupt+0x4a> lw	t6,124(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:129

    addi  sp, sp, 32 * REGBYTES
1c00d8c8 <spurious_interrupt+0x4c> addi	sp,sp,128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:130
    mret
1c00d8ca <spurious_interrupt+0x4e> mret
rt_hw_stack_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:72
 */
rt_uint8_t *rt_hw_stack_init(void       *tentry,
                             void       *parameter,
                             rt_uint8_t *stack_addr,
                             void       *texit)
{
1c00d8ce <rt_hw_stack_init> addi	sp,sp,-48
1c00d8d0 <rt_hw_stack_init+0x2> sw	s0,44(sp)
1c00d8d2 <rt_hw_stack_init+0x4> addi	s0,sp,48
1c00d8d4 <rt_hw_stack_init+0x6> sw	a0,-36(s0)
1c00d8d8 <rt_hw_stack_init+0xa> sw	a1,-40(s0)
1c00d8dc <rt_hw_stack_init+0xe> sw	a2,-44(s0)
1c00d8e0 <rt_hw_stack_init+0x12> sw	a3,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:77
    struct rt_hw_stack_frame *frame;
    rt_uint8_t         *stk;
    int                i;

    stk  = stack_addr + sizeof(rt_ubase_t);
1c00d8e4 <rt_hw_stack_init+0x16> lw	a5,-44(s0)
1c00d8e8 <rt_hw_stack_init+0x1a> addi	a5,a5,4
1c00d8ea <rt_hw_stack_init+0x1c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:78
    stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_ubase_t)stk, REGBYTES);
1c00d8ee <rt_hw_stack_init+0x20> lw	a5,-24(s0)
1c00d8f2 <rt_hw_stack_init+0x24> andi	a5,a5,-4
1c00d8f4 <rt_hw_stack_init+0x26> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:79
    stk -= sizeof(struct rt_hw_stack_frame);
1c00d8f8 <rt_hw_stack_init+0x2a> lw	a5,-24(s0)
1c00d8fc <rt_hw_stack_init+0x2e> addi	a5,a5,-128
1c00d900 <rt_hw_stack_init+0x32> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:81

    frame = (struct rt_hw_stack_frame *)stk;
1c00d904 <rt_hw_stack_init+0x36> lw	a5,-24(s0)
1c00d908 <rt_hw_stack_init+0x3a> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:83

    for (i = 0; i < sizeof(struct rt_hw_stack_frame) / sizeof(rt_ubase_t); i++)
1c00d90c <rt_hw_stack_init+0x3e> sw	zero,-20(s0)
1c00d910 <rt_hw_stack_init+0x42> j	1c00d932 <rt_hw_stack_init+0x64>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:85 (discriminator 3)
    {
        ((rt_ubase_t *)frame)[i] = 0xdeadbeef;
1c00d912 <rt_hw_stack_init+0x44> lw	a5,-20(s0)
1c00d916 <rt_hw_stack_init+0x48> slli	a5,a5,0x2
1c00d918 <rt_hw_stack_init+0x4a> lw	a4,-28(s0)
1c00d91c <rt_hw_stack_init+0x4e> add	a5,a5,a4
1c00d91e <rt_hw_stack_init+0x50> lui	a4,0xdeadc
1c00d922 <rt_hw_stack_init+0x54> addi	a4,a4,-273 # deadbeef <__l2_shared_end+0xc2abc77f>
1c00d926 <rt_hw_stack_init+0x58> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:83 (discriminator 3)
    for (i = 0; i < sizeof(struct rt_hw_stack_frame) / sizeof(rt_ubase_t); i++)
1c00d928 <rt_hw_stack_init+0x5a> lw	a5,-20(s0)
1c00d92c <rt_hw_stack_init+0x5e> addi	a5,a5,1
1c00d92e <rt_hw_stack_init+0x60> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:83 (discriminator 1)
1c00d932 <rt_hw_stack_init+0x64> lw	a4,-20(s0)
1c00d936 <rt_hw_stack_init+0x68> li	a5,31
1c00d938 <rt_hw_stack_init+0x6a> bgeu	a5,a4,1c00d912 <rt_hw_stack_init+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:88
    }

    frame->ra      = (rt_ubase_t)texit;
1c00d93c <rt_hw_stack_init+0x6e> lw	a4,-48(s0)
1c00d940 <rt_hw_stack_init+0x72> lw	a5,-28(s0)
1c00d944 <rt_hw_stack_init+0x76> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:89
    frame->a0      = (rt_ubase_t)parameter;
1c00d946 <rt_hw_stack_init+0x78> lw	a4,-40(s0)
1c00d94a <rt_hw_stack_init+0x7c> lw	a5,-28(s0)
1c00d94e <rt_hw_stack_init+0x80> sw	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:90
    frame->epc     = (rt_ubase_t)tentry;
1c00d950 <rt_hw_stack_init+0x82> lw	a4,-36(s0)
1c00d954 <rt_hw_stack_init+0x86> lw	a5,-28(s0)
1c00d958 <rt_hw_stack_init+0x8a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:93

    /* force to machine mode(MPP=11) and set MPIE to 1 */
    frame->mstatus = 0x00007880;
1c00d95a <rt_hw_stack_init+0x8c> lw	a5,-28(s0)
1c00d95e <rt_hw_stack_init+0x90> lui	a4,0x8
1c00d960 <rt_hw_stack_init+0x92> addi	a4,a4,-1920 # 00007880 <__stack_size+0x7080>
1c00d964 <rt_hw_stack_init+0x96> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:95

    return stk;
1c00d966 <rt_hw_stack_init+0x98> lw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:96
}
1c00d96a <rt_hw_stack_init+0x9c> mv	a0,a5
1c00d96c <rt_hw_stack_init+0x9e> lw	s0,44(sp)
1c00d96e <rt_hw_stack_init+0xa0> addi	sp,sp,48
1c00d970 <rt_hw_stack_init+0xa2> ret
rt_hw_context_switch_interrupt():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:109
 */

//extern void IRQ_Handler();
#ifndef RT_USING_SMP
void rt_hw_context_switch_interrupt(rt_ubase_t from, rt_ubase_t to)
{
1c00d972 <rt_hw_context_switch_interrupt> addi	sp,sp,-32
1c00d974 <rt_hw_context_switch_interrupt+0x2> sw	s0,28(sp)
1c00d976 <rt_hw_context_switch_interrupt+0x4> addi	s0,sp,32
1c00d978 <rt_hw_context_switch_interrupt+0x6> sw	a0,-20(s0)
1c00d97c <rt_hw_context_switch_interrupt+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:110
    if (rt_thread_switch_interrupt_flag == 0)
1c00d980 <rt_hw_context_switch_interrupt+0xe> lw	a5,1132(gp) # 1c00ebd4 <rt_thread_switch_interrupt_flag>
1c00d984 <rt_hw_context_switch_interrupt+0x12> bnez	a5,1c00d98e <rt_hw_context_switch_interrupt+0x1c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:111
        rt_interrupt_from_thread = from;
1c00d986 <rt_hw_context_switch_interrupt+0x14> lw	a4,-20(s0)
1c00d98a <rt_hw_context_switch_interrupt+0x18> sw	a4,1124(gp) # 1c00ebcc <rt_interrupt_from_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:113

    rt_interrupt_to_thread = to;
1c00d98e <rt_hw_context_switch_interrupt+0x1c> lw	a4,-24(s0)
1c00d992 <rt_hw_context_switch_interrupt+0x20> sw	a4,1128(gp) # 1c00ebd0 <rt_interrupt_to_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:114
    rt_thread_switch_interrupt_flag = 1;
1c00d996 <rt_hw_context_switch_interrupt+0x24> li	a4,1
1c00d998 <rt_hw_context_switch_interrupt+0x26> sw	a4,1132(gp) # 1c00ebd4 <rt_thread_switch_interrupt_flag>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:117
    //IRQ_Handler();
    //__asm volatile( "ecall" );
    return ;
1c00d99c <rt_hw_context_switch_interrupt+0x2a> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:118
}
1c00d99e <rt_hw_context_switch_interrupt+0x2c> lw	s0,28(sp)
1c00d9a0 <rt_hw_context_switch_interrupt+0x2e> addi	sp,sp,32
1c00d9a2 <rt_hw_context_switch_interrupt+0x30> ret
__stack_chk_init():
1c00d9a4 <__stack_chk_init> lw	a4,984(gp) # 1c00eb40 <__stack_chk_guard>
1c00d9a8 <__stack_chk_init+0x4> bnez	a4,1c00d9b2 <__stack_chk_init+0xe>
1c00d9aa <__stack_chk_init+0x6> lui	a4,0xff0a0
1c00d9ae <__stack_chk_init+0xa> sw	a4,984(gp) # 1c00eb40 <__stack_chk_guard>
1c00d9b2 <__stack_chk_init+0xe> ret
