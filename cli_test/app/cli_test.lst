
cli_test:     file format elf32-littleriscv
cli_test
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1c008080

Program Header:
    LOAD off    0x00000000 vaddr 0x1c000000 paddr 0x1c000000 align 2**12
         filesz 0x00000880 memsz 0x00000880 flags r-x
    LOAD off    0x00001080 vaddr 0x1c008080 paddr 0x1c008080 align 2**12
         filesz 0x0001efb0 memsz 0x0001f7b0 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .vectors       00000080  1c000800  1c000800  00000800  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text          000082a8  1c008080  1c008080  00001080  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata        00000a61  1c010328  1c010328  00009328  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .eh_frame      00000000  1c010d8c  1c010d8c  00009d8c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array    00000004  1c010d8c  1c010d8c  00009d8c  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .data          0000047c  1c010d90  1c010d90  00009d90  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss           00005e20  1c011210  1c011210  0000a20c  2**3  ALLOC
  7 .heap          00010000  1c017030  1c017030  00010030  2**4  CONTENTS, ALLOC, LOAD, DATA
  8 .stack         00000800  1c027030  1c027030  00020030  2**4  ALLOC
  9 .l2_data       00000000  1c027830  1c027830  00020030  2**0  CONTENTS
 10 .debug_info    0001ce06  00000000  00000000  00020030  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev  000053bb  00000000  00000000  0003ce36  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001258  00000000  00000000  000421f8  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges  00001318  00000000  00000000  00043450  2**3  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro   0000934e  00000000  00000000  00044768  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line    00013fb9  00000000  00000000  0004dab6  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str     000367f1  00000000  00000000  00061a6f  2**0  CONTENTS, READONLY, DEBUGGING
 17 .comment       00000054  00000000  00000000  00098260  2**0  CONTENTS, READONLY
 18 .debug_frame   00004194  00000000  00000000  000982b4  2**2  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc     0000290f  00000000  00000000  0009c448  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1c000800 l    d  .vectors	00000000 .vectors
1c008080 l    d  .text	00000000 .text
1c010328 l    d  .rodata	00000000 .rodata
1c010d8c l    d  .eh_frame	00000000 .eh_frame
1c010d8c l    d  .init_array	00000000 .init_array
1c010d90 l    d  .data	00000000 .data
1c011210 l    d  .bss	00000000 .bss
1c017030 l    d  .heap	00000000 .heap
1c027030 l    d  .stack	00000000 .stack
1c027830 l    d  .l2_data	00000000 .l2_data
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 /home/wangshun/plct_cli/cli_test/cli_test/target/vectors.o
1c000800 l       .vectors	00000000 vector_table
00000000 l    df *ABS*	00000000 rt-thread/libcpu/risc-v/common/context_gcc.o
1c0080fc l       .text	00000000 save_mpie
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 queue.c
1c008788 l     F .text	0000006c prvInitialiseNewQueue
1c008a98 l     F .text	0000012a prvCopyDataToQueue
1c008c80 l     F .text	0000003e prvIsQueueFull
1c008bc2 l     F .text	000000be prvUnlockQueue
00000000 l    df *ABS*	00000000 tasks.c
1c011210 l     O .bss	00000064 pxReadyTasksLists
1c016b6c l     O .bss	00000004 pxDelayedTaskList
1c016b70 l     O .bss	00000004 pxOverflowDelayedTaskList
1c011274 l     O .bss	00000014 xPendingReadyList
1c011288 l     O .bss	00000014 xSuspendedTaskList
1c016b74 l     O .bss	00000004 uxCurrentNumberOfTasks
1c016b7c l     O .bss	00000004 uxTopReadyPriority
1c016b80 l     O .bss	00000004 xSchedulerRunning
1c016b84 l     O .bss	00000004 xPendedTicks
1c016b88 l     O .bss	00000004 xYieldPending
1c016b8c l     O .bss	00000004 xNumOfOverflows
1c016b90 l     O .bss	00000004 xNextTaskUnblockTime
1c016b94 l     O .bss	00000004 uxSchedulerSuspended
1c0093a2 l     F .text	00000044 prvResetNextTaskUnblockTime
1c009580 l     F .text	000000e2 prvAddCurrentTaskToDelayedList
00000000 l    df *ABS*	00000000 heap_2.c
1c016b98 l     O .bss	00000008 xStart
1c016ba0 l     O .bss	00000008 xEnd
1c011200 l     O .data	00000004 xFreeBytesRemaining
1c016ba8 l     O .bss	00000004 xHeapHasBeenInitialised.2470
1c0097f2 l     F .text	00000070 prvHeapInit
00000000 l    df *ABS*	00000000 hal_apb_i2cs.c
00000000 l    df *ABS*	00000000 hal_fc_event.c
1c01129c l     O .bss	000002a0 fc_event_handlers
1c01153c l     O .bss	000002a0 fc_event_semaphores
1c009920 l     F .text	00000012 fc_event_null_event
1c016bac l     O .bss	00000004 xHigherPriorityTaskWoken.4047
00000000 l    df *ABS*	00000000 hal_irq.c
00000000 l    df *ABS*	00000000 hal_pinmux.c
00000000 l    df *ABS*	00000000 hal_soc_eu.c
1c009b90 l     F .text	00000020 writew
00000000 l    df *ABS*	00000000 hal_timer_irq.c
1c009c16 l     F .text	00000020 writew
00000000 l    df *ABS*	00000000 udma_i2cm_driver.c
1c009cca l     F .text	00000020 writew
1c009cea l     F .text	00000020 readw
1c009d0a l     F .text	0000002e soc_eu_fc_write
1c009d38 l     F .text	00000028 soc_eu_fc_read
1c009d60 l     F .text	00000076 hal_soc_eu_set_fc_mask
1c016bb0 l     O .bss	00000002 aucclkdiv
00000000 l    df *ABS*	00000000 udma_qspi_driver.c
1c009ff0 l     F .text	00000020 writew
1c00a010 l     F .text	00000020 readw
1c00a030 l     F .text	0000002e soc_eu_fc_write
1c00a05e l     F .text	00000028 soc_eu_fc_read
1c00a086 l     F .text	00000076 hal_soc_eu_set_fc_mask
1c016bb4 l     O .bss	00000004 isr_count
1c0117dc l     O .bss	00000040 auccmd
1c01181c l     O .bss	00000010 rx_data
00000000 l    df *ABS*	00000000 udma_uart_driver.c
1c00a672 l     F .text	00000020 writew
1c00a692 l     F .text	00000020 readw
1c00a6b2 l     F .text	0000002e soc_eu_fc_write
1c00a6e0 l     F .text	00000028 soc_eu_fc_read
1c00a708 l     F .text	00000076 hal_soc_eu_set_fc_mask
1c01182c l     O .bss	00000080 u1buffer
1c016bb8 l     O .bss	00000004 u1rdptr
1c016bbc l     O .bss	00000004 u1wrptr
1c016bc0 l     O .bss	00000004 u0rdptr
1c016bc4 l     O .bss	00000004 u0wrptr
1c011204 l     O .data	00000004 puart0
1c011208 l     O .data	00000004 puart1
00000000 l    df *ABS*	00000000 core-v-mcu.c
00000000 l    df *ABS*	00000000 qspi_tests.c
00000000 l    df *ABS*	00000000 main.c
1c0118c8 l     O .bss	00005000 rt_heap
00000000 l    df *ABS*	00000000 clock.c
1c016bd8 l     O .bss	00000004 rt_tick
00000000 l    df *ABS*	00000000 idle.c
1c00b50c l     F .text	00000044 rt_list_remove
1c0168c8 l     O .bss	00000078 idle
1c016940 l     O .bss	00000100 rt_thread_stack
1c00b550 l     F .text	00000030 _has_defunct_thread
1c00b5e2 l     F .text	00000010 rt_thread_idle_entry
00000000 l    df *ABS*	00000000 ipc.c
1c00b640 l     F .text	00000028 rt_list_init
1c00b668 l     F .text	00000042 rt_list_insert_before
1c00b6aa l     F .text	00000028 rt_list_isempty
1c00b6d2 l     F .text	00000022 rt_ipc_object_init
1c00b6f4 l     F .text	000000be rt_ipc_list_suspend
1c00b7b2 l     F .text	0000002c rt_ipc_list_resume
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 kservice.c
1c00bcd6 l     F .text	0000006a divide
1c00bd40 l     F .text	00000056 skip_atoi
1c00bd96 l     F .text	00000278 print_number
1c010678 l     O .rodata	00000011 large_digits.2104
1c01068c l     O .rodata	00000011 small_digits.2103
1c016a40 l     O .bss	00000080 rt_log_buf.2208
00000000 l    df *ABS*	00000000 object.c
1c00c76c l     F .text	00000042 rt_list_insert_after
1c00c7ae l     F .text	00000044 rt_list_remove
1c0111b8 l     O .data	00000040 rt_object_container
00000000 l    df *ABS*	00000000 scheduler.c
1c00ca38 l     F .text	00000028 rt_list_init
1c00ca60 l     F .text	00000042 rt_list_insert_before
1c00caa2 l     F .text	00000044 rt_list_remove
1c00cae6 l     F .text	00000028 rt_list_isempty
1c016bdc l     O .bss	00000002 rt_scheduler_lock_nest
00000000 l    df *ABS*	00000000 thread.c
1c00ce1a l     F .text	00000028 rt_list_init
1c00ce42 l     F .text	00000042 rt_list_insert_after
1c00ce84 l     F .text	00000042 rt_list_insert_before
1c00cec6 l     F .text	00000044 rt_list_remove
1c00cf0a l     F .text	0000003a _thread_cleanup_execute
1c00cfc4 l     F .text	00000124 _rt_thread_init
00000000 l    df *ABS*	00000000 timer.c
1c00d480 l     F .text	00000028 rt_list_init
1c00d4a8 l     F .text	00000042 rt_list_insert_after
1c00d4ea l     F .text	00000044 rt_list_remove
1c00d52e l     F .text	00000028 rt_list_isempty
1c016be4 l     O .bss	00000008 rt_timer_list
1c00d556 l     F .text	0000009c _rt_timer_init
1c00d5f2 l     F .text	00000042 _rt_timer_remove
1c016bec l     O .bss	00000004 random_nr.1991
00000000 l    df *ABS*	00000000 components.c
1c00db48 l     F .text	00000010 rti_start
1c00db58 l     F .text	00000010 rti_board_start
1c00db68 l     F .text	00000010 rti_board_end
1c00db78 l     F .text	00000010 rti_end
00000000 l    df *ABS*	00000000 mem.c
1c016bf0 l     O .bss	00000004 heap_ptr
1c016bf4 l     O .bss	00000004 heap_end
1c016bf8 l     O .bss	00000004 lfree
1c016ac0 l     O .bss	00000020 heap_sem
1c016bfc l     O .bss	00000004 mem_size_aligned
1c016c00 l     O .bss	00000004 used_mem
1c016c04 l     O .bss	00000004 max_mem
1c00dcb0 l     F .text	0000010e plug_holes
00000000 l    df *ABS*	00000000 ringbuffer.c
1c00e364 l     F .text	0000005e rt_ringbuffer_status
00000000 l    df *ABS*	00000000 cmd.c
1c00e6f4 l     F .text	00000028 rt_list_isempty
1c00e71c l     F .text	00000046 rt_list_len
1c00e79a l     F .text	00000032 object_split
1c00e7cc l     F .text	0000006e list_find_init
1c00e83a l     F .text	00000114 list_get_next
1c00eb78 l     F .text	0000006e show_wait_queue
00000000 l    df *ABS*	00000000 msh.c
1c00f1c2 l     F .text	00000234 msh_split
1c00f3f6 l     F .text	000000a2 msh_get_cmd
1c00f498 l     F .text	000000d4 _msh_exec_cmd
1c00f62e l     F .text	00000068 str_common
00000000 l    df *ABS*	00000000 shell.c
1c016c18 l     O .bss	00000004 finsh_prompt_custom
1c016ae0 l     O .bss	00000081 finsh_prompt.3837
1c00f8b2 l     F .text	00000018 finsh_getchar
1c00f8ca l     F .text	0000004e shell_auto_complete
00000000 l    df *ABS*	00000000 rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.o
1c010104 l       .text	00000000 spurious_interrupt
00000000 l    df *ABS*	00000000 cpuport.c
00000000 l    df *ABS*	00000000 stack_protector.c
00000000 l    df *ABS*	00000000 impure.c
1c010d90 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
1c00e1a4 g     F .text	00000052 rt_calloc
1c010280 g     O .text	0000000c __fsym_list_thread
1c00dc0c g     F .text	00000016 entry
1c00e94e g     F .text	0000022a list_thread
1c00f918 g     F .text	00000628 finsh_thread_entry
1c00ca10 g     F .text	00000028 rt_object_is_systemobject
1c00bbf8 g     F .text	0000008e rt_strncpy
1c010156 g     F .text	000000a4 rt_hw_stack_init
1c00f56c g     F .text	000000c2 msh_exec
1c010b84 g     O .rodata	0000000d __fsym_list_mailbox_name
1c00c930 g     F .text	000000a0 rt_object_allocate
1c009bdc g     F .text	0000003a pulp_soc_eu_event_init
1c010578 g     O .rodata	00000100 __lowest_bit_bitmap
1c00aa64 g     F .text	0000024c setFLLFrequencyInIntegerMode
1c0119f8 g       *ABS*	00000000 __global_pointer$
1c00cb6e g     F .text	0000004c rt_system_scheduler_start
1c0118bc g     O .bss	0000000a gMuxSelSaveBuf
1c016c20 g     O .bss	00000004 rt_interrupt_to_thread
1c000800 g       .vectors	00000000 __vector_start
1c009df6 g     F .text	00000020 i2cmRXHandler
1c010b30 g     O .rodata	00000009 __fsym_list_sem_name
1c00d34e g     F .text	0000001e rt_thread_delay
1c00e1f6 g     F .text	0000011a rt_free
1c016c1c g     O .bss	00000004 rt_interrupt_from_thread
1c00ddbe g     F .text	0000014a rt_system_heap_init
1c00dc22 g     F .text	0000001c main_thread_entry
1c00d9e0 g     F .text	0000011a rt_timer_check
1c0118ac g     O .bss	00000010 uart_rxbuffer
1c009c86 g     F .text	00000044 timer_irq_set_timeout
1c00950c g     F .text	00000032 vTaskEnterCritical
1c00cc86 g     F .text	00000086 rt_schedule_insert_thread
1c00ebe6 g     F .text	00000184 list_sem
1c00acb0 g     F .text	00000250 system_init
1c010064 g       .text	00000000 IRQ_Handler
1c016b64 g     O .bss	00000004 __stack_chk_guard
1c00f056 g     F .text	00000082 list
1c010794 g     O .rodata	00000009 __fsym_list_mem_name
1c016c10 g     O .bss	00000004 _sysvar_table_begin
1c00845c g     F .text	0000000a __errno
1c016b68 g     O .bss	00000004 pxCurrentTCB
1c010a88 g     O .rodata	00000010 __fsym_hello_desc
1c00ff6e g     F .text	0000002e finsh_system_var_init
1c00b580 g     F .text	00000062 rt_thread_idle_excute
1c00d36c g     F .text	00000078 rt_thread_suspend
1c00c652 g     F .text	00000072 rt_kprintf
1c010250 g       .text	00000000 _etext
00000800 g       *ABS*	00000000 __stack_size
1c010d90 g       .data	00000000 sdata
1c00e782 g     F .text	00000018 version
1c00d442 g     F .text	0000003e rt_thread_timeout
1c008080 g       *ABS*	00000000 __boot_address
1c00f1a2 g     F .text	00000020 cmd_free
1c016c38 g     O .bss	00000008 qspim_semaphores_eot
1c009b4a g     F .text	00000046 hal_getpinmux
1c00926e g     F .text	0000002e vTaskInternalSetTimeOutState
1c010310 g       .text	00000000 __rt_init_start
1c00ed6a g     F .text	000001a4 list_mailbox
1c010310 g       .text	00000000 __fsymtab_end
1c00e762 g     F .text	00000020 hello
1c01702c g     O .bss	00000004 shell
1c0081b2 g     F .text	000000be memcpy
1c009156 g     F .text	00000042 vTaskPlaceOnEventList
1c0099ba g     F .text	0000003c pi_fc_event_handler_clear
1c009ae4 g     F .text	00000066 hal_setpinmux
1c00b012 g     F .text	0000001c vPortSetupTimerInterrupt
1c00ff9c g     F .text	000000c6 finsh_system_init
1c00dbca g     F .text	00000042 rt_components_init
1c00d634 g     F .text	00000050 rt_timer_init
1c010328 g       .text	00000000 __rt_init_end
1c00b5f2 g     F .text	0000004e rt_thread_idle_init
1c009862 g     F .text	00000024 hal_get_apb_i2cs_slave_address
1c027830 g       .stack	00000000 __freertos_irq_stack_top
1c016c98 g     O .bss	00000180 gFlashDeviceObject
1c016c0c g     O .bss	00000004 _syscall_table_end
1c00cb0e g     F .text	00000060 rt_system_scheduler_init
1c0080da g       .text	00000000 rt_hw_context_switch_to
1c016c40 g     O .bss	00000001 aucclkdiv
1c016c24 g     O .bss	00000004 rt_thread_switch_interrupt_flag
1c011210 g       .bss	00000000 _bss_start
1c01120c g       .data	00000000 edata
1c0084b2 g     F .text	00000066 vListInsertEnd
1c010324 g     O .text	00000004 __rt_init_rti_end
1c0111f8 g       .data	00000000 __sdata_begin
1c00f878 g     F .text	0000003a finsh_set_prompt_mode
1c010b58 g     O .rodata	0000000f __fsym___cmd_list_sem_name
1c010c30 g     O .rodata	0000001a __fsym_list_desc
1c010d90 g       .data	00000000 _sdata
1c01025c g     O .text	0000000c __fsym_hello
1c010c28 g     O .rodata	00000005 __fsym_list_name
1c0101fa g     F .text	00000042 rt_hw_context_switch_interrupt
1c010b24 g     O .rodata	0000000c __fsym___cmd_list_thread_desc
1c00d1c0 g     F .text	0000008c rt_thread_create
1c017030 g     O .heap	00010000 ucHeap
1c010bd8 g     O .rodata	0000000b __fsym_list_timer_name
1c016c44 g     O .bss	00000008 qspim_semaphores_tx
1c010aa0 g     O .rodata	00000023 __fsym_version_desc
1c00d24c g     F .text	00000090 rt_thread_yield
1c00dc3e g     F .text	0000003c rt_application_init
1c01023c g     F .text	00000014 __stack_chk_init
1c00df08 g     F .text	0000029c rt_malloc
1c00b90a g     F .text	00000088 rt_sem_release
1c010298 g     O .text	0000000c __fsym_list_sem
1c0111f8 g     O .data	00000004 _global_impure_ptr
1c00e470 g     F .text	000000f2 rt_ringbuffer_putchar
1c00b388 g     F .text	00000016 rt_heap_begin_get
1c017030 g       .bss	00000000 __bss_end
1c027830 g       .stack	00000000 stack
1c0102e0 g     O .text	0000000c __fsym_list
1c016bcc g     O .bss	00000002 gMicronFlashDetectedFlg
1c009662 g     F .text	00000190 pvPortMalloc
1c00e562 g     F .text	000000e4 rt_ringbuffer_getchar
1c010b10 g     O .rodata	00000012 __fsym___cmd_list_thread_name
1c0080cc g     F .text	00000002 _init
1c010b94 g     O .rodata	00000018 __fsym_list_mailbox_desc
1c008466 g     F .text	0000004c vListInitialise
1c00d684 g     F .text	0000004c rt_timer_detach
1c00f0d8 g     F .text	00000010 msh_is_used
1c00a186 g     F .text	000002e0 udma_qspim_open
1c009886 g     F .text	00000042 hal_set_apb_i2cs_slave_address
1c017030 g       .bss	00000000 _bss_end
1c00db88 g     F .text	00000042 rt_components_board_init
1c0087f4 g     F .text	000001ba xQueueGenericSend
1c009e16 g     F .text	000001da udma_i2cm_open
1c00af20 g     F .text	00000034 vSystemIrqHandler
1c00bc86 g     F .text	00000050 rt_show_version
1c00ff40 g     F .text	0000002e finsh_system_function_init
1c010310 g     O .text	00000004 __rt_init_rti_start
1c00b3fc g     F .text	0000006e rt_hw_board_init
1c016bc8 g     O .bss	00000002 gQSPIFlashPresentFlg
1c00d3e4 g     F .text	0000005e rt_thread_resume
1c009420 g     F .text	000000ec xTaskPriorityDisinherit
1c00dc7a g     F .text	00000036 rtthread_startup
1c00a466 g     F .text	0000009c udma_qspim_control
1c016c5c g     O .bss	00000008 uart_semaphores_rx
1c00d924 g     F .text	000000bc rt_timer_control
1c027030 g       .stack	00000000 stack_start
1c00c7f2 g     F .text	0000005c rt_object_get_information
1c00b46a g     F .text	0000000e vApplicationMallocFailedHook
1c009198 g     F .text	000000d6 xTaskRemoveFromEventList
1c016f1c g     O .bss	00000100 rt_thread_priority_table
1c00b48e g     F .text	0000000e vApplicationTickHook
1c00cf44 g     F .text	00000080 rt_thread_exit
1c027830 g       .stack	00000000 __stack_top
1c00a77e g     F .text	000000c0 uart_rx_isr
00000000 g     O *ABS*	00000004 __heap_size
1c00bb2c g     F .text	000000cc rt_memmove
1c0102bc g     O .text	0000000c __fsym___cmd_list_mailbox
1c009c5e g     F .text	00000028 timer_irq_init
1c00929c g     F .text	000000ee xTaskCheckForTimeOut
1c027830 g       .l2_data	00000000 __cluster_text_start
1c008384 g     F .text	000000ae __call_exitprocs
1c0102ec g     O .text	0000000c __fsym___cmd_help
1c01701c g     O .bss	00000001 rt_current_priority
1c0102d4 g     O .text	0000000c __fsym___cmd_list_timer
1c008080 g     F .text	0000004c _start
1c010bc0 g     O .rodata	00000018 __fsym___cmd_list_mailbox_desc
1c008cbe g     F .text	00000022 vTaskSuspendAll
1c00996c g     F .text	0000004e pi_fc_event_handler_set
1c016c28 g     O .bss	00000008 i2cm_semaphores_tx
1c0085ba g     F .text	00000070 uxListRemove
1c027830 g       *ABS*	00000000 __l2_shared_end
1c00832a g     F .text	0000002a strncmp
1c016c4c g     O .bss	00000008 qspim_semaphores_rx
1c008354 g     F .text	00000030 strncpy
1c008ffe g     F .text	00000158 vTaskSwitchContext
1c010cc0 g     O .rodata	0000000b __fsym___cmd_help_name
1c00b4b2 g     F .text	0000005a rt_tick_increase
1c00e310 g     F .text	00000054 list_mem
1c010cf0 g     O .rodata	0000001c __fsym___cmd_ps_desc
1c00d8ce g     F .text	00000056 rt_timer_stop
1c010d18 g     O .rodata	00000025 __fsym___cmd_free_desc
1c00c00e g     F .text	00000644 rt_vsnprintf
1c01028c g     O .text	0000000c __fsym___cmd_list_thread
1c010274 g     O .text	0000000c __fsym___cmd_version
1c00b478 g     F .text	00000016 vApplicationStackOverflowHook
1c016bd0 g     O .bss	00000004 gSpecialHandlingIRQCnt
1c016c08 g     O .bss	00000004 _syscall_table_begin
1c00b39e g     F .text	00000016 rt_heap_end_get
1c01031c g     O .text	00000004 __rt_init_led_init
1c00f7a0 g     F .text	000000d8 finsh_get_prompt
1c00e646 g     F .text	000000ae rt_ringbuffer_data_len
1c027830 g       .stack	00000000 __l2_priv1_end
1c00c6c4 g     F .text	000000a8 __rt_ffs
1c010ac4 g     O .rodata	0000000e __fsym___cmd_version_name
1c00f696 g     F .text	0000010a msh_auto_complete
1c016c14 g     O .bss	00000004 _sysvar_table_end
1c00cd76 g     F .text	0000003e rt_enter_critical
1c00d2dc g     F .text	00000072 rt_thread_sleep
1c011210 g       .bss	00000000 __bss_start
1c009bb0 g     F .text	0000002c soc_eu_mask_set
1c008270 g     F .text	000000a8 memset
1c016c30 g     O .bss	00000008 i2cm_semaphores_rx
1c00b3ea g     F .text	00000012 main
1c010ccc g     O .rodata	00000016 __fsym___cmd_help_desc
1c00b9ce g     F .text	0000003c rt_interrupt_leave
1c008518 g     F .text	000000a2 vListInsert
1c010bfc g     O .rodata	00000011 __fsym___cmd_list_timer_name
1c016c64 g     O .bss	00000008 uart_semaphores_tx
1c00db3a g     F .text	0000000e rt_system_timer_thread_init
1c00d0e8 g     F .text	00000068 rt_thread_init
1c010c10 g     O .rodata	00000015 __fsym___cmd_list_timer_desc
1c010328 g       .text	00000000 __l2_priv0_end
1c016e18 g     O .bss	00000080 isr_table
1c00b34a g     F .text	0000003e rt_hw_console_getchar
1c010310 g       .text	00000000 __vsymtab_start
1c010d90 g       .data	00000000 __data_begin
1c00e3c2 g     F .text	000000ae rt_ringbuffer_init
1c010b68 g     O .rodata	00000019 __fsym___cmd_list_sem_desc
1c009a98 g     F .text	0000004c irq_clint_enable
1c016f18 g     O .bss	00000001 rt_interrupt_nest
1c008704 g     F .text	00000084 xQueueGenericCreate
1c00b31a g     F .text	00000030 rt_hw_console_output
1c010268 g     O .text	0000000c __fsym_version
1c00a11e g     F .text	00000022 spi_rx_isr
1c027030 g       .heap	00000000 __heap_end
1c00ef0e g     F .text	00000148 list_timer
1c010d0c g     O .rodata	0000000b __fsym___cmd_free_name
1c0080ce g       .text	00000000 rt_hw_interrupt_disable
1c00d166 g     F .text	0000005a rt_thread_startup
1c00a0fc g     F .text	00000022 spi_tx_isr
1c009932 g     F .text	0000003a pi_fc_event_handler_init
1c016be0 g     O .bss	00000004 rt_current_thread
1c0080cc g     F .text	00000002 _fini
1c008ce0 g     F .text	00000148 xTaskResumeAll
1c017020 g     O .bss	00000004 rt_thread_ready_priority_group
1c010304 g     O .text	0000000c __fsym___cmd_free
1c0111fc g     O .data	00000004 _impure_ptr
1c010bac g     O .rodata	00000013 __fsym___cmd_list_mailbox_name
1c00af54 g     F .text	000000be undefined_handler
1c027030 g       .stack	00000000 __stack_bottom
1c016c54 g     O .bss	00000008 qspim_semaphores_cmd
1c017024 g     O .bss	00000008 rt_thread_defunct
1c010318 g     O .text	00000004 __rt_init_rti_board_end
1c00b7de g     F .text	0000005c rt_sem_init
1c009c36 g     F .text	00000028 timer_irq_disable
1c00813c g       .text	00000000 rt_hw_context_switch_exit
1c00ba0a g     F .text	00000122 rt_memset
1c0102b0 g     O .text	0000000c __fsym_list_mailbox
1c00938a g     F .text	00000018 vTaskMissedYield
1c010310 g       .text	00000000 __vsymtab_end
1c010ce4 g     O .rodata	00000009 __fsym___cmd_ps_name
1c0102c8 g     O .text	0000000c __fsym_list_timer
1c017030 g       .heap	00000000 __heap_start
1c00b3b4 g     F .text	00000036 led_init
1c00c8f8 g     F .text	00000038 rt_object_detach
1c00a140 g     F .text	00000022 spi_cmd_isr
1c010a80 g     O .rodata	00000006 __fsym_hello_name
1c008e28 g     F .text	000001d6 xTaskIncrementTick
1c00dafa g     F .text	00000040 rt_system_timer_init
1c00cd0c g     F .text	0000006a rt_schedule_remove_thread
1c016e98 g     O .bss	00000080 handler_count
1c00b992 g     F .text	0000003c rt_interrupt_enter
1c0080d4 g       .text	00000000 rt_hw_interrupt_enable
1c000800 g       .vectors	00000000 __irq_vector_base
1c010ad4 g     O .rodata	00000023 __fsym___cmd_version_desc
1c00862a g     F .text	000000da xQueueGenericReset
1c010250 g     O .text	0000000c __fsym_list_mem
1c01120c g       .data	00000000 _edata
1c00b02e g     F .text	0000016c setQspimPinMux
1c017030 g       .bss	00000000 _end
1c00cdb4 g     F .text	00000066 rt_exit_critical
1c00a502 g     F .text	00000170 udma_flash_readid
1c00f182 g     F .text	00000020 cmd_ps
1c0099f6 g     F .text	000000a2 fc_soc_event_handler1
1c00af00 g     F .text	00000020 timer_irq_handler
1c008194 g     F .text	0000001e exit
1c00d150 g     F .text	00000016 rt_thread_self
1c010320 g     O .text	00000004 __rt_init_finsh_system_init
1c010b04 g     O .rodata	0000000c __fsym_list_thread_desc
1c016bd4 g     O .bss	00000001 gQSPIIdNum
1c00b2b0 g     F .text	0000006a writeraw
1c00c9d0 g     F .text	00000040 rt_object_delete
1c00b49c g     F .text	00000016 rt_tick_get
1c0093e6 g     F .text	0000003a xTaskGetSchedulerState
1c009dd6 g     F .text	00000020 i2cmTXHandler
1c008432 g     F .text	0000002a _exit
1c0107a0 g     O .rodata	0000001e __fsym_list_mem_desc
1c00b83a g     F .text	000000d0 rt_sem_take
1c0102a4 g     O .text	0000000c __fsym___cmd_list_sem
1c008080 g       .text	00000000 _stext
1c00953e g     F .text	00000042 vTaskExitCritical
1c008318 g     F .text	00000012 strlen
1c010a98 g     O .rodata	00000008 __fsym_version_name
1c010be4 g     O .rodata	00000015 __fsym_list_timer_desc
1c016b78 g     O .bss	00000004 xTickCount
1c00a83e g     F .text	00000226 udma_uart_open
1c027830 g       .l2_data	00000000 __cluster_text_end
1c010314 g     O .text	00000004 __rt_init_rti_board_start
1c010af8 g     O .rodata	0000000c __fsym_list_thread_name
1c010250 g       .text	00000000 __fsymtab_start
1c00b19a g     F .text	00000116 restoreQspimPinMux
1c00cbba g     F .text	000000cc rt_schedule
1c00c84e g     F .text	000000aa rt_object_init
1c0102f8 g     O .text	0000000c __fsym___cmd_ps
1c00a162 g     F .text	00000024 spi_eot_isr
1c00d6d0 g     F .text	000001fe rt_timer_start
1c0098c8 g     F .text	00000058 hal_set_apb_i2cs_slave_on_off
1c00f0e8 g     F .text	0000009a msh_help
1c010250 g       .text	00000000 _endtext
1c016c6c g     O .bss	0000000c uart_rxTCB
1c0080e6 g       .text	00000000 rt_hw_context_switch
1c016c78 g     O .bss	00000020 shell_rx_semaphore
1c0089ae g     F .text	000000ea xQueueGiveFromISR
1c010b3c g     O .rodata	00000019 __fsym_list_sem_desc



Disassembly of section .vectors:
vector_table():
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:30
#endif
.extern fc_soc_event_handler
.section .vectors, "ax"
.option norvc
vector_table:
	j IRQ_Handler  // irq0
1c000800 <__irq_vector_base> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:31
	j IRQ_Handler
1c000804 <__irq_vector_base+0x4> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:32
	j IRQ_Handler
1c000808 <__irq_vector_base+0x8> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:33
	j IRQ_Handler  // irq3
1c00080c <__irq_vector_base+0xc> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:34
	j IRQ_Handler
1c000810 <__irq_vector_base+0x10> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:35
	j IRQ_Handler
1c000814 <__irq_vector_base+0x14> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:36
	j IRQ_Handler
1c000818 <__irq_vector_base+0x18> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:37
	j IRQ_Handler //ctxt_handler  // irq 7 mtime or timer
1c00081c <__irq_vector_base+0x1c> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:38
	j IRQ_Handler
1c000820 <__irq_vector_base+0x20> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:39
	j IRQ_Handler
1c000824 <__irq_vector_base+0x24> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:40
	j IRQ_Handler// IRQ_Handler
1c000828 <__irq_vector_base+0x28> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:41
	j IRQ_Handler // irq 11 Machine (event Fifo)
1c00082c <__irq_vector_base+0x2c> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:42
	j IRQ_Handler
1c000830 <__irq_vector_base+0x30> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:43
	j IRQ_Handler
1c000834 <__irq_vector_base+0x34> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:44
	j IRQ_Handler
1c000838 <__irq_vector_base+0x38> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:45
	j IRQ_Handler
1c00083c <__irq_vector_base+0x3c> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:46
	j IRQ_Handler // IRQ16
1c000840 <__irq_vector_base+0x40> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:47
	j IRQ_Handler // IRQ17
1c000844 <__irq_vector_base+0x44> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:48
	j IRQ_Handler // IRQ18
1c000848 <__irq_vector_base+0x48> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:49
	j IRQ_Handler // IRQ19
1c00084c <__irq_vector_base+0x4c> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:50
	j IRQ_Handler // IRQ20
1c000850 <__irq_vector_base+0x50> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:51
	j IRQ_Handler // IRQ21
1c000854 <__irq_vector_base+0x54> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:52
	j IRQ_Handler // IRQ22
1c000858 <__irq_vector_base+0x58> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:53
	j IRQ_Handler // IRQ23
1c00085c <__irq_vector_base+0x5c> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:54
	j IRQ_Handler // IRQ24
1c000860 <__irq_vector_base+0x60> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:55
	j IRQ_Handler // IRQ25
1c000864 <__irq_vector_base+0x64> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:56
	j IRQ_Handler // IRQ26
1c000868 <__irq_vector_base+0x68> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:57
	j IRQ_Handler // IRQ27
1c00086c <__irq_vector_base+0x6c> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:58
	j IRQ_Handler // IRQ28
1c000870 <__irq_vector_base+0x70> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:59
	j IRQ_Handler // IRQ29
1c000874 <__irq_vector_base+0x74> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:60
	j IRQ_Handler // IRQ30
1c000878 <__irq_vector_base+0x78> j	1c010064 <IRQ_Handler>
/home/wangshun/plct_cli/cli_test/cli_test/target/vectors.S:61
    j IRQ_Handler // IRQ30
1c00087c <__irq_vector_base+0x7c> j	1c010064 <IRQ_Handler>

Disassembly of section .text:
_start():
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:39

_start:
/* initialize global pointer */
.option push
.option norelax
1:	auipc gp, %pcrel_hi(__global_pointer$)
1c008080 <_start> auipc	gp,0xa
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:40
	addi  gp, gp, %pcrel_lo(1b)
1c008084 <_start+0x4> addi	gp,gp,-1672 # 1c0119f8 <__global_pointer$>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:47

#if defined(ARCHI_HAS_CLUSTER)
	/* TODO */
#endif
/* initialize stack pointer */
	la sp, __stack_top
1c008088 <_start+0x8> auipc	sp,0x1f
1c00808c <_start+0xc> addi	sp,sp,1960 # 1c027830 <__l2_shared_end>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:50

	/*or a0, a0, 0*/
	and a0, a0, 0
1c008090 <_start+0x10> andi	a0,a0,0
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:51
	csrw mie, a0 // disable interrupts
1c008092 <_start+0x12> csrw	mie,a0
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:52
	csrr a0, mie
1c008096 <_start+0x16> csrr	a0,mie
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:54
/* set vector table address */
	la a0, __vector_start
1c00809a <_start+0x1a> auipc	a0,0xffff8
1c00809e <_start+0x1e> addi	a0,a0,1894 # 1c000800 <__irq_vector_base>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:55
	or a0, a0, 1 /* enable vectored mode (hardcoded anyway for CV32E40P) */
1c0080a2 <_start+0x22> ori	a0,a0,1
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:56
	csrw mtvec, a0
1c0080a6 <_start+0x26> csrw	mtvec,a0
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:59

/* clear the bss segment */
	la t0, __bss_start
1c0080aa <_start+0x2a> addi	t0,gp,-2024 # 1c011210 <__bss_start>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:60
        la t1, __bss_end
1c0080ae <_start+0x2e> auipc	t1,0xf
1c0080b2 <_start+0x32> addi	t1,t1,-126 # 1c017030 <__bss_end>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:63
/* TODO: optionally compile this out to speed simulation */
1:
	sw zero,0(t0)
1c0080b6 <_start+0x36> sw	zero,0(t0)
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:64
	addi t0, t0, 4
1c0080ba <_start+0x3a> addi	t0,t0,4
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:65
	bltu t0, t1, 1b
1c0080bc <_start+0x3c> bltu	t0,t1,1c0080b6 <_start+0x36>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:75
	call atexit
	call __libc_init_array
#endif

/* call main */
	lw a0, 0(sp)                    /* a0 = argc */
1c0080c0 <_start+0x40> lw	a0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:76
	addi a1, sp, __SIZEOF_POINTER__ /* a1 = argv */
1c0080c2 <_start+0x42> addi	a1,sp,4
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:77
	li a2, 0                        /* a2 = envp = NULL */
1c0080c4 <_start+0x44> li	a2,0
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:78
	call entry
1c0080c6 <_start+0x46> jal	ra,1c00dc0c <entry>
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:79
	tail exit
1c0080ca <_start+0x4a> j	1c008194 <exit>
_init():
/home/wangshun/plct_cli/cli_test/cli_test/target/crt0.S:91
.type   _fini, @function
_init:
_fini:
 /* These don't have to do anything since we use init_array/fini_array. Prevent
    missing symbol error */
	ret
1c0080cc <_fini> ret
rt_hw_interrupt_disable():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:24
/*
 * rt_base_t rt_hw_interrupt_disable(void);
 */
    .globl rt_hw_interrupt_disable
rt_hw_interrupt_disable:
    csrrci a0, mstatus, 8
1c0080ce <rt_hw_interrupt_disable> csrrci	a0,mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:25
    ret
1c0080d2 <rt_hw_interrupt_disable+0x4> ret
rt_hw_interrupt_enable():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:32
/*
 * void rt_hw_interrupt_enable(rt_base_t level);
 */
    .globl rt_hw_interrupt_enable
rt_hw_interrupt_enable:
    csrw mstatus, a0
1c0080d4 <rt_hw_interrupt_enable> csrw	mstatus,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:33
    ret
1c0080d8 <rt_hw_interrupt_enable+0x4> ret
rt_hw_context_switch_to():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:46
 * a0 --> to
 * a1 --> to_thread
 */
    .globl rt_hw_context_switch_to
rt_hw_context_switch_to:
    LOAD sp, (a0)
1c0080da <rt_hw_context_switch_to> lw	sp,0(a0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:47
    LOAD a0,   2 * REGBYTES(sp)
1c0080de <rt_hw_context_switch_to+0x4> lw	a0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:48
    csrw mstatus, a0
1c0080e0 <rt_hw_context_switch_to+0x6> csrw	mstatus,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:49
    j    rt_hw_context_switch_exit
1c0080e4 <rt_hw_context_switch_to+0xa> j	1c00813c <rt_hw_context_switch_exit>
rt_hw_context_switch():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:70
     *     x1/ra       -> sp(0)
     *     x1/ra       -> sp(1)
     *     mstatus.mie -> sp(2)
     *     x(i)        -> sp(i-4)
     */
    addi  sp,  sp, -32 * REGBYTES
1c0080e6 <rt_hw_context_switch> addi	sp,sp,-128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:71
    STORE sp,  (a0)
1c0080e8 <rt_hw_context_switch+0x2> sw	sp,0(a0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:73

    STORE x1,   0 * REGBYTES(sp)
1c0080ec <rt_hw_context_switch+0x6> sw	ra,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:74
    STORE x1,   1 * REGBYTES(sp)
1c0080ee <rt_hw_context_switch+0x8> sw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:76

    csrr a0, mstatus
1c0080f0 <rt_hw_context_switch+0xa> csrr	a0,mstatus
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:77
    andi a0, a0, 8
1c0080f4 <rt_hw_context_switch+0xe> andi	a0,a0,8
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:78
    beqz a0, save_mpie
1c0080f6 <rt_hw_context_switch+0x10> beqz	a0,1c0080fc <save_mpie>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:79
    li   a0, 0x80
1c0080f8 <rt_hw_context_switch+0x12> li	a0,128
save_mpie():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:81
save_mpie:
    STORE a0,   2 * REGBYTES(sp)
1c0080fc <save_mpie> sw	a0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:83

    STORE x4,   4 * REGBYTES(sp)
1c0080fe <save_mpie+0x2> sw	tp,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:84
    STORE x5,   5 * REGBYTES(sp)
1c008100 <save_mpie+0x4> sw	t0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:85
    STORE x6,   6 * REGBYTES(sp)
1c008102 <save_mpie+0x6> sw	t1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:86
    STORE x7,   7 * REGBYTES(sp)
1c008104 <save_mpie+0x8> sw	t2,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:87
    STORE x8,   8 * REGBYTES(sp)
1c008106 <save_mpie+0xa> sw	s0,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:88
    STORE x9,   9 * REGBYTES(sp)
1c008108 <save_mpie+0xc> sw	s1,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:89
    STORE x10, 10 * REGBYTES(sp)
1c00810a <save_mpie+0xe> sw	a0,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:90
    STORE x11, 11 * REGBYTES(sp)
1c00810c <save_mpie+0x10> sw	a1,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:91
    STORE x12, 12 * REGBYTES(sp)
1c00810e <save_mpie+0x12> sw	a2,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:92
    STORE x13, 13 * REGBYTES(sp)
1c008110 <save_mpie+0x14> sw	a3,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:93
    STORE x14, 14 * REGBYTES(sp)
1c008112 <save_mpie+0x16> sw	a4,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:94
    STORE x15, 15 * REGBYTES(sp)
1c008114 <save_mpie+0x18> sw	a5,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:95
    STORE x16, 16 * REGBYTES(sp)
1c008116 <save_mpie+0x1a> sw	a6,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:96
    STORE x17, 17 * REGBYTES(sp)
1c008118 <save_mpie+0x1c> sw	a7,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:97
    STORE x18, 18 * REGBYTES(sp)
1c00811a <save_mpie+0x1e> sw	s2,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:98
    STORE x19, 19 * REGBYTES(sp)
1c00811c <save_mpie+0x20> sw	s3,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:99
    STORE x20, 20 * REGBYTES(sp)
1c00811e <save_mpie+0x22> sw	s4,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:100
    STORE x21, 21 * REGBYTES(sp)
1c008120 <save_mpie+0x24> sw	s5,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:101
    STORE x22, 22 * REGBYTES(sp)
1c008122 <save_mpie+0x26> sw	s6,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:102
    STORE x23, 23 * REGBYTES(sp)
1c008124 <save_mpie+0x28> sw	s7,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:103
    STORE x24, 24 * REGBYTES(sp)
1c008126 <save_mpie+0x2a> sw	s8,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:104
    STORE x25, 25 * REGBYTES(sp)
1c008128 <save_mpie+0x2c> sw	s9,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:105
    STORE x26, 26 * REGBYTES(sp)
1c00812a <save_mpie+0x2e> sw	s10,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:106
    STORE x27, 27 * REGBYTES(sp)
1c00812c <save_mpie+0x30> sw	s11,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:107
    STORE x28, 28 * REGBYTES(sp)
1c00812e <save_mpie+0x32> sw	t3,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:108
    STORE x29, 29 * REGBYTES(sp)
1c008130 <save_mpie+0x34> sw	t4,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:109
    STORE x30, 30 * REGBYTES(sp)
1c008132 <save_mpie+0x36> sw	t5,120(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:110
    STORE x31, 31 * REGBYTES(sp)
1c008134 <save_mpie+0x38> sw	t6,124(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:117
    /* restore to thread context
     * sp(0) -> epc;
     * sp(1) -> ra;
     * sp(i) -> x(i+2)
     */
    LOAD sp,  (a1)
1c008136 <save_mpie+0x3a> lw	sp,0(a1)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:119

    j rt_hw_context_switch_exit
1c00813a <save_mpie+0x3e> j	1c00813c <rt_hw_context_switch_exit>
rt_hw_context_switch_exit():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:141
    call rt_signal_check
    mv sp, a0
#endif
#endif
    /* resw ra to mepc */
    LOAD a0,   0 * REGBYTES(sp)
1c00813c <rt_hw_context_switch_exit> lw	a0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:142
    csrw mepc, a0
1c00813e <rt_hw_context_switch_exit+0x2> csrw	mepc,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:144

    LOAD x1,   1 * REGBYTES(sp)
1c008142 <rt_hw_context_switch_exit+0x6> lw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:146

    li    t0, 0x00001800
1c008144 <rt_hw_context_switch_exit+0x8> lui	t0,0x2
1c008148 <rt_hw_context_switch_exit+0xc> addi	t0,t0,-2048 # 00001800 <__stack_size+0x1000>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:147
    csrs  mstatus, t0
1c00814c <rt_hw_context_switch_exit+0x10> csrs	mstatus,t0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:148
    LOAD a0,   2 * REGBYTES(sp)
1c008150 <rt_hw_context_switch_exit+0x14> lw	a0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:149
    csrs mstatus, a0
1c008152 <rt_hw_context_switch_exit+0x16> csrs	mstatus,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:151

    LOAD x4,   4 * REGBYTES(sp)
1c008156 <rt_hw_context_switch_exit+0x1a> lw	tp,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:152
    LOAD x5,   5 * REGBYTES(sp)
1c008158 <rt_hw_context_switch_exit+0x1c> lw	t0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:153
    LOAD x6,   6 * REGBYTES(sp)
1c00815a <rt_hw_context_switch_exit+0x1e> lw	t1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:154
    LOAD x7,   7 * REGBYTES(sp)
1c00815c <rt_hw_context_switch_exit+0x20> lw	t2,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:155
    LOAD x8,   8 * REGBYTES(sp)
1c00815e <rt_hw_context_switch_exit+0x22> lw	s0,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:156
    LOAD x9,   9 * REGBYTES(sp)
1c008160 <rt_hw_context_switch_exit+0x24> lw	s1,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:157
    LOAD x10, 10 * REGBYTES(sp)
1c008162 <rt_hw_context_switch_exit+0x26> lw	a0,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:158
    LOAD x11, 11 * REGBYTES(sp)
1c008164 <rt_hw_context_switch_exit+0x28> lw	a1,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:159
    LOAD x12, 12 * REGBYTES(sp)
1c008166 <rt_hw_context_switch_exit+0x2a> lw	a2,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:160
    LOAD x13, 13 * REGBYTES(sp)
1c008168 <rt_hw_context_switch_exit+0x2c> lw	a3,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:161
    LOAD x14, 14 * REGBYTES(sp)
1c00816a <rt_hw_context_switch_exit+0x2e> lw	a4,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:162
    LOAD x15, 15 * REGBYTES(sp)
1c00816c <rt_hw_context_switch_exit+0x30> lw	a5,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:163
    LOAD x16, 16 * REGBYTES(sp)
1c00816e <rt_hw_context_switch_exit+0x32> lw	a6,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:164
    LOAD x17, 17 * REGBYTES(sp)
1c008170 <rt_hw_context_switch_exit+0x34> lw	a7,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:165
    LOAD x18, 18 * REGBYTES(sp)
1c008172 <rt_hw_context_switch_exit+0x36> lw	s2,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:166
    LOAD x19, 19 * REGBYTES(sp)
1c008174 <rt_hw_context_switch_exit+0x38> lw	s3,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:167
    LOAD x20, 20 * REGBYTES(sp)
1c008176 <rt_hw_context_switch_exit+0x3a> lw	s4,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:168
    LOAD x21, 21 * REGBYTES(sp)
1c008178 <rt_hw_context_switch_exit+0x3c> lw	s5,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:169
    LOAD x22, 22 * REGBYTES(sp)
1c00817a <rt_hw_context_switch_exit+0x3e> lw	s6,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:170
    LOAD x23, 23 * REGBYTES(sp)
1c00817c <rt_hw_context_switch_exit+0x40> lw	s7,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:171
    LOAD x24, 24 * REGBYTES(sp)
1c00817e <rt_hw_context_switch_exit+0x42> lw	s8,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:172
    LOAD x25, 25 * REGBYTES(sp)
1c008180 <rt_hw_context_switch_exit+0x44> lw	s9,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:173
    LOAD x26, 26 * REGBYTES(sp)
1c008182 <rt_hw_context_switch_exit+0x46> lw	s10,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:174
    LOAD x27, 27 * REGBYTES(sp)
1c008184 <rt_hw_context_switch_exit+0x48> lw	s11,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:175
    LOAD x28, 28 * REGBYTES(sp)
1c008186 <rt_hw_context_switch_exit+0x4a> lw	t3,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:176
    LOAD x29, 29 * REGBYTES(sp)
1c008188 <rt_hw_context_switch_exit+0x4c> lw	t4,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:177
    LOAD x30, 30 * REGBYTES(sp)
1c00818a <rt_hw_context_switch_exit+0x4e> lw	t5,120(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:178
    LOAD x31, 31 * REGBYTES(sp)
1c00818c <rt_hw_context_switch_exit+0x50> lw	t6,124(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:180

    addi sp,  sp, 32 * REGBYTES
1c00818e <rt_hw_context_switch_exit+0x52> addi	sp,sp,128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/context_gcc.S:181
    mret
1c008190 <rt_hw_context_switch_exit+0x54> mret
exit():
1c008194 <exit> addi	sp,sp,-16
1c008196 <exit+0x2> li	a1,0
1c008198 <exit+0x4> sw	s0,8(sp)
1c00819a <exit+0x6> sw	ra,12(sp)
1c00819c <exit+0x8> mv	s0,a0
1c00819e <exit+0xa> jal	1c008384 <__call_exitprocs>
1c0081a0 <exit+0xc> lui	a5,0x1c011
1c0081a4 <exit+0x10> lw	a0,504(a5) # 1c0111f8 <_global_impure_ptr>
1c0081a8 <exit+0x14> lw	a5,60(a0)
1c0081aa <exit+0x16> beqz	a5,1c0081ae <exit+0x1a>
1c0081ac <exit+0x18> jalr	a5
1c0081ae <exit+0x1a> mv	a0,s0
1c0081b0 <exit+0x1c> jal	1c008432 <_exit>
memcpy():
1c0081b2 <memcpy> xor	a5,a1,a0
1c0081b6 <memcpy+0x4> andi	a5,a5,3
1c0081b8 <memcpy+0x6> add	a4,a0,a2
1c0081bc <memcpy+0xa> bnez	a5,1c0081c4 <memcpy+0x12>
1c0081be <memcpy+0xc> li	a5,3
1c0081c0 <memcpy+0xe> bltu	a5,a2,1c0081de <memcpy+0x2c>
1c0081c4 <memcpy+0x12> mv	a5,a0
1c0081c6 <memcpy+0x14> bltu	a0,a4,1c0081d8 <memcpy+0x26>
1c0081ca <memcpy+0x18> ret
1c0081cc <memcpy+0x1a> lbu	a3,0(a1)
1c0081d0 <memcpy+0x1e> addi	a5,a5,1
1c0081d2 <memcpy+0x20> addi	a1,a1,1
1c0081d4 <memcpy+0x22> sb	a3,-1(a5)
1c0081d8 <memcpy+0x26> bltu	a5,a4,1c0081cc <memcpy+0x1a>
1c0081dc <memcpy+0x2a> ret
1c0081de <memcpy+0x2c> andi	a5,a0,3
1c0081e2 <memcpy+0x30> bnez	a5,1c008258 <memcpy+0xa6>
1c0081e4 <memcpy+0x32> mv	a5,a0
1c0081e6 <memcpy+0x34> andi	a3,a4,-4
1c0081ea <memcpy+0x38> addi	a2,a3,-32
1c0081ee <memcpy+0x3c> bgeu	a5,a2,1c008266 <memcpy+0xb4>
1c0081f2 <memcpy+0x40> lw	t2,0(a1)
1c0081f6 <memcpy+0x44> lw	t0,4(a1)
1c0081fa <memcpy+0x48> lw	t6,8(a1)
1c0081fe <memcpy+0x4c> lw	t5,12(a1)
1c008202 <memcpy+0x50> lw	t4,16(a1)
1c008206 <memcpy+0x54> lw	t3,20(a1)
1c00820a <memcpy+0x58> lw	t1,24(a1)
1c00820e <memcpy+0x5c> lw	a7,28(a1)
1c008212 <memcpy+0x60> addi	a1,a1,36
1c008216 <memcpy+0x64> sw	t2,0(a5)
1c00821a <memcpy+0x68> lw	a6,-4(a1)
1c00821e <memcpy+0x6c> sw	t0,4(a5)
1c008222 <memcpy+0x70> sw	t6,8(a5)
1c008226 <memcpy+0x74> sw	t5,12(a5)
1c00822a <memcpy+0x78> sw	t4,16(a5)
1c00822e <memcpy+0x7c> sw	t3,20(a5)
1c008232 <memcpy+0x80> sw	t1,24(a5)
1c008236 <memcpy+0x84> sw	a7,28(a5)
1c00823a <memcpy+0x88> addi	a5,a5,36
1c00823e <memcpy+0x8c> sw	a6,-4(a5)
1c008242 <memcpy+0x90> j	1c0081ee <memcpy+0x3c>
1c008244 <memcpy+0x92> lbu	a3,0(a1)
1c008248 <memcpy+0x96> addi	a5,a5,1
1c00824a <memcpy+0x98> addi	a1,a1,1
1c00824c <memcpy+0x9a> sb	a3,-1(a5)
1c008250 <memcpy+0x9e> andi	a3,a5,3
1c008254 <memcpy+0xa2> bnez	a3,1c008244 <memcpy+0x92>
1c008256 <memcpy+0xa4> j	1c0081e6 <memcpy+0x34>
1c008258 <memcpy+0xa6> mv	a5,a0
1c00825a <memcpy+0xa8> j	1c008250 <memcpy+0x9e>
1c00825c <memcpy+0xaa> lw	a2,0(a1)
1c00825e <memcpy+0xac> addi	a5,a5,4
1c008260 <memcpy+0xae> addi	a1,a1,4
1c008262 <memcpy+0xb0> sw	a2,-4(a5)
1c008266 <memcpy+0xb4> bltu	a5,a3,1c00825c <memcpy+0xaa>
1c00826a <memcpy+0xb8> bltu	a5,a4,1c0081d8 <memcpy+0x26>
1c00826e <memcpy+0xbc> ret
memset():
1c008270 <memset> li	t1,15
1c008272 <memset+0x2> mv	a4,a0
1c008274 <memset+0x4> bgeu	t1,a2,1c00829a <memset+0x2a>
1c008278 <memset+0x8> andi	a5,a4,15
1c00827c <memset+0xc> bnez	a5,1c0082fa <memset+0x8a>
1c00827e <memset+0xe> bnez	a1,1c0082e8 <memset+0x78>
1c008280 <memset+0x10> andi	a3,a2,-16
1c008284 <memset+0x14> andi	a2,a2,15
1c008286 <memset+0x16> add	a3,a3,a4
1c008288 <memset+0x18> sw	a1,0(a4)
1c00828a <memset+0x1a> sw	a1,4(a4)
1c00828c <memset+0x1c> sw	a1,8(a4)
1c00828e <memset+0x1e> sw	a1,12(a4)
1c008290 <memset+0x20> addi	a4,a4,16
1c008292 <memset+0x22> bltu	a4,a3,1c008288 <memset+0x18>
1c008296 <memset+0x26> bnez	a2,1c00829a <memset+0x2a>
1c008298 <memset+0x28> ret
1c00829a <memset+0x2a> sub	a3,t1,a2
1c00829e <memset+0x2e> slli	a3,a3,0x2
1c0082a0 <memset+0x30> auipc	t0,0x0
1c0082a4 <memset+0x34> add	a3,a3,t0
1c0082a6 <memset+0x36> jr	10(a3)
1c0082aa <memset+0x3a> sb	a1,14(a4)
1c0082ae <memset+0x3e> sb	a1,13(a4)
1c0082b2 <memset+0x42> sb	a1,12(a4)
1c0082b6 <memset+0x46> sb	a1,11(a4)
1c0082ba <memset+0x4a> sb	a1,10(a4)
1c0082be <memset+0x4e> sb	a1,9(a4)
1c0082c2 <memset+0x52> sb	a1,8(a4)
1c0082c6 <memset+0x56> sb	a1,7(a4)
1c0082ca <memset+0x5a> sb	a1,6(a4)
1c0082ce <memset+0x5e> sb	a1,5(a4)
1c0082d2 <memset+0x62> sb	a1,4(a4)
1c0082d6 <memset+0x66> sb	a1,3(a4)
1c0082da <memset+0x6a> sb	a1,2(a4)
1c0082de <memset+0x6e> sb	a1,1(a4)
1c0082e2 <memset+0x72> sb	a1,0(a4)
1c0082e6 <memset+0x76> ret
1c0082e8 <memset+0x78> andi	a1,a1,255
1c0082ec <memset+0x7c> slli	a3,a1,0x8
1c0082f0 <memset+0x80> or	a1,a1,a3
1c0082f2 <memset+0x82> slli	a3,a1,0x10
1c0082f6 <memset+0x86> or	a1,a1,a3
1c0082f8 <memset+0x88> j	1c008280 <memset+0x10>
1c0082fa <memset+0x8a> slli	a3,a5,0x2
1c0082fe <memset+0x8e> auipc	t0,0x0
1c008302 <memset+0x92> add	a3,a3,t0
1c008304 <memset+0x94> mv	t0,ra
1c008306 <memset+0x96> jalr	-88(a3)
1c00830a <memset+0x9a> mv	ra,t0
1c00830c <memset+0x9c> addi	a5,a5,-16
1c00830e <memset+0x9e> sub	a4,a4,a5
1c008310 <memset+0xa0> add	a2,a2,a5
1c008312 <memset+0xa2> bgeu	t1,a2,1c00829a <memset+0x2a>
1c008316 <memset+0xa6> j	1c00827e <memset+0xe>
strlen():
1c008318 <strlen> mv	a5,a0
1c00831a <strlen+0x2> addi	a5,a5,1
1c00831c <strlen+0x4> lbu	a4,-1(a5)
1c008320 <strlen+0x8> bnez	a4,1c00831a <strlen+0x2>
1c008322 <strlen+0xa> sub	a0,a5,a0
1c008326 <strlen+0xe> addi	a0,a0,-1
1c008328 <strlen+0x10> ret
strncmp():
1c00832a <strncmp> beqz	a2,1c008350 <strncmp+0x26>
1c00832c <strncmp+0x2> addi	a4,a0,1
1c008330 <strncmp+0x6> add	a0,a0,a2
1c008332 <strncmp+0x8> lbu	a5,-1(a4)
1c008336 <strncmp+0xc> lbu	a3,0(a1)
1c00833a <strncmp+0x10> beq	a5,a3,1c008344 <strncmp+0x1a>
1c00833e <strncmp+0x14> sub	a0,a5,a3
1c008342 <strncmp+0x18> ret
1c008344 <strncmp+0x1a> beq	a4,a0,1c00833e <strncmp+0x14>
1c008348 <strncmp+0x1e> addi	a4,a4,1
1c00834a <strncmp+0x20> beqz	a5,1c00833e <strncmp+0x14>
1c00834c <strncmp+0x22> addi	a1,a1,1
1c00834e <strncmp+0x24> j	1c008332 <strncmp+0x8>
1c008350 <strncmp+0x26> li	a0,0
1c008352 <strncmp+0x28> ret
strncpy():
1c008354 <strncpy> mv	a4,a0
1c008356 <strncpy+0x2> bnez	a2,1c00835a <strncpy+0x6>
1c008358 <strncpy+0x4> ret
1c00835a <strncpy+0x6> addi	a1,a1,1
1c00835c <strncpy+0x8> lbu	a3,-1(a1)
1c008360 <strncpy+0xc> addi	a5,a4,1
1c008364 <strncpy+0x10> addi	a6,a2,-1
1c008368 <strncpy+0x14> sb	a3,-1(a5)
1c00836c <strncpy+0x18> bnez	a3,1c008376 <strncpy+0x22>
1c00836e <strncpy+0x1a> add	a4,a4,a2
1c008370 <strncpy+0x1c> bne	a5,a4,1c00837c <strncpy+0x28>
1c008374 <strncpy+0x20> ret
1c008376 <strncpy+0x22> mv	a4,a5
1c008378 <strncpy+0x24> mv	a2,a6
1c00837a <strncpy+0x26> j	1c008356 <strncpy+0x2>
1c00837c <strncpy+0x28> addi	a5,a5,1
1c00837e <strncpy+0x2a> sb	zero,-1(a5)
1c008382 <strncpy+0x2e> j	1c008370 <strncpy+0x1c>
__call_exitprocs():
1c008384 <__call_exitprocs> addi	sp,sp,-48
1c008386 <__call_exitprocs+0x2> lui	a5,0x1c011
1c00838a <__call_exitprocs+0x6> sw	s3,28(sp)
1c00838c <__call_exitprocs+0x8> lw	s3,504(a5) # 1c0111f8 <_global_impure_ptr>
1c008390 <__call_exitprocs+0xc> sw	s4,24(sp)
1c008392 <__call_exitprocs+0xe> sw	s5,20(sp)
1c008394 <__call_exitprocs+0x10> sw	s6,16(sp)
1c008396 <__call_exitprocs+0x12> sw	ra,44(sp)
1c008398 <__call_exitprocs+0x14> sw	s0,40(sp)
1c00839a <__call_exitprocs+0x16> sw	s1,36(sp)
1c00839c <__call_exitprocs+0x18> sw	s2,32(sp)
1c00839e <__call_exitprocs+0x1a> sw	s7,12(sp)
1c0083a0 <__call_exitprocs+0x1c> mv	s5,a0
1c0083a2 <__call_exitprocs+0x1e> mv	s4,a1
1c0083a4 <__call_exitprocs+0x20> li	s6,1
1c0083a6 <__call_exitprocs+0x22> lw	s1,328(s3)
1c0083aa <__call_exitprocs+0x26> beqz	s1,1c0083ba <__call_exitprocs+0x36>
1c0083ac <__call_exitprocs+0x28> lw	s0,4(s1)
1c0083ae <__call_exitprocs+0x2a> addi	s2,s0,-1
1c0083b2 <__call_exitprocs+0x2e> slli	s0,s0,0x2
1c0083b4 <__call_exitprocs+0x30> add	s0,s0,s1
1c0083b6 <__call_exitprocs+0x32> bgez	s2,1c0083d0 <__call_exitprocs+0x4c>
1c0083ba <__call_exitprocs+0x36> lw	ra,44(sp)
1c0083bc <__call_exitprocs+0x38> lw	s0,40(sp)
1c0083be <__call_exitprocs+0x3a> lw	s1,36(sp)
1c0083c0 <__call_exitprocs+0x3c> lw	s2,32(sp)
1c0083c2 <__call_exitprocs+0x3e> lw	s3,28(sp)
1c0083c4 <__call_exitprocs+0x40> lw	s4,24(sp)
1c0083c6 <__call_exitprocs+0x42> lw	s5,20(sp)
1c0083c8 <__call_exitprocs+0x44> lw	s6,16(sp)
1c0083ca <__call_exitprocs+0x46> lw	s7,12(sp)
1c0083cc <__call_exitprocs+0x48> addi	sp,sp,48
1c0083ce <__call_exitprocs+0x4a> ret
1c0083d0 <__call_exitprocs+0x4c> beqz	s4,1c0083e2 <__call_exitprocs+0x5e>
1c0083d4 <__call_exitprocs+0x50> lw	a5,260(s0)
1c0083d8 <__call_exitprocs+0x54> beq	a5,s4,1c0083e2 <__call_exitprocs+0x5e>
1c0083dc <__call_exitprocs+0x58> addi	s2,s2,-1
1c0083de <__call_exitprocs+0x5a> addi	s0,s0,-4
1c0083e0 <__call_exitprocs+0x5c> j	1c0083b6 <__call_exitprocs+0x32>
1c0083e2 <__call_exitprocs+0x5e> lw	a4,4(s1)
1c0083e4 <__call_exitprocs+0x60> lw	a5,4(s0)
1c0083e6 <__call_exitprocs+0x62> addi	a4,a4,-1
1c0083e8 <__call_exitprocs+0x64> bne	a4,s2,1c008414 <__call_exitprocs+0x90>
1c0083ec <__call_exitprocs+0x68> sw	s2,4(s1)
1c0083f0 <__call_exitprocs+0x6c> beqz	a5,1c0083dc <__call_exitprocs+0x58>
1c0083f2 <__call_exitprocs+0x6e> lw	a3,392(s1)
1c0083f6 <__call_exitprocs+0x72> sll	a4,s6,s2
1c0083fa <__call_exitprocs+0x76> lw	s7,4(s1)
1c0083fe <__call_exitprocs+0x7a> and	a3,a3,a4
1c008400 <__call_exitprocs+0x7c> bnez	a3,1c00841a <__call_exitprocs+0x96>
1c008402 <__call_exitprocs+0x7e> jalr	a5
1c008404 <__call_exitprocs+0x80> lw	a4,4(s1)
1c008406 <__call_exitprocs+0x82> lw	a5,328(s3)
1c00840a <__call_exitprocs+0x86> bne	a4,s7,1c0083a6 <__call_exitprocs+0x22>
1c00840e <__call_exitprocs+0x8a> beq	s1,a5,1c0083dc <__call_exitprocs+0x58>
1c008412 <__call_exitprocs+0x8e> j	1c0083a6 <__call_exitprocs+0x22>
1c008414 <__call_exitprocs+0x90> sw	zero,4(s0)
1c008418 <__call_exitprocs+0x94> j	1c0083f0 <__call_exitprocs+0x6c>
1c00841a <__call_exitprocs+0x96> lw	a3,396(s1)
1c00841e <__call_exitprocs+0x9a> lw	a1,132(s0)
1c008422 <__call_exitprocs+0x9e> and	a4,a4,a3
1c008424 <__call_exitprocs+0xa0> bnez	a4,1c00842c <__call_exitprocs+0xa8>
1c008426 <__call_exitprocs+0xa2> mv	a0,s5
1c008428 <__call_exitprocs+0xa4> jalr	a5
1c00842a <__call_exitprocs+0xa6> j	1c008404 <__call_exitprocs+0x80>
1c00842c <__call_exitprocs+0xa8> mv	a0,a1
1c00842e <__call_exitprocs+0xaa> jalr	a5
1c008430 <__call_exitprocs+0xac> j	1c008404 <__call_exitprocs+0x80>
_exit():
1c008432 <_exit> li	a1,0
1c008434 <_exit+0x2> li	a2,0
1c008436 <_exit+0x4> li	a3,0
1c008438 <_exit+0x6> li	a4,0
1c00843a <_exit+0x8> li	a5,0
1c00843c <_exit+0xa> li	a7,93
1c008440 <_exit+0xe> ecall
1c008444 <_exit+0x12> bgez	a0,1c00845a <_exit+0x28>
1c008448 <_exit+0x16> addi	sp,sp,-16
1c00844a <_exit+0x18> sw	s0,8(sp)
1c00844c <_exit+0x1a> mv	s0,a0
1c00844e <_exit+0x1c> sw	ra,12(sp)
1c008450 <_exit+0x1e> neg	s0,s0
1c008454 <_exit+0x22> jal	1c00845c <__errno>
1c008456 <_exit+0x24> sw	s0,0(a0)
1c008458 <_exit+0x26> j	1c008458 <_exit+0x26>
1c00845a <_exit+0x28> j	1c00845a <_exit+0x28>
__errno():
1c00845c <__errno> lui	a5,0x1c011
1c008460 <__errno+0x4> lw	a0,508(a5) # 1c0111fc <_impure_ptr>
1c008464 <__errno+0x8> ret
vListInitialise():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:38
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
1c008466 <vListInitialise> addi	sp,sp,-32
1c008468 <vListInitialise+0x2> sw	s0,28(sp)
1c00846a <vListInitialise+0x4> addi	s0,sp,32
1c00846c <vListInitialise+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:42
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c008470 <vListInitialise+0xa> lw	a5,-20(s0)
1c008474 <vListInitialise+0xe> addi	a4,a5,8
1c008478 <vListInitialise+0x12> lw	a5,-20(s0)
1c00847c <vListInitialise+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:46

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1c00847e <vListInitialise+0x18> lw	a5,-20(s0)
1c008482 <vListInitialise+0x1c> li	a4,-1
1c008484 <vListInitialise+0x1e> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:50

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c008486 <vListInitialise+0x20> lw	a5,-20(s0)
1c00848a <vListInitialise+0x24> addi	a4,a5,8
1c00848e <vListInitialise+0x28> lw	a5,-20(s0)
1c008492 <vListInitialise+0x2c> sw	a4,12(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:51
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c008494 <vListInitialise+0x2e> lw	a5,-20(s0)
1c008498 <vListInitialise+0x32> addi	a4,a5,8
1c00849c <vListInitialise+0x36> lw	a5,-20(s0)
1c0084a0 <vListInitialise+0x3a> sw	a4,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:53

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1c0084a2 <vListInitialise+0x3c> lw	a5,-20(s0)
1c0084a6 <vListInitialise+0x40> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:59

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1c0084aa <vListInitialise+0x44> nop
1c0084ac <vListInitialise+0x46> lw	s0,28(sp)
1c0084ae <vListInitialise+0x48> addi	sp,sp,32
1c0084b0 <vListInitialise+0x4a> ret
vListInsertEnd():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:75
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1c0084b2 <vListInsertEnd> addi	sp,sp,-48
1c0084b4 <vListInsertEnd+0x2> sw	s0,44(sp)
1c0084b6 <vListInsertEnd+0x4> addi	s0,sp,48
1c0084b8 <vListInsertEnd+0x6> sw	a0,-36(s0)
1c0084bc <vListInsertEnd+0xa> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:76
ListItem_t * const pxIndex = pxList->pxIndex;
1c0084c0 <vListInsertEnd+0xe> lw	a5,-36(s0)
1c0084c4 <vListInsertEnd+0x12> lw	a5,4(a5)
1c0084c6 <vListInsertEnd+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:87
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1c0084ca <vListInsertEnd+0x18> lw	a5,-40(s0)
1c0084ce <vListInsertEnd+0x1c> lw	a4,-20(s0)
1c0084d2 <vListInsertEnd+0x20> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:88
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1c0084d4 <vListInsertEnd+0x22> lw	a5,-20(s0)
1c0084d8 <vListInsertEnd+0x26> lw	a4,8(a5)
1c0084da <vListInsertEnd+0x28> lw	a5,-40(s0)
1c0084de <vListInsertEnd+0x2c> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:93

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1c0084e0 <vListInsertEnd+0x2e> lw	a5,-20(s0)
1c0084e4 <vListInsertEnd+0x32> lw	a5,8(a5)
1c0084e6 <vListInsertEnd+0x34> lw	a4,-40(s0)
1c0084ea <vListInsertEnd+0x38> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:94
	pxIndex->pxPrevious = pxNewListItem;
1c0084ec <vListInsertEnd+0x3a> lw	a5,-20(s0)
1c0084f0 <vListInsertEnd+0x3e> lw	a4,-40(s0)
1c0084f4 <vListInsertEnd+0x42> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:97

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
1c0084f6 <vListInsertEnd+0x44> lw	a5,-40(s0)
1c0084fa <vListInsertEnd+0x48> lw	a4,-36(s0)
1c0084fe <vListInsertEnd+0x4c> sw	a4,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:99

	( pxList->uxNumberOfItems )++;
1c008500 <vListInsertEnd+0x4e> lw	a5,-36(s0)
1c008504 <vListInsertEnd+0x52> lw	a5,0(a5)
1c008506 <vListInsertEnd+0x54> addi	a4,a5,1
1c00850a <vListInsertEnd+0x58> lw	a5,-36(s0)
1c00850e <vListInsertEnd+0x5c> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:100
}
1c008510 <vListInsertEnd+0x5e> nop
1c008512 <vListInsertEnd+0x60> lw	s0,44(sp)
1c008514 <vListInsertEnd+0x62> addi	sp,sp,48
1c008516 <vListInsertEnd+0x64> ret
vListInsert():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:104
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1c008518 <vListInsert> addi	sp,sp,-48
1c00851a <vListInsert+0x2> sw	s0,44(sp)
1c00851c <vListInsert+0x4> addi	s0,sp,48
1c00851e <vListInsert+0x6> sw	a0,-36(s0)
1c008522 <vListInsert+0xa> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:106
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1c008526 <vListInsert+0xe> lw	a5,-40(s0)
1c00852a <vListInsert+0x12> lw	a5,0(a5)
1c00852c <vListInsert+0x14> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:122
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1c008530 <vListInsert+0x18> lw	a4,-24(s0)
1c008534 <vListInsert+0x1c> li	a5,-1
1c008536 <vListInsert+0x1e> bne	a4,a5,1c008546 <vListInsert+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:124
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1c00853a <vListInsert+0x22> lw	a5,-36(s0)
1c00853e <vListInsert+0x26> lw	a5,16(a5)
1c008540 <vListInsert+0x28> sw	a5,-20(s0)
1c008544 <vListInsert+0x2c> j	1c00856c <vListInsert+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:150
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
1c008546 <vListInsert+0x2e> lw	a5,-36(s0)
1c00854a <vListInsert+0x32> addi	a5,a5,8
1c00854c <vListInsert+0x34> sw	a5,-20(s0)
1c008550 <vListInsert+0x38> j	1c00855c <vListInsert+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:150 (discriminator 3)
1c008552 <vListInsert+0x3a> lw	a5,-20(s0)
1c008556 <vListInsert+0x3e> lw	a5,4(a5)
1c008558 <vListInsert+0x40> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:150 (discriminator 1)
1c00855c <vListInsert+0x44> lw	a5,-20(s0)
1c008560 <vListInsert+0x48> lw	a5,4(a5)
1c008562 <vListInsert+0x4a> lw	a5,0(a5)
1c008564 <vListInsert+0x4c> lw	a4,-24(s0)
1c008568 <vListInsert+0x50> bgeu	a4,a5,1c008552 <vListInsert+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:157
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1c00856c <vListInsert+0x54> lw	a5,-20(s0)
1c008570 <vListInsert+0x58> lw	a4,4(a5)
1c008572 <vListInsert+0x5a> lw	a5,-40(s0)
1c008576 <vListInsert+0x5e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:158
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1c008578 <vListInsert+0x60> lw	a5,-40(s0)
1c00857c <vListInsert+0x64> lw	a5,4(a5)
1c00857e <vListInsert+0x66> lw	a4,-40(s0)
1c008582 <vListInsert+0x6a> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:159
	pxNewListItem->pxPrevious = pxIterator;
1c008584 <vListInsert+0x6c> lw	a5,-40(s0)
1c008588 <vListInsert+0x70> lw	a4,-20(s0)
1c00858c <vListInsert+0x74> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:160
	pxIterator->pxNext = pxNewListItem;
1c00858e <vListInsert+0x76> lw	a5,-20(s0)
1c008592 <vListInsert+0x7a> lw	a4,-40(s0)
1c008596 <vListInsert+0x7e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:164

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
1c008598 <vListInsert+0x80> lw	a5,-40(s0)
1c00859c <vListInsert+0x84> lw	a4,-36(s0)
1c0085a0 <vListInsert+0x88> sw	a4,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:166

	( pxList->uxNumberOfItems )++;
1c0085a2 <vListInsert+0x8a> lw	a5,-36(s0)
1c0085a6 <vListInsert+0x8e> lw	a5,0(a5)
1c0085a8 <vListInsert+0x90> addi	a4,a5,1
1c0085ac <vListInsert+0x94> lw	a5,-36(s0)
1c0085b0 <vListInsert+0x98> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:167
}
1c0085b2 <vListInsert+0x9a> nop
1c0085b4 <vListInsert+0x9c> lw	s0,44(sp)
1c0085b6 <vListInsert+0x9e> addi	sp,sp,48
1c0085b8 <vListInsert+0xa0> ret
uxListRemove():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:171
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
1c0085ba <uxListRemove> addi	sp,sp,-48
1c0085bc <uxListRemove+0x2> sw	s0,44(sp)
1c0085be <uxListRemove+0x4> addi	s0,sp,48
1c0085c0 <uxListRemove+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:174
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
1c0085c4 <uxListRemove+0xa> lw	a5,-36(s0)
1c0085c8 <uxListRemove+0xe> lw	a5,16(a5)
1c0085ca <uxListRemove+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:176

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1c0085ce <uxListRemove+0x14> lw	a5,-36(s0)
1c0085d2 <uxListRemove+0x18> lw	a5,4(a5)
1c0085d4 <uxListRemove+0x1a> lw	a4,-36(s0)
1c0085d8 <uxListRemove+0x1e> lw	a4,8(a4)
1c0085da <uxListRemove+0x20> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:177
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1c0085dc <uxListRemove+0x22> lw	a5,-36(s0)
1c0085e0 <uxListRemove+0x26> lw	a5,8(a5)
1c0085e2 <uxListRemove+0x28> lw	a4,-36(s0)
1c0085e6 <uxListRemove+0x2c> lw	a4,4(a4)
1c0085e8 <uxListRemove+0x2e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:183

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1c0085ea <uxListRemove+0x30> lw	a5,-20(s0)
1c0085ee <uxListRemove+0x34> lw	a5,4(a5)
1c0085f0 <uxListRemove+0x36> lw	a4,-36(s0)
1c0085f4 <uxListRemove+0x3a> bne	a4,a5,1c008604 <uxListRemove+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:185
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1c0085f8 <uxListRemove+0x3e> lw	a5,-36(s0)
1c0085fc <uxListRemove+0x42> lw	a4,8(a5)
1c0085fe <uxListRemove+0x44> lw	a5,-20(s0)
1c008602 <uxListRemove+0x48> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:192
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
1c008604 <uxListRemove+0x4a> lw	a5,-36(s0)
1c008608 <uxListRemove+0x4e> sw	zero,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:193
	( pxList->uxNumberOfItems )--;
1c00860c <uxListRemove+0x52> lw	a5,-20(s0)
1c008610 <uxListRemove+0x56> lw	a5,0(a5)
1c008612 <uxListRemove+0x58> addi	a4,a5,-1
1c008616 <uxListRemove+0x5c> lw	a5,-20(s0)
1c00861a <uxListRemove+0x60> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:195

	return pxList->uxNumberOfItems;
1c00861c <uxListRemove+0x62> lw	a5,-20(s0)
1c008620 <uxListRemove+0x66> lw	a5,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/list.c:196
}
1c008622 <uxListRemove+0x68> mv	a0,a5
1c008624 <uxListRemove+0x6a> lw	s0,44(sp)
1c008626 <uxListRemove+0x6c> addi	sp,sp,48
1c008628 <uxListRemove+0x6e> ret
xQueueGenericReset():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:256
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1c00862a <xQueueGenericReset> addi	sp,sp,-48
1c00862c <xQueueGenericReset+0x2> sw	ra,44(sp)
1c00862e <xQueueGenericReset+0x4> sw	s0,40(sp)
1c008630 <xQueueGenericReset+0x6> addi	s0,sp,48
1c008632 <xQueueGenericReset+0x8> sw	a0,-36(s0)
1c008636 <xQueueGenericReset+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:257
Queue_t * const pxQueue = xQueue;
1c00863a <xQueueGenericReset+0x10> lw	a5,-36(s0)
1c00863e <xQueueGenericReset+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:259

	configASSERT( pxQueue );
1c008642 <xQueueGenericReset+0x18> lw	a5,-20(s0)
1c008646 <xQueueGenericReset+0x1c> bnez	a5,1c00864e <xQueueGenericReset+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:259 (discriminator 1)
1c008648 <xQueueGenericReset+0x1e> csrci	mstatus,8
1c00864c <xQueueGenericReset+0x22> j	1c00864c <xQueueGenericReset+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:261

	taskENTER_CRITICAL();
1c00864e <xQueueGenericReset+0x24> jal	ra,1c00950c <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:263
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c008652 <xQueueGenericReset+0x28> lw	a5,-20(s0)
1c008656 <xQueueGenericReset+0x2c> lw	a4,0(a5)
1c008658 <xQueueGenericReset+0x2e> lw	a5,-20(s0)
1c00865c <xQueueGenericReset+0x32> lw	a3,60(a5)
1c00865e <xQueueGenericReset+0x34> lw	a5,-20(s0)
1c008662 <xQueueGenericReset+0x38> lw	a5,64(a5)
1c008664 <xQueueGenericReset+0x3a> mul	a5,a3,a5
1c008668 <xQueueGenericReset+0x3e> add	a4,a4,a5
1c00866a <xQueueGenericReset+0x40> lw	a5,-20(s0)
1c00866e <xQueueGenericReset+0x44> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:264
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1c008670 <xQueueGenericReset+0x46> lw	a5,-20(s0)
1c008674 <xQueueGenericReset+0x4a> sw	zero,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:265
		pxQueue->pcWriteTo = pxQueue->pcHead;
1c008678 <xQueueGenericReset+0x4e> lw	a5,-20(s0)
1c00867c <xQueueGenericReset+0x52> lw	a4,0(a5)
1c00867e <xQueueGenericReset+0x54> lw	a5,-20(s0)
1c008682 <xQueueGenericReset+0x58> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:266
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c008684 <xQueueGenericReset+0x5a> lw	a5,-20(s0)
1c008688 <xQueueGenericReset+0x5e> lw	a4,0(a5)
1c00868a <xQueueGenericReset+0x60> lw	a5,-20(s0)
1c00868e <xQueueGenericReset+0x64> lw	a5,60(a5)
1c008690 <xQueueGenericReset+0x66> addi	a3,a5,-1
1c008694 <xQueueGenericReset+0x6a> lw	a5,-20(s0)
1c008698 <xQueueGenericReset+0x6e> lw	a5,64(a5)
1c00869a <xQueueGenericReset+0x70> mul	a5,a3,a5
1c00869e <xQueueGenericReset+0x74> add	a4,a4,a5
1c0086a0 <xQueueGenericReset+0x76> lw	a5,-20(s0)
1c0086a4 <xQueueGenericReset+0x7a> sw	a4,12(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:267
		pxQueue->cRxLock = queueUNLOCKED;
1c0086a6 <xQueueGenericReset+0x7c> lw	a5,-20(s0)
1c0086aa <xQueueGenericReset+0x80> li	a4,-1
1c0086ac <xQueueGenericReset+0x82> sb	a4,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:268
		pxQueue->cTxLock = queueUNLOCKED;
1c0086b0 <xQueueGenericReset+0x86> lw	a5,-20(s0)
1c0086b4 <xQueueGenericReset+0x8a> li	a4,-1
1c0086b6 <xQueueGenericReset+0x8c> sb	a4,69(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:270

		if( xNewQueue == pdFALSE )
1c0086ba <xQueueGenericReset+0x90> lw	a5,-40(s0)
1c0086be <xQueueGenericReset+0x94> bnez	a5,1c0086de <xQueueGenericReset+0xb4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:277
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1c0086c0 <xQueueGenericReset+0x96> lw	a5,-20(s0)
1c0086c4 <xQueueGenericReset+0x9a> lw	a5,16(a5)
1c0086c6 <xQueueGenericReset+0x9c> beqz	a5,1c0086f4 <xQueueGenericReset+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:279
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c0086c8 <xQueueGenericReset+0x9e> lw	a5,-20(s0)
1c0086cc <xQueueGenericReset+0xa2> addi	a5,a5,16
1c0086ce <xQueueGenericReset+0xa4> mv	a0,a5
1c0086d0 <xQueueGenericReset+0xa6> jal	ra,1c009198 <xTaskRemoveFromEventList>
1c0086d4 <xQueueGenericReset+0xaa> mv	a5,a0
1c0086d6 <xQueueGenericReset+0xac> beqz	a5,1c0086f4 <xQueueGenericReset+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:281
				{
					queueYIELD_IF_USING_PREEMPTION();
1c0086d8 <xQueueGenericReset+0xae> ecall
1c0086dc <xQueueGenericReset+0xb2> j	1c0086f4 <xQueueGenericReset+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:296
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1c0086de <xQueueGenericReset+0xb4> lw	a5,-20(s0)
1c0086e2 <xQueueGenericReset+0xb8> addi	a5,a5,16
1c0086e4 <xQueueGenericReset+0xba> mv	a0,a5
1c0086e6 <xQueueGenericReset+0xbc> jal	1c008466 <vListInitialise>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:297
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1c0086e8 <xQueueGenericReset+0xbe> lw	a5,-20(s0)
1c0086ec <xQueueGenericReset+0xc2> addi	a5,a5,36
1c0086f0 <xQueueGenericReset+0xc6> mv	a0,a5
1c0086f2 <xQueueGenericReset+0xc8> jal	1c008466 <vListInitialise>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:300
		}
	}
	taskEXIT_CRITICAL();
1c0086f4 <xQueueGenericReset+0xca> jal	ra,1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:304

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
1c0086f8 <xQueueGenericReset+0xce> li	a5,1
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:305
}
1c0086fa <xQueueGenericReset+0xd0> mv	a0,a5
1c0086fc <xQueueGenericReset+0xd2> lw	ra,44(sp)
1c0086fe <xQueueGenericReset+0xd4> lw	s0,40(sp)
1c008700 <xQueueGenericReset+0xd6> addi	sp,sp,48
1c008702 <xQueueGenericReset+0xd8> ret
xQueueGenericCreate():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:369
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
1c008704 <xQueueGenericCreate> addi	sp,sp,-48
1c008706 <xQueueGenericCreate+0x2> sw	ra,44(sp)
1c008708 <xQueueGenericCreate+0x4> sw	s0,40(sp)
1c00870a <xQueueGenericCreate+0x6> addi	s0,sp,48
1c00870c <xQueueGenericCreate+0x8> sw	a0,-36(s0)
1c008710 <xQueueGenericCreate+0xc> sw	a1,-40(s0)
1c008714 <xQueueGenericCreate+0x10> mv	a5,a2
1c008716 <xQueueGenericCreate+0x12> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:374
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1c00871a <xQueueGenericCreate+0x16> lw	a5,-36(s0)
1c00871e <xQueueGenericCreate+0x1a> bnez	a5,1c008726 <xQueueGenericCreate+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:374 (discriminator 1)
1c008720 <xQueueGenericCreate+0x1c> csrci	mstatus,8
1c008724 <xQueueGenericCreate+0x20> j	1c008724 <xQueueGenericCreate+0x20>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:379

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c008726 <xQueueGenericCreate+0x22> lw	a4,-36(s0)
1c00872a <xQueueGenericCreate+0x26> lw	a5,-40(s0)
1c00872e <xQueueGenericCreate+0x2a> mul	a5,a4,a5
1c008732 <xQueueGenericCreate+0x2e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:390
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
1c008736 <xQueueGenericCreate+0x32> lw	a5,-20(s0)
1c00873a <xQueueGenericCreate+0x36> addi	a5,a5,80
1c00873e <xQueueGenericCreate+0x3a> mv	a0,a5
1c008740 <xQueueGenericCreate+0x3c> jal	ra,1c009662 <pvPortMalloc>
1c008744 <xQueueGenericCreate+0x40> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:392

		if( pxNewQueue != NULL )
1c008748 <xQueueGenericCreate+0x44> lw	a5,-24(s0)
1c00874c <xQueueGenericCreate+0x48> beqz	a5,1c00877a <xQueueGenericCreate+0x76>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:396
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
1c00874e <xQueueGenericCreate+0x4a> lw	a5,-24(s0)
1c008752 <xQueueGenericCreate+0x4e> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:397
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c008756 <xQueueGenericCreate+0x52> lw	a5,-28(s0)
1c00875a <xQueueGenericCreate+0x56> addi	a5,a5,80
1c00875e <xQueueGenericCreate+0x5a> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:408
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1c008762 <xQueueGenericCreate+0x5e> lbu	a5,-41(s0)
1c008766 <xQueueGenericCreate+0x62> lw	a4,-24(s0)
1c00876a <xQueueGenericCreate+0x66> mv	a3,a5
1c00876c <xQueueGenericCreate+0x68> lw	a2,-28(s0)
1c008770 <xQueueGenericCreate+0x6c> lw	a1,-40(s0)
1c008774 <xQueueGenericCreate+0x70> lw	a0,-36(s0)
1c008778 <xQueueGenericCreate+0x74> jal	1c008788 <prvInitialiseNewQueue>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:416
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
1c00877a <xQueueGenericCreate+0x76> lw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:417
	}
1c00877e <xQueueGenericCreate+0x7a> mv	a0,a5
1c008780 <xQueueGenericCreate+0x7c> lw	ra,44(sp)
1c008782 <xQueueGenericCreate+0x7e> lw	s0,40(sp)
1c008784 <xQueueGenericCreate+0x80> addi	sp,sp,48
1c008786 <xQueueGenericCreate+0x82> ret
prvInitialiseNewQueue():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:423

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1c008788 <prvInitialiseNewQueue> addi	sp,sp,-48
1c00878a <prvInitialiseNewQueue+0x2> sw	ra,44(sp)
1c00878c <prvInitialiseNewQueue+0x4> sw	s0,40(sp)
1c00878e <prvInitialiseNewQueue+0x6> addi	s0,sp,48
1c008790 <prvInitialiseNewQueue+0x8> sw	a0,-20(s0)
1c008794 <prvInitialiseNewQueue+0xc> sw	a1,-24(s0)
1c008798 <prvInitialiseNewQueue+0x10> sw	a2,-28(s0)
1c00879c <prvInitialiseNewQueue+0x14> mv	a5,a3
1c00879e <prvInitialiseNewQueue+0x16> sw	a4,-36(s0)
1c0087a2 <prvInitialiseNewQueue+0x1a> sb	a5,-29(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:428
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1c0087a6 <prvInitialiseNewQueue+0x1e> lw	a5,-24(s0)
1c0087aa <prvInitialiseNewQueue+0x22> bnez	a5,1c0087b8 <prvInitialiseNewQueue+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:434
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1c0087ac <prvInitialiseNewQueue+0x24> lw	a5,-36(s0)
1c0087b0 <prvInitialiseNewQueue+0x28> lw	a4,-36(s0)
1c0087b4 <prvInitialiseNewQueue+0x2c> sw	a4,0(a5)
1c0087b6 <prvInitialiseNewQueue+0x2e> j	1c0087c2 <prvInitialiseNewQueue+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:439
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1c0087b8 <prvInitialiseNewQueue+0x30> lw	a5,-36(s0)
1c0087bc <prvInitialiseNewQueue+0x34> lw	a4,-28(s0)
1c0087c0 <prvInitialiseNewQueue+0x38> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:444
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1c0087c2 <prvInitialiseNewQueue+0x3a> lw	a5,-36(s0)
1c0087c6 <prvInitialiseNewQueue+0x3e> lw	a4,-20(s0)
1c0087ca <prvInitialiseNewQueue+0x42> sw	a4,60(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:445
	pxNewQueue->uxItemSize = uxItemSize;
1c0087cc <prvInitialiseNewQueue+0x44> lw	a5,-36(s0)
1c0087d0 <prvInitialiseNewQueue+0x48> lw	a4,-24(s0)
1c0087d4 <prvInitialiseNewQueue+0x4c> sw	a4,64(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:446
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1c0087d6 <prvInitialiseNewQueue+0x4e> li	a1,1
1c0087d8 <prvInitialiseNewQueue+0x50> lw	a0,-36(s0)
1c0087dc <prvInitialiseNewQueue+0x54> jal	1c00862a <xQueueGenericReset>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:450

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
1c0087de <prvInitialiseNewQueue+0x56> lw	a5,-36(s0)
1c0087e2 <prvInitialiseNewQueue+0x5a> lbu	a4,-29(s0)
1c0087e6 <prvInitialiseNewQueue+0x5e> sb	a4,76(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:461
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
1c0087ea <prvInitialiseNewQueue+0x62> nop
1c0087ec <prvInitialiseNewQueue+0x64> lw	ra,44(sp)
1c0087ee <prvInitialiseNewQueue+0x66> lw	s0,40(sp)
1c0087f0 <prvInitialiseNewQueue+0x68> addi	sp,sp,48
1c0087f2 <prvInitialiseNewQueue+0x6a> ret
xQueueGenericSend():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:741

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
1c0087f4 <xQueueGenericSend> addi	sp,sp,-64
1c0087f6 <xQueueGenericSend+0x2> sw	ra,60(sp)
1c0087f8 <xQueueGenericSend+0x4> sw	s0,56(sp)
1c0087fa <xQueueGenericSend+0x6> addi	s0,sp,64
1c0087fc <xQueueGenericSend+0x8> sw	a0,-52(s0)
1c008800 <xQueueGenericSend+0xc> sw	a1,-56(s0)
1c008804 <xQueueGenericSend+0x10> sw	a2,-60(s0)
1c008808 <xQueueGenericSend+0x14> sw	a3,-64(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:742
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
1c00880c <xQueueGenericSend+0x18> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:744
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
1c008810 <xQueueGenericSend+0x1c> lw	a5,-52(s0)
1c008814 <xQueueGenericSend+0x20> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:746

	configASSERT( pxQueue );
1c008818 <xQueueGenericSend+0x24> lw	a5,-24(s0)
1c00881c <xQueueGenericSend+0x28> bnez	a5,1c008824 <xQueueGenericSend+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:746 (discriminator 1)
1c00881e <xQueueGenericSend+0x2a> csrci	mstatus,8
1c008822 <xQueueGenericSend+0x2e> j	1c008822 <xQueueGenericSend+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1c008824 <xQueueGenericSend+0x30> lw	a5,-56(s0)
1c008828 <xQueueGenericSend+0x34> bnez	a5,1c008832 <xQueueGenericSend+0x3e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 2)
1c00882a <xQueueGenericSend+0x36> lw	a5,-24(s0)
1c00882e <xQueueGenericSend+0x3a> lw	a5,64(a5)
1c008830 <xQueueGenericSend+0x3c> bnez	a5,1c008836 <xQueueGenericSend+0x42>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 3)
1c008832 <xQueueGenericSend+0x3e> li	a5,1
1c008834 <xQueueGenericSend+0x40> j	1c008838 <xQueueGenericSend+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 4)
1c008836 <xQueueGenericSend+0x42> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 6)
1c008838 <xQueueGenericSend+0x44> bnez	a5,1c008840 <xQueueGenericSend+0x4c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 7)
1c00883a <xQueueGenericSend+0x46> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:747 (discriminator 2)
1c00883e <xQueueGenericSend+0x4a> j	1c00883e <xQueueGenericSend+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1c008840 <xQueueGenericSend+0x4c> lw	a4,-64(s0)
1c008844 <xQueueGenericSend+0x50> li	a5,2
1c008846 <xQueueGenericSend+0x52> bne	a4,a5,1c008856 <xQueueGenericSend+0x62>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 2)
1c00884a <xQueueGenericSend+0x56> lw	a5,-24(s0)
1c00884e <xQueueGenericSend+0x5a> lw	a4,60(a5)
1c008850 <xQueueGenericSend+0x5c> li	a5,1
1c008852 <xQueueGenericSend+0x5e> bne	a4,a5,1c00885a <xQueueGenericSend+0x66>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 3)
1c008856 <xQueueGenericSend+0x62> li	a5,1
1c008858 <xQueueGenericSend+0x64> j	1c00885c <xQueueGenericSend+0x68>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 4)
1c00885a <xQueueGenericSend+0x66> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 6)
1c00885c <xQueueGenericSend+0x68> bnez	a5,1c008864 <xQueueGenericSend+0x70>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 7)
1c00885e <xQueueGenericSend+0x6a> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:748 (discriminator 3)
1c008862 <xQueueGenericSend+0x6e> j	1c008862 <xQueueGenericSend+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1c008864 <xQueueGenericSend+0x70> jal	ra,1c0093e6 <xTaskGetSchedulerState>
1c008868 <xQueueGenericSend+0x74> mv	a5,a0
1c00886a <xQueueGenericSend+0x76> bnez	a5,1c008872 <xQueueGenericSend+0x7e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 2)
1c00886c <xQueueGenericSend+0x78> lw	a5,-60(s0)
1c008870 <xQueueGenericSend+0x7c> bnez	a5,1c008876 <xQueueGenericSend+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 3)
1c008872 <xQueueGenericSend+0x7e> li	a5,1
1c008874 <xQueueGenericSend+0x80> j	1c008878 <xQueueGenericSend+0x84>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 4)
1c008876 <xQueueGenericSend+0x82> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 6)
1c008878 <xQueueGenericSend+0x84> bnez	a5,1c008880 <xQueueGenericSend+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 7)
1c00887a <xQueueGenericSend+0x86> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:751 (discriminator 4)
1c00887e <xQueueGenericSend+0x8a> j	1c00887e <xQueueGenericSend+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:761
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
1c008880 <xQueueGenericSend+0x8c> jal	ra,1c00950c <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:767
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1c008884 <xQueueGenericSend+0x90> lw	a5,-24(s0)
1c008888 <xQueueGenericSend+0x94> lw	a4,56(a5)
1c00888a <xQueueGenericSend+0x96> lw	a5,-24(s0)
1c00888e <xQueueGenericSend+0x9a> lw	a5,60(a5)
1c008890 <xQueueGenericSend+0x9c> bltu	a4,a5,1c00889e <xQueueGenericSend+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:767 (discriminator 1)
1c008894 <xQueueGenericSend+0xa0> lw	a4,-64(s0)
1c008898 <xQueueGenericSend+0xa4> li	a5,2
1c00889a <xQueueGenericSend+0xa6> bne	a4,a5,1c0088e2 <xQueueGenericSend+0xee>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:833
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1c00889e <xQueueGenericSend+0xaa> lw	a2,-64(s0)
1c0088a2 <xQueueGenericSend+0xae> lw	a1,-56(s0)
1c0088a6 <xQueueGenericSend+0xb2> lw	a0,-24(s0)
1c0088aa <xQueueGenericSend+0xb6> jal	1c008a98 <prvCopyDataToQueue>
1c0088ac <xQueueGenericSend+0xb8> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:837

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c0088b0 <xQueueGenericSend+0xbc> lw	a5,-24(s0)
1c0088b4 <xQueueGenericSend+0xc0> lw	a5,36(a5)
1c0088b6 <xQueueGenericSend+0xc2> beqz	a5,1c0088d0 <xQueueGenericSend+0xdc>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:839
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c0088b8 <xQueueGenericSend+0xc4> lw	a5,-24(s0)
1c0088bc <xQueueGenericSend+0xc8> addi	a5,a5,36
1c0088c0 <xQueueGenericSend+0xcc> mv	a0,a5
1c0088c2 <xQueueGenericSend+0xce> jal	ra,1c009198 <xTaskRemoveFromEventList>
1c0088c6 <xQueueGenericSend+0xd2> mv	a5,a0
1c0088c8 <xQueueGenericSend+0xd4> beqz	a5,1c0088da <xQueueGenericSend+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:845
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
1c0088ca <xQueueGenericSend+0xd6> ecall
1c0088ce <xQueueGenericSend+0xda> j	1c0088da <xQueueGenericSend+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:852
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
1c0088d0 <xQueueGenericSend+0xdc> lw	a5,-28(s0)
1c0088d4 <xQueueGenericSend+0xe0> beqz	a5,1c0088da <xQueueGenericSend+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:858
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
1c0088d6 <xQueueGenericSend+0xe2> ecall
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:867
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
1c0088da <xQueueGenericSend+0xe6> jal	ra,1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:868
				return pdPASS;
1c0088de <xQueueGenericSend+0xea> li	a5,1
1c0088e0 <xQueueGenericSend+0xec> j	1c0089a4 <xQueueGenericSend+0x1b0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:872
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1c0088e2 <xQueueGenericSend+0xee> lw	a5,-60(s0)
1c0088e6 <xQueueGenericSend+0xf2> bnez	a5,1c0088f0 <xQueueGenericSend+0xfc>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:876
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1c0088e8 <xQueueGenericSend+0xf4> jal	ra,1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:881

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
1c0088ec <xQueueGenericSend+0xf8> li	a5,0
1c0088ee <xQueueGenericSend+0xfa> j	1c0089a4 <xQueueGenericSend+0x1b0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:883
				}
				else if( xEntryTimeSet == pdFALSE )
1c0088f0 <xQueueGenericSend+0xfc> lw	a5,-20(s0)
1c0088f4 <xQueueGenericSend+0x100> bnez	a5,1c008906 <xQueueGenericSend+0x112>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:887
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1c0088f6 <xQueueGenericSend+0x102> addi	a5,s0,-36
1c0088fa <xQueueGenericSend+0x106> mv	a0,a5
1c0088fc <xQueueGenericSend+0x108> jal	ra,1c00926e <vTaskInternalSetTimeOutState>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:888
					xEntryTimeSet = pdTRUE;
1c008900 <xQueueGenericSend+0x10c> li	a5,1
1c008902 <xQueueGenericSend+0x10e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:897
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1c008906 <xQueueGenericSend+0x112> jal	ra,1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:902

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1c00890a <xQueueGenericSend+0x116> jal	1c008cbe <vTaskSuspendAll>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903
		prvLockQueue( pxQueue );
1c00890c <xQueueGenericSend+0x118> jal	ra,1c00950c <vTaskEnterCritical>
1c008910 <xQueueGenericSend+0x11c> lw	a5,-24(s0)
1c008914 <xQueueGenericSend+0x120> lbu	a5,68(a5)
1c008918 <xQueueGenericSend+0x124> slli	a4,a5,0x18
1c00891c <xQueueGenericSend+0x128> srai	a4,a4,0x18
1c00891e <xQueueGenericSend+0x12a> li	a5,-1
1c008920 <xQueueGenericSend+0x12c> bne	a4,a5,1c00892c <xQueueGenericSend+0x138>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903 (discriminator 1)
1c008924 <xQueueGenericSend+0x130> lw	a5,-24(s0)
1c008928 <xQueueGenericSend+0x134> sb	zero,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903 (discriminator 3)
1c00892c <xQueueGenericSend+0x138> lw	a5,-24(s0)
1c008930 <xQueueGenericSend+0x13c> lbu	a5,69(a5)
1c008934 <xQueueGenericSend+0x140> slli	a4,a5,0x18
1c008938 <xQueueGenericSend+0x144> srai	a4,a4,0x18
1c00893a <xQueueGenericSend+0x146> li	a5,-1
1c00893c <xQueueGenericSend+0x148> bne	a4,a5,1c008948 <xQueueGenericSend+0x154>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903 (discriminator 4)
1c008940 <xQueueGenericSend+0x14c> lw	a5,-24(s0)
1c008944 <xQueueGenericSend+0x150> sb	zero,69(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:903 (discriminator 6)
1c008948 <xQueueGenericSend+0x154> jal	ra,1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:906 (discriminator 6)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1c00894c <xQueueGenericSend+0x158> addi	a4,s0,-60
1c008950 <xQueueGenericSend+0x15c> addi	a5,s0,-36
1c008954 <xQueueGenericSend+0x160> mv	a1,a4
1c008956 <xQueueGenericSend+0x162> mv	a0,a5
1c008958 <xQueueGenericSend+0x164> jal	ra,1c00929c <xTaskCheckForTimeOut>
1c00895c <xQueueGenericSend+0x168> mv	a5,a0
1c00895e <xQueueGenericSend+0x16a> bnez	a5,1c00899a <xQueueGenericSend+0x1a6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:908
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1c008960 <xQueueGenericSend+0x16c> lw	a0,-24(s0)
1c008964 <xQueueGenericSend+0x170> jal	1c008c80 <prvIsQueueFull>
1c008966 <xQueueGenericSend+0x172> mv	a5,a0
1c008968 <xQueueGenericSend+0x174> beqz	a5,1c008990 <xQueueGenericSend+0x19c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:911
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1c00896a <xQueueGenericSend+0x176> lw	a5,-24(s0)
1c00896e <xQueueGenericSend+0x17a> addi	a5,a5,16
1c008970 <xQueueGenericSend+0x17c> lw	a4,-60(s0)
1c008974 <xQueueGenericSend+0x180> mv	a1,a4
1c008976 <xQueueGenericSend+0x182> mv	a0,a5
1c008978 <xQueueGenericSend+0x184> jal	ra,1c009156 <vTaskPlaceOnEventList>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:918
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
1c00897c <xQueueGenericSend+0x188> lw	a0,-24(s0)
1c008980 <xQueueGenericSend+0x18c> jal	1c008bc2 <prvUnlockQueue>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:925
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
1c008982 <xQueueGenericSend+0x18e> jal	1c008ce0 <xTaskResumeAll>
1c008984 <xQueueGenericSend+0x190> mv	a5,a0
1c008986 <xQueueGenericSend+0x192> bnez	a5,1c008880 <xQueueGenericSend+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:927
				{
					portYIELD_WITHIN_API();
1c00898a <xQueueGenericSend+0x196> ecall
1c00898e <xQueueGenericSend+0x19a> j	1c008880 <xQueueGenericSend+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:933
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
1c008990 <xQueueGenericSend+0x19c> lw	a0,-24(s0)
1c008994 <xQueueGenericSend+0x1a0> jal	1c008bc2 <prvUnlockQueue>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:934
				( void ) xTaskResumeAll();
1c008996 <xQueueGenericSend+0x1a2> jal	1c008ce0 <xTaskResumeAll>
1c008998 <xQueueGenericSend+0x1a4> j	1c008880 <xQueueGenericSend+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:940
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
1c00899a <xQueueGenericSend+0x1a6> lw	a0,-24(s0)
1c00899e <xQueueGenericSend+0x1aa> jal	1c008bc2 <prvUnlockQueue>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:941
			( void ) xTaskResumeAll();
1c0089a0 <xQueueGenericSend+0x1ac> jal	1c008ce0 <xTaskResumeAll>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:944

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
1c0089a2 <xQueueGenericSend+0x1ae> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:947 (discriminator 7)
		}
	} /*lint -restore */
}
1c0089a4 <xQueueGenericSend+0x1b0> mv	a0,a5
1c0089a6 <xQueueGenericSend+0x1b2> lw	ra,60(sp)
1c0089a8 <xQueueGenericSend+0x1b4> lw	s0,56(sp)
1c0089aa <xQueueGenericSend+0x1b6> addi	sp,sp,64
1c0089ac <xQueueGenericSend+0x1b8> ret
xQueueGiveFromISR():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1113
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
1c0089ae <xQueueGiveFromISR> addi	sp,sp,-64
1c0089b0 <xQueueGiveFromISR+0x2> sw	ra,60(sp)
1c0089b2 <xQueueGiveFromISR+0x4> sw	s0,56(sp)
1c0089b4 <xQueueGiveFromISR+0x6> addi	s0,sp,64
1c0089b6 <xQueueGiveFromISR+0x8> sw	a0,-52(s0)
1c0089ba <xQueueGiveFromISR+0xc> sw	a1,-56(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1116
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
1c0089be <xQueueGiveFromISR+0x10> lw	a5,-52(s0)
1c0089c2 <xQueueGiveFromISR+0x14> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1124
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
1c0089c6 <xQueueGiveFromISR+0x18> lw	a5,-24(s0)
1c0089ca <xQueueGiveFromISR+0x1c> bnez	a5,1c0089d2 <xQueueGiveFromISR+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1124 (discriminator 1)
1c0089cc <xQueueGiveFromISR+0x1e> csrci	mstatus,8
1c0089d0 <xQueueGiveFromISR+0x22> j	1c0089d0 <xQueueGiveFromISR+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1128

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
1c0089d2 <xQueueGiveFromISR+0x24> lw	a5,-24(s0)
1c0089d6 <xQueueGiveFromISR+0x28> lw	a5,64(a5)
1c0089d8 <xQueueGiveFromISR+0x2a> beqz	a5,1c0089e0 <xQueueGiveFromISR+0x32>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1128 (discriminator 1)
1c0089da <xQueueGiveFromISR+0x2c> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1128 (discriminator 2)
1c0089de <xQueueGiveFromISR+0x30> j	1c0089de <xQueueGiveFromISR+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
1c0089e0 <xQueueGiveFromISR+0x32> lw	a5,-24(s0)
1c0089e4 <xQueueGiveFromISR+0x36> lw	a5,0(a5)
1c0089e6 <xQueueGiveFromISR+0x38> bnez	a5,1c0089f0 <xQueueGiveFromISR+0x42>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 2)
1c0089e8 <xQueueGiveFromISR+0x3a> lw	a5,-24(s0)
1c0089ec <xQueueGiveFromISR+0x3e> lw	a5,8(a5)
1c0089ee <xQueueGiveFromISR+0x40> bnez	a5,1c0089f4 <xQueueGiveFromISR+0x46>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 3)
1c0089f0 <xQueueGiveFromISR+0x42> li	a5,1
1c0089f2 <xQueueGiveFromISR+0x44> j	1c0089f6 <xQueueGiveFromISR+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 4)
1c0089f4 <xQueueGiveFromISR+0x46> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 6)
1c0089f6 <xQueueGiveFromISR+0x48> bnez	a5,1c0089fe <xQueueGiveFromISR+0x50>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 7)
1c0089f8 <xQueueGiveFromISR+0x4a> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1133 (discriminator 3)
1c0089fc <xQueueGiveFromISR+0x4e> j	1c0089fc <xQueueGiveFromISR+0x4e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1151
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1c0089fe <xQueueGiveFromISR+0x50> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1153
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1c008a02 <xQueueGiveFromISR+0x54> lw	a5,-24(s0)
1c008a06 <xQueueGiveFromISR+0x58> lw	a5,56(a5)
1c008a08 <xQueueGiveFromISR+0x5a> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1158

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
1c008a0c <xQueueGiveFromISR+0x5e> lw	a5,-24(s0)
1c008a10 <xQueueGiveFromISR+0x62> lw	a5,60(a5)
1c008a12 <xQueueGiveFromISR+0x64> lw	a4,-32(s0)
1c008a16 <xQueueGiveFromISR+0x68> bgeu	a4,a5,1c008a86 <xQueueGiveFromISR+0xd8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1160
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1c008a1a <xQueueGiveFromISR+0x6c> lw	a5,-24(s0)
1c008a1e <xQueueGiveFromISR+0x70> lbu	a5,69(a5)
1c008a22 <xQueueGiveFromISR+0x74> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1170
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1c008a26 <xQueueGiveFromISR+0x78> lw	a5,-32(s0)
1c008a2a <xQueueGiveFromISR+0x7c> addi	a4,a5,1
1c008a2e <xQueueGiveFromISR+0x80> lw	a5,-24(s0)
1c008a32 <xQueueGiveFromISR+0x84> sw	a4,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1174

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1c008a34 <xQueueGiveFromISR+0x86> lb	a4,-33(s0)
1c008a38 <xQueueGiveFromISR+0x8a> li	a5,-1
1c008a3a <xQueueGiveFromISR+0x8c> bne	a4,a5,1c008a66 <xQueueGiveFromISR+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1229
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c008a3e <xQueueGiveFromISR+0x90> lw	a5,-24(s0)
1c008a42 <xQueueGiveFromISR+0x94> lw	a5,36(a5)
1c008a44 <xQueueGiveFromISR+0x96> beqz	a5,1c008a7e <xQueueGiveFromISR+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1231
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c008a46 <xQueueGiveFromISR+0x98> lw	a5,-24(s0)
1c008a4a <xQueueGiveFromISR+0x9c> addi	a5,a5,36
1c008a4e <xQueueGiveFromISR+0xa0> mv	a0,a5
1c008a50 <xQueueGiveFromISR+0xa2> jal	1c009198 <xTaskRemoveFromEventList>
1c008a52 <xQueueGiveFromISR+0xa4> mv	a5,a0
1c008a54 <xQueueGiveFromISR+0xa6> beqz	a5,1c008a7e <xQueueGiveFromISR+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1235
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1c008a56 <xQueueGiveFromISR+0xa8> lw	a5,-56(s0)
1c008a5a <xQueueGiveFromISR+0xac> beqz	a5,1c008a7e <xQueueGiveFromISR+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1237
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1c008a5c <xQueueGiveFromISR+0xae> lw	a5,-56(s0)
1c008a60 <xQueueGiveFromISR+0xb2> li	a4,1
1c008a62 <xQueueGiveFromISR+0xb4> sw	a4,0(a5)
1c008a64 <xQueueGiveFromISR+0xb6> j	1c008a7e <xQueueGiveFromISR+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1260
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1c008a66 <xQueueGiveFromISR+0xb8> lbu	a5,-33(s0)
1c008a6a <xQueueGiveFromISR+0xbc> addi	a5,a5,1
1c008a6c <xQueueGiveFromISR+0xbe> andi	a5,a5,255
1c008a70 <xQueueGiveFromISR+0xc2> slli	a4,a5,0x18
1c008a74 <xQueueGiveFromISR+0xc6> srai	a4,a4,0x18
1c008a76 <xQueueGiveFromISR+0xc8> lw	a5,-24(s0)
1c008a7a <xQueueGiveFromISR+0xcc> sb	a4,69(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1263
			}

			xReturn = pdPASS;
1c008a7e <xQueueGiveFromISR+0xd0> li	a5,1
1c008a80 <xQueueGiveFromISR+0xd2> sw	a5,-20(s0)
1c008a84 <xQueueGiveFromISR+0xd6> j	1c008a8a <xQueueGiveFromISR+0xdc>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1268
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1c008a86 <xQueueGiveFromISR+0xd8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1273
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
1c008a8a <xQueueGiveFromISR+0xdc> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:1274
}
1c008a8e <xQueueGiveFromISR+0xe0> mv	a0,a5
1c008a90 <xQueueGiveFromISR+0xe2> lw	ra,60(sp)
1c008a92 <xQueueGiveFromISR+0xe4> lw	s0,56(sp)
1c008a94 <xQueueGiveFromISR+0xe6> addi	sp,sp,64
1c008a96 <xQueueGiveFromISR+0xe8> ret
prvCopyDataToQueue():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2075

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
1c008a98 <prvCopyDataToQueue> addi	sp,sp,-48
1c008a9a <prvCopyDataToQueue+0x2> sw	ra,44(sp)
1c008a9c <prvCopyDataToQueue+0x4> sw	s0,40(sp)
1c008a9e <prvCopyDataToQueue+0x6> addi	s0,sp,48
1c008aa0 <prvCopyDataToQueue+0x8> sw	a0,-36(s0)
1c008aa4 <prvCopyDataToQueue+0xc> sw	a1,-40(s0)
1c008aa8 <prvCopyDataToQueue+0x10> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2076
BaseType_t xReturn = pdFALSE;
1c008aac <prvCopyDataToQueue+0x14> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2081
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1c008ab0 <prvCopyDataToQueue+0x18> lw	a5,-36(s0)
1c008ab4 <prvCopyDataToQueue+0x1c> lw	a5,56(a5)
1c008ab6 <prvCopyDataToQueue+0x1e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2083

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1c008aba <prvCopyDataToQueue+0x22> lw	a5,-36(s0)
1c008abe <prvCopyDataToQueue+0x26> lw	a5,64(a5)
1c008ac0 <prvCopyDataToQueue+0x28> bnez	a5,1c008ae4 <prvCopyDataToQueue+0x4c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2087
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1c008ac2 <prvCopyDataToQueue+0x2a> lw	a5,-36(s0)
1c008ac6 <prvCopyDataToQueue+0x2e> lw	a5,0(a5)
1c008ac8 <prvCopyDataToQueue+0x30> bnez	a5,1c008ba6 <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2090
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
1c008aca <prvCopyDataToQueue+0x32> lw	a5,-36(s0)
1c008ace <prvCopyDataToQueue+0x36> lw	a5,8(a5)
1c008ad0 <prvCopyDataToQueue+0x38> mv	a0,a5
1c008ad2 <prvCopyDataToQueue+0x3a> jal	ra,1c009420 <xTaskPriorityDisinherit>
1c008ad6 <prvCopyDataToQueue+0x3e> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2091
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
1c008ada <prvCopyDataToQueue+0x42> lw	a5,-36(s0)
1c008ade <prvCopyDataToQueue+0x46> sw	zero,8(a5)
1c008ae2 <prvCopyDataToQueue+0x4a> j	1c008ba6 <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2100
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
1c008ae4 <prvCopyDataToQueue+0x4c> lw	a5,-44(s0)
1c008ae8 <prvCopyDataToQueue+0x50> bnez	a5,1c008b34 <prvCopyDataToQueue+0x9c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2102
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
1c008aea <prvCopyDataToQueue+0x52> lw	a5,-36(s0)
1c008aee <prvCopyDataToQueue+0x56> lw	a4,4(a5)
1c008af0 <prvCopyDataToQueue+0x58> lw	a5,-36(s0)
1c008af4 <prvCopyDataToQueue+0x5c> lw	a5,64(a5)
1c008af6 <prvCopyDataToQueue+0x5e> mv	a2,a5
1c008af8 <prvCopyDataToQueue+0x60> lw	a1,-40(s0)
1c008afc <prvCopyDataToQueue+0x64> mv	a0,a4
1c008afe <prvCopyDataToQueue+0x66> jal	ra,1c0081b2 <memcpy>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2103
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
1c008b02 <prvCopyDataToQueue+0x6a> lw	a5,-36(s0)
1c008b06 <prvCopyDataToQueue+0x6e> lw	a4,4(a5)
1c008b08 <prvCopyDataToQueue+0x70> lw	a5,-36(s0)
1c008b0c <prvCopyDataToQueue+0x74> lw	a5,64(a5)
1c008b0e <prvCopyDataToQueue+0x76> add	a4,a4,a5
1c008b10 <prvCopyDataToQueue+0x78> lw	a5,-36(s0)
1c008b14 <prvCopyDataToQueue+0x7c> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2104
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1c008b16 <prvCopyDataToQueue+0x7e> lw	a5,-36(s0)
1c008b1a <prvCopyDataToQueue+0x82> lw	a4,4(a5)
1c008b1c <prvCopyDataToQueue+0x84> lw	a5,-36(s0)
1c008b20 <prvCopyDataToQueue+0x88> lw	a5,8(a5)
1c008b22 <prvCopyDataToQueue+0x8a> bltu	a4,a5,1c008ba6 <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2106
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1c008b26 <prvCopyDataToQueue+0x8e> lw	a5,-36(s0)
1c008b2a <prvCopyDataToQueue+0x92> lw	a4,0(a5)
1c008b2c <prvCopyDataToQueue+0x94> lw	a5,-36(s0)
1c008b30 <prvCopyDataToQueue+0x98> sw	a4,4(a5)
1c008b32 <prvCopyDataToQueue+0x9a> j	1c008ba6 <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2115
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
1c008b34 <prvCopyDataToQueue+0x9c> lw	a5,-36(s0)
1c008b38 <prvCopyDataToQueue+0xa0> lw	a4,12(a5)
1c008b3a <prvCopyDataToQueue+0xa2> lw	a5,-36(s0)
1c008b3e <prvCopyDataToQueue+0xa6> lw	a5,64(a5)
1c008b40 <prvCopyDataToQueue+0xa8> mv	a2,a5
1c008b42 <prvCopyDataToQueue+0xaa> lw	a1,-40(s0)
1c008b46 <prvCopyDataToQueue+0xae> mv	a0,a4
1c008b48 <prvCopyDataToQueue+0xb0> jal	ra,1c0081b2 <memcpy>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2116
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
1c008b4c <prvCopyDataToQueue+0xb4> lw	a5,-36(s0)
1c008b50 <prvCopyDataToQueue+0xb8> lw	a4,12(a5)
1c008b52 <prvCopyDataToQueue+0xba> lw	a5,-36(s0)
1c008b56 <prvCopyDataToQueue+0xbe> lw	a5,64(a5)
1c008b58 <prvCopyDataToQueue+0xc0> neg	a5,a5
1c008b5c <prvCopyDataToQueue+0xc4> add	a4,a4,a5
1c008b5e <prvCopyDataToQueue+0xc6> lw	a5,-36(s0)
1c008b62 <prvCopyDataToQueue+0xca> sw	a4,12(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2117
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1c008b64 <prvCopyDataToQueue+0xcc> lw	a5,-36(s0)
1c008b68 <prvCopyDataToQueue+0xd0> lw	a4,12(a5)
1c008b6a <prvCopyDataToQueue+0xd2> lw	a5,-36(s0)
1c008b6e <prvCopyDataToQueue+0xd6> lw	a5,0(a5)
1c008b70 <prvCopyDataToQueue+0xd8> bgeu	a4,a5,1c008b8c <prvCopyDataToQueue+0xf4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2119
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
1c008b74 <prvCopyDataToQueue+0xdc> lw	a5,-36(s0)
1c008b78 <prvCopyDataToQueue+0xe0> lw	a4,8(a5)
1c008b7a <prvCopyDataToQueue+0xe2> lw	a5,-36(s0)
1c008b7e <prvCopyDataToQueue+0xe6> lw	a5,64(a5)
1c008b80 <prvCopyDataToQueue+0xe8> neg	a5,a5
1c008b84 <prvCopyDataToQueue+0xec> add	a4,a4,a5
1c008b86 <prvCopyDataToQueue+0xee> lw	a5,-36(s0)
1c008b8a <prvCopyDataToQueue+0xf2> sw	a4,12(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2126
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
1c008b8c <prvCopyDataToQueue+0xf4> lw	a4,-44(s0)
1c008b90 <prvCopyDataToQueue+0xf8> li	a5,2
1c008b92 <prvCopyDataToQueue+0xfa> bne	a4,a5,1c008ba6 <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2128
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1c008b96 <prvCopyDataToQueue+0xfe> lw	a5,-24(s0)
1c008b9a <prvCopyDataToQueue+0x102> beqz	a5,1c008ba6 <prvCopyDataToQueue+0x10e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2134
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1c008b9c <prvCopyDataToQueue+0x104> lw	a5,-24(s0)
1c008ba0 <prvCopyDataToQueue+0x108> addi	a5,a5,-1
1c008ba2 <prvCopyDataToQueue+0x10a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2147
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1c008ba6 <prvCopyDataToQueue+0x10e> lw	a5,-24(s0)
1c008baa <prvCopyDataToQueue+0x112> addi	a4,a5,1
1c008bae <prvCopyDataToQueue+0x116> lw	a5,-36(s0)
1c008bb2 <prvCopyDataToQueue+0x11a> sw	a4,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2149

	return xReturn;
1c008bb4 <prvCopyDataToQueue+0x11c> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2150
}
1c008bb8 <prvCopyDataToQueue+0x120> mv	a0,a5
1c008bba <prvCopyDataToQueue+0x122> lw	ra,44(sp)
1c008bbc <prvCopyDataToQueue+0x124> lw	s0,40(sp)
1c008bbe <prvCopyDataToQueue+0x126> addi	sp,sp,48
1c008bc0 <prvCopyDataToQueue+0x128> ret
prvUnlockQueue():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2172
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
1c008bc2 <prvUnlockQueue> addi	sp,sp,-48
1c008bc4 <prvUnlockQueue+0x2> sw	ra,44(sp)
1c008bc6 <prvUnlockQueue+0x4> sw	s0,40(sp)
1c008bc8 <prvUnlockQueue+0x6> addi	s0,sp,48
1c008bca <prvUnlockQueue+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2179

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
1c008bce <prvUnlockQueue+0xc> jal	ra,1c00950c <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2181
	{
		int8_t cTxLock = pxQueue->cTxLock;
1c008bd2 <prvUnlockQueue+0x10> lw	a5,-36(s0)
1c008bd6 <prvUnlockQueue+0x14> lbu	a5,69(a5)
1c008bda <prvUnlockQueue+0x18> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2184

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1c008bde <prvUnlockQueue+0x1c> j	1c008c0a <prvUnlockQueue+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2232
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c008be0 <prvUnlockQueue+0x1e> lw	a5,-36(s0)
1c008be4 <prvUnlockQueue+0x22> lw	a5,36(a5)
1c008be6 <prvUnlockQueue+0x24> beqz	a5,1c008c14 <prvUnlockQueue+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2234
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c008be8 <prvUnlockQueue+0x26> lw	a5,-36(s0)
1c008bec <prvUnlockQueue+0x2a> addi	a5,a5,36
1c008bf0 <prvUnlockQueue+0x2e> mv	a0,a5
1c008bf2 <prvUnlockQueue+0x30> jal	1c009198 <xTaskRemoveFromEventList>
1c008bf4 <prvUnlockQueue+0x32> mv	a5,a0
1c008bf6 <prvUnlockQueue+0x34> beqz	a5,1c008bfc <prvUnlockQueue+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2238
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
1c008bf8 <prvUnlockQueue+0x36> jal	ra,1c00938a <vTaskMissedYield>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2252
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1c008bfc <prvUnlockQueue+0x3a> lbu	a5,-17(s0)
1c008c00 <prvUnlockQueue+0x3e> addi	a5,a5,-1
1c008c02 <prvUnlockQueue+0x40> andi	a5,a5,255
1c008c06 <prvUnlockQueue+0x44> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2184
		while( cTxLock > queueLOCKED_UNMODIFIED )
1c008c0a <prvUnlockQueue+0x48> lb	a5,-17(s0)
1c008c0e <prvUnlockQueue+0x4c> bgtz	a5,1c008be0 <prvUnlockQueue+0x1e>
1c008c12 <prvUnlockQueue+0x50> j	1c008c16 <prvUnlockQueue+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2247
					break;
1c008c14 <prvUnlockQueue+0x52> nop
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2255
		}

		pxQueue->cTxLock = queueUNLOCKED;
1c008c16 <prvUnlockQueue+0x54> lw	a5,-36(s0)
1c008c1a <prvUnlockQueue+0x58> li	a4,-1
1c008c1c <prvUnlockQueue+0x5a> sb	a4,69(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2257
	}
	taskEXIT_CRITICAL();
1c008c20 <prvUnlockQueue+0x5e> jal	ra,1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2260

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1c008c24 <prvUnlockQueue+0x62> jal	ra,1c00950c <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2262
	{
		int8_t cRxLock = pxQueue->cRxLock;
1c008c28 <prvUnlockQueue+0x66> lw	a5,-36(s0)
1c008c2c <prvUnlockQueue+0x6a> lbu	a5,68(a5)
1c008c30 <prvUnlockQueue+0x6e> sb	a5,-18(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2264

		while( cRxLock > queueLOCKED_UNMODIFIED )
1c008c34 <prvUnlockQueue+0x72> j	1c008c5c <prvUnlockQueue+0x9a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2266
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1c008c36 <prvUnlockQueue+0x74> lw	a5,-36(s0)
1c008c3a <prvUnlockQueue+0x78> lw	a5,16(a5)
1c008c3c <prvUnlockQueue+0x7a> beqz	a5,1c008c66 <prvUnlockQueue+0xa4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2268
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c008c3e <prvUnlockQueue+0x7c> lw	a5,-36(s0)
1c008c42 <prvUnlockQueue+0x80> addi	a5,a5,16
1c008c44 <prvUnlockQueue+0x82> mv	a0,a5
1c008c46 <prvUnlockQueue+0x84> jal	1c009198 <xTaskRemoveFromEventList>
1c008c48 <prvUnlockQueue+0x86> mv	a5,a0
1c008c4a <prvUnlockQueue+0x88> beqz	a5,1c008c4e <prvUnlockQueue+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2270
				{
					vTaskMissedYield();
1c008c4c <prvUnlockQueue+0x8a> jal	1c00938a <vTaskMissedYield>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2277
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1c008c4e <prvUnlockQueue+0x8c> lbu	a5,-18(s0)
1c008c52 <prvUnlockQueue+0x90> addi	a5,a5,-1
1c008c54 <prvUnlockQueue+0x92> andi	a5,a5,255
1c008c58 <prvUnlockQueue+0x96> sb	a5,-18(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2264
		while( cRxLock > queueLOCKED_UNMODIFIED )
1c008c5c <prvUnlockQueue+0x9a> lb	a5,-18(s0)
1c008c60 <prvUnlockQueue+0x9e> bgtz	a5,1c008c36 <prvUnlockQueue+0x74>
1c008c64 <prvUnlockQueue+0xa2> j	1c008c68 <prvUnlockQueue+0xa6>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2281
			}
			else
			{
				break;
1c008c66 <prvUnlockQueue+0xa4> nop
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2285
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
1c008c68 <prvUnlockQueue+0xa6> lw	a5,-36(s0)
1c008c6c <prvUnlockQueue+0xaa> li	a4,-1
1c008c6e <prvUnlockQueue+0xac> sb	a4,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2287
	}
	taskEXIT_CRITICAL();
1c008c72 <prvUnlockQueue+0xb0> jal	ra,1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2288
}
1c008c76 <prvUnlockQueue+0xb4> nop
1c008c78 <prvUnlockQueue+0xb6> lw	ra,44(sp)
1c008c7a <prvUnlockQueue+0xb8> lw	s0,40(sp)
1c008c7c <prvUnlockQueue+0xba> addi	sp,sp,48
1c008c7e <prvUnlockQueue+0xbc> ret
prvIsQueueFull():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2332
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1c008c80 <prvIsQueueFull> addi	sp,sp,-48
1c008c82 <prvIsQueueFull+0x2> sw	ra,44(sp)
1c008c84 <prvIsQueueFull+0x4> sw	s0,40(sp)
1c008c86 <prvIsQueueFull+0x6> addi	s0,sp,48
1c008c88 <prvIsQueueFull+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2335
BaseType_t xReturn;

	taskENTER_CRITICAL();
1c008c8c <prvIsQueueFull+0xc> jal	ra,1c00950c <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2337
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1c008c90 <prvIsQueueFull+0x10> lw	a5,-36(s0)
1c008c94 <prvIsQueueFull+0x14> lw	a4,56(a5)
1c008c96 <prvIsQueueFull+0x16> lw	a5,-36(s0)
1c008c9a <prvIsQueueFull+0x1a> lw	a5,60(a5)
1c008c9c <prvIsQueueFull+0x1c> bne	a4,a5,1c008ca8 <prvIsQueueFull+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2339
		{
			xReturn = pdTRUE;
1c008ca0 <prvIsQueueFull+0x20> li	a5,1
1c008ca2 <prvIsQueueFull+0x22> sw	a5,-20(s0)
1c008ca6 <prvIsQueueFull+0x26> j	1c008cac <prvIsQueueFull+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2343
		}
		else
		{
			xReturn = pdFALSE;
1c008ca8 <prvIsQueueFull+0x28> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2346
		}
	}
	taskEXIT_CRITICAL();
1c008cac <prvIsQueueFull+0x2c> jal	ra,1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2348

	return xReturn;
1c008cb0 <prvIsQueueFull+0x30> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/queue.c:2349
}
1c008cb4 <prvIsQueueFull+0x34> mv	a0,a5
1c008cb6 <prvIsQueueFull+0x36> lw	ra,44(sp)
1c008cb8 <prvIsQueueFull+0x38> lw	s0,40(sp)
1c008cba <prvIsQueueFull+0x3a> addi	sp,sp,48
1c008cbc <prvIsQueueFull+0x3c> ret
vTaskSuspendAll():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2111
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
1c008cbe <vTaskSuspendAll> addi	sp,sp,-16
1c008cc0 <vTaskSuspendAll+0x2> sw	s0,12(sp)
1c008cc2 <vTaskSuspendAll+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2123
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
1c008cc4 <vTaskSuspendAll+0x6> lui	a5,0x1c017
1c008cc8 <vTaskSuspendAll+0xa> lw	a5,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
1c008ccc <vTaskSuspendAll+0xe> addi	a4,a5,1
1c008cd0 <vTaskSuspendAll+0x12> lui	a5,0x1c017
1c008cd4 <vTaskSuspendAll+0x16> sw	a4,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2128

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
1c008cd8 <vTaskSuspendAll+0x1a> nop
1c008cda <vTaskSuspendAll+0x1c> lw	s0,12(sp)
1c008cdc <vTaskSuspendAll+0x1e> addi	sp,sp,16
1c008cde <vTaskSuspendAll+0x20> ret
xTaskResumeAll():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2195

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
1c008ce0 <xTaskResumeAll> addi	sp,sp,-32
1c008ce2 <xTaskResumeAll+0x2> sw	ra,28(sp)
1c008ce4 <xTaskResumeAll+0x4> sw	s0,24(sp)
1c008ce6 <xTaskResumeAll+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2196
TCB_t *pxTCB = NULL;
1c008ce8 <xTaskResumeAll+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2197
BaseType_t xAlreadyYielded = pdFALSE;
1c008cec <xTaskResumeAll+0xc> sw	zero,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2201

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
1c008cf0 <xTaskResumeAll+0x10> lui	a5,0x1c017
1c008cf4 <xTaskResumeAll+0x14> lw	a5,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
1c008cf8 <xTaskResumeAll+0x18> bnez	a5,1c008d00 <xTaskResumeAll+0x20>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2201 (discriminator 1)
1c008cfa <xTaskResumeAll+0x1a> csrci	mstatus,8
1c008cfe <xTaskResumeAll+0x1e> j	1c008cfe <xTaskResumeAll+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2208
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
1c008d00 <xTaskResumeAll+0x20> jal	ra,1c00950c <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2210
	{
		--uxSchedulerSuspended;
1c008d04 <xTaskResumeAll+0x24> lui	a5,0x1c017
1c008d08 <xTaskResumeAll+0x28> lw	a5,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
1c008d0c <xTaskResumeAll+0x2c> addi	a4,a5,-1
1c008d10 <xTaskResumeAll+0x30> lui	a5,0x1c017
1c008d14 <xTaskResumeAll+0x34> sw	a4,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2212

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c008d18 <xTaskResumeAll+0x38> lui	a5,0x1c017
1c008d1c <xTaskResumeAll+0x3c> lw	a5,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
1c008d20 <xTaskResumeAll+0x40> bnez	a5,1c008e18 <xTaskResumeAll+0x138>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2214
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1c008d24 <xTaskResumeAll+0x44> lui	a5,0x1c017
1c008d28 <xTaskResumeAll+0x48> lw	a5,-1164(a5) # 1c016b74 <uxCurrentNumberOfTasks>
1c008d2c <xTaskResumeAll+0x4c> beqz	a5,1c008e18 <xTaskResumeAll+0x138>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2218
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1c008d30 <xTaskResumeAll+0x50> j	1c008dba <xTaskResumeAll+0xda>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2220
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c008d32 <xTaskResumeAll+0x52> addi	a5,gp,-1924 # 1c011274 <xPendingReadyList>
1c008d36 <xTaskResumeAll+0x56> lw	a5,12(a5)
1c008d38 <xTaskResumeAll+0x58> lw	a5,12(a5)
1c008d3a <xTaskResumeAll+0x5a> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2221
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c008d3e <xTaskResumeAll+0x5e> lw	a5,-20(s0)
1c008d42 <xTaskResumeAll+0x62> addi	a5,a5,24
1c008d44 <xTaskResumeAll+0x64> mv	a0,a5
1c008d46 <xTaskResumeAll+0x66> jal	ra,1c0085ba <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2222
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c008d4a <xTaskResumeAll+0x6a> lw	a5,-20(s0)
1c008d4e <xTaskResumeAll+0x6e> addi	a5,a5,4
1c008d50 <xTaskResumeAll+0x70> mv	a0,a5
1c008d52 <xTaskResumeAll+0x72> jal	ra,1c0085ba <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2223
					prvAddTaskToReadyList( pxTCB );
1c008d56 <xTaskResumeAll+0x76> lw	a5,-20(s0)
1c008d5a <xTaskResumeAll+0x7a> lw	a4,44(a5)
1c008d5c <xTaskResumeAll+0x7c> lui	a5,0x1c017
1c008d60 <xTaskResumeAll+0x80> lw	a5,-1156(a5) # 1c016b7c <uxTopReadyPriority>
1c008d64 <xTaskResumeAll+0x84> bgeu	a5,a4,1c008d76 <xTaskResumeAll+0x96>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2223 (discriminator 1)
1c008d68 <xTaskResumeAll+0x88> lw	a5,-20(s0)
1c008d6c <xTaskResumeAll+0x8c> lw	a4,44(a5)
1c008d6e <xTaskResumeAll+0x8e> lui	a5,0x1c017
1c008d72 <xTaskResumeAll+0x92> sw	a4,-1156(a5) # 1c016b7c <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2223 (discriminator 3)
1c008d76 <xTaskResumeAll+0x96> lw	a5,-20(s0)
1c008d7a <xTaskResumeAll+0x9a> lw	a4,44(a5)
1c008d7c <xTaskResumeAll+0x9c> mv	a5,a4
1c008d7e <xTaskResumeAll+0x9e> slli	a5,a5,0x2
1c008d80 <xTaskResumeAll+0xa0> add	a5,a5,a4
1c008d82 <xTaskResumeAll+0xa2> slli	a5,a5,0x2
1c008d84 <xTaskResumeAll+0xa4> lui	a4,0x1c011
1c008d88 <xTaskResumeAll+0xa8> addi	a4,a4,528 # 1c011210 <__bss_start>
1c008d8c <xTaskResumeAll+0xac> add	a4,a4,a5
1c008d8e <xTaskResumeAll+0xae> lw	a5,-20(s0)
1c008d92 <xTaskResumeAll+0xb2> addi	a5,a5,4
1c008d94 <xTaskResumeAll+0xb4> mv	a1,a5
1c008d96 <xTaskResumeAll+0xb6> mv	a0,a4
1c008d98 <xTaskResumeAll+0xb8> jal	ra,1c0084b2 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2227 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c008d9c <xTaskResumeAll+0xbc> lw	a5,-20(s0)
1c008da0 <xTaskResumeAll+0xc0> lw	a4,44(a5)
1c008da2 <xTaskResumeAll+0xc2> lui	a5,0x1c017
1c008da6 <xTaskResumeAll+0xc6> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c008daa <xTaskResumeAll+0xca> lw	a5,44(a5)
1c008dac <xTaskResumeAll+0xcc> bltu	a4,a5,1c008dba <xTaskResumeAll+0xda>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2229
					{
						xYieldPending = pdTRUE;
1c008db0 <xTaskResumeAll+0xd0> lui	a5,0x1c017
1c008db4 <xTaskResumeAll+0xd4> li	a4,1
1c008db6 <xTaskResumeAll+0xd6> sw	a4,-1144(a5) # 1c016b88 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2218
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1c008dba <xTaskResumeAll+0xda> addi	a5,gp,-1924 # 1c011274 <xPendingReadyList>
1c008dbe <xTaskResumeAll+0xde> lw	a5,0(a5)
1c008dc0 <xTaskResumeAll+0xe0> bnez	a5,1c008d32 <xTaskResumeAll+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2237
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1c008dc2 <xTaskResumeAll+0xe2> lw	a5,-20(s0)
1c008dc6 <xTaskResumeAll+0xe6> beqz	a5,1c008dca <xTaskResumeAll+0xea>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2245
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
1c008dc8 <xTaskResumeAll+0xe8> jal	1c0093a2 <prvResetNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2253
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
1c008dca <xTaskResumeAll+0xea> lui	a5,0x1c017
1c008dce <xTaskResumeAll+0xee> lw	a5,-1148(a5) # 1c016b84 <xPendedTicks>
1c008dd2 <xTaskResumeAll+0xf2> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2255

					if( xPendedCounts > ( TickType_t ) 0U )
1c008dd6 <xTaskResumeAll+0xf6> lw	a5,-28(s0)
1c008dda <xTaskResumeAll+0xfa> beqz	a5,1c008e04 <xTaskResumeAll+0x124>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2259
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
1c008ddc <xTaskResumeAll+0xfc> jal	1c008e28 <xTaskIncrementTick>
1c008dde <xTaskResumeAll+0xfe> mv	a5,a0
1c008de0 <xTaskResumeAll+0x100> beqz	a5,1c008dec <xTaskResumeAll+0x10c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2261
							{
								xYieldPending = pdTRUE;
1c008de2 <xTaskResumeAll+0x102> lui	a5,0x1c017
1c008de6 <xTaskResumeAll+0x106> li	a4,1
1c008de8 <xTaskResumeAll+0x108> sw	a4,-1144(a5) # 1c016b88 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2267
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
1c008dec <xTaskResumeAll+0x10c> lw	a5,-28(s0)
1c008df0 <xTaskResumeAll+0x110> addi	a5,a5,-1
1c008df2 <xTaskResumeAll+0x112> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2268
						} while( xPendedCounts > ( TickType_t ) 0U );
1c008df6 <xTaskResumeAll+0x116> lw	a5,-28(s0)
1c008dfa <xTaskResumeAll+0x11a> bnez	a5,1c008ddc <xTaskResumeAll+0xfc>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2270

						xPendedTicks = 0;
1c008dfc <xTaskResumeAll+0x11c> lui	a5,0x1c017
1c008e00 <xTaskResumeAll+0x120> sw	zero,-1148(a5) # 1c016b84 <xPendedTicks>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2278
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
1c008e04 <xTaskResumeAll+0x124> lui	a5,0x1c017
1c008e08 <xTaskResumeAll+0x128> lw	a5,-1144(a5) # 1c016b88 <xYieldPending>
1c008e0c <xTaskResumeAll+0x12c> beqz	a5,1c008e18 <xTaskResumeAll+0x138>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2282
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
1c008e0e <xTaskResumeAll+0x12e> li	a5,1
1c008e10 <xTaskResumeAll+0x130> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2285
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
1c008e14 <xTaskResumeAll+0x134> ecall
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2298
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1c008e18 <xTaskResumeAll+0x138> jal	1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2300

	return xAlreadyYielded;
1c008e1a <xTaskResumeAll+0x13a> lw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2301
}
1c008e1e <xTaskResumeAll+0x13e> mv	a0,a5
1c008e20 <xTaskResumeAll+0x140> lw	ra,28(sp)
1c008e22 <xTaskResumeAll+0x142> lw	s0,24(sp)
1c008e24 <xTaskResumeAll+0x144> addi	sp,sp,32
1c008e26 <xTaskResumeAll+0x146> ret
xTaskIncrementTick():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2708

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
1c008e28 <xTaskIncrementTick> addi	sp,sp,-48
1c008e2a <xTaskIncrementTick+0x2> sw	ra,44(sp)
1c008e2c <xTaskIncrementTick+0x4> sw	s0,40(sp)
1c008e2e <xTaskIncrementTick+0x6> addi	s0,sp,48
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2711
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1c008e30 <xTaskIncrementTick+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2717

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c008e34 <xTaskIncrementTick+0xc> lui	a5,0x1c017
1c008e38 <xTaskIncrementTick+0x10> lw	a5,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
1c008e3c <xTaskIncrementTick+0x14> bnez	a5,1c008fd8 <xTaskIncrementTick+0x1b0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2721
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1c008e40 <xTaskIncrementTick+0x18> lui	a5,0x1c017
1c008e44 <xTaskIncrementTick+0x1c> lw	a5,-1160(a5) # 1c016b78 <xTickCount>
1c008e48 <xTaskIncrementTick+0x20> addi	a5,a5,1
1c008e4a <xTaskIncrementTick+0x22> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2725

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
1c008e4e <xTaskIncrementTick+0x26> lui	a5,0x1c017
1c008e52 <xTaskIncrementTick+0x2a> lw	a4,-24(s0)
1c008e56 <xTaskIncrementTick+0x2e> sw	a4,-1160(a5) # 1c016b78 <xTickCount>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2727

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1c008e5a <xTaskIncrementTick+0x32> lw	a5,-24(s0)
1c008e5e <xTaskIncrementTick+0x36> bnez	a5,1c008eb0 <xTaskIncrementTick+0x88>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2729
		{
			taskSWITCH_DELAYED_LISTS();
1c008e60 <xTaskIncrementTick+0x38> lui	a5,0x1c017
1c008e64 <xTaskIncrementTick+0x3c> lw	a5,-1172(a5) # 1c016b6c <pxDelayedTaskList>
1c008e68 <xTaskIncrementTick+0x40> lw	a5,0(a5)
1c008e6a <xTaskIncrementTick+0x42> beqz	a5,1c008e72 <xTaskIncrementTick+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2729 (discriminator 1)
1c008e6c <xTaskIncrementTick+0x44> csrci	mstatus,8
1c008e70 <xTaskIncrementTick+0x48> j	1c008e70 <xTaskIncrementTick+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2729 (discriminator 2)
1c008e72 <xTaskIncrementTick+0x4a> lui	a5,0x1c017
1c008e76 <xTaskIncrementTick+0x4e> lw	a5,-1172(a5) # 1c016b6c <pxDelayedTaskList>
1c008e7a <xTaskIncrementTick+0x52> sw	a5,-28(s0)
1c008e7e <xTaskIncrementTick+0x56> lui	a5,0x1c017
1c008e82 <xTaskIncrementTick+0x5a> lw	a4,-1168(a5) # 1c016b70 <pxOverflowDelayedTaskList>
1c008e86 <xTaskIncrementTick+0x5e> lui	a5,0x1c017
1c008e8a <xTaskIncrementTick+0x62> sw	a4,-1172(a5) # 1c016b6c <pxDelayedTaskList>
1c008e8e <xTaskIncrementTick+0x66> lui	a5,0x1c017
1c008e92 <xTaskIncrementTick+0x6a> lw	a4,-28(s0)
1c008e96 <xTaskIncrementTick+0x6e> sw	a4,-1168(a5) # 1c016b70 <pxOverflowDelayedTaskList>
1c008e9a <xTaskIncrementTick+0x72> lui	a5,0x1c017
1c008e9e <xTaskIncrementTick+0x76> lw	a5,-1140(a5) # 1c016b8c <xNumOfOverflows>
1c008ea2 <xTaskIncrementTick+0x7a> addi	a4,a5,1
1c008ea6 <xTaskIncrementTick+0x7e> lui	a5,0x1c017
1c008eaa <xTaskIncrementTick+0x82> sw	a4,-1140(a5) # 1c016b8c <xNumOfOverflows>
1c008eae <xTaskIncrementTick+0x86> jal	1c0093a2 <prvResetNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2740

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
1c008eb0 <xTaskIncrementTick+0x88> lui	a5,0x1c017
1c008eb4 <xTaskIncrementTick+0x8c> lw	a5,-1136(a5) # 1c016b90 <xNextTaskUnblockTime>
1c008eb8 <xTaskIncrementTick+0x90> lw	a4,-24(s0)
1c008ebc <xTaskIncrementTick+0x94> bltu	a4,a5,1c008f8e <xTaskIncrementTick+0x166>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2744
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c008ec0 <xTaskIncrementTick+0x98> lui	a5,0x1c017
1c008ec4 <xTaskIncrementTick+0x9c> lw	a5,-1172(a5) # 1c016b6c <pxDelayedTaskList>
1c008ec8 <xTaskIncrementTick+0xa0> lw	a5,0(a5)
1c008eca <xTaskIncrementTick+0xa2> bnez	a5,1c008ed8 <xTaskIncrementTick+0xb0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2751
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c008ecc <xTaskIncrementTick+0xa4> lui	a5,0x1c017
1c008ed0 <xTaskIncrementTick+0xa8> li	a4,-1
1c008ed2 <xTaskIncrementTick+0xaa> sw	a4,-1136(a5) # 1c016b90 <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2752
					break;
1c008ed6 <xTaskIncrementTick+0xae> j	1c008f8e <xTaskIncrementTick+0x166>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2760
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c008ed8 <xTaskIncrementTick+0xb0> lui	a5,0x1c017
1c008edc <xTaskIncrementTick+0xb4> lw	a5,-1172(a5) # 1c016b6c <pxDelayedTaskList>
1c008ee0 <xTaskIncrementTick+0xb8> lw	a5,12(a5)
1c008ee2 <xTaskIncrementTick+0xba> lw	a5,12(a5)
1c008ee4 <xTaskIncrementTick+0xbc> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2761
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1c008ee8 <xTaskIncrementTick+0xc0> lw	a5,-32(s0)
1c008eec <xTaskIncrementTick+0xc4> lw	a5,4(a5)
1c008eee <xTaskIncrementTick+0xc6> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2763

					if( xConstTickCount < xItemValue )
1c008ef2 <xTaskIncrementTick+0xca> lw	a4,-24(s0)
1c008ef6 <xTaskIncrementTick+0xce> lw	a5,-36(s0)
1c008efa <xTaskIncrementTick+0xd2> bgeu	a4,a5,1c008f0c <xTaskIncrementTick+0xe4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2770
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
1c008efe <xTaskIncrementTick+0xd6> lui	a5,0x1c017
1c008f02 <xTaskIncrementTick+0xda> lw	a4,-36(s0)
1c008f06 <xTaskIncrementTick+0xde> sw	a4,-1136(a5) # 1c016b90 <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2771
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
1c008f0a <xTaskIncrementTick+0xe2> j	1c008f8e <xTaskIncrementTick+0x166>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2779
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c008f0c <xTaskIncrementTick+0xe4> lw	a5,-32(s0)
1c008f10 <xTaskIncrementTick+0xe8> addi	a5,a5,4
1c008f12 <xTaskIncrementTick+0xea> mv	a0,a5
1c008f14 <xTaskIncrementTick+0xec> jal	ra,1c0085ba <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2783

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1c008f18 <xTaskIncrementTick+0xf0> lw	a5,-32(s0)
1c008f1c <xTaskIncrementTick+0xf4> lw	a5,40(a5)
1c008f1e <xTaskIncrementTick+0xf6> beqz	a5,1c008f2c <xTaskIncrementTick+0x104>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2785
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c008f20 <xTaskIncrementTick+0xf8> lw	a5,-32(s0)
1c008f24 <xTaskIncrementTick+0xfc> addi	a5,a5,24
1c008f26 <xTaskIncrementTick+0xfe> mv	a0,a5
1c008f28 <xTaskIncrementTick+0x100> jal	ra,1c0085ba <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2794
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
1c008f2c <xTaskIncrementTick+0x104> lw	a5,-32(s0)
1c008f30 <xTaskIncrementTick+0x108> lw	a4,44(a5)
1c008f32 <xTaskIncrementTick+0x10a> lui	a5,0x1c017
1c008f36 <xTaskIncrementTick+0x10e> lw	a5,-1156(a5) # 1c016b7c <uxTopReadyPriority>
1c008f3a <xTaskIncrementTick+0x112> bgeu	a5,a4,1c008f4c <xTaskIncrementTick+0x124>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2794 (discriminator 1)
1c008f3e <xTaskIncrementTick+0x116> lw	a5,-32(s0)
1c008f42 <xTaskIncrementTick+0x11a> lw	a4,44(a5)
1c008f44 <xTaskIncrementTick+0x11c> lui	a5,0x1c017
1c008f48 <xTaskIncrementTick+0x120> sw	a4,-1156(a5) # 1c016b7c <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2794 (discriminator 3)
1c008f4c <xTaskIncrementTick+0x124> lw	a5,-32(s0)
1c008f50 <xTaskIncrementTick+0x128> lw	a4,44(a5)
1c008f52 <xTaskIncrementTick+0x12a> mv	a5,a4
1c008f54 <xTaskIncrementTick+0x12c> slli	a5,a5,0x2
1c008f56 <xTaskIncrementTick+0x12e> add	a5,a5,a4
1c008f58 <xTaskIncrementTick+0x130> slli	a5,a5,0x2
1c008f5a <xTaskIncrementTick+0x132> lui	a4,0x1c011
1c008f5e <xTaskIncrementTick+0x136> addi	a4,a4,528 # 1c011210 <__bss_start>
1c008f62 <xTaskIncrementTick+0x13a> add	a4,a4,a5
1c008f64 <xTaskIncrementTick+0x13c> lw	a5,-32(s0)
1c008f68 <xTaskIncrementTick+0x140> addi	a5,a5,4
1c008f6a <xTaskIncrementTick+0x142> mv	a1,a5
1c008f6c <xTaskIncrementTick+0x144> mv	a0,a4
1c008f6e <xTaskIncrementTick+0x146> jal	ra,1c0084b2 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2804 (discriminator 3)
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c008f72 <xTaskIncrementTick+0x14a> lw	a5,-32(s0)
1c008f76 <xTaskIncrementTick+0x14e> lw	a4,44(a5)
1c008f78 <xTaskIncrementTick+0x150> lui	a5,0x1c017
1c008f7c <xTaskIncrementTick+0x154> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c008f80 <xTaskIncrementTick+0x158> lw	a5,44(a5)
1c008f82 <xTaskIncrementTick+0x15a> bltu	a4,a5,1c008ec0 <xTaskIncrementTick+0x98>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2806
						{
							xSwitchRequired = pdTRUE;
1c008f86 <xTaskIncrementTick+0x15e> li	a5,1
1c008f88 <xTaskIncrementTick+0x160> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2744
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c008f8c <xTaskIncrementTick+0x164> j	1c008ec0 <xTaskIncrementTick+0x98>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2823
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1c008f8e <xTaskIncrementTick+0x166> lui	a5,0x1c017
1c008f92 <xTaskIncrementTick+0x16a> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c008f96 <xTaskIncrementTick+0x16e> lw	a4,44(a5)
1c008f98 <xTaskIncrementTick+0x170> lui	a5,0x1c011
1c008f9c <xTaskIncrementTick+0x174> addi	a3,a5,528 # 1c011210 <__bss_start>
1c008fa0 <xTaskIncrementTick+0x178> mv	a5,a4
1c008fa2 <xTaskIncrementTick+0x17a> slli	a5,a5,0x2
1c008fa4 <xTaskIncrementTick+0x17c> add	a5,a5,a4
1c008fa6 <xTaskIncrementTick+0x17e> slli	a5,a5,0x2
1c008fa8 <xTaskIncrementTick+0x180> add	a5,a5,a3
1c008faa <xTaskIncrementTick+0x182> lw	a4,0(a5)
1c008fac <xTaskIncrementTick+0x184> li	a5,1
1c008fae <xTaskIncrementTick+0x186> bgeu	a5,a4,1c008fb8 <xTaskIncrementTick+0x190>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2825
			{
				xSwitchRequired = pdTRUE;
1c008fb2 <xTaskIncrementTick+0x18a> li	a5,1
1c008fb4 <xTaskIncrementTick+0x18c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2838

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
1c008fb8 <xTaskIncrementTick+0x190> lui	a5,0x1c017
1c008fbc <xTaskIncrementTick+0x194> lw	a5,-1148(a5) # 1c016b84 <xPendedTicks>
1c008fc0 <xTaskIncrementTick+0x198> bnez	a5,1c008fc6 <xTaskIncrementTick+0x19e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2840
			{
				vApplicationTickHook();
1c008fc2 <xTaskIncrementTick+0x19a> jal	ra,1c00b48e <vApplicationTickHook>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2851
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
1c008fc6 <xTaskIncrementTick+0x19e> lui	a5,0x1c017
1c008fca <xTaskIncrementTick+0x1a2> lw	a5,-1144(a5) # 1c016b88 <xYieldPending>
1c008fce <xTaskIncrementTick+0x1a6> beqz	a5,1c008ff0 <xTaskIncrementTick+0x1c8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2853
			{
				xSwitchRequired = pdTRUE;
1c008fd0 <xTaskIncrementTick+0x1a8> li	a5,1
1c008fd2 <xTaskIncrementTick+0x1aa> sw	a5,-20(s0)
1c008fd6 <xTaskIncrementTick+0x1ae> j	1c008ff0 <xTaskIncrementTick+0x1c8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2864
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
1c008fd8 <xTaskIncrementTick+0x1b0> lui	a5,0x1c017
1c008fdc <xTaskIncrementTick+0x1b4> lw	a5,-1148(a5) # 1c016b84 <xPendedTicks>
1c008fe0 <xTaskIncrementTick+0x1b8> addi	a4,a5,1
1c008fe4 <xTaskIncrementTick+0x1bc> lui	a5,0x1c017
1c008fe8 <xTaskIncrementTick+0x1c0> sw	a4,-1148(a5) # 1c016b84 <xPendedTicks>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2870

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
1c008fec <xTaskIncrementTick+0x1c4> jal	ra,1c00b48e <vApplicationTickHook>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2875
		}
		#endif
	}

	return xSwitchRequired;
1c008ff0 <xTaskIncrementTick+0x1c8> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2876
}
1c008ff4 <xTaskIncrementTick+0x1cc> mv	a0,a5
1c008ff6 <xTaskIncrementTick+0x1ce> lw	ra,44(sp)
1c008ff8 <xTaskIncrementTick+0x1d0> lw	s0,40(sp)
1c008ffa <xTaskIncrementTick+0x1d2> addi	sp,sp,48
1c008ffc <xTaskIncrementTick+0x1d4> ret
vTaskSwitchContext():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2990

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
1c008ffe <vTaskSwitchContext> addi	sp,sp,-32
1c009000 <vTaskSwitchContext+0x2> sw	ra,28(sp)
1c009002 <vTaskSwitchContext+0x4> sw	s0,24(sp)
1c009004 <vTaskSwitchContext+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2991
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1c009006 <vTaskSwitchContext+0x8> lui	a5,0x1c017
1c00900a <vTaskSwitchContext+0xc> lw	a5,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
1c00900e <vTaskSwitchContext+0x10> beqz	a5,1c00901c <vTaskSwitchContext+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2995
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
1c009010 <vTaskSwitchContext+0x12> lui	a5,0x1c017
1c009014 <vTaskSwitchContext+0x16> li	a4,1
1c009016 <vTaskSwitchContext+0x18> sw	a4,-1144(a5) # 1c016b88 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3061
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
1c00901a <vTaskSwitchContext+0x1c> j	1c00914c <vTaskSwitchContext+0x14e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:2999
		xYieldPending = pdFALSE;
1c00901c <vTaskSwitchContext+0x1e> lui	a5,0x1c017
1c009020 <vTaskSwitchContext+0x22> sw	zero,-1144(a5) # 1c016b88 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030
		taskCHECK_FOR_STACK_OVERFLOW();
1c009024 <vTaskSwitchContext+0x26> lui	a5,0x1c017
1c009028 <vTaskSwitchContext+0x2a> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c00902c <vTaskSwitchContext+0x2e> lw	a5,48(a5)
1c00902e <vTaskSwitchContext+0x30> sw	a5,-24(s0)
1c009032 <vTaskSwitchContext+0x34> lui	a5,0xa5a5a
1c009036 <vTaskSwitchContext+0x38> addi	a5,a5,1445 # a5a5a5a5 <__l2_shared_end+0x89a32d75>
1c00903a <vTaskSwitchContext+0x3c> sw	a5,-28(s0)
1c00903e <vTaskSwitchContext+0x40> lw	a5,-24(s0)
1c009042 <vTaskSwitchContext+0x44> lw	a5,0(a5)
1c009044 <vTaskSwitchContext+0x46> lw	a4,-28(s0)
1c009048 <vTaskSwitchContext+0x4a> bne	a4,a5,1c00907c <vTaskSwitchContext+0x7e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030 (discriminator 2)
1c00904c <vTaskSwitchContext+0x4e> lw	a5,-24(s0)
1c009050 <vTaskSwitchContext+0x52> addi	a5,a5,4
1c009052 <vTaskSwitchContext+0x54> lw	a5,0(a5)
1c009054 <vTaskSwitchContext+0x56> lw	a4,-28(s0)
1c009058 <vTaskSwitchContext+0x5a> bne	a4,a5,1c00907c <vTaskSwitchContext+0x7e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030 (discriminator 4)
1c00905c <vTaskSwitchContext+0x5e> lw	a5,-24(s0)
1c009060 <vTaskSwitchContext+0x62> addi	a5,a5,8
1c009062 <vTaskSwitchContext+0x64> lw	a5,0(a5)
1c009064 <vTaskSwitchContext+0x66> lw	a4,-28(s0)
1c009068 <vTaskSwitchContext+0x6a> bne	a4,a5,1c00907c <vTaskSwitchContext+0x7e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030 (discriminator 6)
1c00906c <vTaskSwitchContext+0x6e> lw	a5,-24(s0)
1c009070 <vTaskSwitchContext+0x72> addi	a5,a5,12
1c009072 <vTaskSwitchContext+0x74> lw	a5,0(a5)
1c009074 <vTaskSwitchContext+0x76> lw	a4,-28(s0)
1c009078 <vTaskSwitchContext+0x7a> beq	a4,a5,1c009098 <vTaskSwitchContext+0x9a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3030 (discriminator 7)
1c00907c <vTaskSwitchContext+0x7e> lui	a5,0x1c017
1c009080 <vTaskSwitchContext+0x82> lw	a4,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009084 <vTaskSwitchContext+0x86> lui	a5,0x1c017
1c009088 <vTaskSwitchContext+0x8a> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c00908c <vTaskSwitchContext+0x8e> addi	a5,a5,52
1c009090 <vTaskSwitchContext+0x92> mv	a1,a5
1c009092 <vTaskSwitchContext+0x94> mv	a0,a4
1c009094 <vTaskSwitchContext+0x96> jal	ra,1c00b478 <vApplicationStackOverflowHook>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c009098 <vTaskSwitchContext+0x9a> lui	a5,0x1c017
1c00909c <vTaskSwitchContext+0x9e> lw	a5,-1156(a5) # 1c016b7c <uxTopReadyPriority>
1c0090a0 <vTaskSwitchContext+0xa2> sw	a5,-20(s0)
1c0090a4 <vTaskSwitchContext+0xa6> j	1c0090bc <vTaskSwitchContext+0xbe>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 5)
1c0090a6 <vTaskSwitchContext+0xa8> lw	a5,-20(s0)
1c0090aa <vTaskSwitchContext+0xac> bnez	a5,1c0090b2 <vTaskSwitchContext+0xb4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 2)
1c0090ac <vTaskSwitchContext+0xae> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 1)
1c0090b0 <vTaskSwitchContext+0xb2> j	1c0090b0 <vTaskSwitchContext+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 3)
1c0090b2 <vTaskSwitchContext+0xb4> lw	a5,-20(s0)
1c0090b6 <vTaskSwitchContext+0xb8> addi	a5,a5,-1
1c0090b8 <vTaskSwitchContext+0xba> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 4)
1c0090bc <vTaskSwitchContext+0xbe> lui	a5,0x1c011
1c0090c0 <vTaskSwitchContext+0xc2> addi	a3,a5,528 # 1c011210 <__bss_start>
1c0090c4 <vTaskSwitchContext+0xc6> lw	a4,-20(s0)
1c0090c8 <vTaskSwitchContext+0xca> mv	a5,a4
1c0090ca <vTaskSwitchContext+0xcc> slli	a5,a5,0x2
1c0090cc <vTaskSwitchContext+0xce> add	a5,a5,a4
1c0090ce <vTaskSwitchContext+0xd0> slli	a5,a5,0x2
1c0090d0 <vTaskSwitchContext+0xd2> add	a5,a5,a3
1c0090d2 <vTaskSwitchContext+0xd4> lw	a5,0(a5)
1c0090d4 <vTaskSwitchContext+0xd6> beqz	a5,1c0090a6 <vTaskSwitchContext+0xa8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 6)
1c0090d6 <vTaskSwitchContext+0xd8> lw	a4,-20(s0)
1c0090da <vTaskSwitchContext+0xdc> mv	a5,a4
1c0090dc <vTaskSwitchContext+0xde> slli	a5,a5,0x2
1c0090de <vTaskSwitchContext+0xe0> add	a5,a5,a4
1c0090e0 <vTaskSwitchContext+0xe2> slli	a5,a5,0x2
1c0090e2 <vTaskSwitchContext+0xe4> lui	a4,0x1c011
1c0090e6 <vTaskSwitchContext+0xe8> addi	a4,a4,528 # 1c011210 <__bss_start>
1c0090ea <vTaskSwitchContext+0xec> add	a5,a5,a4
1c0090ec <vTaskSwitchContext+0xee> sw	a5,-32(s0)
1c0090f0 <vTaskSwitchContext+0xf2> lw	a5,-32(s0)
1c0090f4 <vTaskSwitchContext+0xf6> lw	a5,4(a5)
1c0090f6 <vTaskSwitchContext+0xf8> lw	a4,4(a5)
1c0090f8 <vTaskSwitchContext+0xfa> lw	a5,-32(s0)
1c0090fc <vTaskSwitchContext+0xfe> sw	a4,4(a5)
1c0090fe <vTaskSwitchContext+0x100> lw	a5,-32(s0)
1c009102 <vTaskSwitchContext+0x104> lw	a4,4(a5)
1c009104 <vTaskSwitchContext+0x106> lw	a5,-32(s0)
1c009108 <vTaskSwitchContext+0x10a> addi	a5,a5,8
1c00910a <vTaskSwitchContext+0x10c> bne	a4,a5,1c00911c <vTaskSwitchContext+0x11e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 7)
1c00910e <vTaskSwitchContext+0x110> lw	a5,-32(s0)
1c009112 <vTaskSwitchContext+0x114> lw	a5,4(a5)
1c009114 <vTaskSwitchContext+0x116> lw	a4,4(a5)
1c009116 <vTaskSwitchContext+0x118> lw	a5,-32(s0)
1c00911a <vTaskSwitchContext+0x11c> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3041 (discriminator 9)
1c00911c <vTaskSwitchContext+0x11e> lw	a5,-32(s0)
1c009120 <vTaskSwitchContext+0x122> lw	a5,4(a5)
1c009122 <vTaskSwitchContext+0x124> lw	a4,12(a5)
1c009124 <vTaskSwitchContext+0x126> lui	a5,0x1c017
1c009128 <vTaskSwitchContext+0x12a> sw	a4,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c00912c <vTaskSwitchContext+0x12e> lui	a5,0x1c017
1c009130 <vTaskSwitchContext+0x132> lw	a4,-20(s0)
1c009134 <vTaskSwitchContext+0x136> sw	a4,-1156(a5) # 1c016b7c <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3057 (discriminator 9)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1c009138 <vTaskSwitchContext+0x13a> lui	a5,0x1c017
1c00913c <vTaskSwitchContext+0x13e> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009140 <vTaskSwitchContext+0x142> addi	a4,a5,88
1c009144 <vTaskSwitchContext+0x146> lui	a5,0x1c011
1c009148 <vTaskSwitchContext+0x14a> sw	a4,508(a5) # 1c0111fc <_impure_ptr>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3061
}
1c00914c <vTaskSwitchContext+0x14e> nop
1c00914e <vTaskSwitchContext+0x150> lw	ra,28(sp)
1c009150 <vTaskSwitchContext+0x152> lw	s0,24(sp)
1c009152 <vTaskSwitchContext+0x154> addi	sp,sp,32
1c009154 <vTaskSwitchContext+0x156> ret
vTaskPlaceOnEventList():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3065
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
1c009156 <vTaskPlaceOnEventList> addi	sp,sp,-32
1c009158 <vTaskPlaceOnEventList+0x2> sw	ra,28(sp)
1c00915a <vTaskPlaceOnEventList+0x4> sw	s0,24(sp)
1c00915c <vTaskPlaceOnEventList+0x6> addi	s0,sp,32
1c00915e <vTaskPlaceOnEventList+0x8> sw	a0,-20(s0)
1c009162 <vTaskPlaceOnEventList+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3066
	configASSERT( pxEventList );
1c009166 <vTaskPlaceOnEventList+0x10> lw	a5,-20(s0)
1c00916a <vTaskPlaceOnEventList+0x14> bnez	a5,1c009172 <vTaskPlaceOnEventList+0x1c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3066 (discriminator 1)
1c00916c <vTaskPlaceOnEventList+0x16> csrci	mstatus,8
1c009170 <vTaskPlaceOnEventList+0x1a> j	1c009170 <vTaskPlaceOnEventList+0x1a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3075

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1c009172 <vTaskPlaceOnEventList+0x1c> lui	a5,0x1c017
1c009176 <vTaskPlaceOnEventList+0x20> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c00917a <vTaskPlaceOnEventList+0x24> addi	a5,a5,24
1c00917c <vTaskPlaceOnEventList+0x26> mv	a1,a5
1c00917e <vTaskPlaceOnEventList+0x28> lw	a0,-20(s0)
1c009182 <vTaskPlaceOnEventList+0x2c> jal	ra,1c008518 <vListInsert>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3077

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1c009186 <vTaskPlaceOnEventList+0x30> li	a1,1
1c009188 <vTaskPlaceOnEventList+0x32> lw	a0,-24(s0)
1c00918c <vTaskPlaceOnEventList+0x36> jal	1c009580 <prvAddCurrentTaskToDelayedList>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3078
}
1c00918e <vTaskPlaceOnEventList+0x38> nop
1c009190 <vTaskPlaceOnEventList+0x3a> lw	ra,28(sp)
1c009192 <vTaskPlaceOnEventList+0x3c> lw	s0,24(sp)
1c009194 <vTaskPlaceOnEventList+0x3e> addi	sp,sp,32
1c009196 <vTaskPlaceOnEventList+0x40> ret
xTaskRemoveFromEventList():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3139

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
1c009198 <xTaskRemoveFromEventList> addi	sp,sp,-48
1c00919a <xTaskRemoveFromEventList+0x2> sw	ra,44(sp)
1c00919c <xTaskRemoveFromEventList+0x4> sw	s0,40(sp)
1c00919e <xTaskRemoveFromEventList+0x6> addi	s0,sp,48
1c0091a0 <xTaskRemoveFromEventList+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3156
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0091a4 <xTaskRemoveFromEventList+0xc> lw	a5,-36(s0)
1c0091a8 <xTaskRemoveFromEventList+0x10> lw	a5,12(a5)
1c0091aa <xTaskRemoveFromEventList+0x12> lw	a5,12(a5)
1c0091ac <xTaskRemoveFromEventList+0x14> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3157
	configASSERT( pxUnblockedTCB );
1c0091b0 <xTaskRemoveFromEventList+0x18> lw	a5,-24(s0)
1c0091b4 <xTaskRemoveFromEventList+0x1c> bnez	a5,1c0091bc <xTaskRemoveFromEventList+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3157 (discriminator 1)
1c0091b6 <xTaskRemoveFromEventList+0x1e> csrci	mstatus,8
1c0091ba <xTaskRemoveFromEventList+0x22> j	1c0091ba <xTaskRemoveFromEventList+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3158
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1c0091bc <xTaskRemoveFromEventList+0x24> lw	a5,-24(s0)
1c0091c0 <xTaskRemoveFromEventList+0x28> addi	a5,a5,24
1c0091c2 <xTaskRemoveFromEventList+0x2a> mv	a0,a5
1c0091c4 <xTaskRemoveFromEventList+0x2c> jal	ra,1c0085ba <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3160

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c0091c8 <xTaskRemoveFromEventList+0x30> lui	a5,0x1c017
1c0091cc <xTaskRemoveFromEventList+0x34> lw	a5,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
1c0091d0 <xTaskRemoveFromEventList+0x38> bnez	a5,1c009226 <xTaskRemoveFromEventList+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3162
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1c0091d2 <xTaskRemoveFromEventList+0x3a> lw	a5,-24(s0)
1c0091d6 <xTaskRemoveFromEventList+0x3e> addi	a5,a5,4
1c0091d8 <xTaskRemoveFromEventList+0x40> mv	a0,a5
1c0091da <xTaskRemoveFromEventList+0x42> jal	ra,1c0085ba <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3163
		prvAddTaskToReadyList( pxUnblockedTCB );
1c0091de <xTaskRemoveFromEventList+0x46> lw	a5,-24(s0)
1c0091e2 <xTaskRemoveFromEventList+0x4a> lw	a4,44(a5)
1c0091e4 <xTaskRemoveFromEventList+0x4c> lui	a5,0x1c017
1c0091e8 <xTaskRemoveFromEventList+0x50> lw	a5,-1156(a5) # 1c016b7c <uxTopReadyPriority>
1c0091ec <xTaskRemoveFromEventList+0x54> bgeu	a5,a4,1c0091fe <xTaskRemoveFromEventList+0x66>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3163 (discriminator 1)
1c0091f0 <xTaskRemoveFromEventList+0x58> lw	a5,-24(s0)
1c0091f4 <xTaskRemoveFromEventList+0x5c> lw	a4,44(a5)
1c0091f6 <xTaskRemoveFromEventList+0x5e> lui	a5,0x1c017
1c0091fa <xTaskRemoveFromEventList+0x62> sw	a4,-1156(a5) # 1c016b7c <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3163 (discriminator 3)
1c0091fe <xTaskRemoveFromEventList+0x66> lw	a5,-24(s0)
1c009202 <xTaskRemoveFromEventList+0x6a> lw	a4,44(a5)
1c009204 <xTaskRemoveFromEventList+0x6c> mv	a5,a4
1c009206 <xTaskRemoveFromEventList+0x6e> slli	a5,a5,0x2
1c009208 <xTaskRemoveFromEventList+0x70> add	a5,a5,a4
1c00920a <xTaskRemoveFromEventList+0x72> slli	a5,a5,0x2
1c00920c <xTaskRemoveFromEventList+0x74> lui	a4,0x1c011
1c009210 <xTaskRemoveFromEventList+0x78> addi	a4,a4,528 # 1c011210 <__bss_start>
1c009214 <xTaskRemoveFromEventList+0x7c> add	a4,a4,a5
1c009216 <xTaskRemoveFromEventList+0x7e> lw	a5,-24(s0)
1c00921a <xTaskRemoveFromEventList+0x82> addi	a5,a5,4
1c00921c <xTaskRemoveFromEventList+0x84> mv	a1,a5
1c00921e <xTaskRemoveFromEventList+0x86> mv	a0,a4
1c009220 <xTaskRemoveFromEventList+0x88> jal	ra,1c0084b2 <vListInsertEnd>
1c009224 <xTaskRemoveFromEventList+0x8c> j	1c009236 <xTaskRemoveFromEventList+0x9e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3183
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1c009226 <xTaskRemoveFromEventList+0x8e> lw	a5,-24(s0)
1c00922a <xTaskRemoveFromEventList+0x92> addi	a5,a5,24
1c00922c <xTaskRemoveFromEventList+0x94> mv	a1,a5
1c00922e <xTaskRemoveFromEventList+0x96> addi	a0,gp,-1924 # 1c011274 <xPendingReadyList>
1c009232 <xTaskRemoveFromEventList+0x9a> jal	ra,1c0084b2 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3186
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1c009236 <xTaskRemoveFromEventList+0x9e> lw	a5,-24(s0)
1c00923a <xTaskRemoveFromEventList+0xa2> lw	a4,44(a5)
1c00923c <xTaskRemoveFromEventList+0xa4> lui	a5,0x1c017
1c009240 <xTaskRemoveFromEventList+0xa8> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009244 <xTaskRemoveFromEventList+0xac> lw	a5,44(a5)
1c009246 <xTaskRemoveFromEventList+0xae> bgeu	a5,a4,1c00925c <xTaskRemoveFromEventList+0xc4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3191
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
1c00924a <xTaskRemoveFromEventList+0xb2> li	a5,1
1c00924c <xTaskRemoveFromEventList+0xb4> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3195

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
1c009250 <xTaskRemoveFromEventList+0xb8> lui	a5,0x1c017
1c009254 <xTaskRemoveFromEventList+0xbc> li	a4,1
1c009256 <xTaskRemoveFromEventList+0xbe> sw	a4,-1144(a5) # 1c016b88 <xYieldPending>
1c00925a <xTaskRemoveFromEventList+0xc2> j	1c009260 <xTaskRemoveFromEventList+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3199
	}
	else
	{
		xReturn = pdFALSE;
1c00925c <xTaskRemoveFromEventList+0xc4> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3202
	}

	return xReturn;
1c009260 <xTaskRemoveFromEventList+0xc8> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3203
}
1c009264 <xTaskRemoveFromEventList+0xcc> mv	a0,a5
1c009266 <xTaskRemoveFromEventList+0xce> lw	ra,44(sp)
1c009268 <xTaskRemoveFromEventList+0xd0> lw	s0,40(sp)
1c00926a <xTaskRemoveFromEventList+0xd2> addi	sp,sp,48
1c00926c <xTaskRemoveFromEventList+0xd4> ret
vTaskInternalSetTimeOutState():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3267
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
1c00926e <vTaskInternalSetTimeOutState> addi	sp,sp,-32
1c009270 <vTaskInternalSetTimeOutState+0x2> sw	s0,28(sp)
1c009272 <vTaskInternalSetTimeOutState+0x4> addi	s0,sp,32
1c009274 <vTaskInternalSetTimeOutState+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3269
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1c009278 <vTaskInternalSetTimeOutState+0xa> lui	a5,0x1c017
1c00927c <vTaskInternalSetTimeOutState+0xe> lw	a4,-1140(a5) # 1c016b8c <xNumOfOverflows>
1c009280 <vTaskInternalSetTimeOutState+0x12> lw	a5,-20(s0)
1c009284 <vTaskInternalSetTimeOutState+0x16> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3270
	pxTimeOut->xTimeOnEntering = xTickCount;
1c009286 <vTaskInternalSetTimeOutState+0x18> lui	a5,0x1c017
1c00928a <vTaskInternalSetTimeOutState+0x1c> lw	a4,-1160(a5) # 1c016b78 <xTickCount>
1c00928e <vTaskInternalSetTimeOutState+0x20> lw	a5,-20(s0)
1c009292 <vTaskInternalSetTimeOutState+0x24> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3271
}
1c009294 <vTaskInternalSetTimeOutState+0x26> nop
1c009296 <vTaskInternalSetTimeOutState+0x28> lw	s0,28(sp)
1c009298 <vTaskInternalSetTimeOutState+0x2a> addi	sp,sp,32
1c00929a <vTaskInternalSetTimeOutState+0x2c> ret
xTaskCheckForTimeOut():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3275
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
1c00929c <xTaskCheckForTimeOut> addi	sp,sp,-48
1c00929e <xTaskCheckForTimeOut+0x2> sw	ra,44(sp)
1c0092a0 <xTaskCheckForTimeOut+0x4> sw	s0,40(sp)
1c0092a2 <xTaskCheckForTimeOut+0x6> addi	s0,sp,48
1c0092a4 <xTaskCheckForTimeOut+0x8> sw	a0,-36(s0)
1c0092a8 <xTaskCheckForTimeOut+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3278
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1c0092ac <xTaskCheckForTimeOut+0x10> lw	a5,-36(s0)
1c0092b0 <xTaskCheckForTimeOut+0x14> bnez	a5,1c0092b8 <xTaskCheckForTimeOut+0x1c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3278 (discriminator 1)
1c0092b2 <xTaskCheckForTimeOut+0x16> csrci	mstatus,8
1c0092b6 <xTaskCheckForTimeOut+0x1a> j	1c0092b6 <xTaskCheckForTimeOut+0x1a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3279
	configASSERT( pxTicksToWait );
1c0092b8 <xTaskCheckForTimeOut+0x1c> lw	a5,-40(s0)
1c0092bc <xTaskCheckForTimeOut+0x20> bnez	a5,1c0092c4 <xTaskCheckForTimeOut+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3279 (discriminator 1)
1c0092be <xTaskCheckForTimeOut+0x22> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3279 (discriminator 2)
1c0092c2 <xTaskCheckForTimeOut+0x26> j	1c0092c2 <xTaskCheckForTimeOut+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3281

	taskENTER_CRITICAL();
1c0092c4 <xTaskCheckForTimeOut+0x28> jal	1c00950c <vTaskEnterCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3284
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
1c0092c6 <xTaskCheckForTimeOut+0x2a> lui	a5,0x1c017
1c0092ca <xTaskCheckForTimeOut+0x2e> lw	a5,-1160(a5) # 1c016b78 <xTickCount>
1c0092ce <xTaskCheckForTimeOut+0x32> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3285
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1c0092d2 <xTaskCheckForTimeOut+0x36> lw	a5,-36(s0)
1c0092d6 <xTaskCheckForTimeOut+0x3a> lw	a5,4(a5)
1c0092d8 <xTaskCheckForTimeOut+0x3c> lw	a4,-24(s0)
1c0092dc <xTaskCheckForTimeOut+0x40> sub	a5,a4,a5
1c0092e0 <xTaskCheckForTimeOut+0x44> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3288

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
1c0092e4 <xTaskCheckForTimeOut+0x48> lui	a5,0x1c017
1c0092e8 <xTaskCheckForTimeOut+0x4c> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c0092ec <xTaskCheckForTimeOut+0x50> lbu	a5,1157(a5)
1c0092f0 <xTaskCheckForTimeOut+0x54> beqz	a5,1c009306 <xTaskCheckForTimeOut+0x6a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3292
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
1c0092f2 <xTaskCheckForTimeOut+0x56> lui	a5,0x1c017
1c0092f6 <xTaskCheckForTimeOut+0x5a> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c0092fa <xTaskCheckForTimeOut+0x5e> sb	zero,1157(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3293
				xReturn = pdTRUE;
1c0092fe <xTaskCheckForTimeOut+0x62> li	a5,1
1c009300 <xTaskCheckForTimeOut+0x64> sw	a5,-20(s0)
1c009304 <xTaskCheckForTimeOut+0x68> j	1c00937a <xTaskCheckForTimeOut+0xde>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3299
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
1c009306 <xTaskCheckForTimeOut+0x6a> lw	a5,-40(s0)
1c00930a <xTaskCheckForTimeOut+0x6e> lw	a4,0(a5)
1c00930c <xTaskCheckForTimeOut+0x70> li	a5,-1
1c00930e <xTaskCheckForTimeOut+0x72> bne	a4,a5,1c009318 <xTaskCheckForTimeOut+0x7c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3304
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
1c009312 <xTaskCheckForTimeOut+0x76> sw	zero,-20(s0)
1c009316 <xTaskCheckForTimeOut+0x7a> j	1c00937a <xTaskCheckForTimeOut+0xde>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3309
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1c009318 <xTaskCheckForTimeOut+0x7c> lw	a5,-36(s0)
1c00931c <xTaskCheckForTimeOut+0x80> lw	a4,0(a5)
1c00931e <xTaskCheckForTimeOut+0x82> lui	a5,0x1c017
1c009322 <xTaskCheckForTimeOut+0x86> lw	a5,-1140(a5) # 1c016b8c <xNumOfOverflows>
1c009326 <xTaskCheckForTimeOut+0x8a> beq	a4,a5,1c009340 <xTaskCheckForTimeOut+0xa4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3309 (discriminator 1)
1c00932a <xTaskCheckForTimeOut+0x8e> lw	a5,-36(s0)
1c00932e <xTaskCheckForTimeOut+0x92> lw	a5,4(a5)
1c009330 <xTaskCheckForTimeOut+0x94> lw	a4,-24(s0)
1c009334 <xTaskCheckForTimeOut+0x98> bltu	a4,a5,1c009340 <xTaskCheckForTimeOut+0xa4>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3316
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
1c009338 <xTaskCheckForTimeOut+0x9c> li	a5,1
1c00933a <xTaskCheckForTimeOut+0x9e> sw	a5,-20(s0)
1c00933e <xTaskCheckForTimeOut+0xa2> j	1c00937a <xTaskCheckForTimeOut+0xde>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3318
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1c009340 <xTaskCheckForTimeOut+0xa4> lw	a5,-40(s0)
1c009344 <xTaskCheckForTimeOut+0xa8> lw	a5,0(a5)
1c009346 <xTaskCheckForTimeOut+0xaa> lw	a4,-28(s0)
1c00934a <xTaskCheckForTimeOut+0xae> bgeu	a4,a5,1c00936c <xTaskCheckForTimeOut+0xd0>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3321
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
1c00934e <xTaskCheckForTimeOut+0xb2> lw	a5,-40(s0)
1c009352 <xTaskCheckForTimeOut+0xb6> lw	a4,0(a5)
1c009354 <xTaskCheckForTimeOut+0xb8> lw	a5,-28(s0)
1c009358 <xTaskCheckForTimeOut+0xbc> sub	a4,a4,a5
1c00935a <xTaskCheckForTimeOut+0xbe> lw	a5,-40(s0)
1c00935e <xTaskCheckForTimeOut+0xc2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3322
			vTaskInternalSetTimeOutState( pxTimeOut );
1c009360 <xTaskCheckForTimeOut+0xc4> lw	a0,-36(s0)
1c009364 <xTaskCheckForTimeOut+0xc8> jal	1c00926e <vTaskInternalSetTimeOutState>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3323
			xReturn = pdFALSE;
1c009366 <xTaskCheckForTimeOut+0xca> sw	zero,-20(s0)
1c00936a <xTaskCheckForTimeOut+0xce> j	1c00937a <xTaskCheckForTimeOut+0xde>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3327
		}
		else
		{
			*pxTicksToWait = 0;
1c00936c <xTaskCheckForTimeOut+0xd0> lw	a5,-40(s0)
1c009370 <xTaskCheckForTimeOut+0xd4> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3328
			xReturn = pdTRUE;
1c009374 <xTaskCheckForTimeOut+0xd8> li	a5,1
1c009376 <xTaskCheckForTimeOut+0xda> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3331
		}
	}
	taskEXIT_CRITICAL();
1c00937a <xTaskCheckForTimeOut+0xde> jal	1c00953e <vTaskExitCritical>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3333

	return xReturn;
1c00937c <xTaskCheckForTimeOut+0xe0> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3334
}
1c009380 <xTaskCheckForTimeOut+0xe4> mv	a0,a5
1c009382 <xTaskCheckForTimeOut+0xe6> lw	ra,44(sp)
1c009384 <xTaskCheckForTimeOut+0xe8> lw	s0,40(sp)
1c009386 <xTaskCheckForTimeOut+0xea> addi	sp,sp,48
1c009388 <xTaskCheckForTimeOut+0xec> ret
vTaskMissedYield():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3338
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
1c00938a <vTaskMissedYield> addi	sp,sp,-16
1c00938c <vTaskMissedYield+0x2> sw	s0,12(sp)
1c00938e <vTaskMissedYield+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3339
	xYieldPending = pdTRUE;
1c009390 <vTaskMissedYield+0x6> lui	a5,0x1c017
1c009394 <vTaskMissedYield+0xa> li	a4,1
1c009396 <vTaskMissedYield+0xc> sw	a4,-1144(a5) # 1c016b88 <xYieldPending>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3340
}
1c00939a <vTaskMissedYield+0x10> nop
1c00939c <vTaskMissedYield+0x12> lw	s0,12(sp)
1c00939e <vTaskMissedYield+0x14> addi	sp,sp,16
1c0093a0 <vTaskMissedYield+0x16> ret
prvResetNextTaskUnblockTime():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3944

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
1c0093a2 <prvResetNextTaskUnblockTime> addi	sp,sp,-32
1c0093a4 <prvResetNextTaskUnblockTime+0x2> sw	s0,28(sp)
1c0093a6 <prvResetNextTaskUnblockTime+0x4> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3947
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c0093a8 <prvResetNextTaskUnblockTime+0x6> lui	a5,0x1c017
1c0093ac <prvResetNextTaskUnblockTime+0xa> lw	a5,-1172(a5) # 1c016b6c <pxDelayedTaskList>
1c0093b0 <prvResetNextTaskUnblockTime+0xe> lw	a5,0(a5)
1c0093b2 <prvResetNextTaskUnblockTime+0x10> bnez	a5,1c0093c0 <prvResetNextTaskUnblockTime+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3953
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1c0093b4 <prvResetNextTaskUnblockTime+0x12> lui	a5,0x1c017
1c0093b8 <prvResetNextTaskUnblockTime+0x16> li	a4,-1
1c0093ba <prvResetNextTaskUnblockTime+0x18> sw	a4,-1136(a5) # 1c016b90 <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3964
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
1c0093be <prvResetNextTaskUnblockTime+0x1c> j	1c0093de <prvResetNextTaskUnblockTime+0x3c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3961
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0093c0 <prvResetNextTaskUnblockTime+0x1e> lui	a5,0x1c017
1c0093c4 <prvResetNextTaskUnblockTime+0x22> lw	a5,-1172(a5) # 1c016b6c <pxDelayedTaskList>
1c0093c8 <prvResetNextTaskUnblockTime+0x26> lw	a5,12(a5)
1c0093ca <prvResetNextTaskUnblockTime+0x28> lw	a5,12(a5)
1c0093cc <prvResetNextTaskUnblockTime+0x2a> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3962
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1c0093d0 <prvResetNextTaskUnblockTime+0x2e> lw	a5,-20(s0)
1c0093d4 <prvResetNextTaskUnblockTime+0x32> lw	a4,4(a5)
1c0093d6 <prvResetNextTaskUnblockTime+0x34> lui	a5,0x1c017
1c0093da <prvResetNextTaskUnblockTime+0x38> sw	a4,-1136(a5) # 1c016b90 <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3964
}
1c0093de <prvResetNextTaskUnblockTime+0x3c> nop
1c0093e0 <prvResetNextTaskUnblockTime+0x3e> lw	s0,28(sp)
1c0093e2 <prvResetNextTaskUnblockTime+0x40> addi	sp,sp,32
1c0093e4 <prvResetNextTaskUnblockTime+0x42> ret
xTaskGetSchedulerState():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3987
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
1c0093e6 <xTaskGetSchedulerState> addi	sp,sp,-32
1c0093e8 <xTaskGetSchedulerState+0x2> sw	s0,28(sp)
1c0093ea <xTaskGetSchedulerState+0x4> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3990
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
1c0093ec <xTaskGetSchedulerState+0x6> lui	a5,0x1c017
1c0093f0 <xTaskGetSchedulerState+0xa> lw	a5,-1152(a5) # 1c016b80 <xSchedulerRunning>
1c0093f4 <xTaskGetSchedulerState+0xe> bnez	a5,1c0093fe <xTaskGetSchedulerState+0x18>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3992
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
1c0093f6 <xTaskGetSchedulerState+0x10> li	a5,1
1c0093f8 <xTaskGetSchedulerState+0x12> sw	a5,-20(s0)
1c0093fc <xTaskGetSchedulerState+0x16> j	1c009414 <xTaskGetSchedulerState+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3996
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c0093fe <xTaskGetSchedulerState+0x18> lui	a5,0x1c017
1c009402 <xTaskGetSchedulerState+0x1c> lw	a5,-1132(a5) # 1c016b94 <uxSchedulerSuspended>
1c009406 <xTaskGetSchedulerState+0x20> bnez	a5,1c009410 <xTaskGetSchedulerState+0x2a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:3998
			{
				xReturn = taskSCHEDULER_RUNNING;
1c009408 <xTaskGetSchedulerState+0x22> li	a5,2
1c00940a <xTaskGetSchedulerState+0x24> sw	a5,-20(s0)
1c00940e <xTaskGetSchedulerState+0x28> j	1c009414 <xTaskGetSchedulerState+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4002
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
1c009410 <xTaskGetSchedulerState+0x2a> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4006
			}
		}

		return xReturn;
1c009414 <xTaskGetSchedulerState+0x2e> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4007
	}
1c009418 <xTaskGetSchedulerState+0x32> mv	a0,a5
1c00941a <xTaskGetSchedulerState+0x34> lw	s0,28(sp)
1c00941c <xTaskGetSchedulerState+0x36> addi	sp,sp,32
1c00941e <xTaskGetSchedulerState+0x38> ret
xTaskPriorityDisinherit():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4105
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
1c009420 <xTaskPriorityDisinherit> addi	sp,sp,-48
1c009422 <xTaskPriorityDisinherit+0x2> sw	ra,44(sp)
1c009424 <xTaskPriorityDisinherit+0x4> sw	s0,40(sp)
1c009426 <xTaskPriorityDisinherit+0x6> addi	s0,sp,48
1c009428 <xTaskPriorityDisinherit+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4106
	TCB_t * const pxTCB = pxMutexHolder;
1c00942c <xTaskPriorityDisinherit+0xc> lw	a5,-36(s0)
1c009430 <xTaskPriorityDisinherit+0x10> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4107
	BaseType_t xReturn = pdFALSE;
1c009434 <xTaskPriorityDisinherit+0x14> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4109

		if( pxMutexHolder != NULL )
1c009438 <xTaskPriorityDisinherit+0x18> lw	a5,-36(s0)
1c00943c <xTaskPriorityDisinherit+0x1c> beqz	a5,1c0094fe <xTaskPriorityDisinherit+0xde>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4115
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1c00943e <xTaskPriorityDisinherit+0x1e> lui	a5,0x1c017
1c009442 <xTaskPriorityDisinherit+0x22> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009446 <xTaskPriorityDisinherit+0x26> lw	a4,-24(s0)
1c00944a <xTaskPriorityDisinherit+0x2a> beq	a4,a5,1c009454 <xTaskPriorityDisinherit+0x34>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4115 (discriminator 1)
1c00944e <xTaskPriorityDisinherit+0x2e> csrci	mstatus,8
1c009452 <xTaskPriorityDisinherit+0x32> j	1c009452 <xTaskPriorityDisinherit+0x32>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4116
			configASSERT( pxTCB->uxMutexesHeld );
1c009454 <xTaskPriorityDisinherit+0x34> lw	a5,-24(s0)
1c009458 <xTaskPriorityDisinherit+0x38> lw	a5,84(a5)
1c00945a <xTaskPriorityDisinherit+0x3a> bnez	a5,1c009462 <xTaskPriorityDisinherit+0x42>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4116 (discriminator 1)
1c00945c <xTaskPriorityDisinherit+0x3c> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4116 (discriminator 2)
1c009460 <xTaskPriorityDisinherit+0x40> j	1c009460 <xTaskPriorityDisinherit+0x40>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4117
			( pxTCB->uxMutexesHeld )--;
1c009462 <xTaskPriorityDisinherit+0x42> lw	a5,-24(s0)
1c009466 <xTaskPriorityDisinherit+0x46> lw	a5,84(a5)
1c009468 <xTaskPriorityDisinherit+0x48> addi	a4,a5,-1
1c00946c <xTaskPriorityDisinherit+0x4c> lw	a5,-24(s0)
1c009470 <xTaskPriorityDisinherit+0x50> sw	a4,84(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4121

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1c009472 <xTaskPriorityDisinherit+0x52> lw	a5,-24(s0)
1c009476 <xTaskPriorityDisinherit+0x56> lw	a4,44(a5)
1c009478 <xTaskPriorityDisinherit+0x58> lw	a5,-24(s0)
1c00947c <xTaskPriorityDisinherit+0x5c> lw	a5,80(a5)
1c00947e <xTaskPriorityDisinherit+0x5e> beq	a4,a5,1c0094fe <xTaskPriorityDisinherit+0xde>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4124
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1c009482 <xTaskPriorityDisinherit+0x62> lw	a5,-24(s0)
1c009486 <xTaskPriorityDisinherit+0x66> lw	a5,84(a5)
1c009488 <xTaskPriorityDisinherit+0x68> bnez	a5,1c0094fe <xTaskPriorityDisinherit+0xde>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4131
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c00948a <xTaskPriorityDisinherit+0x6a> lw	a5,-24(s0)
1c00948e <xTaskPriorityDisinherit+0x6e> addi	a5,a5,4
1c009490 <xTaskPriorityDisinherit+0x70> mv	a0,a5
1c009492 <xTaskPriorityDisinherit+0x72> jal	ra,1c0085ba <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4143
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1c009496 <xTaskPriorityDisinherit+0x76> lw	a5,-24(s0)
1c00949a <xTaskPriorityDisinherit+0x7a> lw	a4,80(a5)
1c00949c <xTaskPriorityDisinherit+0x7c> lw	a5,-24(s0)
1c0094a0 <xTaskPriorityDisinherit+0x80> sw	a4,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4148

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c0094a2 <xTaskPriorityDisinherit+0x82> lw	a5,-24(s0)
1c0094a6 <xTaskPriorityDisinherit+0x86> lw	a5,44(a5)
1c0094a8 <xTaskPriorityDisinherit+0x88> li	a4,5
1c0094aa <xTaskPriorityDisinherit+0x8a> sub	a4,a4,a5
1c0094ac <xTaskPriorityDisinherit+0x8c> lw	a5,-24(s0)
1c0094b0 <xTaskPriorityDisinherit+0x90> sw	a4,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4149
					prvAddTaskToReadyList( pxTCB );
1c0094b2 <xTaskPriorityDisinherit+0x92> lw	a5,-24(s0)
1c0094b6 <xTaskPriorityDisinherit+0x96> lw	a4,44(a5)
1c0094b8 <xTaskPriorityDisinherit+0x98> lui	a5,0x1c017
1c0094bc <xTaskPriorityDisinherit+0x9c> lw	a5,-1156(a5) # 1c016b7c <uxTopReadyPriority>
1c0094c0 <xTaskPriorityDisinherit+0xa0> bgeu	a5,a4,1c0094d2 <xTaskPriorityDisinherit+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4149 (discriminator 1)
1c0094c4 <xTaskPriorityDisinherit+0xa4> lw	a5,-24(s0)
1c0094c8 <xTaskPriorityDisinherit+0xa8> lw	a4,44(a5)
1c0094ca <xTaskPriorityDisinherit+0xaa> lui	a5,0x1c017
1c0094ce <xTaskPriorityDisinherit+0xae> sw	a4,-1156(a5) # 1c016b7c <uxTopReadyPriority>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4149 (discriminator 3)
1c0094d2 <xTaskPriorityDisinherit+0xb2> lw	a5,-24(s0)
1c0094d6 <xTaskPriorityDisinherit+0xb6> lw	a4,44(a5)
1c0094d8 <xTaskPriorityDisinherit+0xb8> mv	a5,a4
1c0094da <xTaskPriorityDisinherit+0xba> slli	a5,a5,0x2
1c0094dc <xTaskPriorityDisinherit+0xbc> add	a5,a5,a4
1c0094de <xTaskPriorityDisinherit+0xbe> slli	a5,a5,0x2
1c0094e0 <xTaskPriorityDisinherit+0xc0> lui	a4,0x1c011
1c0094e4 <xTaskPriorityDisinherit+0xc4> addi	a4,a4,528 # 1c011210 <__bss_start>
1c0094e8 <xTaskPriorityDisinherit+0xc8> add	a4,a4,a5
1c0094ea <xTaskPriorityDisinherit+0xca> lw	a5,-24(s0)
1c0094ee <xTaskPriorityDisinherit+0xce> addi	a5,a5,4
1c0094f0 <xTaskPriorityDisinherit+0xd0> mv	a1,a5
1c0094f2 <xTaskPriorityDisinherit+0xd2> mv	a0,a4
1c0094f4 <xTaskPriorityDisinherit+0xd4> jal	ra,1c0084b2 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4159 (discriminator 3)
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
1c0094f8 <xTaskPriorityDisinherit+0xd8> li	a5,1
1c0094fa <xTaskPriorityDisinherit+0xda> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4176
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
1c0094fe <xTaskPriorityDisinherit+0xde> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4177
	}
1c009502 <xTaskPriorityDisinherit+0xe2> mv	a0,a5
1c009504 <xTaskPriorityDisinherit+0xe4> lw	ra,44(sp)
1c009506 <xTaskPriorityDisinherit+0xe6> lw	s0,40(sp)
1c009508 <xTaskPriorityDisinherit+0xe8> addi	sp,sp,48
1c00950a <xTaskPriorityDisinherit+0xea> ret
vTaskEnterCritical():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4290
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
1c00950c <vTaskEnterCritical> addi	sp,sp,-16
1c00950e <vTaskEnterCritical+0x2> sw	s0,12(sp)
1c009510 <vTaskEnterCritical+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4291
		portDISABLE_INTERRUPTS();
1c009512 <vTaskEnterCritical+0x6> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4293

		if( xSchedulerRunning != pdFALSE )
1c009516 <vTaskEnterCritical+0xa> lui	a5,0x1c017
1c00951a <vTaskEnterCritical+0xe> lw	a5,-1152(a5) # 1c016b80 <xSchedulerRunning>
1c00951e <vTaskEnterCritical+0x12> beqz	a5,1c009536 <vTaskEnterCritical+0x2a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4295
		{
			( pxCurrentTCB->uxCriticalNesting )++;
1c009520 <vTaskEnterCritical+0x14> lui	a5,0x1c017
1c009524 <vTaskEnterCritical+0x18> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009528 <vTaskEnterCritical+0x1c> lw	a4,68(a5)
1c00952a <vTaskEnterCritical+0x1e> addi	a4,a4,1
1c00952c <vTaskEnterCritical+0x20> sw	a4,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4303
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
1c00952e <vTaskEnterCritical+0x22> lui	a5,0x1c017
1c009532 <vTaskEnterCritical+0x26> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4312
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1c009536 <vTaskEnterCritical+0x2a> nop
1c009538 <vTaskEnterCritical+0x2c> lw	s0,12(sp)
1c00953a <vTaskEnterCritical+0x2e> addi	sp,sp,16
1c00953c <vTaskEnterCritical+0x30> ret
vTaskExitCritical():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4320
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
1c00953e <vTaskExitCritical> addi	sp,sp,-16
1c009540 <vTaskExitCritical+0x2> sw	s0,12(sp)
1c009542 <vTaskExitCritical+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4321
		if( xSchedulerRunning != pdFALSE )
1c009544 <vTaskExitCritical+0x6> lui	a5,0x1c017
1c009548 <vTaskExitCritical+0xa> lw	a5,-1152(a5) # 1c016b80 <xSchedulerRunning>
1c00954c <vTaskExitCritical+0xe> beqz	a5,1c009578 <vTaskExitCritical+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4323
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
1c00954e <vTaskExitCritical+0x10> lui	a5,0x1c017
1c009552 <vTaskExitCritical+0x14> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009556 <vTaskExitCritical+0x18> lw	a5,68(a5)
1c009558 <vTaskExitCritical+0x1a> beqz	a5,1c009578 <vTaskExitCritical+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4325
			{
				( pxCurrentTCB->uxCriticalNesting )--;
1c00955a <vTaskExitCritical+0x1c> lui	a5,0x1c017
1c00955e <vTaskExitCritical+0x20> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009562 <vTaskExitCritical+0x24> lw	a4,68(a5)
1c009564 <vTaskExitCritical+0x26> addi	a4,a4,-1
1c009566 <vTaskExitCritical+0x28> sw	a4,68(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4327

				if( pxCurrentTCB->uxCriticalNesting == 0U )
1c009568 <vTaskExitCritical+0x2a> lui	a5,0x1c017
1c00956c <vTaskExitCritical+0x2e> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009570 <vTaskExitCritical+0x32> lw	a5,68(a5)
1c009572 <vTaskExitCritical+0x34> bnez	a5,1c009578 <vTaskExitCritical+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4329
				{
					portENABLE_INTERRUPTS();
1c009574 <vTaskExitCritical+0x36> csrsi	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:4345
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1c009578 <vTaskExitCritical+0x3a> nop
1c00957a <vTaskExitCritical+0x3c> lw	s0,12(sp)
1c00957c <vTaskExitCritical+0x3e> addi	sp,sp,16
1c00957e <vTaskExitCritical+0x40> ret
prvAddCurrentTaskToDelayedList():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5178

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1c009580 <prvAddCurrentTaskToDelayedList> addi	sp,sp,-48
1c009582 <prvAddCurrentTaskToDelayedList+0x2> sw	ra,44(sp)
1c009584 <prvAddCurrentTaskToDelayedList+0x4> sw	s0,40(sp)
1c009586 <prvAddCurrentTaskToDelayedList+0x6> addi	s0,sp,48
1c009588 <prvAddCurrentTaskToDelayedList+0x8> sw	a0,-36(s0)
1c00958c <prvAddCurrentTaskToDelayedList+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5180
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1c009590 <prvAddCurrentTaskToDelayedList+0x10> lui	a5,0x1c017
1c009594 <prvAddCurrentTaskToDelayedList+0x14> lw	a5,-1160(a5) # 1c016b78 <xTickCount>
1c009598 <prvAddCurrentTaskToDelayedList+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5187
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
1c00959c <prvAddCurrentTaskToDelayedList+0x1c> lui	a5,0x1c017
1c0095a0 <prvAddCurrentTaskToDelayedList+0x20> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c0095a4 <prvAddCurrentTaskToDelayedList+0x24> sb	zero,1157(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5193
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c0095a8 <prvAddCurrentTaskToDelayedList+0x28> lui	a5,0x1c017
1c0095ac <prvAddCurrentTaskToDelayedList+0x2c> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c0095b0 <prvAddCurrentTaskToDelayedList+0x30> addi	a5,a5,4
1c0095b2 <prvAddCurrentTaskToDelayedList+0x32> mv	a0,a5
1c0095b4 <prvAddCurrentTaskToDelayedList+0x34> jal	ra,1c0085ba <uxListRemove>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5206
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1c0095b8 <prvAddCurrentTaskToDelayedList+0x38> lw	a4,-36(s0)
1c0095bc <prvAddCurrentTaskToDelayedList+0x3c> li	a5,-1
1c0095be <prvAddCurrentTaskToDelayedList+0x3e> bne	a4,a5,1c0095de <prvAddCurrentTaskToDelayedList+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5206 (discriminator 1)
1c0095c2 <prvAddCurrentTaskToDelayedList+0x42> lw	a5,-40(s0)
1c0095c6 <prvAddCurrentTaskToDelayedList+0x46> beqz	a5,1c0095de <prvAddCurrentTaskToDelayedList+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5211
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0095c8 <prvAddCurrentTaskToDelayedList+0x48> lui	a5,0x1c017
1c0095cc <prvAddCurrentTaskToDelayedList+0x4c> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c0095d0 <prvAddCurrentTaskToDelayedList+0x50> addi	a5,a5,4
1c0095d2 <prvAddCurrentTaskToDelayedList+0x52> mv	a1,a5
1c0095d4 <prvAddCurrentTaskToDelayedList+0x54> addi	a0,gp,-1904 # 1c011288 <xSuspendedTaskList>
1c0095d8 <prvAddCurrentTaskToDelayedList+0x58> jal	ra,1c0084b2 <vListInsertEnd>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5286

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1c0095dc <prvAddCurrentTaskToDelayedList+0x5c> j	1c009658 <prvAddCurrentTaskToDelayedList+0xd8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5218
			xTimeToWake = xConstTickCount + xTicksToWait;
1c0095de <prvAddCurrentTaskToDelayedList+0x5e> lw	a4,-20(s0)
1c0095e2 <prvAddCurrentTaskToDelayedList+0x62> lw	a5,-36(s0)
1c0095e6 <prvAddCurrentTaskToDelayedList+0x66> add	a5,a5,a4
1c0095e8 <prvAddCurrentTaskToDelayedList+0x68> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5221
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1c0095ec <prvAddCurrentTaskToDelayedList+0x6c> lui	a5,0x1c017
1c0095f0 <prvAddCurrentTaskToDelayedList+0x70> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c0095f4 <prvAddCurrentTaskToDelayedList+0x74> lw	a4,-24(s0)
1c0095f8 <prvAddCurrentTaskToDelayedList+0x78> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5223
			if( xTimeToWake < xConstTickCount )
1c0095fa <prvAddCurrentTaskToDelayedList+0x7a> lw	a4,-24(s0)
1c0095fe <prvAddCurrentTaskToDelayedList+0x7e> lw	a5,-20(s0)
1c009602 <prvAddCurrentTaskToDelayedList+0x82> bgeu	a4,a5,1c009622 <prvAddCurrentTaskToDelayedList+0xa2>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5227
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c009606 <prvAddCurrentTaskToDelayedList+0x86> lui	a5,0x1c017
1c00960a <prvAddCurrentTaskToDelayedList+0x8a> lw	a4,-1168(a5) # 1c016b70 <pxOverflowDelayedTaskList>
1c00960e <prvAddCurrentTaskToDelayedList+0x8e> lui	a5,0x1c017
1c009612 <prvAddCurrentTaskToDelayedList+0x92> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009616 <prvAddCurrentTaskToDelayedList+0x96> addi	a5,a5,4
1c009618 <prvAddCurrentTaskToDelayedList+0x98> mv	a1,a5
1c00961a <prvAddCurrentTaskToDelayedList+0x9a> mv	a0,a4
1c00961c <prvAddCurrentTaskToDelayedList+0x9c> jal	ra,1c008518 <vListInsert>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5286
}
1c009620 <prvAddCurrentTaskToDelayedList+0xa0> j	1c009658 <prvAddCurrentTaskToDelayedList+0xd8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5233
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c009622 <prvAddCurrentTaskToDelayedList+0xa2> lui	a5,0x1c017
1c009626 <prvAddCurrentTaskToDelayedList+0xa6> lw	a4,-1172(a5) # 1c016b6c <pxDelayedTaskList>
1c00962a <prvAddCurrentTaskToDelayedList+0xaa> lui	a5,0x1c017
1c00962e <prvAddCurrentTaskToDelayedList+0xae> lw	a5,-1176(a5) # 1c016b68 <pxCurrentTCB>
1c009632 <prvAddCurrentTaskToDelayedList+0xb2> addi	a5,a5,4
1c009634 <prvAddCurrentTaskToDelayedList+0xb4> mv	a1,a5
1c009636 <prvAddCurrentTaskToDelayedList+0xb6> mv	a0,a4
1c009638 <prvAddCurrentTaskToDelayedList+0xb8> jal	ra,1c008518 <vListInsert>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5238
				if( xTimeToWake < xNextTaskUnblockTime )
1c00963c <prvAddCurrentTaskToDelayedList+0xbc> lui	a5,0x1c017
1c009640 <prvAddCurrentTaskToDelayedList+0xc0> lw	a5,-1136(a5) # 1c016b90 <xNextTaskUnblockTime>
1c009644 <prvAddCurrentTaskToDelayedList+0xc4> lw	a4,-24(s0)
1c009648 <prvAddCurrentTaskToDelayedList+0xc8> bgeu	a4,a5,1c009658 <prvAddCurrentTaskToDelayedList+0xd8>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5240
					xNextTaskUnblockTime = xTimeToWake;
1c00964c <prvAddCurrentTaskToDelayedList+0xcc> lui	a5,0x1c017
1c009650 <prvAddCurrentTaskToDelayedList+0xd0> lw	a4,-24(s0)
1c009654 <prvAddCurrentTaskToDelayedList+0xd4> sw	a4,-1136(a5) # 1c016b90 <xNextTaskUnblockTime>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/tasks.c:5286
}
1c009658 <prvAddCurrentTaskToDelayedList+0xd8> nop
1c00965a <prvAddCurrentTaskToDelayedList+0xda> lw	ra,44(sp)
1c00965c <prvAddCurrentTaskToDelayedList+0xdc> lw	s0,40(sp)
1c00965e <prvAddCurrentTaskToDelayedList+0xde> addi	sp,sp,48
1c009660 <prvAddCurrentTaskToDelayedList+0xe0> ret
pvPortMalloc():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:119
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1c009662 <pvPortMalloc> addi	sp,sp,-64
1c009664 <pvPortMalloc+0x2> sw	ra,60(sp)
1c009666 <pvPortMalloc+0x4> sw	s0,56(sp)
1c009668 <pvPortMalloc+0x6> addi	s0,sp,64
1c00966a <pvPortMalloc+0x8> sw	a0,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:122
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
1c00966e <pvPortMalloc+0xc> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:124

	vTaskSuspendAll();
1c009672 <pvPortMalloc+0x10> jal	ra,1c008cbe <vTaskSuspendAll>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:128
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
1c009676 <pvPortMalloc+0x14> lui	a5,0x1c017
1c00967a <pvPortMalloc+0x18> lw	a5,-1112(a5) # 1c016ba8 <xHeapHasBeenInitialised.2470>
1c00967e <pvPortMalloc+0x1c> bnez	a5,1c00968c <pvPortMalloc+0x2a>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:130
		{
			prvHeapInit();
1c009680 <pvPortMalloc+0x1e> jal	1c0097f2 <prvHeapInit>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:131
			xHeapHasBeenInitialised = pdTRUE;
1c009682 <pvPortMalloc+0x20> lui	a5,0x1c017
1c009686 <pvPortMalloc+0x24> li	a4,1
1c009688 <pvPortMalloc+0x26> sw	a4,-1112(a5) # 1c016ba8 <xHeapHasBeenInitialised.2470>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:136
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
1c00968c <pvPortMalloc+0x2a> lw	a5,-52(s0)
1c009690 <pvPortMalloc+0x2e> beqz	a5,1c0096b4 <pvPortMalloc+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:138
		{
			xWantedSize += heapSTRUCT_SIZE;
1c009692 <pvPortMalloc+0x30> li	a5,16
1c009694 <pvPortMalloc+0x32> mv	a4,a5
1c009696 <pvPortMalloc+0x34> lw	a5,-52(s0)
1c00969a <pvPortMalloc+0x38> add	a5,a5,a4
1c00969c <pvPortMalloc+0x3a> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:141

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
1c0096a0 <pvPortMalloc+0x3e> lw	a5,-52(s0)
1c0096a4 <pvPortMalloc+0x42> andi	a5,a5,15
1c0096a6 <pvPortMalloc+0x44> beqz	a5,1c0096b4 <pvPortMalloc+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:144
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1c0096a8 <pvPortMalloc+0x46> lw	a5,-52(s0)
1c0096ac <pvPortMalloc+0x4a> andi	a5,a5,-16
1c0096ae <pvPortMalloc+0x4c> addi	a5,a5,16
1c0096b0 <pvPortMalloc+0x4e> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:148
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
1c0096b4 <pvPortMalloc+0x52> lw	a5,-52(s0)
1c0096b8 <pvPortMalloc+0x56> beqz	a5,1c0097d6 <pvPortMalloc+0x174>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:148 (discriminator 1)
1c0096bc <pvPortMalloc+0x5a> lw	a4,-52(s0)
1c0096c0 <pvPortMalloc+0x5e> lui	a5,0x10
1c0096c2 <pvPortMalloc+0x60> addi	a5,a5,-17
1c0096c4 <pvPortMalloc+0x62> bltu	a5,a4,1c0097d6 <pvPortMalloc+0x174>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:152
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
1c0096c8 <pvPortMalloc+0x66> lui	a5,0x1c017
1c0096cc <pvPortMalloc+0x6a> addi	a5,a5,-1128 # 1c016b98 <xStart>
1c0096d0 <pvPortMalloc+0x6e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:153
			pxBlock = xStart.pxNextFreeBlock;
1c0096d4 <pvPortMalloc+0x72> lui	a5,0x1c017
1c0096d8 <pvPortMalloc+0x76> addi	a5,a5,-1128 # 1c016b98 <xStart>
1c0096dc <pvPortMalloc+0x7a> lw	a5,0(a5)
1c0096de <pvPortMalloc+0x7c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:154
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1c0096e2 <pvPortMalloc+0x80> j	1c0096f6 <pvPortMalloc+0x94>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:156
			{
				pxPreviousBlock = pxBlock;
1c0096e4 <pvPortMalloc+0x82> lw	a5,-20(s0)
1c0096e8 <pvPortMalloc+0x86> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:157
				pxBlock = pxBlock->pxNextFreeBlock;
1c0096ec <pvPortMalloc+0x8a> lw	a5,-20(s0)
1c0096f0 <pvPortMalloc+0x8e> lw	a5,0(a5)
1c0096f2 <pvPortMalloc+0x90> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:154
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1c0096f6 <pvPortMalloc+0x94> lw	a5,-20(s0)
1c0096fa <pvPortMalloc+0x98> lw	a5,4(a5)
1c0096fc <pvPortMalloc+0x9a> lw	a4,-52(s0)
1c009700 <pvPortMalloc+0x9e> bgeu	a5,a4,1c00970c <pvPortMalloc+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:154 (discriminator 1)
1c009704 <pvPortMalloc+0xa2> lw	a5,-20(s0)
1c009708 <pvPortMalloc+0xa6> lw	a5,0(a5)
1c00970a <pvPortMalloc+0xa8> bnez	a5,1c0096e4 <pvPortMalloc+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:161
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
1c00970c <pvPortMalloc+0xaa> lw	a4,-20(s0)
1c009710 <pvPortMalloc+0xae> lui	a5,0x1c017
1c009714 <pvPortMalloc+0xb2> addi	a5,a5,-1120 # 1c016ba0 <xEnd>
1c009718 <pvPortMalloc+0xb6> beq	a4,a5,1c0097d6 <pvPortMalloc+0x174>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:165
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
1c00971c <pvPortMalloc+0xba> lw	a5,-24(s0)
1c009720 <pvPortMalloc+0xbe> lw	a5,0(a5)
1c009722 <pvPortMalloc+0xc0> li	a4,16
1c009724 <pvPortMalloc+0xc2> add	a5,a5,a4
1c009726 <pvPortMalloc+0xc4> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:169

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1c00972a <pvPortMalloc+0xc8> lw	a5,-20(s0)
1c00972e <pvPortMalloc+0xcc> lw	a4,0(a5)
1c009730 <pvPortMalloc+0xce> lw	a5,-24(s0)
1c009734 <pvPortMalloc+0xd2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:172

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1c009736 <pvPortMalloc+0xd4> lw	a5,-20(s0)
1c00973a <pvPortMalloc+0xd8> lw	a4,4(a5)
1c00973c <pvPortMalloc+0xda> lw	a5,-52(s0)
1c009740 <pvPortMalloc+0xde> sub	a5,a4,a5
1c009744 <pvPortMalloc+0xe2> li	a4,16
1c009746 <pvPortMalloc+0xe4> slli	a4,a4,0x1
1c009748 <pvPortMalloc+0xe6> bgeu	a4,a5,1c0097be <pvPortMalloc+0x15c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:177
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1c00974c <pvPortMalloc+0xea> lw	a4,-20(s0)
1c009750 <pvPortMalloc+0xee> lw	a5,-52(s0)
1c009754 <pvPortMalloc+0xf2> add	a5,a5,a4
1c009756 <pvPortMalloc+0xf4> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:181

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1c00975a <pvPortMalloc+0xf8> lw	a5,-20(s0)
1c00975e <pvPortMalloc+0xfc> lw	a4,4(a5)
1c009760 <pvPortMalloc+0xfe> lw	a5,-52(s0)
1c009764 <pvPortMalloc+0x102> sub	a4,a4,a5
1c009766 <pvPortMalloc+0x104> lw	a5,-36(s0)
1c00976a <pvPortMalloc+0x108> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:182
					pxBlock->xBlockSize = xWantedSize;
1c00976c <pvPortMalloc+0x10a> lw	a5,-20(s0)
1c009770 <pvPortMalloc+0x10e> lw	a4,-52(s0)
1c009774 <pvPortMalloc+0x112> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:185

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
1c009776 <pvPortMalloc+0x114> lw	a5,-36(s0)
1c00977a <pvPortMalloc+0x118> lw	a5,4(a5)
1c00977c <pvPortMalloc+0x11a> sw	a5,-40(s0)
1c009780 <pvPortMalloc+0x11e> lui	a5,0x1c017
1c009784 <pvPortMalloc+0x122> addi	a5,a5,-1128 # 1c016b98 <xStart>
1c009788 <pvPortMalloc+0x126> sw	a5,-32(s0)
1c00978c <pvPortMalloc+0x12a> j	1c009798 <pvPortMalloc+0x136>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:185 (discriminator 3)
1c00978e <pvPortMalloc+0x12c> lw	a5,-32(s0)
1c009792 <pvPortMalloc+0x130> lw	a5,0(a5)
1c009794 <pvPortMalloc+0x132> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:185 (discriminator 1)
1c009798 <pvPortMalloc+0x136> lw	a5,-32(s0)
1c00979c <pvPortMalloc+0x13a> lw	a5,0(a5)
1c00979e <pvPortMalloc+0x13c> lw	a5,4(a5)
1c0097a0 <pvPortMalloc+0x13e> lw	a4,-40(s0)
1c0097a4 <pvPortMalloc+0x142> bltu	a5,a4,1c00978e <pvPortMalloc+0x12c>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:185 (discriminator 4)
1c0097a8 <pvPortMalloc+0x146> lw	a5,-32(s0)
1c0097ac <pvPortMalloc+0x14a> lw	a4,0(a5)
1c0097ae <pvPortMalloc+0x14c> lw	a5,-36(s0)
1c0097b2 <pvPortMalloc+0x150> sw	a4,0(a5)
1c0097b4 <pvPortMalloc+0x152> lw	a5,-32(s0)
1c0097b8 <pvPortMalloc+0x156> lw	a4,-36(s0)
1c0097bc <pvPortMalloc+0x15a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:188
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
1c0097be <pvPortMalloc+0x15c> lui	a5,0x1c011
1c0097c2 <pvPortMalloc+0x160> lw	a4,512(a5) # 1c011200 <xFreeBytesRemaining>
1c0097c6 <pvPortMalloc+0x164> lw	a5,-20(s0)
1c0097ca <pvPortMalloc+0x168> lw	a5,4(a5)
1c0097cc <pvPortMalloc+0x16a> sub	a4,a4,a5
1c0097ce <pvPortMalloc+0x16c> lui	a5,0x1c011
1c0097d2 <pvPortMalloc+0x170> sw	a4,512(a5) # 1c011200 <xFreeBytesRemaining>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:194
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1c0097d6 <pvPortMalloc+0x174> jal	ra,1c008ce0 <xTaskResumeAll>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:198

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1c0097da <pvPortMalloc+0x178> lw	a5,-28(s0)
1c0097de <pvPortMalloc+0x17c> bnez	a5,1c0097e4 <pvPortMalloc+0x182>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:201
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1c0097e0 <pvPortMalloc+0x17e> jal	ra,1c00b46a <vApplicationMallocFailedHook>
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:206
		}
	}
	#endif

	return pvReturn;
1c0097e4 <pvPortMalloc+0x182> lw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:207
}
1c0097e8 <pvPortMalloc+0x186> mv	a0,a5
1c0097ea <pvPortMalloc+0x188> lw	ra,60(sp)
1c0097ec <pvPortMalloc+0x18a> lw	s0,56(sp)
1c0097ee <pvPortMalloc+0x18c> addi	sp,sp,64
1c0097f0 <pvPortMalloc+0x18e> ret
prvHeapInit():
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:250
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
1c0097f2 <prvHeapInit> addi	sp,sp,-32
1c0097f4 <prvHeapInit+0x2> sw	s0,28(sp)
1c0097f6 <prvHeapInit+0x4> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:255
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1c0097f8 <prvHeapInit+0x6> lui	a5,0x1c017
1c0097fc <prvHeapInit+0xa> addi	a5,a5,64 # 1c017040 <__bss_end+0x10>
1c009800 <prvHeapInit+0xe> andi	a5,a5,-16
1c009802 <prvHeapInit+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:259

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1c009806 <prvHeapInit+0x14> lui	a5,0x1c017
1c00980a <prvHeapInit+0x18> addi	a5,a5,-1128 # 1c016b98 <xStart>
1c00980e <prvHeapInit+0x1c> lw	a4,-20(s0)
1c009812 <prvHeapInit+0x20> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:260
	xStart.xBlockSize = ( size_t ) 0;
1c009814 <prvHeapInit+0x22> lui	a5,0x1c017
1c009818 <prvHeapInit+0x26> addi	a5,a5,-1128 # 1c016b98 <xStart>
1c00981c <prvHeapInit+0x2a> sw	zero,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:263

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
1c009820 <prvHeapInit+0x2e> lui	a5,0x1c017
1c009824 <prvHeapInit+0x32> addi	a5,a5,-1120 # 1c016ba0 <xEnd>
1c009828 <prvHeapInit+0x36> lui	a4,0x10
1c00982a <prvHeapInit+0x38> addi	a4,a4,-16
1c00982c <prvHeapInit+0x3a> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:264
	xEnd.pxNextFreeBlock = NULL;
1c00982e <prvHeapInit+0x3c> lui	a5,0x1c017
1c009832 <prvHeapInit+0x40> addi	a5,a5,-1120 # 1c016ba0 <xEnd>
1c009836 <prvHeapInit+0x44> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:268

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
1c00983a <prvHeapInit+0x48> lw	a5,-20(s0)
1c00983e <prvHeapInit+0x4c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:269
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
1c009842 <prvHeapInit+0x50> lw	a5,-24(s0)
1c009846 <prvHeapInit+0x54> lui	a4,0x10
1c009848 <prvHeapInit+0x56> addi	a4,a4,-16
1c00984a <prvHeapInit+0x58> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:270
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
1c00984c <prvHeapInit+0x5a> lw	a5,-24(s0)
1c009850 <prvHeapInit+0x5e> lui	a4,0x1c017
1c009854 <prvHeapInit+0x62> addi	a4,a4,-1120 # 1c016ba0 <xEnd>
1c009858 <prvHeapInit+0x66> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/kernel/portable/MemMang/heap_2.c:271
}
1c00985a <prvHeapInit+0x68> nop
1c00985c <prvHeapInit+0x6a> lw	s0,28(sp)
1c00985e <prvHeapInit+0x6c> addi	sp,sp,32
1c009860 <prvHeapInit+0x6e> ret
hal_get_apb_i2cs_slave_address():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:6
#include "target/core-v-mcu/include/core-v-mcu-config.h"
#include "hal/include/hal_apb_i2cs_reg_defs.h"


uint8_t hal_get_apb_i2cs_slave_address(void)
{
1c009862 <hal_get_apb_i2cs_slave_address> addi	sp,sp,-32
1c009864 <hal_get_apb_i2cs_slave_address+0x2> sw	s0,28(sp)
1c009866 <hal_get_apb_i2cs_slave_address+0x4> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:8

	ApbI2cs_t *apbI2cSlave = (ApbI2cs_t*)I2CS_START_ADDR;
1c009868 <hal_get_apb_i2cs_slave_address+0x6> lui	a5,0x1a107
1c00986c <hal_get_apb_i2cs_slave_address+0xa> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:9
	return (uint8_t )apbI2cSlave->i2cs_dev_address_b.slave_addr;
1c009870 <hal_get_apb_i2cs_slave_address+0xe> lw	a5,-20(s0)
1c009874 <hal_get_apb_i2cs_slave_address+0x12> lw	a5,0(a5)
1c009876 <hal_get_apb_i2cs_slave_address+0x14> andi	a5,a5,127
1c00987a <hal_get_apb_i2cs_slave_address+0x18> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:10
}
1c00987e <hal_get_apb_i2cs_slave_address+0x1c> mv	a0,a5
1c009880 <hal_get_apb_i2cs_slave_address+0x1e> lw	s0,28(sp)
1c009882 <hal_get_apb_i2cs_slave_address+0x20> addi	sp,sp,32
1c009884 <hal_get_apb_i2cs_slave_address+0x22> ret
hal_set_apb_i2cs_slave_address():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:13

void hal_set_apb_i2cs_slave_address(uint8_t aSlaveAddress)
{
1c009886 <hal_set_apb_i2cs_slave_address> addi	sp,sp,-48
1c009888 <hal_set_apb_i2cs_slave_address+0x2> sw	s0,44(sp)
1c00988a <hal_set_apb_i2cs_slave_address+0x4> addi	s0,sp,48
1c00988c <hal_set_apb_i2cs_slave_address+0x6> mv	a5,a0
1c00988e <hal_set_apb_i2cs_slave_address+0x8> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:15

	ApbI2cs_t *apbI2cSlave = (ApbI2cs_t*) I2CS_START_ADDR;
1c009892 <hal_set_apb_i2cs_slave_address+0xc> lui	a5,0x1a107
1c009896 <hal_set_apb_i2cs_slave_address+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:16
	apbI2cSlave->i2cs_dev_address_b.slave_addr = aSlaveAddress;
1c00989a <hal_set_apb_i2cs_slave_address+0x14> lbu	a5,-33(s0)
1c00989e <hal_set_apb_i2cs_slave_address+0x18> andi	a5,a5,127
1c0098a2 <hal_set_apb_i2cs_slave_address+0x1c> andi	a4,a5,255
1c0098a6 <hal_set_apb_i2cs_slave_address+0x20> lw	a5,-20(s0)
1c0098aa <hal_set_apb_i2cs_slave_address+0x24> andi	a2,a4,127
1c0098ae <hal_set_apb_i2cs_slave_address+0x28> lbu	a4,0(a5) # 1a107000 <__stack_size+0x1a106800>
1c0098b2 <hal_set_apb_i2cs_slave_address+0x2c> andi	a4,a4,-128
1c0098b6 <hal_set_apb_i2cs_slave_address+0x30> mv	a3,a4
1c0098b8 <hal_set_apb_i2cs_slave_address+0x32> mv	a4,a2
1c0098ba <hal_set_apb_i2cs_slave_address+0x34> or	a4,a4,a3
1c0098bc <hal_set_apb_i2cs_slave_address+0x36> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:17
}
1c0098c0 <hal_set_apb_i2cs_slave_address+0x3a> nop
1c0098c2 <hal_set_apb_i2cs_slave_address+0x3c> lw	s0,44(sp)
1c0098c4 <hal_set_apb_i2cs_slave_address+0x3e> addi	sp,sp,48
1c0098c6 <hal_set_apb_i2cs_slave_address+0x40> ret
hal_set_apb_i2cs_slave_on_off():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:20

uint8_t hal_set_apb_i2cs_slave_on_off(uint8_t aStatus)
{
1c0098c8 <hal_set_apb_i2cs_slave_on_off> addi	sp,sp,-48
1c0098ca <hal_set_apb_i2cs_slave_on_off+0x2> sw	s0,44(sp)
1c0098cc <hal_set_apb_i2cs_slave_on_off+0x4> addi	s0,sp,48
1c0098ce <hal_set_apb_i2cs_slave_on_off+0x6> mv	a5,a0
1c0098d0 <hal_set_apb_i2cs_slave_on_off+0x8> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:22

	ApbI2cs_t *apbI2cSlave = (ApbI2cs_t*)I2CS_START_ADDR;
1c0098d4 <hal_set_apb_i2cs_slave_on_off+0xc> lui	a5,0x1a107
1c0098d8 <hal_set_apb_i2cs_slave_on_off+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:23
	if( aStatus == 1 )
1c0098dc <hal_set_apb_i2cs_slave_on_off+0x14> lbu	a4,-33(s0)
1c0098e0 <hal_set_apb_i2cs_slave_on_off+0x18> li	a5,1
1c0098e2 <hal_set_apb_i2cs_slave_on_off+0x1a> bne	a4,a5,1c0098f8 <hal_set_apb_i2cs_slave_on_off+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:24
		apbI2cSlave->i2cs_enable_b.ip_enable = 1;
1c0098e6 <hal_set_apb_i2cs_slave_on_off+0x1e> lw	a5,-20(s0)
1c0098ea <hal_set_apb_i2cs_slave_on_off+0x22> lbu	a4,4(a5) # 1a107004 <__stack_size+0x1a106804>
1c0098ee <hal_set_apb_i2cs_slave_on_off+0x26> ori	a4,a4,1
1c0098f2 <hal_set_apb_i2cs_slave_on_off+0x2a> sb	a4,4(a5)
1c0098f6 <hal_set_apb_i2cs_slave_on_off+0x2e> j	1c00990c <hal_set_apb_i2cs_slave_on_off+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:25
	else if( aStatus == 0 )
1c0098f8 <hal_set_apb_i2cs_slave_on_off+0x30> lbu	a5,-33(s0)
1c0098fc <hal_set_apb_i2cs_slave_on_off+0x34> bnez	a5,1c00990c <hal_set_apb_i2cs_slave_on_off+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:26
		apbI2cSlave->i2cs_enable_b.ip_enable = 0;
1c0098fe <hal_set_apb_i2cs_slave_on_off+0x36> lw	a5,-20(s0)
1c009902 <hal_set_apb_i2cs_slave_on_off+0x3a> lbu	a4,4(a5)
1c009906 <hal_set_apb_i2cs_slave_on_off+0x3e> andi	a4,a4,-2
1c009908 <hal_set_apb_i2cs_slave_on_off+0x40> sb	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:27
	return (uint8_t)apbI2cSlave->i2cs_enable_b.ip_enable;
1c00990c <hal_set_apb_i2cs_slave_on_off+0x44> lw	a5,-20(s0)
1c009910 <hal_set_apb_i2cs_slave_on_off+0x48> lw	a5,4(a5)
1c009912 <hal_set_apb_i2cs_slave_on_off+0x4a> andi	a5,a5,1
1c009914 <hal_set_apb_i2cs_slave_on_off+0x4c> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_apb_i2cs.c:28
}
1c009918 <hal_set_apb_i2cs_slave_on_off+0x50> mv	a0,a5
1c00991a <hal_set_apb_i2cs_slave_on_off+0x52> lw	s0,44(sp)
1c00991c <hal_set_apb_i2cs_slave_on_off+0x54> addi	sp,sp,48
1c00991e <hal_set_apb_i2cs_slave_on_off+0x56> ret
fc_event_null_event():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:48

static volatile pi_fc_event_handler_t fc_event_handlers[SOC_EU_NB_FC_EVENTS];
static SemaphoreHandle_t  fc_event_semaphores[SOC_EU_NB_FC_EVENTS];

static void fc_event_null_event(void *arg)
{
1c009920 <fc_event_null_event> addi	sp,sp,-32
1c009922 <fc_event_null_event+0x2> sw	s0,28(sp)
1c009924 <fc_event_null_event+0x4> addi	s0,sp,32
1c009926 <fc_event_null_event+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:49
	return;
1c00992a <fc_event_null_event+0xa> nop
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:50
}
1c00992c <fc_event_null_event+0xc> lw	s0,28(sp)
1c00992e <fc_event_null_event+0xe> addi	sp,sp,32
1c009930 <fc_event_null_event+0x10> ret
pi_fc_event_handler_init():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:53

void pi_fc_event_handler_init(uint32_t fc_event_irq)
{
1c009932 <pi_fc_event_handler_init> addi	sp,sp,-48
1c009934 <pi_fc_event_handler_init+0x2> sw	ra,44(sp)
1c009936 <pi_fc_event_handler_init+0x4> sw	s0,40(sp)
1c009938 <pi_fc_event_handler_init+0x6> addi	s0,sp,48
1c00993a <pi_fc_event_handler_init+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:56
	/* TODO: fix this mess, that should be 8 32-bit writes */
	/* open the mask for fc_soc_event irq */
	for (int i = 0; i < SOC_EU_NB_FC_EVENTS; i++) {
1c00993e <pi_fc_event_handler_init+0xc> sw	zero,-20(s0)
1c009942 <pi_fc_event_handler_init+0x10> j	1c009956 <pi_fc_event_handler_init+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:57 (discriminator 3)
		pi_fc_event_handler_clear(i);
1c009944 <pi_fc_event_handler_init+0x12> lw	a5,-20(s0)
1c009948 <pi_fc_event_handler_init+0x16> mv	a0,a5
1c00994a <pi_fc_event_handler_init+0x18> jal	1c0099ba <pi_fc_event_handler_clear>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:56 (discriminator 3)
	for (int i = 0; i < SOC_EU_NB_FC_EVENTS; i++) {
1c00994c <pi_fc_event_handler_init+0x1a> lw	a5,-20(s0)
1c009950 <pi_fc_event_handler_init+0x1e> addi	a5,a5,1
1c009952 <pi_fc_event_handler_init+0x20> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:56 (discriminator 1)
1c009956 <pi_fc_event_handler_init+0x24> lw	a4,-20(s0)
1c00995a <pi_fc_event_handler_init+0x28> li	a5,167
1c00995e <pi_fc_event_handler_init+0x2c> bge	a5,a4,1c009944 <pi_fc_event_handler_init+0x12>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:61
	}
	/* NVIC_SetVector(fc_event_irq, (uint32_t)__handler_wrapper_light_fc_event_handler);*/
//	irqn_enable(fc_event_irq);
}
1c009962 <pi_fc_event_handler_init+0x30> nop
1c009964 <pi_fc_event_handler_init+0x32> lw	ra,44(sp)
1c009966 <pi_fc_event_handler_init+0x34> lw	s0,40(sp)
1c009968 <pi_fc_event_handler_init+0x36> addi	sp,sp,48
1c00996a <pi_fc_event_handler_init+0x38> ret
pi_fc_event_handler_set():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:66

void pi_fc_event_handler_set(uint32_t event_id,
			     pi_fc_event_handler_t event_handler,
					SemaphoreHandle_t semaphoreHandle)
{
1c00996c <pi_fc_event_handler_set> addi	sp,sp,-32
1c00996e <pi_fc_event_handler_set+0x2> sw	s0,28(sp)
1c009970 <pi_fc_event_handler_set+0x4> addi	s0,sp,32
1c009972 <pi_fc_event_handler_set+0x6> sw	a0,-20(s0)
1c009976 <pi_fc_event_handler_set+0xa> sw	a1,-24(s0)
1c00997a <pi_fc_event_handler_set+0xe> sw	a2,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:67
	if (event_handler != NULL) {
1c00997e <pi_fc_event_handler_set+0x12> lw	a5,-24(s0)
1c009982 <pi_fc_event_handler_set+0x16> beqz	a5,1c00999a <pi_fc_event_handler_set+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:68
		fc_event_handlers[event_id] = event_handler;
1c009984 <pi_fc_event_handler_set+0x18> lui	a5,0x1c011
1c009988 <pi_fc_event_handler_set+0x1c> addi	a4,a5,668 # 1c01129c <fc_event_handlers>
1c00998c <pi_fc_event_handler_set+0x20> lw	a5,-20(s0)
1c009990 <pi_fc_event_handler_set+0x24> slli	a5,a5,0x2
1c009992 <pi_fc_event_handler_set+0x26> add	a5,a5,a4
1c009994 <pi_fc_event_handler_set+0x28> lw	a4,-24(s0)
1c009998 <pi_fc_event_handler_set+0x2c> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:70
	}
	if (semaphoreHandle != NULL) {
1c00999a <pi_fc_event_handler_set+0x2e> lw	a5,-28(s0)
1c00999e <pi_fc_event_handler_set+0x32> beqz	a5,1c0099b2 <pi_fc_event_handler_set+0x46>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:71
		fc_event_semaphores[event_id] = semaphoreHandle;
1c0099a0 <pi_fc_event_handler_set+0x34> addi	a4,gp,-1212 # 1c01153c <fc_event_semaphores>
1c0099a4 <pi_fc_event_handler_set+0x38> lw	a5,-20(s0)
1c0099a8 <pi_fc_event_handler_set+0x3c> slli	a5,a5,0x2
1c0099aa <pi_fc_event_handler_set+0x3e> add	a5,a5,a4
1c0099ac <pi_fc_event_handler_set+0x40> lw	a4,-28(s0)
1c0099b0 <pi_fc_event_handler_set+0x44> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:73
	}
}
1c0099b2 <pi_fc_event_handler_set+0x46> nop
1c0099b4 <pi_fc_event_handler_set+0x48> lw	s0,28(sp)
1c0099b6 <pi_fc_event_handler_set+0x4a> addi	sp,sp,32
1c0099b8 <pi_fc_event_handler_set+0x4c> ret
pi_fc_event_handler_clear():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:76

void pi_fc_event_handler_clear(uint32_t event_id)
{
1c0099ba <pi_fc_event_handler_clear> addi	sp,sp,-32
1c0099bc <pi_fc_event_handler_clear+0x2> sw	s0,28(sp)
1c0099be <pi_fc_event_handler_clear+0x4> addi	s0,sp,32
1c0099c0 <pi_fc_event_handler_clear+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:77
	fc_event_handlers[event_id] = (pi_fc_event_handler_t)fc_event_null_event;
1c0099c4 <pi_fc_event_handler_clear+0xa> lui	a5,0x1c011
1c0099c8 <pi_fc_event_handler_clear+0xe> addi	a4,a5,668 # 1c01129c <fc_event_handlers>
1c0099cc <pi_fc_event_handler_clear+0x12> lw	a5,-20(s0)
1c0099d0 <pi_fc_event_handler_clear+0x16> slli	a5,a5,0x2
1c0099d2 <pi_fc_event_handler_clear+0x18> add	a5,a5,a4
1c0099d4 <pi_fc_event_handler_clear+0x1a> lui	a4,0x1c00a
1c0099d8 <pi_fc_event_handler_clear+0x1e> addi	a4,a4,-1760 # 1c009920 <fc_event_null_event>
1c0099dc <pi_fc_event_handler_clear+0x22> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:78
	fc_event_semaphores[event_id] = NULL;
1c0099de <pi_fc_event_handler_clear+0x24> addi	a4,gp,-1212 # 1c01153c <fc_event_semaphores>
1c0099e2 <pi_fc_event_handler_clear+0x28> lw	a5,-20(s0)
1c0099e6 <pi_fc_event_handler_clear+0x2c> slli	a5,a5,0x2
1c0099e8 <pi_fc_event_handler_clear+0x2e> add	a5,a5,a4
1c0099ea <pi_fc_event_handler_clear+0x30> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:79
}
1c0099ee <pi_fc_event_handler_clear+0x34> nop
1c0099f0 <pi_fc_event_handler_clear+0x36> lw	s0,28(sp)
1c0099f2 <pi_fc_event_handler_clear+0x38> addi	sp,sp,32
1c0099f4 <pi_fc_event_handler_clear+0x3a> ret
fc_soc_event_handler1():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:83

/* TODO: Use Eric's FIRQ ABI */
void fc_soc_event_handler1 (uint32_t mcause)
{
1c0099f6 <fc_soc_event_handler1> addi	sp,sp,-48
1c0099f8 <fc_soc_event_handler1+0x2> sw	ra,44(sp)
1c0099fa <fc_soc_event_handler1+0x4> sw	s0,40(sp)
1c0099fc <fc_soc_event_handler1+0x6> addi	s0,sp,48
1c0099fe <fc_soc_event_handler1+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:84
	uint32_t val = 0;
1c009a02 <fc_soc_event_handler1+0xc> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:91

	/* Pop one event element from the FIFO */
	/* TODO: don't use it like this */
	//__asm volatile( "csrs mie, %0" :: "r"(0x06000800) );

	uint32_t event_id = *(uint32_t*)(0x1a106090); // new event fifo address
1c009a06 <fc_soc_event_handler1+0x10> lui	a5,0x1a106
1c009a0a <fc_soc_event_handler1+0x14> addi	a5,a5,144 # 1a106090 <__stack_size+0x1a105890>
1c009a0e <fc_soc_event_handler1+0x18> lw	a5,0(a5)
1c009a10 <fc_soc_event_handler1+0x1a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:95
//	event_id = NVIC->FIFO;


event_id &= 0xFF;
1c009a14 <fc_soc_event_handler1+0x1e> lw	a5,-24(s0)
1c009a18 <fc_soc_event_handler1+0x22> andi	a5,a5,255
1c009a1c <fc_soc_event_handler1+0x26> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:102
//	if (event_id >= 12) {
//		event_id = event_id & 0x1F;
//	}

	/* redirect to handler with jump table */
	if (fc_event_handlers[event_id] != NULL) {
1c009a20 <fc_soc_event_handler1+0x2a> lui	a5,0x1c011
1c009a24 <fc_soc_event_handler1+0x2e> addi	a4,a5,668 # 1c01129c <fc_event_handlers>
1c009a28 <fc_soc_event_handler1+0x32> lw	a5,-24(s0)
1c009a2c <fc_soc_event_handler1+0x36> slli	a5,a5,0x2
1c009a2e <fc_soc_event_handler1+0x38> add	a5,a5,a4
1c009a30 <fc_soc_event_handler1+0x3a> lw	a5,0(a5)
1c009a32 <fc_soc_event_handler1+0x3c> beqz	a5,1c009a4e <fc_soc_event_handler1+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:103
		fc_event_handlers[event_id]((void *)event_id);
1c009a34 <fc_soc_event_handler1+0x3e> lui	a5,0x1c011
1c009a38 <fc_soc_event_handler1+0x42> addi	a4,a5,668 # 1c01129c <fc_event_handlers>
1c009a3c <fc_soc_event_handler1+0x46> lw	a5,-24(s0)
1c009a40 <fc_soc_event_handler1+0x4a> slli	a5,a5,0x2
1c009a42 <fc_soc_event_handler1+0x4c> add	a5,a5,a4
1c009a44 <fc_soc_event_handler1+0x4e> lw	a4,0(a5)
1c009a46 <fc_soc_event_handler1+0x50> lw	a5,-24(s0)
1c009a4a <fc_soc_event_handler1+0x54> mv	a0,a5
1c009a4c <fc_soc_event_handler1+0x56> jalr	a4
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:105
	}
	if (fc_event_semaphores[event_id] != NULL) {
1c009a4e <fc_soc_event_handler1+0x58> addi	a4,gp,-1212 # 1c01153c <fc_event_semaphores>
1c009a52 <fc_soc_event_handler1+0x5c> lw	a5,-24(s0)
1c009a56 <fc_soc_event_handler1+0x60> slli	a5,a5,0x2
1c009a58 <fc_soc_event_handler1+0x62> add	a5,a5,a4
1c009a5a <fc_soc_event_handler1+0x64> lw	a5,0(a5)
1c009a5c <fc_soc_event_handler1+0x66> beqz	a5,1c009a8e <fc_soc_event_handler1+0x98>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:107
		/* Unblock the task by releasing the semaphore. */
		SemaphoreHandle_t xSemaphoreHandle = fc_event_semaphores[event_id];
1c009a5e <fc_soc_event_handler1+0x68> addi	a4,gp,-1212 # 1c01153c <fc_event_semaphores>
1c009a62 <fc_soc_event_handler1+0x6c> lw	a5,-24(s0)
1c009a66 <fc_soc_event_handler1+0x70> slli	a5,a5,0x2
1c009a68 <fc_soc_event_handler1+0x72> add	a5,a5,a4
1c009a6a <fc_soc_event_handler1+0x74> lw	a5,0(a5)
1c009a6c <fc_soc_event_handler1+0x76> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:108
		xSemaphoreGiveFromISR( xSemaphoreHandle, &xHigherPriorityTaskWoken );
1c009a70 <fc_soc_event_handler1+0x7a> lui	a5,0x1c017
1c009a74 <fc_soc_event_handler1+0x7e> addi	a1,a5,-1108 # 1c016bac <xHigherPriorityTaskWoken.4047>
1c009a78 <fc_soc_event_handler1+0x82> lw	a0,-28(s0)
1c009a7c <fc_soc_event_handler1+0x86> jal	ra,1c0089ae <xQueueGiveFromISR>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:109
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1c009a80 <fc_soc_event_handler1+0x8a> lui	a5,0x1c017
1c009a84 <fc_soc_event_handler1+0x8e> lw	a5,-1108(a5) # 1c016bac <xHigherPriorityTaskWoken.4047>
1c009a88 <fc_soc_event_handler1+0x92> beqz	a5,1c009a8e <fc_soc_event_handler1+0x98>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:109 (discriminator 1)
1c009a8a <fc_soc_event_handler1+0x94> jal	ra,1c008ffe <vTaskSwitchContext>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_fc_event.c:111
	}
}
1c009a8e <fc_soc_event_handler1+0x98> nop
1c009a90 <fc_soc_event_handler1+0x9a> lw	ra,44(sp)
1c009a92 <fc_soc_event_handler1+0x9c> lw	s0,40(sp)
1c009a94 <fc_soc_event_handler1+0x9e> addi	sp,sp,48
1c009a96 <fc_soc_event_handler1+0xa0> ret
irq_clint_enable():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:55
	uint32_t val = csr_read_clear(CSR_MSTATUS, MSTATUS_IE);
	return val;
}

uint32_t irq_clint_enable()
{
1c009a98 <irq_clint_enable> addi	sp,sp,-32
1c009a9a <irq_clint_enable+0x2> sw	s0,28(sp)
1c009a9c <irq_clint_enable+0x4> sw	s1,24(sp)
1c009a9e <irq_clint_enable+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:56
	uint32_t val = 0;
1c009aa0 <irq_clint_enable+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:57
	val = csr_read(CSR_MSTATUS);
1c009aa4 <irq_clint_enable+0xc> csrr	a5,mstatus
1c009aa8 <irq_clint_enable+0x10> mv	s1,a5
1c009aaa <irq_clint_enable+0x12> mv	a5,s1
1c009aac <irq_clint_enable+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:59

	val = csr_read_set(CSR_MSTATUS, MSTATUS_IE);
1c009ab0 <irq_clint_enable+0x18> li	a5,8
1c009ab2 <irq_clint_enable+0x1a> sw	a5,-24(s0)
1c009ab6 <irq_clint_enable+0x1e> lw	a5,-24(s0)
1c009aba <irq_clint_enable+0x22> csrrs	a5,mstatus,a5
1c009abe <irq_clint_enable+0x26> sw	a5,-24(s0)
1c009ac2 <irq_clint_enable+0x2a> lw	a5,-24(s0)
1c009ac6 <irq_clint_enable+0x2e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:61
	//csr_write(CSR_MIE, BIT(25));
	val = csr_read(CSR_MSTATUS);
1c009aca <irq_clint_enable+0x32> csrr	a5,mstatus
1c009ace <irq_clint_enable+0x36> mv	s1,a5
1c009ad0 <irq_clint_enable+0x38> mv	a5,s1
1c009ad2 <irq_clint_enable+0x3a> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:62
	return val;
1c009ad6 <irq_clint_enable+0x3e> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_irq.c:63
}
1c009ada <irq_clint_enable+0x42> mv	a0,a5
1c009adc <irq_clint_enable+0x44> lw	s0,28(sp)
1c009ade <irq_clint_enable+0x46> lw	s1,24(sp)
1c009ae0 <irq_clint_enable+0x48> addi	sp,sp,32
1c009ae2 <irq_clint_enable+0x4a> ret
hal_setpinmux():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:34

 	configASSERT (io_num < N_IO);
	psoc_ctrl->io_ctrl_b[io_num].cfg = on;
 }
 
 void hal_setpinmux(uint8_t io_num, uint8_t mux_sel) {
1c009ae4 <hal_setpinmux> addi	sp,sp,-48
1c009ae6 <hal_setpinmux+0x2> sw	s0,44(sp)
1c009ae8 <hal_setpinmux+0x4> addi	s0,sp,48
1c009aea <hal_setpinmux+0x6> mv	a5,a0
1c009aec <hal_setpinmux+0x8> mv	a4,a1
1c009aee <hal_setpinmux+0xa> sb	a5,-33(s0)
1c009af2 <hal_setpinmux+0xe> mv	a5,a4
1c009af4 <hal_setpinmux+0x10> sb	a5,-34(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:35
 	SocCtrl_t*		psoc_ctrl = SOC_CTRL_START_ADDR;
1c009af8 <hal_setpinmux+0x14> lui	a5,0x1a104
1c009afc <hal_setpinmux+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:37
 	
 	configASSERT (io_num < N_IO);
1c009b00 <hal_setpinmux+0x1c> lbu	a4,-33(s0)
1c009b04 <hal_setpinmux+0x20> li	a5,47
1c009b08 <hal_setpinmux+0x24> bgeu	a5,a4,1c009b12 <hal_setpinmux+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:37 (discriminator 1)
1c009b0c <hal_setpinmux+0x28> csrci	mstatus,8
1c009b10 <hal_setpinmux+0x2c> j	1c009b10 <hal_setpinmux+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:38
	psoc_ctrl->io_ctrl_b[io_num].mux = mux_sel;
1c009b12 <hal_setpinmux+0x2e> lbu	a5,-33(s0)
1c009b16 <hal_setpinmux+0x32> lbu	a4,-34(s0)
1c009b1a <hal_setpinmux+0x36> andi	a4,a4,3
1c009b1c <hal_setpinmux+0x38> andi	a3,a4,255
1c009b20 <hal_setpinmux+0x3c> lw	a4,-20(s0)
1c009b24 <hal_setpinmux+0x40> addi	a5,a5,256 # 1a104100 <__stack_size+0x1a103900>
1c009b28 <hal_setpinmux+0x44> slli	a5,a5,0x2
1c009b2a <hal_setpinmux+0x46> add	a5,a5,a4
1c009b2c <hal_setpinmux+0x48> mv	a4,a3
1c009b2e <hal_setpinmux+0x4a> andi	a2,a4,3
1c009b32 <hal_setpinmux+0x4e> lhu	a4,0(a5)
1c009b36 <hal_setpinmux+0x52> andi	a4,a4,-4
1c009b38 <hal_setpinmux+0x54> mv	a3,a4
1c009b3a <hal_setpinmux+0x56> mv	a4,a2
1c009b3c <hal_setpinmux+0x58> or	a4,a4,a3
1c009b3e <hal_setpinmux+0x5a> sh	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:39
 }
1c009b42 <hal_setpinmux+0x5e> nop
1c009b44 <hal_setpinmux+0x60> lw	s0,44(sp)
1c009b46 <hal_setpinmux+0x62> addi	sp,sp,48
1c009b48 <hal_setpinmux+0x64> ret
hal_getpinmux():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:41
 
 uint8_t hal_getpinmux(uint8_t io_num) {
1c009b4a <hal_getpinmux> addi	sp,sp,-48
1c009b4c <hal_getpinmux+0x2> sw	s0,44(sp)
1c009b4e <hal_getpinmux+0x4> addi	s0,sp,48
1c009b50 <hal_getpinmux+0x6> mv	a5,a0
1c009b52 <hal_getpinmux+0x8> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:42
 	SocCtrl_t*		psoc_ctrl = SOC_CTRL_START_ADDR;
1c009b56 <hal_getpinmux+0xc> lui	a5,0x1a104
1c009b5a <hal_getpinmux+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:44
 	
 	configASSERT (io_num < N_IO);
1c009b5e <hal_getpinmux+0x14> lbu	a4,-33(s0)
1c009b62 <hal_getpinmux+0x18> li	a5,47
1c009b66 <hal_getpinmux+0x1c> bgeu	a5,a4,1c009b70 <hal_getpinmux+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:44 (discriminator 1)
1c009b6a <hal_getpinmux+0x20> csrci	mstatus,8
1c009b6e <hal_getpinmux+0x24> j	1c009b6e <hal_getpinmux+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:45
	return psoc_ctrl->io_ctrl_b[io_num].mux;
1c009b70 <hal_getpinmux+0x26> lbu	a5,-33(s0)
1c009b74 <hal_getpinmux+0x2a> lw	a4,-20(s0)
1c009b78 <hal_getpinmux+0x2e> addi	a5,a5,256 # 1a104100 <__stack_size+0x1a103900>
1c009b7c <hal_getpinmux+0x32> slli	a5,a5,0x2
1c009b7e <hal_getpinmux+0x34> add	a5,a5,a4
1c009b80 <hal_getpinmux+0x36> lw	a5,0(a5)
1c009b82 <hal_getpinmux+0x38> andi	a5,a5,3
1c009b84 <hal_getpinmux+0x3a> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_pinmux.c:46
 }
1c009b88 <hal_getpinmux+0x3e> mv	a0,a5
1c009b8a <hal_getpinmux+0x40> lw	s0,44(sp)
1c009b8c <hal_getpinmux+0x42> addi	sp,sp,48
1c009b8e <hal_getpinmux+0x44> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
		     :
		     : "r"(val), "r"((volatile uint16_t *)addr));
}

static inline void writew(uint32_t val, uintptr_t addr)
{
1c009b90 <writew> addi	sp,sp,-32
1c009b92 <writew+0x2> sw	s0,28(sp)
1c009b94 <writew+0x4> addi	s0,sp,32
1c009b96 <writew+0x6> sw	a0,-20(s0)
1c009b9a <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
	asm volatile("sw %0, 0(%1)"
		     :
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c009b9e <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c009ba2 <writew+0x12> lw	a5,-20(s0)
1c009ba6 <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c009ba8 <writew+0x18> nop
1c009baa <writew+0x1a> lw	s0,28(sp)
1c009bac <writew+0x1c> addi	sp,sp,32
1c009bae <writew+0x1e> ret
soc_eu_mask_set():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:28
#include "target/core-v-mcu/include/core-v-mcu-config.h"
#include "target/core-v-mcu/include/core-v-mcu-memory-map.h" //ToDo: this should be merged into config.h
#include "hal/include/hal_soc_eu.h"

void soc_eu_mask_set(uint32_t offset, uint32_t mask)
{
1c009bb0 <soc_eu_mask_set> addi	sp,sp,-32
1c009bb2 <soc_eu_mask_set+0x2> sw	ra,28(sp)
1c009bb4 <soc_eu_mask_set+0x4> sw	s0,24(sp)
1c009bb6 <soc_eu_mask_set+0x6> addi	s0,sp,32
1c009bb8 <soc_eu_mask_set+0x8> sw	a0,-20(s0)
1c009bbc <soc_eu_mask_set+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:29
	writew(mask, (uintptr_t)(SOC_EU_ADDR + offset));
1c009bc0 <soc_eu_mask_set+0x10> lw	a4,-20(s0)
1c009bc4 <soc_eu_mask_set+0x14> lui	a5,0x1a106
1c009bc8 <soc_eu_mask_set+0x18> add	a5,a5,a4
1c009bca <soc_eu_mask_set+0x1a> mv	a1,a5
1c009bcc <soc_eu_mask_set+0x1c> lw	a0,-24(s0)
1c009bd0 <soc_eu_mask_set+0x20> jal	1c009b90 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:30
}
1c009bd2 <soc_eu_mask_set+0x22> nop
1c009bd4 <soc_eu_mask_set+0x24> lw	ra,28(sp)
1c009bd6 <soc_eu_mask_set+0x26> lw	s0,24(sp)
1c009bd8 <soc_eu_mask_set+0x28> addi	sp,sp,32
1c009bda <soc_eu_mask_set+0x2a> ret
pulp_soc_eu_event_init():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:47
/* uint32_t soc_eu_irq_mask_get() */
/* { */
/* } */

void pulp_soc_eu_event_init()
{
1c009bdc <pulp_soc_eu_event_init> addi	sp,sp,-32
1c009bde <pulp_soc_eu_event_init+0x2> sw	ra,28(sp)
1c009be0 <pulp_soc_eu_event_init+0x4> sw	s0,24(sp)
1c009be2 <pulp_soc_eu_event_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:49
	/* deactivate all soc events */
	for (int i = 0; i < SOC_NB_EVENT_REGS; i++) {
1c009be4 <pulp_soc_eu_event_init+0x8> sw	zero,-20(s0)
1c009be8 <pulp_soc_eu_event_init+0xc> j	1c009c02 <pulp_soc_eu_event_init+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:50 (discriminator 3)
		soc_eu_mask_set(SOC_FC_FIRST_MASK + i * 4, 0xffffffff);
1c009bea <pulp_soc_eu_event_init+0xe> lw	a5,-20(s0)
1c009bee <pulp_soc_eu_event_init+0x12> addi	a5,a5,1
1c009bf0 <pulp_soc_eu_event_init+0x14> slli	a5,a5,0x2
1c009bf2 <pulp_soc_eu_event_init+0x16> li	a1,-1
1c009bf4 <pulp_soc_eu_event_init+0x18> mv	a0,a5
1c009bf6 <pulp_soc_eu_event_init+0x1a> jal	1c009bb0 <soc_eu_mask_set>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:49 (discriminator 3)
	for (int i = 0; i < SOC_NB_EVENT_REGS; i++) {
1c009bf8 <pulp_soc_eu_event_init+0x1c> lw	a5,-20(s0)
1c009bfc <pulp_soc_eu_event_init+0x20> addi	a5,a5,1
1c009bfe <pulp_soc_eu_event_init+0x22> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:49 (discriminator 1)
1c009c02 <pulp_soc_eu_event_init+0x26> lw	a4,-20(s0)
1c009c06 <pulp_soc_eu_event_init+0x2a> li	a5,7
1c009c08 <pulp_soc_eu_event_init+0x2c> bge	a5,a4,1c009bea <pulp_soc_eu_event_init+0xe>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_soc_eu.c:52
	}
}
1c009c0c <pulp_soc_eu_event_init+0x30> nop
1c009c0e <pulp_soc_eu_event_init+0x32> lw	ra,28(sp)
1c009c10 <pulp_soc_eu_event_init+0x34> lw	s0,24(sp)
1c009c12 <pulp_soc_eu_event_init+0x36> addi	sp,sp,32
1c009c14 <pulp_soc_eu_event_init+0x38> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
{
1c009c16 <writew> addi	sp,sp,-32
1c009c18 <writew+0x2> sw	s0,28(sp)
1c009c1a <writew+0x4> addi	s0,sp,32
1c009c1c <writew+0x6> sw	a0,-20(s0)
1c009c20 <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c009c24 <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c009c28 <writew+0x12> lw	a5,-20(s0)
1c009c2c <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c009c2e <writew+0x18> nop
1c009c30 <writew+0x1a> lw	s0,28(sp)
1c009c32 <writew+0x1c> addi	sp,sp,32
1c009c34 <writew+0x1e> ret
timer_irq_disable():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:36
#include "hal/include/hal_timer_irq.h"
#include "FreeRTOSConfig.h"

/* TODO: used to measure elapsed time since last "visit" */
static uint32_t last_count;
int timer_irq_disable(){
1c009c36 <timer_irq_disable> addi	sp,sp,-16
1c009c38 <timer_irq_disable+0x2> sw	ra,12(sp)
1c009c3a <timer_irq_disable+0x4> sw	s0,8(sp)
1c009c3c <timer_irq_disable+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:37
	writew (0,(uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CFG_LO_OFFSET));
1c009c3e <timer_irq_disable+0x8> lui	a1,0x1a10b
1c009c42 <timer_irq_disable+0xc> li	a0,0
1c009c44 <timer_irq_disable+0xe> jal	1c009c16 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:38
	writew (0,(uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CFG_HI_OFFSET));
1c009c46 <timer_irq_disable+0x10> lui	a5,0x1a10b
1c009c4a <timer_irq_disable+0x14> addi	a1,a5,4 # 1a10b004 <__stack_size+0x1a10a804>
1c009c4e <timer_irq_disable+0x18> li	a0,0
1c009c50 <timer_irq_disable+0x1a> jal	1c009c16 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:40

}
1c009c52 <timer_irq_disable+0x1c> nop
1c009c54 <timer_irq_disable+0x1e> mv	a0,a5
1c009c56 <timer_irq_disable+0x20> lw	ra,12(sp)
1c009c58 <timer_irq_disable+0x22> lw	s0,8(sp)
1c009c5a <timer_irq_disable+0x24> addi	sp,sp,16
1c009c5c <timer_irq_disable+0x26> ret
timer_irq_init():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:43

int timer_irq_init(uint32_t ticks)
{
1c009c5e <timer_irq_init> addi	sp,sp,-32
1c009c60 <timer_irq_init+0x2> sw	ra,28(sp)
1c009c62 <timer_irq_init+0x4> sw	s0,24(sp)
1c009c64 <timer_irq_init+0x6> addi	s0,sp,32
1c009c66 <timer_irq_init+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:47
	/* TODO: enable soc_eu timer interrupt */

	/* set the interrupt interval */
	timer_irq_set_timeout(ticks, false);
1c009c6a <timer_irq_init+0xc> li	a1,0
1c009c6c <timer_irq_init+0xe> lw	a0,-20(s0)
1c009c70 <timer_irq_init+0x12> jal	1c009c86 <timer_irq_set_timeout>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:60
	 */
/* use high timer for now as int actually gets to cpu */
#ifdef configMTIME_BASE_ADDRESS
	writew(0xc000000f,(uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CFG_LO_OFFSET));
#else
	writew(TIMER_CFG_LO_ENABLE_MASK | TIMER_CFG_LO_RESET_MASK |
1c009c72 <timer_irq_init+0x14> lui	a1,0x1a10b
1c009c76 <timer_irq_init+0x18> li	a0,23
1c009c78 <timer_irq_init+0x1a> jal	1c009c16 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:66
		       TIMER_CFG_LO_MODE_MASK |
		       TIMER_CFG_LO_IRQEN_MASK,
	       (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CFG_LO_OFFSET));
#endif

	return 0;
1c009c7a <timer_irq_init+0x1c> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:67
}
1c009c7c <timer_irq_init+0x1e> mv	a0,a5
1c009c7e <timer_irq_init+0x20> lw	ra,28(sp)
1c009c80 <timer_irq_init+0x22> lw	s0,24(sp)
1c009c82 <timer_irq_init+0x24> addi	sp,sp,32
1c009c84 <timer_irq_init+0x26> ret
timer_irq_set_timeout():
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:70

int timer_irq_set_timeout(uint32_t ticks, bool idle)
{
1c009c86 <timer_irq_set_timeout> addi	sp,sp,-32
1c009c88 <timer_irq_set_timeout+0x2> sw	ra,28(sp)
1c009c8a <timer_irq_set_timeout+0x4> sw	s0,24(sp)
1c009c8c <timer_irq_set_timeout+0x6> addi	s0,sp,32
1c009c8e <timer_irq_set_timeout+0x8> sw	a0,-20(s0)
1c009c92 <timer_irq_set_timeout+0xc> mv	a5,a1
1c009c94 <timer_irq_set_timeout+0xe> sb	a5,-21(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:74
	(void)idle;
	/* fast reset, value doesn't matter */

	writew(1, (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_RESET_LO_OFFSET));
1c009c98 <timer_irq_set_timeout+0x12> lui	a5,0x1a10b
1c009c9c <timer_irq_set_timeout+0x16> addi	a1,a5,32 # 1a10b020 <__stack_size+0x1a10a820>
1c009ca0 <timer_irq_set_timeout+0x1a> li	a0,1
1c009ca2 <timer_irq_set_timeout+0x1c> jal	1c009c16 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:75
	writew(ticks, (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CMP_LO_OFFSET));
1c009ca4 <timer_irq_set_timeout+0x1e> lui	a5,0x1a10b
1c009ca8 <timer_irq_set_timeout+0x22> addi	a1,a5,16 # 1a10b010 <__stack_size+0x1a10a810>
1c009cac <timer_irq_set_timeout+0x26> lw	a0,-20(s0)
1c009cb0 <timer_irq_set_timeout+0x2a> jal	1c009c16 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:76
	writew(1, (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_RESET_HI_OFFSET));
1c009cb2 <timer_irq_set_timeout+0x2c> lui	a5,0x1a10b
1c009cb6 <timer_irq_set_timeout+0x30> addi	a1,a5,36 # 1a10b024 <__stack_size+0x1a10a824>
1c009cba <timer_irq_set_timeout+0x34> li	a0,1
1c009cbc <timer_irq_set_timeout+0x36> jal	1c009c16 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:79
//	writew(ticks, (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CMP_HI_OFFSET));

	return 0;
1c009cbe <timer_irq_set_timeout+0x38> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/hal/source/hal_timer_irq.c:80
}
1c009cc0 <timer_irq_set_timeout+0x3a> mv	a0,a5
1c009cc2 <timer_irq_set_timeout+0x3c> lw	ra,28(sp)
1c009cc4 <timer_irq_set_timeout+0x3e> lw	s0,24(sp)
1c009cc6 <timer_irq_set_timeout+0x40> addi	sp,sp,32
1c009cc8 <timer_irq_set_timeout+0x42> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
{
1c009cca <writew> addi	sp,sp,-32
1c009ccc <writew+0x2> sw	s0,28(sp)
1c009cce <writew+0x4> addi	s0,sp,32
1c009cd0 <writew+0x6> sw	a0,-20(s0)
1c009cd4 <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c009cd8 <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c009cdc <writew+0x12> lw	a5,-20(s0)
1c009ce0 <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c009ce2 <writew+0x18> nop
1c009ce4 <writew+0x1a> lw	s0,28(sp)
1c009ce6 <writew+0x1c> addi	sp,sp,32
1c009ce8 <writew+0x1e> ret
readw():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:79
		     : "r"((const volatile uint16_t *)addr));
	return val;
}

static inline uint32_t readw(const uintptr_t addr)
{
1c009cea <readw> addi	sp,sp,-48
1c009cec <readw+0x2> sw	s0,44(sp)
1c009cee <readw+0x4> addi	s0,sp,48
1c009cf0 <readw+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:84
	uint32_t val;

	asm volatile("lw %0, 0(%1)"
		     : "=r"(val)
		     : "r"((const volatile uint32_t *)addr));
1c009cf4 <readw+0xa> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:82
	asm volatile("lw %0, 0(%1)"
1c009cf8 <readw+0xe> lw	a5,0(a5)
1c009cfa <readw+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:85
	return val;
1c009cfe <readw+0x14> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:86
}
1c009d02 <readw+0x18> mv	a0,a5
1c009d04 <readw+0x1a> lw	s0,44(sp)
1c009d06 <readw+0x1c> addi	sp,sp,48
1c009d08 <readw+0x1e> ret
soc_eu_fc_write():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:108
#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

static inline void soc_eu_fc_write(uint32_t val, uint32_t reg)
{
1c009d0a <soc_eu_fc_write> addi	sp,sp,-32
1c009d0c <soc_eu_fc_write+0x2> sw	ra,28(sp)
1c009d0e <soc_eu_fc_write+0x4> sw	s0,24(sp)
1c009d10 <soc_eu_fc_write+0x6> addi	s0,sp,32
1c009d12 <soc_eu_fc_write+0x8> sw	a0,-20(s0)
1c009d16 <soc_eu_fc_write+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:109
	writew(val, (uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c009d1a <soc_eu_fc_write+0x10> lw	a4,-24(s0)
1c009d1e <soc_eu_fc_write+0x14> lui	a5,0x1a106
1c009d22 <soc_eu_fc_write+0x18> addi	a5,a5,4
1c009d24 <soc_eu_fc_write+0x1a> add	a5,a5,a4
1c009d26 <soc_eu_fc_write+0x1c> mv	a1,a5
1c009d28 <soc_eu_fc_write+0x1e> lw	a0,-20(s0)
1c009d2c <soc_eu_fc_write+0x22> jal	1c009cca <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:110
}
1c009d2e <soc_eu_fc_write+0x24> nop
1c009d30 <soc_eu_fc_write+0x26> lw	ra,28(sp)
1c009d32 <soc_eu_fc_write+0x28> lw	s0,24(sp)
1c009d34 <soc_eu_fc_write+0x2a> addi	sp,sp,32
1c009d36 <soc_eu_fc_write+0x2c> ret
soc_eu_fc_read():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:113

static inline uint32_t soc_eu_fc_read(uint32_t reg)
{
1c009d38 <soc_eu_fc_read> addi	sp,sp,-32
1c009d3a <soc_eu_fc_read+0x2> sw	ra,28(sp)
1c009d3c <soc_eu_fc_read+0x4> sw	s0,24(sp)
1c009d3e <soc_eu_fc_read+0x6> addi	s0,sp,32
1c009d40 <soc_eu_fc_read+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:114
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c009d44 <soc_eu_fc_read+0xc> lw	a4,-20(s0)
1c009d48 <soc_eu_fc_read+0x10> lui	a5,0x1a106
1c009d4c <soc_eu_fc_read+0x14> addi	a5,a5,4
1c009d4e <soc_eu_fc_read+0x16> add	a5,a5,a4
1c009d50 <soc_eu_fc_read+0x18> mv	a0,a5
1c009d52 <soc_eu_fc_read+0x1a> jal	1c009cea <readw>
1c009d54 <soc_eu_fc_read+0x1c> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:115
}
1c009d56 <soc_eu_fc_read+0x1e> mv	a0,a5
1c009d58 <soc_eu_fc_read+0x20> lw	ra,28(sp)
1c009d5a <soc_eu_fc_read+0x22> lw	s0,24(sp)
1c009d5c <soc_eu_fc_read+0x24> addi	sp,sp,32
1c009d5e <soc_eu_fc_read+0x26> ret
hal_soc_eu_set_fc_mask():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:137
static inline uint32_t soc_eu_pr_read(uint32_t reg)
{
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_PR_MASK0_OFFSET + reg));
}

static inline void hal_soc_eu_set_fc_mask(int evt) {
1c009d60 <hal_soc_eu_set_fc_mask> addi	sp,sp,-48
1c009d62 <hal_soc_eu_set_fc_mask+0x2> sw	ra,44(sp)
1c009d64 <hal_soc_eu_set_fc_mask+0x4> sw	s0,40(sp)
1c009d66 <hal_soc_eu_set_fc_mask+0x6> addi	s0,sp,48
1c009d68 <hal_soc_eu_set_fc_mask+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138
	if (evt >= 256 || evt < 0)
1c009d6c <hal_soc_eu_set_fc_mask+0xc> lw	a4,-36(s0)
1c009d70 <hal_soc_eu_set_fc_mask+0x10> li	a5,255
1c009d74 <hal_soc_eu_set_fc_mask+0x14> blt	a5,a4,1c009dcc <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138 (discriminator 1)
1c009d78 <hal_soc_eu_set_fc_mask+0x18> lw	a5,-36(s0)
1c009d7c <hal_soc_eu_set_fc_mask+0x1c> bltz	a5,1c009dcc <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:141
		return;

	int shift = evt % 32;
1c009d80 <hal_soc_eu_set_fc_mask+0x20> lw	a4,-36(s0)
1c009d84 <hal_soc_eu_set_fc_mask+0x24> srai	a5,a4,0x1f
1c009d88 <hal_soc_eu_set_fc_mask+0x28> srli	a5,a5,0x1b
1c009d8a <hal_soc_eu_set_fc_mask+0x2a> add	a4,a4,a5
1c009d8c <hal_soc_eu_set_fc_mask+0x2c> andi	a4,a4,31
1c009d8e <hal_soc_eu_set_fc_mask+0x2e> sub	a5,a4,a5
1c009d92 <hal_soc_eu_set_fc_mask+0x32> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:142
	uint32_t reg_offset = evt/32 * 4;
1c009d96 <hal_soc_eu_set_fc_mask+0x36> lw	a5,-36(s0)
1c009d9a <hal_soc_eu_set_fc_mask+0x3a> srai	a4,a5,0x1f
1c009d9e <hal_soc_eu_set_fc_mask+0x3e> andi	a4,a4,31
1c009da0 <hal_soc_eu_set_fc_mask+0x40> add	a5,a5,a4
1c009da2 <hal_soc_eu_set_fc_mask+0x42> srai	a5,a5,0x5
1c009da4 <hal_soc_eu_set_fc_mask+0x44> slli	a5,a5,0x2
1c009da6 <hal_soc_eu_set_fc_mask+0x46> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:143
	soc_eu_fc_write(soc_eu_fc_read(reg_offset) & ~(1 << shift), reg_offset);
1c009daa <hal_soc_eu_set_fc_mask+0x4a> lw	a0,-24(s0)
1c009dae <hal_soc_eu_set_fc_mask+0x4e> jal	1c009d38 <soc_eu_fc_read>
1c009db0 <hal_soc_eu_set_fc_mask+0x50> mv	a3,a0
1c009db2 <hal_soc_eu_set_fc_mask+0x52> li	a4,1
1c009db4 <hal_soc_eu_set_fc_mask+0x54> lw	a5,-20(s0)
1c009db8 <hal_soc_eu_set_fc_mask+0x58> sll	a5,a4,a5
1c009dbc <hal_soc_eu_set_fc_mask+0x5c> not	a5,a5
1c009dc0 <hal_soc_eu_set_fc_mask+0x60> and	a5,a5,a3
1c009dc2 <hal_soc_eu_set_fc_mask+0x62> lw	a1,-24(s0)
1c009dc6 <hal_soc_eu_set_fc_mask+0x66> mv	a0,a5
1c009dc8 <hal_soc_eu_set_fc_mask+0x68> jal	1c009d0a <soc_eu_fc_write>
1c009dca <hal_soc_eu_set_fc_mask+0x6a> j	1c009dce <hal_soc_eu_set_fc_mask+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:139
		return;
1c009dcc <hal_soc_eu_set_fc_mask+0x6c> nop
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:144
}
1c009dce <hal_soc_eu_set_fc_mask+0x6e> lw	ra,44(sp)
1c009dd0 <hal_soc_eu_set_fc_mask+0x70> lw	s0,40(sp)
1c009dd2 <hal_soc_eu_set_fc_mask+0x72> addi	sp,sp,48
1c009dd4 <hal_soc_eu_set_fc_mask+0x74> ret
i2cmTXHandler():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:40

SemaphoreHandle_t  i2cm_semaphores_rx[N_I2CM];
SemaphoreHandle_t  i2cm_semaphores_tx[N_I2CM];

void i2cmTXHandler(void *arg)
{
1c009dd6 <i2cmTXHandler> addi	sp,sp,-48
1c009dd8 <i2cmTXHandler+0x2> sw	s0,44(sp)
1c009dda <i2cmTXHandler+0x4> addi	s0,sp,48
1c009ddc <i2cmTXHandler+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:41
	uint32_t lCounter = 0;
1c009de0 <i2cmTXHandler+0xa> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:43

	lCounter++;
1c009de4 <i2cmTXHandler+0xe> lw	a5,-20(s0)
1c009de8 <i2cmTXHandler+0x12> addi	a5,a5,1
1c009dea <i2cmTXHandler+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:44
}
1c009dee <i2cmTXHandler+0x18> nop
1c009df0 <i2cmTXHandler+0x1a> lw	s0,44(sp)
1c009df2 <i2cmTXHandler+0x1c> addi	sp,sp,48
1c009df4 <i2cmTXHandler+0x1e> ret
i2cmRXHandler():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:47

void i2cmRXHandler(void *arg)
{
1c009df6 <i2cmRXHandler> addi	sp,sp,-48
1c009df8 <i2cmRXHandler+0x2> sw	s0,44(sp)
1c009dfa <i2cmRXHandler+0x4> addi	s0,sp,48
1c009dfc <i2cmRXHandler+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:48
	uint32_t lCounter = 0;
1c009e00 <i2cmRXHandler+0xa> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:50

	lCounter++;
1c009e04 <i2cmRXHandler+0xe> lw	a5,-20(s0)
1c009e08 <i2cmRXHandler+0x12> addi	a5,a5,1
1c009e0a <i2cmRXHandler+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:51
}
1c009e0e <i2cmRXHandler+0x18> nop
1c009e10 <i2cmRXHandler+0x1a> lw	s0,44(sp)
1c009e12 <i2cmRXHandler+0x1c> addi	sp,sp,48
1c009e14 <i2cmRXHandler+0x1e> ret
udma_i2cm_open():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:55

static uint8_t aucclkdiv[2];

uint16_t udma_i2cm_open (uint8_t i2cm_id, uint32_t clk_freq) {
1c009e16 <udma_i2cm_open> addi	sp,sp,-48
1c009e18 <udma_i2cm_open+0x2> sw	ra,44(sp)
1c009e1a <udma_i2cm_open+0x4> sw	s0,40(sp)
1c009e1c <udma_i2cm_open+0x6> addi	s0,sp,48
1c009e1e <udma_i2cm_open+0x8> mv	a5,a0
1c009e20 <udma_i2cm_open+0xa> sw	a1,-40(s0)
1c009e24 <udma_i2cm_open+0xe> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:56
	volatile UdmaCtrl_t*		pudma_ctrl = (UdmaCtrl_t*)UDMA_CH_ADDR_CTRL;
1c009e28 <udma_i2cm_open+0x12> lui	a5,0x1a102
1c009e2c <udma_i2cm_open+0x16> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:57
	UdmaI2cm_t*					pi2cm_regs = (UdmaI2cm_t*)(UDMA_CH_ADDR_I2CM + i2cm_id * UDMA_CH_SIZE);
1c009e30 <udma_i2cm_open+0x1a> lbu	a4,-33(s0)
1c009e34 <udma_i2cm_open+0x1e> lui	a5,0x342
1c009e38 <udma_i2cm_open+0x22> addi	a5,a5,69 # 00342045 <__stack_size+0x341845>
1c009e3c <udma_i2cm_open+0x26> add	a5,a5,a4
1c009e3e <udma_i2cm_open+0x28> slli	a5,a5,0x7
1c009e40 <udma_i2cm_open+0x2a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:61
	uint32_t					clk_divisor;

	/* See if already initialized */
	if (i2cm_semaphores_rx[i2cm_id] != NULL || i2cm_semaphores_tx[i2cm_id] != NULL) {
1c009e44 <udma_i2cm_open+0x2e> lbu	a5,-33(s0)
1c009e48 <udma_i2cm_open+0x32> lui	a4,0x1c017
1c009e4c <udma_i2cm_open+0x36> addi	a4,a4,-976 # 1c016c30 <i2cm_semaphores_rx>
1c009e50 <udma_i2cm_open+0x3a> slli	a5,a5,0x2
1c009e52 <udma_i2cm_open+0x3c> add	a5,a5,a4
1c009e54 <udma_i2cm_open+0x3e> lw	a5,0(a5)
1c009e56 <udma_i2cm_open+0x40> bnez	a5,1c009e6c <udma_i2cm_open+0x56>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:61 (discriminator 1)
1c009e58 <udma_i2cm_open+0x42> lbu	a5,-33(s0)
1c009e5c <udma_i2cm_open+0x46> lui	a4,0x1c017
1c009e60 <udma_i2cm_open+0x4a> addi	a4,a4,-984 # 1c016c28 <i2cm_semaphores_tx>
1c009e64 <udma_i2cm_open+0x4e> slli	a5,a5,0x2
1c009e66 <udma_i2cm_open+0x50> add	a5,a5,a4
1c009e68 <udma_i2cm_open+0x52> lw	a5,0(a5)
1c009e6a <udma_i2cm_open+0x54> beqz	a5,1c009e70 <udma_i2cm_open+0x5a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:62
		return 1;
1c009e6c <udma_i2cm_open+0x56> li	a5,1
1c009e6e <udma_i2cm_open+0x58> j	1c009fe6 <udma_i2cm_open+0x1d0>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:65
	}
	/* Enable reset and enable uart clock */
	pudma_ctrl->reg_rst |= (UDMA_CTRL_I2CM0_CLKEN << i2cm_id);
1c009e70 <udma_i2cm_open+0x5a> lw	a5,-20(s0)
1c009e74 <udma_i2cm_open+0x5e> lw	a5,8(a5)
1c009e76 <udma_i2cm_open+0x60> lbu	a4,-33(s0)
1c009e7a <udma_i2cm_open+0x64> li	a3,16
1c009e7c <udma_i2cm_open+0x66> sll	a4,a3,a4
1c009e80 <udma_i2cm_open+0x6a> or	a4,a4,a5
1c009e82 <udma_i2cm_open+0x6c> lw	a5,-20(s0)
1c009e86 <udma_i2cm_open+0x70> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:66
	pudma_ctrl->reg_rst &= ~(UDMA_CTRL_I2CM0_CLKEN << i2cm_id);
1c009e88 <udma_i2cm_open+0x72> lw	a5,-20(s0)
1c009e8c <udma_i2cm_open+0x76> lw	a5,8(a5)
1c009e8e <udma_i2cm_open+0x78> lbu	a4,-33(s0)
1c009e92 <udma_i2cm_open+0x7c> li	a3,16
1c009e94 <udma_i2cm_open+0x7e> sll	a4,a3,a4
1c009e98 <udma_i2cm_open+0x82> not	a4,a4
1c009e9c <udma_i2cm_open+0x86> and	a4,a4,a5
1c009e9e <udma_i2cm_open+0x88> lw	a5,-20(s0)
1c009ea2 <udma_i2cm_open+0x8c> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:67
	pudma_ctrl->reg_cg |= (UDMA_CTRL_I2CM0_CLKEN << i2cm_id);
1c009ea4 <udma_i2cm_open+0x8e> lw	a5,-20(s0)
1c009ea8 <udma_i2cm_open+0x92> lw	a5,0(a5)
1c009eaa <udma_i2cm_open+0x94> lbu	a4,-33(s0)
1c009eae <udma_i2cm_open+0x98> li	a3,16
1c009eb0 <udma_i2cm_open+0x9a> sll	a4,a3,a4
1c009eb4 <udma_i2cm_open+0x9e> or	a4,a4,a5
1c009eb6 <udma_i2cm_open+0xa0> lw	a5,-20(s0)
1c009eba <udma_i2cm_open+0xa4> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:71

	/* Set semaphore */
	SemaphoreHandle_t shSemaphoreHandle;		// FreeRTOS.h has a define for xSemaphoreHandle, so can't use that
	shSemaphoreHandle = xSemaphoreCreateBinary();
1c009ebc <udma_i2cm_open+0xa6> li	a2,3
1c009ebe <udma_i2cm_open+0xa8> li	a1,0
1c009ec0 <udma_i2cm_open+0xaa> li	a0,1
1c009ec2 <udma_i2cm_open+0xac> jal	ra,1c008704 <xQueueGenericCreate>
1c009ec6 <udma_i2cm_open+0xb0> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:72
	configASSERT(shSemaphoreHandle);
1c009eca <udma_i2cm_open+0xb4> lw	a5,-28(s0)
1c009ece <udma_i2cm_open+0xb8> bnez	a5,1c009ed6 <udma_i2cm_open+0xc0>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:72 (discriminator 1)
1c009ed0 <udma_i2cm_open+0xba> csrci	mstatus,8
1c009ed4 <udma_i2cm_open+0xbe> j	1c009ed4 <udma_i2cm_open+0xbe>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:73
	xSemaphoreGive(shSemaphoreHandle);
1c009ed6 <udma_i2cm_open+0xc0> li	a3,0
1c009ed8 <udma_i2cm_open+0xc2> li	a2,0
1c009eda <udma_i2cm_open+0xc4> li	a1,0
1c009edc <udma_i2cm_open+0xc6> lw	a0,-28(s0)
1c009ee0 <udma_i2cm_open+0xca> jal	ra,1c0087f4 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:74
	i2cm_semaphores_rx[i2cm_id] = shSemaphoreHandle;
1c009ee4 <udma_i2cm_open+0xce> lbu	a5,-33(s0)
1c009ee8 <udma_i2cm_open+0xd2> lui	a4,0x1c017
1c009eec <udma_i2cm_open+0xd6> addi	a4,a4,-976 # 1c016c30 <i2cm_semaphores_rx>
1c009ef0 <udma_i2cm_open+0xda> slli	a5,a5,0x2
1c009ef2 <udma_i2cm_open+0xdc> add	a5,a5,a4
1c009ef4 <udma_i2cm_open+0xde> lw	a4,-28(s0)
1c009ef8 <udma_i2cm_open+0xe2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:76

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c009efa <udma_i2cm_open+0xe4> li	a2,3
1c009efc <udma_i2cm_open+0xe6> li	a1,0
1c009efe <udma_i2cm_open+0xe8> li	a0,1
1c009f00 <udma_i2cm_open+0xea> jal	ra,1c008704 <xQueueGenericCreate>
1c009f04 <udma_i2cm_open+0xee> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:77
	configASSERT(shSemaphoreHandle);
1c009f08 <udma_i2cm_open+0xf2> lw	a5,-28(s0)
1c009f0c <udma_i2cm_open+0xf6> bnez	a5,1c009f14 <udma_i2cm_open+0xfe>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:77 (discriminator 1)
1c009f0e <udma_i2cm_open+0xf8> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:77 (discriminator 2)
1c009f12 <udma_i2cm_open+0xfc> j	1c009f12 <udma_i2cm_open+0xfc>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:78
	xSemaphoreGive(shSemaphoreHandle);
1c009f14 <udma_i2cm_open+0xfe> li	a3,0
1c009f16 <udma_i2cm_open+0x100> li	a2,0
1c009f18 <udma_i2cm_open+0x102> li	a1,0
1c009f1a <udma_i2cm_open+0x104> lw	a0,-28(s0)
1c009f1e <udma_i2cm_open+0x108> jal	ra,1c0087f4 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:79
	i2cm_semaphores_tx[i2cm_id] = shSemaphoreHandle;
1c009f22 <udma_i2cm_open+0x10c> lbu	a5,-33(s0)
1c009f26 <udma_i2cm_open+0x110> lui	a4,0x1c017
1c009f2a <udma_i2cm_open+0x114> addi	a4,a4,-984 # 1c016c28 <i2cm_semaphores_tx>
1c009f2e <udma_i2cm_open+0x118> slli	a5,a5,0x2
1c009f30 <udma_i2cm_open+0x11a> add	a5,a5,a4
1c009f32 <udma_i2cm_open+0x11c> lw	a4,-28(s0)
1c009f36 <udma_i2cm_open+0x120> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:82

	/* Set handlers. */
	pi_fc_event_handler_set(SOC_EVENT_UDMA_I2C_RX(i2cm_id), i2cmRXHandler/*NULL*/, i2cm_semaphores_rx[i2cm_id]);
1c009f38 <udma_i2cm_open+0x122> lbu	a5,-33(s0)
1c009f3c <udma_i2cm_open+0x126> addi	a5,a5,4
1c009f3e <udma_i2cm_open+0x128> slli	a5,a5,0x2
1c009f40 <udma_i2cm_open+0x12a> mv	a3,a5
1c009f42 <udma_i2cm_open+0x12c> lbu	a5,-33(s0)
1c009f46 <udma_i2cm_open+0x130> lui	a4,0x1c017
1c009f4a <udma_i2cm_open+0x134> addi	a4,a4,-976 # 1c016c30 <i2cm_semaphores_rx>
1c009f4e <udma_i2cm_open+0x138> slli	a5,a5,0x2
1c009f50 <udma_i2cm_open+0x13a> add	a5,a5,a4
1c009f52 <udma_i2cm_open+0x13c> lw	a5,0(a5)
1c009f54 <udma_i2cm_open+0x13e> mv	a2,a5
1c009f56 <udma_i2cm_open+0x140> lui	a5,0x1c00a
1c009f5a <udma_i2cm_open+0x144> addi	a1,a5,-522 # 1c009df6 <i2cmRXHandler>
1c009f5e <udma_i2cm_open+0x148> mv	a0,a3
1c009f60 <udma_i2cm_open+0x14a> jal	1c00996c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:83
	pi_fc_event_handler_set(SOC_EVENT_UDMA_I2C_TX(i2cm_id), i2cmTXHandler/*NULL*/, i2cm_semaphores_tx[i2cm_id]);
1c009f62 <udma_i2cm_open+0x14c> lbu	a5,-33(s0)
1c009f66 <udma_i2cm_open+0x150> addi	a5,a5,4
1c009f68 <udma_i2cm_open+0x152> slli	a5,a5,0x2
1c009f6a <udma_i2cm_open+0x154> addi	a3,a5,1
1c009f6e <udma_i2cm_open+0x158> lbu	a5,-33(s0)
1c009f72 <udma_i2cm_open+0x15c> lui	a4,0x1c017
1c009f76 <udma_i2cm_open+0x160> addi	a4,a4,-984 # 1c016c28 <i2cm_semaphores_tx>
1c009f7a <udma_i2cm_open+0x164> slli	a5,a5,0x2
1c009f7c <udma_i2cm_open+0x166> add	a5,a5,a4
1c009f7e <udma_i2cm_open+0x168> lw	a5,0(a5)
1c009f80 <udma_i2cm_open+0x16a> mv	a2,a5
1c009f82 <udma_i2cm_open+0x16c> lui	a5,0x1c00a
1c009f86 <udma_i2cm_open+0x170> addi	a1,a5,-554 # 1c009dd6 <i2cmTXHandler>
1c009f8a <udma_i2cm_open+0x174> mv	a0,a3
1c009f8c <udma_i2cm_open+0x176> jal	ra,1c00996c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:85
	/* Enable SOC events propagation to FC. */
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_I2C_RX(i2cm_id));
1c009f90 <udma_i2cm_open+0x17a> lbu	a5,-33(s0)
1c009f94 <udma_i2cm_open+0x17e> addi	a5,a5,4
1c009f96 <udma_i2cm_open+0x180> slli	a5,a5,0x2
1c009f98 <udma_i2cm_open+0x182> mv	a0,a5
1c009f9a <udma_i2cm_open+0x184> jal	1c009d60 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:86
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_I2C_TX(i2cm_id));
1c009f9c <udma_i2cm_open+0x186> lbu	a5,-33(s0)
1c009fa0 <udma_i2cm_open+0x18a> addi	a5,a5,4
1c009fa2 <udma_i2cm_open+0x18c> slli	a5,a5,0x2
1c009fa4 <udma_i2cm_open+0x18e> addi	a5,a5,1
1c009fa6 <udma_i2cm_open+0x190> mv	a0,a5
1c009fa8 <udma_i2cm_open+0x192> jal	1c009d60 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:89

	/* configure */
	clk_divisor = 5000000/clk_freq;
1c009faa <udma_i2cm_open+0x194> lui	a5,0x4c5
1c009fae <udma_i2cm_open+0x198> addi	a4,a5,-1216 # 004c4b40 <__stack_size+0x4c4340>
1c009fb2 <udma_i2cm_open+0x19c> lw	a5,-40(s0)
1c009fb6 <udma_i2cm_open+0x1a0> divu	a5,a4,a5
1c009fba <udma_i2cm_open+0x1a4> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:90
	aucclkdiv[0] = (clk_divisor >> 0) & 0xFF;
1c009fbe <udma_i2cm_open+0x1a8> lw	a5,-32(s0)
1c009fc2 <udma_i2cm_open+0x1ac> andi	a4,a5,255
1c009fc6 <udma_i2cm_open+0x1b0> lui	a5,0x1c017
1c009fca <udma_i2cm_open+0x1b4> sb	a4,-1104(a5) # 1c016bb0 <aucclkdiv>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:91
	aucclkdiv[1] = (clk_divisor >> 8) & 0xFF;
1c009fce <udma_i2cm_open+0x1b8> lw	a5,-32(s0)
1c009fd2 <udma_i2cm_open+0x1bc> srli	a5,a5,0x8
1c009fd4 <udma_i2cm_open+0x1be> andi	a4,a5,255
1c009fd8 <udma_i2cm_open+0x1c2> lui	a5,0x1c017
1c009fdc <udma_i2cm_open+0x1c6> addi	a5,a5,-1104 # 1c016bb0 <aucclkdiv>
1c009fe0 <udma_i2cm_open+0x1ca> sb	a4,1(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:93

	return 0;
1c009fe4 <udma_i2cm_open+0x1ce> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_i2cm_driver.c:94
}
1c009fe6 <udma_i2cm_open+0x1d0> mv	a0,a5
1c009fe8 <udma_i2cm_open+0x1d2> lw	ra,44(sp)
1c009fea <udma_i2cm_open+0x1d4> lw	s0,40(sp)
1c009fec <udma_i2cm_open+0x1d6> addi	sp,sp,48
1c009fee <udma_i2cm_open+0x1d8> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
{
1c009ff0 <writew> addi	sp,sp,-32
1c009ff2 <writew+0x2> sw	s0,28(sp)
1c009ff4 <writew+0x4> addi	s0,sp,32
1c009ff6 <writew+0x6> sw	a0,-20(s0)
1c009ffa <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c009ffe <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c00a002 <writew+0x12> lw	a5,-20(s0)
1c00a006 <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c00a008 <writew+0x18> nop
1c00a00a <writew+0x1a> lw	s0,28(sp)
1c00a00c <writew+0x1c> addi	sp,sp,32
1c00a00e <writew+0x1e> ret
readw():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:79
{
1c00a010 <readw> addi	sp,sp,-48
1c00a012 <readw+0x2> sw	s0,44(sp)
1c00a014 <readw+0x4> addi	s0,sp,48
1c00a016 <readw+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:84
		     : "r"((const volatile uint32_t *)addr));
1c00a01a <readw+0xa> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:82
	asm volatile("lw %0, 0(%1)"
1c00a01e <readw+0xe> lw	a5,0(a5)
1c00a020 <readw+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:85
	return val;
1c00a024 <readw+0x14> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:86
}
1c00a028 <readw+0x18> mv	a0,a5
1c00a02a <readw+0x1a> lw	s0,44(sp)
1c00a02c <readw+0x1c> addi	sp,sp,48
1c00a02e <readw+0x1e> ret
soc_eu_fc_write():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:108
{
1c00a030 <soc_eu_fc_write> addi	sp,sp,-32
1c00a032 <soc_eu_fc_write+0x2> sw	ra,28(sp)
1c00a034 <soc_eu_fc_write+0x4> sw	s0,24(sp)
1c00a036 <soc_eu_fc_write+0x6> addi	s0,sp,32
1c00a038 <soc_eu_fc_write+0x8> sw	a0,-20(s0)
1c00a03c <soc_eu_fc_write+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:109
	writew(val, (uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00a040 <soc_eu_fc_write+0x10> lw	a4,-24(s0)
1c00a044 <soc_eu_fc_write+0x14> lui	a5,0x1a106
1c00a048 <soc_eu_fc_write+0x18> addi	a5,a5,4
1c00a04a <soc_eu_fc_write+0x1a> add	a5,a5,a4
1c00a04c <soc_eu_fc_write+0x1c> mv	a1,a5
1c00a04e <soc_eu_fc_write+0x1e> lw	a0,-20(s0)
1c00a052 <soc_eu_fc_write+0x22> jal	1c009ff0 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:110
}
1c00a054 <soc_eu_fc_write+0x24> nop
1c00a056 <soc_eu_fc_write+0x26> lw	ra,28(sp)
1c00a058 <soc_eu_fc_write+0x28> lw	s0,24(sp)
1c00a05a <soc_eu_fc_write+0x2a> addi	sp,sp,32
1c00a05c <soc_eu_fc_write+0x2c> ret
soc_eu_fc_read():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:113
{
1c00a05e <soc_eu_fc_read> addi	sp,sp,-32
1c00a060 <soc_eu_fc_read+0x2> sw	ra,28(sp)
1c00a062 <soc_eu_fc_read+0x4> sw	s0,24(sp)
1c00a064 <soc_eu_fc_read+0x6> addi	s0,sp,32
1c00a066 <soc_eu_fc_read+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:114
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00a06a <soc_eu_fc_read+0xc> lw	a4,-20(s0)
1c00a06e <soc_eu_fc_read+0x10> lui	a5,0x1a106
1c00a072 <soc_eu_fc_read+0x14> addi	a5,a5,4
1c00a074 <soc_eu_fc_read+0x16> add	a5,a5,a4
1c00a076 <soc_eu_fc_read+0x18> mv	a0,a5
1c00a078 <soc_eu_fc_read+0x1a> jal	1c00a010 <readw>
1c00a07a <soc_eu_fc_read+0x1c> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:115
}
1c00a07c <soc_eu_fc_read+0x1e> mv	a0,a5
1c00a07e <soc_eu_fc_read+0x20> lw	ra,28(sp)
1c00a080 <soc_eu_fc_read+0x22> lw	s0,24(sp)
1c00a082 <soc_eu_fc_read+0x24> addi	sp,sp,32
1c00a084 <soc_eu_fc_read+0x26> ret
hal_soc_eu_set_fc_mask():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:137
static inline void hal_soc_eu_set_fc_mask(int evt) {
1c00a086 <hal_soc_eu_set_fc_mask> addi	sp,sp,-48
1c00a088 <hal_soc_eu_set_fc_mask+0x2> sw	ra,44(sp)
1c00a08a <hal_soc_eu_set_fc_mask+0x4> sw	s0,40(sp)
1c00a08c <hal_soc_eu_set_fc_mask+0x6> addi	s0,sp,48
1c00a08e <hal_soc_eu_set_fc_mask+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138
	if (evt >= 256 || evt < 0)
1c00a092 <hal_soc_eu_set_fc_mask+0xc> lw	a4,-36(s0)
1c00a096 <hal_soc_eu_set_fc_mask+0x10> li	a5,255
1c00a09a <hal_soc_eu_set_fc_mask+0x14> blt	a5,a4,1c00a0f2 <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138 (discriminator 1)
1c00a09e <hal_soc_eu_set_fc_mask+0x18> lw	a5,-36(s0)
1c00a0a2 <hal_soc_eu_set_fc_mask+0x1c> bltz	a5,1c00a0f2 <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:141
	int shift = evt % 32;
1c00a0a6 <hal_soc_eu_set_fc_mask+0x20> lw	a4,-36(s0)
1c00a0aa <hal_soc_eu_set_fc_mask+0x24> srai	a5,a4,0x1f
1c00a0ae <hal_soc_eu_set_fc_mask+0x28> srli	a5,a5,0x1b
1c00a0b0 <hal_soc_eu_set_fc_mask+0x2a> add	a4,a4,a5
1c00a0b2 <hal_soc_eu_set_fc_mask+0x2c> andi	a4,a4,31
1c00a0b4 <hal_soc_eu_set_fc_mask+0x2e> sub	a5,a4,a5
1c00a0b8 <hal_soc_eu_set_fc_mask+0x32> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:142
	uint32_t reg_offset = evt/32 * 4;
1c00a0bc <hal_soc_eu_set_fc_mask+0x36> lw	a5,-36(s0)
1c00a0c0 <hal_soc_eu_set_fc_mask+0x3a> srai	a4,a5,0x1f
1c00a0c4 <hal_soc_eu_set_fc_mask+0x3e> andi	a4,a4,31
1c00a0c6 <hal_soc_eu_set_fc_mask+0x40> add	a5,a5,a4
1c00a0c8 <hal_soc_eu_set_fc_mask+0x42> srai	a5,a5,0x5
1c00a0ca <hal_soc_eu_set_fc_mask+0x44> slli	a5,a5,0x2
1c00a0cc <hal_soc_eu_set_fc_mask+0x46> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:143
	soc_eu_fc_write(soc_eu_fc_read(reg_offset) & ~(1 << shift), reg_offset);
1c00a0d0 <hal_soc_eu_set_fc_mask+0x4a> lw	a0,-24(s0)
1c00a0d4 <hal_soc_eu_set_fc_mask+0x4e> jal	1c00a05e <soc_eu_fc_read>
1c00a0d6 <hal_soc_eu_set_fc_mask+0x50> mv	a3,a0
1c00a0d8 <hal_soc_eu_set_fc_mask+0x52> li	a4,1
1c00a0da <hal_soc_eu_set_fc_mask+0x54> lw	a5,-20(s0)
1c00a0de <hal_soc_eu_set_fc_mask+0x58> sll	a5,a4,a5
1c00a0e2 <hal_soc_eu_set_fc_mask+0x5c> not	a5,a5
1c00a0e6 <hal_soc_eu_set_fc_mask+0x60> and	a5,a5,a3
1c00a0e8 <hal_soc_eu_set_fc_mask+0x62> lw	a1,-24(s0)
1c00a0ec <hal_soc_eu_set_fc_mask+0x66> mv	a0,a5
1c00a0ee <hal_soc_eu_set_fc_mask+0x68> jal	1c00a030 <soc_eu_fc_write>
1c00a0f0 <hal_soc_eu_set_fc_mask+0x6a> j	1c00a0f4 <hal_soc_eu_set_fc_mask+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:139
		return;
1c00a0f2 <hal_soc_eu_set_fc_mask+0x6c> nop
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:144
}
1c00a0f4 <hal_soc_eu_set_fc_mask+0x6e> lw	ra,44(sp)
1c00a0f6 <hal_soc_eu_set_fc_mask+0x70> lw	s0,40(sp)
1c00a0f8 <hal_soc_eu_set_fc_mask+0x72> addi	sp,sp,48
1c00a0fa <hal_soc_eu_set_fc_mask+0x74> ret
spi_tx_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:41
SemaphoreHandle_t  qspim_semaphores_cmd[N_QSPIM];
SemaphoreHandle_t  qspim_semaphores_eot[N_QSPIM];

uint8_t aucclkdiv;
static unsigned int isr_count;
void spi_tx_isr() {
1c00a0fc <spi_tx_isr> addi	sp,sp,-16
1c00a0fe <spi_tx_isr+0x2> sw	s0,12(sp)
1c00a100 <spi_tx_isr+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:42
	isr_count += 0x1;
1c00a102 <spi_tx_isr+0x6> lui	a5,0x1c017
1c00a106 <spi_tx_isr+0xa> lw	a5,-1100(a5) # 1c016bb4 <isr_count>
1c00a10a <spi_tx_isr+0xe> addi	a4,a5,1
1c00a10e <spi_tx_isr+0x12> lui	a5,0x1c017
1c00a112 <spi_tx_isr+0x16> sw	a4,-1100(a5) # 1c016bb4 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:43
}
1c00a116 <spi_tx_isr+0x1a> nop
1c00a118 <spi_tx_isr+0x1c> lw	s0,12(sp)
1c00a11a <spi_tx_isr+0x1e> addi	sp,sp,16
1c00a11c <spi_tx_isr+0x20> ret
spi_rx_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:44
void spi_rx_isr() {
1c00a11e <spi_rx_isr> addi	sp,sp,-16
1c00a120 <spi_rx_isr+0x2> sw	s0,12(sp)
1c00a122 <spi_rx_isr+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:45
	isr_count += 0x100;
1c00a124 <spi_rx_isr+0x6> lui	a5,0x1c017
1c00a128 <spi_rx_isr+0xa> lw	a5,-1100(a5) # 1c016bb4 <isr_count>
1c00a12c <spi_rx_isr+0xe> addi	a4,a5,256
1c00a130 <spi_rx_isr+0x12> lui	a5,0x1c017
1c00a134 <spi_rx_isr+0x16> sw	a4,-1100(a5) # 1c016bb4 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:46
}
1c00a138 <spi_rx_isr+0x1a> nop
1c00a13a <spi_rx_isr+0x1c> lw	s0,12(sp)
1c00a13c <spi_rx_isr+0x1e> addi	sp,sp,16
1c00a13e <spi_rx_isr+0x20> ret
spi_cmd_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:47
void spi_cmd_isr() {
1c00a140 <spi_cmd_isr> addi	sp,sp,-16
1c00a142 <spi_cmd_isr+0x2> sw	s0,12(sp)
1c00a144 <spi_cmd_isr+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:48
	isr_count += 0x10000;
1c00a146 <spi_cmd_isr+0x6> lui	a5,0x1c017
1c00a14a <spi_cmd_isr+0xa> lw	a4,-1100(a5) # 1c016bb4 <isr_count>
1c00a14e <spi_cmd_isr+0xe> lui	a5,0x10
1c00a150 <spi_cmd_isr+0x10> add	a4,a4,a5
1c00a152 <spi_cmd_isr+0x12> lui	a5,0x1c017
1c00a156 <spi_cmd_isr+0x16> sw	a4,-1100(a5) # 1c016bb4 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:49
}
1c00a15a <spi_cmd_isr+0x1a> nop
1c00a15c <spi_cmd_isr+0x1c> lw	s0,12(sp)
1c00a15e <spi_cmd_isr+0x1e> addi	sp,sp,16
1c00a160 <spi_cmd_isr+0x20> ret
spi_eot_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:50
void spi_eot_isr() {
1c00a162 <spi_eot_isr> addi	sp,sp,-16
1c00a164 <spi_eot_isr+0x2> sw	s0,12(sp)
1c00a166 <spi_eot_isr+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:51
	isr_count += 0x1000000;
1c00a168 <spi_eot_isr+0x6> lui	a5,0x1c017
1c00a16c <spi_eot_isr+0xa> lw	a4,-1100(a5) # 1c016bb4 <isr_count>
1c00a170 <spi_eot_isr+0xe> lui	a5,0x1000
1c00a174 <spi_eot_isr+0x12> add	a4,a4,a5
1c00a176 <spi_eot_isr+0x14> lui	a5,0x1c017
1c00a17a <spi_eot_isr+0x18> sw	a4,-1100(a5) # 1c016bb4 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:52
}
1c00a17e <spi_eot_isr+0x1c> nop
1c00a180 <spi_eot_isr+0x1e> lw	s0,12(sp)
1c00a182 <spi_eot_isr+0x20> addi	sp,sp,16
1c00a184 <spi_eot_isr+0x22> ret
udma_qspim_open():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:54

uint16_t udma_qspim_open (uint8_t qspim_id, uint32_t clk_freq) {
1c00a186 <udma_qspim_open> addi	sp,sp,-48
1c00a188 <udma_qspim_open+0x2> sw	ra,44(sp)
1c00a18a <udma_qspim_open+0x4> sw	s0,40(sp)
1c00a18c <udma_qspim_open+0x6> addi	s0,sp,48
1c00a18e <udma_qspim_open+0x8> mv	a5,a0
1c00a190 <udma_qspim_open+0xa> sw	a1,-40(s0)
1c00a194 <udma_qspim_open+0xe> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:55
	volatile UdmaCtrl_t*		pudma_ctrl = (UdmaCtrl_t*)UDMA_CH_ADDR_CTRL;
1c00a198 <udma_qspim_open+0x12> lui	a5,0x1a102
1c00a19c <udma_qspim_open+0x16> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:56
	UdmaQspi_t*					pqspim_regs = (UdmaQspi_t*)(UDMA_CH_ADDR_QSPIM + qspim_id * UDMA_CH_SIZE);
1c00a1a0 <udma_qspim_open+0x1a> lbu	a4,-33(s0)
1c00a1a4 <udma_qspim_open+0x1e> lui	a5,0x342
1c00a1a8 <udma_qspim_open+0x22> addi	a5,a5,67 # 00342043 <__stack_size+0x341843>
1c00a1ac <udma_qspim_open+0x26> add	a5,a5,a4
1c00a1ae <udma_qspim_open+0x28> slli	a5,a5,0x7
1c00a1b0 <udma_qspim_open+0x2a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:60
	uint32_t					clk_divisor;

	/* See if already initialized */
	if (qspim_semaphores_rx[qspim_id] != NULL || qspim_semaphores_tx[qspim_id] != NULL) {
1c00a1b4 <udma_qspim_open+0x2e> lbu	a5,-33(s0)
1c00a1b8 <udma_qspim_open+0x32> lui	a4,0x1c017
1c00a1bc <udma_qspim_open+0x36> addi	a4,a4,-948 # 1c016c4c <qspim_semaphores_rx>
1c00a1c0 <udma_qspim_open+0x3a> slli	a5,a5,0x2
1c00a1c2 <udma_qspim_open+0x3c> add	a5,a5,a4
1c00a1c4 <udma_qspim_open+0x3e> lw	a5,0(a5)
1c00a1c6 <udma_qspim_open+0x40> bnez	a5,1c00a1dc <udma_qspim_open+0x56>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:60 (discriminator 1)
1c00a1c8 <udma_qspim_open+0x42> lbu	a5,-33(s0)
1c00a1cc <udma_qspim_open+0x46> lui	a4,0x1c017
1c00a1d0 <udma_qspim_open+0x4a> addi	a4,a4,-956 # 1c016c44 <qspim_semaphores_tx>
1c00a1d4 <udma_qspim_open+0x4e> slli	a5,a5,0x2
1c00a1d6 <udma_qspim_open+0x50> add	a5,a5,a4
1c00a1d8 <udma_qspim_open+0x52> lw	a5,0(a5)
1c00a1da <udma_qspim_open+0x54> beqz	a5,1c00a1e0 <udma_qspim_open+0x5a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:61
		return 1;
1c00a1dc <udma_qspim_open+0x56> li	a5,1
1c00a1de <udma_qspim_open+0x58> j	1c00a45c <udma_qspim_open+0x2d6>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:64
	}
	/* Enable reset and enable uart clock */
	if( qspim_id == 0 )
1c00a1e0 <udma_qspim_open+0x5a> lbu	a5,-33(s0)
1c00a1e4 <udma_qspim_open+0x5e> bnez	a5,1c00a218 <udma_qspim_open+0x92>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:66
	{
		pudma_ctrl->reg_rst |= ( UDMA_CTRL_QSPIM0_CLKEN ) ;
1c00a1e6 <udma_qspim_open+0x60> lw	a5,-20(s0)
1c00a1ea <udma_qspim_open+0x64> lw	a5,8(a5)
1c00a1ec <udma_qspim_open+0x66> ori	a4,a5,4
1c00a1f0 <udma_qspim_open+0x6a> lw	a5,-20(s0)
1c00a1f4 <udma_qspim_open+0x6e> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:67
		pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM0_CLKEN);
1c00a1f6 <udma_qspim_open+0x70> lw	a5,-20(s0)
1c00a1fa <udma_qspim_open+0x74> lw	a5,8(a5)
1c00a1fc <udma_qspim_open+0x76> andi	a4,a5,-5
1c00a200 <udma_qspim_open+0x7a> lw	a5,-20(s0)
1c00a204 <udma_qspim_open+0x7e> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:68
		pudma_ctrl->reg_cg |= (UDMA_CTRL_QSPIM0_CLKEN );
1c00a206 <udma_qspim_open+0x80> lw	a5,-20(s0)
1c00a20a <udma_qspim_open+0x84> lw	a5,0(a5)
1c00a20c <udma_qspim_open+0x86> ori	a4,a5,4
1c00a210 <udma_qspim_open+0x8a> lw	a5,-20(s0)
1c00a214 <udma_qspim_open+0x8e> sw	a4,0(a5)
1c00a216 <udma_qspim_open+0x90> j	1c00a252 <udma_qspim_open+0xcc>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:70
	}
	else if( qspim_id == 1 )
1c00a218 <udma_qspim_open+0x92> lbu	a4,-33(s0)
1c00a21c <udma_qspim_open+0x96> li	a5,1
1c00a21e <udma_qspim_open+0x98> bne	a4,a5,1c00a252 <udma_qspim_open+0xcc>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:73
	{
#if(NEW_BIT_FILE == 1 )
		pudma_ctrl->reg_rst |= ( UDMA_CTRL_QSPIM1_CLKEN ) ;
1c00a222 <udma_qspim_open+0x9c> lw	a5,-20(s0)
1c00a226 <udma_qspim_open+0xa0> lw	a5,8(a5)
1c00a228 <udma_qspim_open+0xa2> ori	a4,a5,8
1c00a22c <udma_qspim_open+0xa6> lw	a5,-20(s0)
1c00a230 <udma_qspim_open+0xaa> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:74
		pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM1_CLKEN);
1c00a232 <udma_qspim_open+0xac> lw	a5,-20(s0)
1c00a236 <udma_qspim_open+0xb0> lw	a5,8(a5)
1c00a238 <udma_qspim_open+0xb2> andi	a4,a5,-9
1c00a23c <udma_qspim_open+0xb6> lw	a5,-20(s0)
1c00a240 <udma_qspim_open+0xba> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:75
		pudma_ctrl->reg_cg |= (UDMA_CTRL_QSPIM1_CLKEN );
1c00a242 <udma_qspim_open+0xbc> lw	a5,-20(s0)
1c00a246 <udma_qspim_open+0xc0> lw	a5,0(a5)
1c00a248 <udma_qspim_open+0xc2> ori	a4,a5,8
1c00a24c <udma_qspim_open+0xc6> lw	a5,-20(s0)
1c00a250 <udma_qspim_open+0xca> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:82
	}


	/* Set semaphore */
	SemaphoreHandle_t shSemaphoreHandle;		// FreeRTOS.h has a define for xSemaphoreHandle, so can't use that
	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a252 <udma_qspim_open+0xcc> li	a2,3
1c00a254 <udma_qspim_open+0xce> li	a1,0
1c00a256 <udma_qspim_open+0xd0> li	a0,1
1c00a258 <udma_qspim_open+0xd2> jal	ra,1c008704 <xQueueGenericCreate>
1c00a25c <udma_qspim_open+0xd6> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:83
	configASSERT(shSemaphoreHandle);
1c00a260 <udma_qspim_open+0xda> lw	a5,-28(s0)
1c00a264 <udma_qspim_open+0xde> bnez	a5,1c00a26c <udma_qspim_open+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:83 (discriminator 1)
1c00a266 <udma_qspim_open+0xe0> csrci	mstatus,8
1c00a26a <udma_qspim_open+0xe4> j	1c00a26a <udma_qspim_open+0xe4>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:84
	xSemaphoreGive(shSemaphoreHandle);
1c00a26c <udma_qspim_open+0xe6> li	a3,0
1c00a26e <udma_qspim_open+0xe8> li	a2,0
1c00a270 <udma_qspim_open+0xea> li	a1,0
1c00a272 <udma_qspim_open+0xec> lw	a0,-28(s0)
1c00a276 <udma_qspim_open+0xf0> jal	ra,1c0087f4 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:85
	qspim_semaphores_rx[qspim_id] = shSemaphoreHandle;
1c00a27a <udma_qspim_open+0xf4> lbu	a5,-33(s0)
1c00a27e <udma_qspim_open+0xf8> lui	a4,0x1c017
1c00a282 <udma_qspim_open+0xfc> addi	a4,a4,-948 # 1c016c4c <qspim_semaphores_rx>
1c00a286 <udma_qspim_open+0x100> slli	a5,a5,0x2
1c00a288 <udma_qspim_open+0x102> add	a5,a5,a4
1c00a28a <udma_qspim_open+0x104> lw	a4,-28(s0)
1c00a28e <udma_qspim_open+0x108> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:87

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a290 <udma_qspim_open+0x10a> li	a2,3
1c00a292 <udma_qspim_open+0x10c> li	a1,0
1c00a294 <udma_qspim_open+0x10e> li	a0,1
1c00a296 <udma_qspim_open+0x110> jal	ra,1c008704 <xQueueGenericCreate>
1c00a29a <udma_qspim_open+0x114> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:88
	configASSERT(shSemaphoreHandle);
1c00a29e <udma_qspim_open+0x118> lw	a5,-28(s0)
1c00a2a2 <udma_qspim_open+0x11c> bnez	a5,1c00a2aa <udma_qspim_open+0x124>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:88 (discriminator 1)
1c00a2a4 <udma_qspim_open+0x11e> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:88 (discriminator 2)
1c00a2a8 <udma_qspim_open+0x122> j	1c00a2a8 <udma_qspim_open+0x122>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:89
	xSemaphoreGive(shSemaphoreHandle);
1c00a2aa <udma_qspim_open+0x124> li	a3,0
1c00a2ac <udma_qspim_open+0x126> li	a2,0
1c00a2ae <udma_qspim_open+0x128> li	a1,0
1c00a2b0 <udma_qspim_open+0x12a> lw	a0,-28(s0)
1c00a2b4 <udma_qspim_open+0x12e> jal	ra,1c0087f4 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:90
	qspim_semaphores_tx[qspim_id] = shSemaphoreHandle;
1c00a2b8 <udma_qspim_open+0x132> lbu	a5,-33(s0)
1c00a2bc <udma_qspim_open+0x136> lui	a4,0x1c017
1c00a2c0 <udma_qspim_open+0x13a> addi	a4,a4,-956 # 1c016c44 <qspim_semaphores_tx>
1c00a2c4 <udma_qspim_open+0x13e> slli	a5,a5,0x2
1c00a2c6 <udma_qspim_open+0x140> add	a5,a5,a4
1c00a2c8 <udma_qspim_open+0x142> lw	a4,-28(s0)
1c00a2cc <udma_qspim_open+0x146> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:92

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a2ce <udma_qspim_open+0x148> li	a2,3
1c00a2d0 <udma_qspim_open+0x14a> li	a1,0
1c00a2d2 <udma_qspim_open+0x14c> li	a0,1
1c00a2d4 <udma_qspim_open+0x14e> jal	ra,1c008704 <xQueueGenericCreate>
1c00a2d8 <udma_qspim_open+0x152> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:93
	configASSERT(shSemaphoreHandle);
1c00a2dc <udma_qspim_open+0x156> lw	a5,-28(s0)
1c00a2e0 <udma_qspim_open+0x15a> bnez	a5,1c00a2e8 <udma_qspim_open+0x162>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:93 (discriminator 1)
1c00a2e2 <udma_qspim_open+0x15c> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:93 (discriminator 3)
1c00a2e6 <udma_qspim_open+0x160> j	1c00a2e6 <udma_qspim_open+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:94
	xSemaphoreGive(shSemaphoreHandle);
1c00a2e8 <udma_qspim_open+0x162> li	a3,0
1c00a2ea <udma_qspim_open+0x164> li	a2,0
1c00a2ec <udma_qspim_open+0x166> li	a1,0
1c00a2ee <udma_qspim_open+0x168> lw	a0,-28(s0)
1c00a2f2 <udma_qspim_open+0x16c> jal	ra,1c0087f4 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:95
	qspim_semaphores_cmd[qspim_id] = shSemaphoreHandle;
1c00a2f6 <udma_qspim_open+0x170> lbu	a5,-33(s0)
1c00a2fa <udma_qspim_open+0x174> lui	a4,0x1c017
1c00a2fe <udma_qspim_open+0x178> addi	a4,a4,-940 # 1c016c54 <qspim_semaphores_cmd>
1c00a302 <udma_qspim_open+0x17c> slli	a5,a5,0x2
1c00a304 <udma_qspim_open+0x17e> add	a5,a5,a4
1c00a306 <udma_qspim_open+0x180> lw	a4,-28(s0)
1c00a30a <udma_qspim_open+0x184> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:97

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a30c <udma_qspim_open+0x186> li	a2,3
1c00a30e <udma_qspim_open+0x188> li	a1,0
1c00a310 <udma_qspim_open+0x18a> li	a0,1
1c00a312 <udma_qspim_open+0x18c> jal	ra,1c008704 <xQueueGenericCreate>
1c00a316 <udma_qspim_open+0x190> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:98
	configASSERT(shSemaphoreHandle);
1c00a31a <udma_qspim_open+0x194> lw	a5,-28(s0)
1c00a31e <udma_qspim_open+0x198> bnez	a5,1c00a326 <udma_qspim_open+0x1a0>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:98 (discriminator 1)
1c00a320 <udma_qspim_open+0x19a> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:98 (discriminator 4)
1c00a324 <udma_qspim_open+0x19e> j	1c00a324 <udma_qspim_open+0x19e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:99
	xSemaphoreGive(shSemaphoreHandle);
1c00a326 <udma_qspim_open+0x1a0> li	a3,0
1c00a328 <udma_qspim_open+0x1a2> li	a2,0
1c00a32a <udma_qspim_open+0x1a4> li	a1,0
1c00a32c <udma_qspim_open+0x1a6> lw	a0,-28(s0)
1c00a330 <udma_qspim_open+0x1aa> jal	ra,1c0087f4 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:100
	qspim_semaphores_eot[qspim_id] = shSemaphoreHandle;
1c00a334 <udma_qspim_open+0x1ae> lbu	a5,-33(s0)
1c00a338 <udma_qspim_open+0x1b2> lui	a4,0x1c017
1c00a33c <udma_qspim_open+0x1b6> addi	a4,a4,-968 # 1c016c38 <qspim_semaphores_eot>
1c00a340 <udma_qspim_open+0x1ba> slli	a5,a5,0x2
1c00a342 <udma_qspim_open+0x1bc> add	a5,a5,a4
1c00a344 <udma_qspim_open+0x1be> lw	a4,-28(s0)
1c00a348 <udma_qspim_open+0x1c2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:103

	/* Set handlers. */
	isr_count = 0;
1c00a34a <udma_qspim_open+0x1c4> lui	a5,0x1c017
1c00a34e <udma_qspim_open+0x1c8> sw	zero,-1100(a5) # 1c016bb4 <isr_count>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:104
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_RX(qspim_id), spi_rx_isr, qspim_semaphores_rx[qspim_id]);
1c00a352 <udma_qspim_open+0x1cc> lbu	a5,-33(s0)
1c00a356 <udma_qspim_open+0x1d0> addi	a5,a5,2
1c00a358 <udma_qspim_open+0x1d2> slli	a5,a5,0x2
1c00a35a <udma_qspim_open+0x1d4> mv	a3,a5
1c00a35c <udma_qspim_open+0x1d6> lbu	a5,-33(s0)
1c00a360 <udma_qspim_open+0x1da> lui	a4,0x1c017
1c00a364 <udma_qspim_open+0x1de> addi	a4,a4,-948 # 1c016c4c <qspim_semaphores_rx>
1c00a368 <udma_qspim_open+0x1e2> slli	a5,a5,0x2
1c00a36a <udma_qspim_open+0x1e4> add	a5,a5,a4
1c00a36c <udma_qspim_open+0x1e6> lw	a5,0(a5)
1c00a36e <udma_qspim_open+0x1e8> mv	a2,a5
1c00a370 <udma_qspim_open+0x1ea> lui	a5,0x1c00a
1c00a374 <udma_qspim_open+0x1ee> addi	a1,a5,286 # 1c00a11e <spi_rx_isr>
1c00a378 <udma_qspim_open+0x1f2> mv	a0,a3
1c00a37a <udma_qspim_open+0x1f4> jal	ra,1c00996c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:105
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_TX(qspim_id), spi_tx_isr, qspim_semaphores_tx[qspim_id]);
1c00a37e <udma_qspim_open+0x1f8> lbu	a5,-33(s0)
1c00a382 <udma_qspim_open+0x1fc> addi	a5,a5,2
1c00a384 <udma_qspim_open+0x1fe> slli	a5,a5,0x2
1c00a386 <udma_qspim_open+0x200> addi	a3,a5,1
1c00a38a <udma_qspim_open+0x204> lbu	a5,-33(s0)
1c00a38e <udma_qspim_open+0x208> lui	a4,0x1c017
1c00a392 <udma_qspim_open+0x20c> addi	a4,a4,-956 # 1c016c44 <qspim_semaphores_tx>
1c00a396 <udma_qspim_open+0x210> slli	a5,a5,0x2
1c00a398 <udma_qspim_open+0x212> add	a5,a5,a4
1c00a39a <udma_qspim_open+0x214> lw	a5,0(a5)
1c00a39c <udma_qspim_open+0x216> mv	a2,a5
1c00a39e <udma_qspim_open+0x218> lui	a5,0x1c00a
1c00a3a2 <udma_qspim_open+0x21c> addi	a1,a5,252 # 1c00a0fc <spi_tx_isr>
1c00a3a6 <udma_qspim_open+0x220> mv	a0,a3
1c00a3a8 <udma_qspim_open+0x222> jal	ra,1c00996c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:106
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_CMD(qspim_id), spi_cmd_isr, qspim_semaphores_cmd[qspim_id]);
1c00a3ac <udma_qspim_open+0x226> lbu	a5,-33(s0)
1c00a3b0 <udma_qspim_open+0x22a> addi	a5,a5,2
1c00a3b2 <udma_qspim_open+0x22c> slli	a5,a5,0x2
1c00a3b4 <udma_qspim_open+0x22e> addi	a5,a5,2
1c00a3b6 <udma_qspim_open+0x230> mv	a3,a5
1c00a3b8 <udma_qspim_open+0x232> lbu	a5,-33(s0)
1c00a3bc <udma_qspim_open+0x236> lui	a4,0x1c017
1c00a3c0 <udma_qspim_open+0x23a> addi	a4,a4,-940 # 1c016c54 <qspim_semaphores_cmd>
1c00a3c4 <udma_qspim_open+0x23e> slli	a5,a5,0x2
1c00a3c6 <udma_qspim_open+0x240> add	a5,a5,a4
1c00a3c8 <udma_qspim_open+0x242> lw	a5,0(a5)
1c00a3ca <udma_qspim_open+0x244> mv	a2,a5
1c00a3cc <udma_qspim_open+0x246> lui	a5,0x1c00a
1c00a3d0 <udma_qspim_open+0x24a> addi	a1,a5,320 # 1c00a140 <spi_cmd_isr>
1c00a3d4 <udma_qspim_open+0x24e> mv	a0,a3
1c00a3d6 <udma_qspim_open+0x250> jal	ra,1c00996c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:107
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_EOT(qspim_id), spi_eot_isr, qspim_semaphores_eot[qspim_id]);
1c00a3da <udma_qspim_open+0x254> lbu	a5,-33(s0)
1c00a3de <udma_qspim_open+0x258> addi	a5,a5,2
1c00a3e0 <udma_qspim_open+0x25a> slli	a5,a5,0x2
1c00a3e2 <udma_qspim_open+0x25c> addi	a5,a5,3
1c00a3e4 <udma_qspim_open+0x25e> mv	a3,a5
1c00a3e6 <udma_qspim_open+0x260> lbu	a5,-33(s0)
1c00a3ea <udma_qspim_open+0x264> lui	a4,0x1c017
1c00a3ee <udma_qspim_open+0x268> addi	a4,a4,-968 # 1c016c38 <qspim_semaphores_eot>
1c00a3f2 <udma_qspim_open+0x26c> slli	a5,a5,0x2
1c00a3f4 <udma_qspim_open+0x26e> add	a5,a5,a4
1c00a3f6 <udma_qspim_open+0x270> lw	a5,0(a5)
1c00a3f8 <udma_qspim_open+0x272> mv	a2,a5
1c00a3fa <udma_qspim_open+0x274> lui	a5,0x1c00a
1c00a3fe <udma_qspim_open+0x278> addi	a1,a5,354 # 1c00a162 <spi_eot_isr>
1c00a402 <udma_qspim_open+0x27c> mv	a0,a3
1c00a404 <udma_qspim_open+0x27e> jal	ra,1c00996c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:110

	/* Enable SOC events propagation to FC. */
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_SPIM_RX(qspim_id));
1c00a408 <udma_qspim_open+0x282> lbu	a5,-33(s0)
1c00a40c <udma_qspim_open+0x286> addi	a5,a5,2
1c00a40e <udma_qspim_open+0x288> slli	a5,a5,0x2
1c00a410 <udma_qspim_open+0x28a> mv	a0,a5
1c00a412 <udma_qspim_open+0x28c> jal	1c00a086 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:111
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_SPIM_TX(qspim_id));
1c00a414 <udma_qspim_open+0x28e> lbu	a5,-33(s0)
1c00a418 <udma_qspim_open+0x292> addi	a5,a5,2
1c00a41a <udma_qspim_open+0x294> slli	a5,a5,0x2
1c00a41c <udma_qspim_open+0x296> addi	a5,a5,1
1c00a41e <udma_qspim_open+0x298> mv	a0,a5
1c00a420 <udma_qspim_open+0x29a> jal	1c00a086 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:112
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_SPIM_CMD(qspim_id));
1c00a422 <udma_qspim_open+0x29c> lbu	a5,-33(s0)
1c00a426 <udma_qspim_open+0x2a0> addi	a5,a5,2
1c00a428 <udma_qspim_open+0x2a2> slli	a5,a5,0x2
1c00a42a <udma_qspim_open+0x2a4> addi	a5,a5,2
1c00a42c <udma_qspim_open+0x2a6> mv	a0,a5
1c00a42e <udma_qspim_open+0x2a8> jal	1c00a086 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:113
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_SPIM_EOT(qspim_id));
1c00a430 <udma_qspim_open+0x2aa> lbu	a5,-33(s0)
1c00a434 <udma_qspim_open+0x2ae> addi	a5,a5,2
1c00a436 <udma_qspim_open+0x2b0> slli	a5,a5,0x2
1c00a438 <udma_qspim_open+0x2b2> addi	a5,a5,3
1c00a43a <udma_qspim_open+0x2b4> mv	a0,a5
1c00a43c <udma_qspim_open+0x2b6> jal	1c00a086 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:116

	/* configure */
	aucclkdiv = 5000000/clk_freq;
1c00a43e <udma_qspim_open+0x2b8> lui	a5,0x4c5
1c00a442 <udma_qspim_open+0x2bc> addi	a4,a5,-1216 # 004c4b40 <__stack_size+0x4c4340>
1c00a446 <udma_qspim_open+0x2c0> lw	a5,-40(s0)
1c00a44a <udma_qspim_open+0x2c4> divu	a5,a4,a5
1c00a44e <udma_qspim_open+0x2c8> andi	a4,a5,255
1c00a452 <udma_qspim_open+0x2cc> lui	a5,0x1c017
1c00a456 <udma_qspim_open+0x2d0> sb	a4,-960(a5) # 1c016c40 <aucclkdiv>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:118

	return 0;
1c00a45a <udma_qspim_open+0x2d4> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:119
}
1c00a45c <udma_qspim_open+0x2d6> mv	a0,a5
1c00a45e <udma_qspim_open+0x2d8> lw	ra,44(sp)
1c00a460 <udma_qspim_open+0x2da> lw	s0,40(sp)
1c00a462 <udma_qspim_open+0x2dc> addi	sp,sp,48
1c00a464 <udma_qspim_open+0x2de> ret
udma_qspim_control():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:121

uint16_t udma_qspim_control(uint8_t qspim_id, udma_qspim_control_type_t control_type, void* pparam) {
1c00a466 <udma_qspim_control> addi	sp,sp,-48
1c00a468 <udma_qspim_control+0x2> sw	s0,44(sp)
1c00a46a <udma_qspim_control+0x4> addi	s0,sp,48
1c00a46c <udma_qspim_control+0x6> mv	a5,a0
1c00a46e <udma_qspim_control+0x8> sw	a1,-40(s0)
1c00a472 <udma_qspim_control+0xc> sw	a2,-44(s0)
1c00a476 <udma_qspim_control+0x10> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:122
	volatile UdmaCtrl_t*		pudma_ctrl = (UdmaCtrl_t*)UDMA_CH_ADDR_CTRL;
1c00a47a <udma_qspim_control+0x14> lui	a5,0x1a102
1c00a47e <udma_qspim_control+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:123
	UdmaQspi_t*					pqspim_regs = (UdmaQspi_t*)(UDMA_CH_ADDR_QSPIM + qspim_id * UDMA_CH_SIZE);
1c00a482 <udma_qspim_control+0x1c> lbu	a4,-33(s0)
1c00a486 <udma_qspim_control+0x20> lui	a5,0x342
1c00a48a <udma_qspim_control+0x24> addi	a5,a5,67 # 00342043 <__stack_size+0x341843>
1c00a48e <udma_qspim_control+0x28> add	a5,a5,a4
1c00a490 <udma_qspim_control+0x2a> slli	a5,a5,0x7
1c00a492 <udma_qspim_control+0x2c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:125

	switch(control_type) {
1c00a496 <udma_qspim_control+0x30> lw	a5,-40(s0)
1c00a49a <udma_qspim_control+0x34> bnez	a5,1c00a4f0 <udma_qspim_control+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:127
	case kQSPImReset:
		if( qspim_id == 0 )
1c00a49c <udma_qspim_control+0x36> lbu	a5,-33(s0)
1c00a4a0 <udma_qspim_control+0x3a> bnez	a5,1c00a4c4 <udma_qspim_control+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:129
		{
			pudma_ctrl->reg_rst |= (UDMA_CTRL_QSPIM0_CLKEN);
1c00a4a2 <udma_qspim_control+0x3c> lw	a5,-20(s0)
1c00a4a6 <udma_qspim_control+0x40> lw	a5,8(a5)
1c00a4a8 <udma_qspim_control+0x42> ori	a4,a5,4
1c00a4ac <udma_qspim_control+0x46> lw	a5,-20(s0)
1c00a4b0 <udma_qspim_control+0x4a> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:130
			pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM0_CLKEN);
1c00a4b2 <udma_qspim_control+0x4c> lw	a5,-20(s0)
1c00a4b6 <udma_qspim_control+0x50> lw	a5,8(a5)
1c00a4b8 <udma_qspim_control+0x52> andi	a4,a5,-5
1c00a4bc <udma_qspim_control+0x56> lw	a5,-20(s0)
1c00a4c0 <udma_qspim_control+0x5a> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:139
#if(NEW_BIT_FILE == 1 )
			pudma_ctrl->reg_rst |= (UDMA_CTRL_QSPIM1_CLKEN);
			pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM1_CLKEN);
#endif
		}
		break;
1c00a4c2 <udma_qspim_control+0x5c> j	1c00a4f6 <udma_qspim_control+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:132
		else if( qspim_id == 1 )
1c00a4c4 <udma_qspim_control+0x5e> lbu	a4,-33(s0)
1c00a4c8 <udma_qspim_control+0x62> li	a5,1
1c00a4ca <udma_qspim_control+0x64> bne	a4,a5,1c00a4f6 <udma_qspim_control+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:135
			pudma_ctrl->reg_rst |= (UDMA_CTRL_QSPIM1_CLKEN);
1c00a4ce <udma_qspim_control+0x68> lw	a5,-20(s0)
1c00a4d2 <udma_qspim_control+0x6c> lw	a5,8(a5)
1c00a4d4 <udma_qspim_control+0x6e> ori	a4,a5,8
1c00a4d8 <udma_qspim_control+0x72> lw	a5,-20(s0)
1c00a4dc <udma_qspim_control+0x76> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:136
			pudma_ctrl->reg_rst &= ~(UDMA_CTRL_QSPIM1_CLKEN);
1c00a4de <udma_qspim_control+0x78> lw	a5,-20(s0)
1c00a4e2 <udma_qspim_control+0x7c> lw	a5,8(a5)
1c00a4e4 <udma_qspim_control+0x7e> andi	a4,a5,-9
1c00a4e8 <udma_qspim_control+0x82> lw	a5,-20(s0)
1c00a4ec <udma_qspim_control+0x86> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:139
		break;
1c00a4ee <udma_qspim_control+0x88> j	1c00a4f6 <udma_qspim_control+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:141 (discriminator 1)
	default:
		configASSERT(0);
1c00a4f0 <udma_qspim_control+0x8a> csrci	mstatus,8
1c00a4f4 <udma_qspim_control+0x8e> j	1c00a4f4 <udma_qspim_control+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:139
		break;
1c00a4f6 <udma_qspim_control+0x90> nop
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:143
	}
	return 0;
1c00a4f8 <udma_qspim_control+0x92> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:144
}
1c00a4fa <udma_qspim_control+0x94> mv	a0,a5
1c00a4fc <udma_qspim_control+0x96> lw	s0,44(sp)
1c00a4fe <udma_qspim_control+0x98> addi	sp,sp,48
1c00a500 <udma_qspim_control+0x9a> ret
udma_flash_readid():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:286

	return result;
}

static uint8_t rx_data[16];
uint32_t udma_flash_readid(uint8_t qspim_id, uint8_t cs) {
1c00a502 <udma_flash_readid> addi	sp,sp,-48
1c00a504 <udma_flash_readid+0x2> sw	s0,44(sp)
1c00a506 <udma_flash_readid+0x4> addi	s0,sp,48
1c00a508 <udma_flash_readid+0x6> mv	a5,a0
1c00a50a <udma_flash_readid+0x8> mv	a4,a1
1c00a50c <udma_flash_readid+0xa> sb	a5,-33(s0)
1c00a510 <udma_flash_readid+0xe> mv	a5,a4
1c00a512 <udma_flash_readid+0x10> sb	a5,-34(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:287
	UdmaQspi_t*	pqspim_regs = (UdmaQspi_t*)(UDMA_CH_ADDR_QSPIM + qspim_id * UDMA_CH_SIZE);
1c00a516 <udma_flash_readid+0x14> lbu	a4,-33(s0)
1c00a51a <udma_flash_readid+0x18> lui	a5,0x342
1c00a51e <udma_flash_readid+0x1c> addi	a5,a5,67 # 00342043 <__stack_size+0x341843>
1c00a522 <udma_flash_readid+0x20> add	a5,a5,a4
1c00a524 <udma_flash_readid+0x22> slli	a5,a5,0x7
1c00a526 <udma_flash_readid+0x24> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:288
	uint32_t*	pcmd = auccmd;
1c00a52a <udma_flash_readid+0x28> addi	a5,gp,-540 # 1c0117dc <auccmd>
1c00a52e <udma_flash_readid+0x2c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:289
	uint32_t result = 0;
1c00a532 <udma_flash_readid+0x30> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:291

	pqspim_regs->rx_cfg_b.en = 0;
1c00a536 <udma_flash_readid+0x34> lw	a5,-20(s0)
1c00a53a <udma_flash_readid+0x38> lbu	a4,8(a5)
1c00a53e <udma_flash_readid+0x3c> andi	a4,a4,-17
1c00a540 <udma_flash_readid+0x3e> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:292
	pqspim_regs->tx_cfg_b.en = 0;
1c00a544 <udma_flash_readid+0x42> lw	a5,-20(s0)
1c00a548 <udma_flash_readid+0x46> lbu	a4,24(a5)
1c00a54c <udma_flash_readid+0x4a> andi	a4,a4,-17
1c00a54e <udma_flash_readid+0x4c> sb	a4,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:293
	pqspim_regs->cmd_cfg_b.en = 0;
1c00a552 <udma_flash_readid+0x50> lw	a5,-20(s0)
1c00a556 <udma_flash_readid+0x54> lbu	a4,40(a5)
1c00a55a <udma_flash_readid+0x58> andi	a4,a4,-17
1c00a55c <udma_flash_readid+0x5a> sb	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:295

	pqspim_regs->rx_cfg_b.clr = 1;
1c00a560 <udma_flash_readid+0x5e> lw	a5,-20(s0)
1c00a564 <udma_flash_readid+0x62> lbu	a4,8(a5)
1c00a568 <udma_flash_readid+0x66> ori	a4,a4,64
1c00a56c <udma_flash_readid+0x6a> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:296
	pqspim_regs->tx_cfg_b.clr = 1;
1c00a570 <udma_flash_readid+0x6e> lw	a5,-20(s0)
1c00a574 <udma_flash_readid+0x72> lbu	a4,24(a5)
1c00a578 <udma_flash_readid+0x76> ori	a4,a4,64
1c00a57c <udma_flash_readid+0x7a> sb	a4,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:297
	pqspim_regs->cmd_cfg_b.clr = 1;
1c00a580 <udma_flash_readid+0x7e> lw	a5,-20(s0)
1c00a584 <udma_flash_readid+0x82> lbu	a4,40(a5)
1c00a588 <udma_flash_readid+0x86> ori	a4,a4,64
1c00a58c <udma_flash_readid+0x8a> sb	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:299

	*pcmd++ = kSPIm_Cfg | aucclkdiv;
1c00a590 <udma_flash_readid+0x8e> lui	a5,0x1c017
1c00a594 <udma_flash_readid+0x92> lbu	a3,-960(a5) # 1c016c40 <aucclkdiv>
1c00a598 <udma_flash_readid+0x96> lw	a5,-24(s0)
1c00a59c <udma_flash_readid+0x9a> addi	a4,a5,4
1c00a5a0 <udma_flash_readid+0x9e> sw	a4,-24(s0)
1c00a5a4 <udma_flash_readid+0xa2> mv	a4,a3
1c00a5a6 <udma_flash_readid+0xa4> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:300
	*pcmd++ = kSPIm_SOT | cs;
1c00a5a8 <udma_flash_readid+0xa6> lbu	a4,-34(s0)
1c00a5ac <udma_flash_readid+0xaa> lui	a5,0x10000
1c00a5b0 <udma_flash_readid+0xae> or	a3,a4,a5
1c00a5b4 <udma_flash_readid+0xb2> lw	a5,-24(s0)
1c00a5b8 <udma_flash_readid+0xb6> addi	a4,a5,4 # 10000004 <__stack_size+0xffff804>
1c00a5bc <udma_flash_readid+0xba> sw	a4,-24(s0)
1c00a5c0 <udma_flash_readid+0xbe> mv	a4,a3
1c00a5c2 <udma_flash_readid+0xc0> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:301
	*pcmd++ = kSPIm_SendCmd | (0x7009f); // readid command
1c00a5c4 <udma_flash_readid+0xc2> lw	a5,-24(s0)
1c00a5c8 <udma_flash_readid+0xc6> addi	a4,a5,4
1c00a5cc <udma_flash_readid+0xca> sw	a4,-24(s0)
1c00a5d0 <udma_flash_readid+0xce> lui	a4,0x20070
1c00a5d4 <udma_flash_readid+0xd2> addi	a4,a4,159 # 2007009f <__l2_shared_end+0x404886f>
1c00a5d8 <udma_flash_readid+0xd6> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:302
	*pcmd++ = kSPIm_RxData | (0x00470000 | (4-1)) ; // 4 words recieved
1c00a5da <udma_flash_readid+0xd8> lw	a5,-24(s0)
1c00a5de <udma_flash_readid+0xdc> addi	a4,a5,4
1c00a5e2 <udma_flash_readid+0xe0> sw	a4,-24(s0)
1c00a5e6 <udma_flash_readid+0xe4> lui	a4,0x70470
1c00a5ea <udma_flash_readid+0xe8> addi	a4,a4,3
1c00a5ec <udma_flash_readid+0xea> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:303
	*pcmd++ = kSPIm_EOT  | 1; // generate event
1c00a5ee <udma_flash_readid+0xec> lw	a5,-24(s0)
1c00a5f2 <udma_flash_readid+0xf0> addi	a4,a5,4
1c00a5f6 <udma_flash_readid+0xf4> sw	a4,-24(s0)
1c00a5fa <udma_flash_readid+0xf8> lui	a4,0x90000
1c00a5fe <udma_flash_readid+0xfc> addi	a4,a4,1
1c00a600 <udma_flash_readid+0xfe> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:305

	pqspim_regs->rx_saddr = &rx_data;
1c00a602 <udma_flash_readid+0x100> addi	a4,gp,-476 # 1c01181c <rx_data>
1c00a606 <udma_flash_readid+0x104> lw	a5,-20(s0)
1c00a60a <udma_flash_readid+0x108> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:306
	pqspim_regs->rx_size = 4;
1c00a60c <udma_flash_readid+0x10a> lw	a5,-20(s0)
1c00a610 <udma_flash_readid+0x10e> li	a4,4
1c00a612 <udma_flash_readid+0x110> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:307
	pqspim_regs->rx_cfg_b.en = 1;
1c00a614 <udma_flash_readid+0x112> lw	a5,-20(s0)
1c00a618 <udma_flash_readid+0x116> lbu	a4,8(a5)
1c00a61c <udma_flash_readid+0x11a> ori	a4,a4,16
1c00a620 <udma_flash_readid+0x11e> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:309

	pqspim_regs->cmd_saddr = auccmd;
1c00a624 <udma_flash_readid+0x122> addi	a4,gp,-540 # 1c0117dc <auccmd>
1c00a628 <udma_flash_readid+0x126> lw	a5,-20(s0)
1c00a62c <udma_flash_readid+0x12a> sw	a4,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:310
	pqspim_regs->cmd_size = (uint32_t)(pcmd - auccmd)*4;
1c00a62e <udma_flash_readid+0x12c> lw	a4,-24(s0)
1c00a632 <udma_flash_readid+0x130> addi	a5,gp,-540 # 1c0117dc <auccmd>
1c00a636 <udma_flash_readid+0x134> sub	a5,a4,a5
1c00a63a <udma_flash_readid+0x138> mv	a4,a5
1c00a63c <udma_flash_readid+0x13a> lw	a5,-20(s0)
1c00a640 <udma_flash_readid+0x13e> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:311
	pqspim_regs->cmd_cfg_b.en = 1;
1c00a642 <udma_flash_readid+0x140> lw	a5,-20(s0)
1c00a646 <udma_flash_readid+0x144> lbu	a4,40(a5)
1c00a64a <udma_flash_readid+0x148> ori	a4,a4,16
1c00a64e <udma_flash_readid+0x14c> sb	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:313

	while (pqspim_regs->rx_size != 0) {}
1c00a652 <udma_flash_readid+0x150> nop
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:313 (discriminator 1)
1c00a654 <udma_flash_readid+0x152> lw	a5,-20(s0)
1c00a658 <udma_flash_readid+0x156> lw	a5,4(a5)
1c00a65a <udma_flash_readid+0x158> bnez	a5,1c00a654 <udma_flash_readid+0x152>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:315

	result = *(uint32_t *) rx_data;
1c00a65c <udma_flash_readid+0x15a> addi	a5,gp,-476 # 1c01181c <rx_data>
1c00a660 <udma_flash_readid+0x15e> lw	a5,0(a5)
1c00a662 <udma_flash_readid+0x160> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:316
	return result;
1c00a666 <udma_flash_readid+0x164> lw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_qspi_driver.c:317
}
1c00a66a <udma_flash_readid+0x168> mv	a0,a5
1c00a66c <udma_flash_readid+0x16a> lw	s0,44(sp)
1c00a66e <udma_flash_readid+0x16c> addi	sp,sp,48
1c00a670 <udma_flash_readid+0x16e> ret
writew():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:44
{
1c00a672 <writew> addi	sp,sp,-32
1c00a674 <writew+0x2> sw	s0,28(sp)
1c00a676 <writew+0x4> addi	s0,sp,32
1c00a678 <writew+0x6> sw	a0,-20(s0)
1c00a67c <writew+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:47
		     : "r"(val), "r"((volatile uint32_t *)addr));
1c00a680 <writew+0xe> lw	a4,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:45
	asm volatile("sw %0, 0(%1)"
1c00a684 <writew+0x12> lw	a5,-20(s0)
1c00a688 <writew+0x16> sw	a5,0(a4)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:48
}
1c00a68a <writew+0x18> nop
1c00a68c <writew+0x1a> lw	s0,28(sp)
1c00a68e <writew+0x1c> addi	sp,sp,32
1c00a690 <writew+0x1e> ret
readw():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:79
{
1c00a692 <readw> addi	sp,sp,-48
1c00a694 <readw+0x2> sw	s0,44(sp)
1c00a696 <readw+0x4> addi	s0,sp,48
1c00a698 <readw+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:84
		     : "r"((const volatile uint32_t *)addr));
1c00a69c <readw+0xa> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:82
	asm volatile("lw %0, 0(%1)"
1c00a6a0 <readw+0xe> lw	a5,0(a5)
1c00a6a2 <readw+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:85
	return val;
1c00a6a6 <readw+0x14> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/include/pulp_io.h:86
}
1c00a6aa <readw+0x18> mv	a0,a5
1c00a6ac <readw+0x1a> lw	s0,44(sp)
1c00a6ae <readw+0x1c> addi	sp,sp,48
1c00a6b0 <readw+0x1e> ret
soc_eu_fc_write():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:108
{
1c00a6b2 <soc_eu_fc_write> addi	sp,sp,-32
1c00a6b4 <soc_eu_fc_write+0x2> sw	ra,28(sp)
1c00a6b6 <soc_eu_fc_write+0x4> sw	s0,24(sp)
1c00a6b8 <soc_eu_fc_write+0x6> addi	s0,sp,32
1c00a6ba <soc_eu_fc_write+0x8> sw	a0,-20(s0)
1c00a6be <soc_eu_fc_write+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:109
	writew(val, (uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00a6c2 <soc_eu_fc_write+0x10> lw	a4,-24(s0)
1c00a6c6 <soc_eu_fc_write+0x14> lui	a5,0x1a106
1c00a6ca <soc_eu_fc_write+0x18> addi	a5,a5,4
1c00a6cc <soc_eu_fc_write+0x1a> add	a5,a5,a4
1c00a6ce <soc_eu_fc_write+0x1c> mv	a1,a5
1c00a6d0 <soc_eu_fc_write+0x1e> lw	a0,-20(s0)
1c00a6d4 <soc_eu_fc_write+0x22> jal	1c00a672 <writew>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:110
}
1c00a6d6 <soc_eu_fc_write+0x24> nop
1c00a6d8 <soc_eu_fc_write+0x26> lw	ra,28(sp)
1c00a6da <soc_eu_fc_write+0x28> lw	s0,24(sp)
1c00a6dc <soc_eu_fc_write+0x2a> addi	sp,sp,32
1c00a6de <soc_eu_fc_write+0x2c> ret
soc_eu_fc_read():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:113
{
1c00a6e0 <soc_eu_fc_read> addi	sp,sp,-32
1c00a6e2 <soc_eu_fc_read+0x2> sw	ra,28(sp)
1c00a6e4 <soc_eu_fc_read+0x4> sw	s0,24(sp)
1c00a6e6 <soc_eu_fc_read+0x6> addi	s0,sp,32
1c00a6e8 <soc_eu_fc_read+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:114
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c00a6ec <soc_eu_fc_read+0xc> lw	a4,-20(s0)
1c00a6f0 <soc_eu_fc_read+0x10> lui	a5,0x1a106
1c00a6f4 <soc_eu_fc_read+0x14> addi	a5,a5,4
1c00a6f6 <soc_eu_fc_read+0x16> add	a5,a5,a4
1c00a6f8 <soc_eu_fc_read+0x18> mv	a0,a5
1c00a6fa <soc_eu_fc_read+0x1a> jal	1c00a692 <readw>
1c00a6fc <soc_eu_fc_read+0x1c> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:115
}
1c00a6fe <soc_eu_fc_read+0x1e> mv	a0,a5
1c00a700 <soc_eu_fc_read+0x20> lw	ra,28(sp)
1c00a702 <soc_eu_fc_read+0x22> lw	s0,24(sp)
1c00a704 <soc_eu_fc_read+0x24> addi	sp,sp,32
1c00a706 <soc_eu_fc_read+0x26> ret
hal_soc_eu_set_fc_mask():
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:137
static inline void hal_soc_eu_set_fc_mask(int evt) {
1c00a708 <hal_soc_eu_set_fc_mask> addi	sp,sp,-48
1c00a70a <hal_soc_eu_set_fc_mask+0x2> sw	ra,44(sp)
1c00a70c <hal_soc_eu_set_fc_mask+0x4> sw	s0,40(sp)
1c00a70e <hal_soc_eu_set_fc_mask+0x6> addi	s0,sp,48
1c00a710 <hal_soc_eu_set_fc_mask+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138
	if (evt >= 256 || evt < 0)
1c00a714 <hal_soc_eu_set_fc_mask+0xc> lw	a4,-36(s0)
1c00a718 <hal_soc_eu_set_fc_mask+0x10> li	a5,255
1c00a71c <hal_soc_eu_set_fc_mask+0x14> blt	a5,a4,1c00a774 <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:138 (discriminator 1)
1c00a720 <hal_soc_eu_set_fc_mask+0x18> lw	a5,-36(s0)
1c00a724 <hal_soc_eu_set_fc_mask+0x1c> bltz	a5,1c00a774 <hal_soc_eu_set_fc_mask+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:141
	int shift = evt % 32;
1c00a728 <hal_soc_eu_set_fc_mask+0x20> lw	a4,-36(s0)
1c00a72c <hal_soc_eu_set_fc_mask+0x24> srai	a5,a4,0x1f
1c00a730 <hal_soc_eu_set_fc_mask+0x28> srli	a5,a5,0x1b
1c00a732 <hal_soc_eu_set_fc_mask+0x2a> add	a4,a4,a5
1c00a734 <hal_soc_eu_set_fc_mask+0x2c> andi	a4,a4,31
1c00a736 <hal_soc_eu_set_fc_mask+0x2e> sub	a5,a4,a5
1c00a73a <hal_soc_eu_set_fc_mask+0x32> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:142
	uint32_t reg_offset = evt/32 * 4;
1c00a73e <hal_soc_eu_set_fc_mask+0x36> lw	a5,-36(s0)
1c00a742 <hal_soc_eu_set_fc_mask+0x3a> srai	a4,a5,0x1f
1c00a746 <hal_soc_eu_set_fc_mask+0x3e> andi	a4,a4,31
1c00a748 <hal_soc_eu_set_fc_mask+0x40> add	a5,a5,a4
1c00a74a <hal_soc_eu_set_fc_mask+0x42> srai	a5,a5,0x5
1c00a74c <hal_soc_eu_set_fc_mask+0x44> slli	a5,a5,0x2
1c00a74e <hal_soc_eu_set_fc_mask+0x46> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:143
	soc_eu_fc_write(soc_eu_fc_read(reg_offset) & ~(1 << shift), reg_offset);
1c00a752 <hal_soc_eu_set_fc_mask+0x4a> lw	a0,-24(s0)
1c00a756 <hal_soc_eu_set_fc_mask+0x4e> jal	1c00a6e0 <soc_eu_fc_read>
1c00a758 <hal_soc_eu_set_fc_mask+0x50> mv	a3,a0
1c00a75a <hal_soc_eu_set_fc_mask+0x52> li	a4,1
1c00a75c <hal_soc_eu_set_fc_mask+0x54> lw	a5,-20(s0)
1c00a760 <hal_soc_eu_set_fc_mask+0x58> sll	a5,a4,a5
1c00a764 <hal_soc_eu_set_fc_mask+0x5c> not	a5,a5
1c00a768 <hal_soc_eu_set_fc_mask+0x60> and	a5,a5,a3
1c00a76a <hal_soc_eu_set_fc_mask+0x62> lw	a1,-24(s0)
1c00a76e <hal_soc_eu_set_fc_mask+0x66> mv	a0,a5
1c00a770 <hal_soc_eu_set_fc_mask+0x68> jal	1c00a6b2 <soc_eu_fc_write>
1c00a772 <hal_soc_eu_set_fc_mask+0x6a> j	1c00a776 <hal_soc_eu_set_fc_mask+0x6e>
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:139
		return;
1c00a774 <hal_soc_eu_set_fc_mask+0x6c> nop
/home/wangshun/plct_cli/cli_test/cli_test/hal/include/hal_soc_eu_periph.h:144
}
1c00a776 <hal_soc_eu_set_fc_mask+0x6e> lw	ra,44(sp)
1c00a778 <hal_soc_eu_set_fc_mask+0x70> lw	s0,40(sp)
1c00a77a <hal_soc_eu_set_fc_mask+0x72> addi	sp,sp,48
1c00a77c <hal_soc_eu_set_fc_mask+0x74> ret
uart_rx_isr():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:61
struct rt_ringbuffer uart_rxTCB;
struct rt_semaphore  shell_rx_semaphore;


char n_data[]="\r\n";
void uart_rx_isr (void *id){
1c00a77e <uart_rx_isr> addi	sp,sp,-32
1c00a780 <uart_rx_isr+0x2> sw	ra,28(sp)
1c00a782 <uart_rx_isr+0x4> sw	s0,24(sp)
1c00a784 <uart_rx_isr+0x6> addi	s0,sp,32
1c00a786 <uart_rx_isr+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:62
	rt_interrupt_enter();
1c00a78a <uart_rx_isr+0xc> jal	ra,1c00b992 <rt_interrupt_enter>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:63
	if (id == 6) {
1c00a78e <uart_rx_isr+0x10> lw	a4,-20(s0)
1c00a792 <uart_rx_isr+0x14> li	a5,6
1c00a794 <uart_rx_isr+0x16> bne	a4,a5,1c00a7ee <uart_rx_isr+0x70>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:64
		while (*(int*)0x1a102130) {
1c00a798 <uart_rx_isr+0x1a> j	1c00a7e2 <uart_rx_isr+0x64>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:65
			u1buffer[u1wrptr++] = puart1->data_b.rx_data & 0xff;
1c00a79a <uart_rx_isr+0x1c> lui	a5,0x1c011
1c00a79e <uart_rx_isr+0x20> lw	a5,520(a5) # 1c011208 <puart1>
1c00a7a2 <uart_rx_isr+0x24> lbu	a5,52(a5)
1c00a7a6 <uart_rx_isr+0x28> andi	a2,a5,255
1c00a7aa <uart_rx_isr+0x2c> lui	a5,0x1c017
1c00a7ae <uart_rx_isr+0x30> lw	a5,-1092(a5) # 1c016bbc <u1wrptr>
1c00a7b2 <uart_rx_isr+0x34> addi	a3,a5,1
1c00a7b6 <uart_rx_isr+0x38> lui	a4,0x1c017
1c00a7ba <uart_rx_isr+0x3c> sw	a3,-1092(a4) # 1c016bbc <u1wrptr>
1c00a7be <uart_rx_isr+0x40> slli	a4,a2,0x18
1c00a7c2 <uart_rx_isr+0x44> srai	a4,a4,0x18
1c00a7c4 <uart_rx_isr+0x46> addi	a3,gp,-460 # 1c01182c <u1buffer>
1c00a7c8 <uart_rx_isr+0x4a> add	a5,a5,a3
1c00a7ca <uart_rx_isr+0x4c> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:66
			u1wrptr &= 0x7f;
1c00a7ce <uart_rx_isr+0x50> lui	a5,0x1c017
1c00a7d2 <uart_rx_isr+0x54> lw	a5,-1092(a5) # 1c016bbc <u1wrptr>
1c00a7d6 <uart_rx_isr+0x58> andi	a4,a5,127
1c00a7da <uart_rx_isr+0x5c> lui	a5,0x1c017
1c00a7de <uart_rx_isr+0x60> sw	a4,-1092(a5) # 1c016bbc <u1wrptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:64
		while (*(int*)0x1a102130) {
1c00a7e2 <uart_rx_isr+0x64> lui	a5,0x1a102
1c00a7e6 <uart_rx_isr+0x68> addi	a5,a5,304 # 1a102130 <__stack_size+0x1a101930>
1c00a7ea <uart_rx_isr+0x6c> lw	a5,0(a5)
1c00a7ec <uart_rx_isr+0x6e> bnez	a5,1c00a79a <uart_rx_isr+0x1c>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:69
		}
	}
	if (id == 2) {
1c00a7ee <uart_rx_isr+0x70> lw	a4,-20(s0)
1c00a7f2 <uart_rx_isr+0x74> li	a5,2
1c00a7f4 <uart_rx_isr+0x76> bne	a4,a5,1c00a830 <uart_rx_isr+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:70
		while (puart0->valid) {
1c00a7f8 <uart_rx_isr+0x7a> j	1c00a818 <uart_rx_isr+0x9a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:75
			//u0buffer[u0wrptr++] = puart0->data_b.rx_data & 0xff;
			//u0wrptr &= 0x7f;
			//outdata(0,sizeof(u0buffer),u0buffer);
			//outdata(0,sizeof(n_data),n_data);
			rt_ringbuffer_putchar(&uart_rxTCB,puart0->data_b.rx_data & 0xff);
1c00a7fa <uart_rx_isr+0x7c> lui	a5,0x1c011
1c00a7fe <uart_rx_isr+0x80> lw	a5,516(a5) # 1c011204 <puart0>
1c00a802 <uart_rx_isr+0x84> lbu	a5,52(a5)
1c00a806 <uart_rx_isr+0x88> andi	a5,a5,255
1c00a80a <uart_rx_isr+0x8c> mv	a1,a5
1c00a80c <uart_rx_isr+0x8e> lui	a5,0x1c017
1c00a810 <uart_rx_isr+0x92> addi	a0,a5,-916 # 1c016c6c <uart_rxTCB>
1c00a814 <uart_rx_isr+0x96> jal	ra,1c00e470 <rt_ringbuffer_putchar>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:70
		while (puart0->valid) {
1c00a818 <uart_rx_isr+0x9a> lui	a5,0x1c011
1c00a81c <uart_rx_isr+0x9e> lw	a5,516(a5) # 1c011204 <puart0>
1c00a820 <uart_rx_isr+0xa2> lw	a5,48(a5)
1c00a822 <uart_rx_isr+0xa4> bnez	a5,1c00a7fa <uart_rx_isr+0x7c>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:78
			//u0wrptr=0;
		}
		rt_sem_release(&shell_rx_semaphore);
1c00a824 <uart_rx_isr+0xa6> lui	a5,0x1c017
1c00a828 <uart_rx_isr+0xaa> addi	a0,a5,-904 # 1c016c78 <shell_rx_semaphore>
1c00a82c <uart_rx_isr+0xae> jal	ra,1c00b90a <rt_sem_release>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:80
	}
	rt_interrupt_leave();
1c00a830 <uart_rx_isr+0xb2> jal	ra,1c00b9ce <rt_interrupt_leave>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:81
}
1c00a834 <uart_rx_isr+0xb6> nop
1c00a836 <uart_rx_isr+0xb8> lw	ra,28(sp)
1c00a838 <uart_rx_isr+0xba> lw	s0,24(sp)
1c00a83a <uart_rx_isr+0xbc> addi	sp,sp,32
1c00a83c <uart_rx_isr+0xbe> ret
udma_uart_open():
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:96
		retval = u0buffer[u0rdptr++];
		u0rdptr &= 0x7f;
	}
	return retval;
}
uint16_t udma_uart_open (uint8_t uart_id, uint32_t xbaudrate) {
1c00a83e <udma_uart_open> addi	sp,sp,-48
1c00a840 <udma_uart_open+0x2> sw	ra,44(sp)
1c00a842 <udma_uart_open+0x4> sw	s0,40(sp)
1c00a844 <udma_uart_open+0x6> addi	s0,sp,48
1c00a846 <udma_uart_open+0x8> mv	a5,a0
1c00a848 <udma_uart_open+0xa> sw	a1,-40(s0)
1c00a84c <udma_uart_open+0xe> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:98
	UdmaUart_t*				puart;
	volatile UdmaCtrl_t*		pudma_ctrl = (UdmaCtrl_t*)UDMA_CH_ADDR_CTRL;
1c00a850 <udma_uart_open+0x12> lui	a5,0x1a102
1c00a854 <udma_uart_open+0x16> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:101

	/* See if already initialized */
	if (uart_semaphores_rx[uart_id] != NULL || uart_semaphores_tx[uart_id] != NULL) {
1c00a858 <udma_uart_open+0x1a> lbu	a5,-33(s0)
1c00a85c <udma_uart_open+0x1e> lui	a4,0x1c017
1c00a860 <udma_uart_open+0x22> addi	a4,a4,-932 # 1c016c5c <uart_semaphores_rx>
1c00a864 <udma_uart_open+0x26> slli	a5,a5,0x2
1c00a866 <udma_uart_open+0x28> add	a5,a5,a4
1c00a868 <udma_uart_open+0x2a> lw	a5,0(a5)
1c00a86a <udma_uart_open+0x2c> bnez	a5,1c00a880 <udma_uart_open+0x42>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:101 (discriminator 1)
1c00a86c <udma_uart_open+0x2e> lbu	a5,-33(s0)
1c00a870 <udma_uart_open+0x32> lui	a4,0x1c017
1c00a874 <udma_uart_open+0x36> addi	a4,a4,-924 # 1c016c64 <uart_semaphores_tx>
1c00a878 <udma_uart_open+0x3a> slli	a5,a5,0x2
1c00a87a <udma_uart_open+0x3c> add	a5,a5,a4
1c00a87c <udma_uart_open+0x3e> lw	a5,0(a5)
1c00a87e <udma_uart_open+0x40> beqz	a5,1c00a884 <udma_uart_open+0x46>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:102
		return 1;
1c00a880 <udma_uart_open+0x42> li	a5,1
1c00a882 <udma_uart_open+0x44> j	1c00aa5a <udma_uart_open+0x21c>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:105
	}
	/* Enable reset and enable uart clock */
	pudma_ctrl->reg_rst |= (UDMA_CTRL_UART0_CLKEN << uart_id);
1c00a884 <udma_uart_open+0x46> lw	a5,-20(s0)
1c00a888 <udma_uart_open+0x4a> lw	a5,8(a5)
1c00a88a <udma_uart_open+0x4c> lbu	a4,-33(s0)
1c00a88e <udma_uart_open+0x50> li	a3,1
1c00a890 <udma_uart_open+0x52> sll	a4,a3,a4
1c00a894 <udma_uart_open+0x56> or	a4,a4,a5
1c00a896 <udma_uart_open+0x58> lw	a5,-20(s0)
1c00a89a <udma_uart_open+0x5c> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:106
	pudma_ctrl->reg_rst &= ~(UDMA_CTRL_UART0_CLKEN << uart_id);
1c00a89c <udma_uart_open+0x5e> lw	a5,-20(s0)
1c00a8a0 <udma_uart_open+0x62> lw	a5,8(a5)
1c00a8a2 <udma_uart_open+0x64> lbu	a4,-33(s0)
1c00a8a6 <udma_uart_open+0x68> li	a3,1
1c00a8a8 <udma_uart_open+0x6a> sll	a4,a3,a4
1c00a8ac <udma_uart_open+0x6e> not	a4,a4
1c00a8b0 <udma_uart_open+0x72> and	a4,a4,a5
1c00a8b2 <udma_uart_open+0x74> lw	a5,-20(s0)
1c00a8b6 <udma_uart_open+0x78> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:107
	pudma_ctrl->reg_cg |= (UDMA_CTRL_UART0_CLKEN << uart_id);
1c00a8b8 <udma_uart_open+0x7a> lw	a5,-20(s0)
1c00a8bc <udma_uart_open+0x7e> lw	a5,0(a5)
1c00a8be <udma_uart_open+0x80> lbu	a4,-33(s0)
1c00a8c2 <udma_uart_open+0x84> li	a3,1
1c00a8c4 <udma_uart_open+0x86> sll	a4,a3,a4
1c00a8c8 <udma_uart_open+0x8a> or	a4,a4,a5
1c00a8ca <udma_uart_open+0x8c> lw	a5,-20(s0)
1c00a8ce <udma_uart_open+0x90> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:111

	/* Set semaphore */
	SemaphoreHandle_t shSemaphoreHandle;		// FreeRTOS.h has a define for xSemaphoreHandle, so can't use that
	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a8d0 <udma_uart_open+0x92> li	a2,3
1c00a8d2 <udma_uart_open+0x94> li	a1,0
1c00a8d4 <udma_uart_open+0x96> li	a0,1
1c00a8d6 <udma_uart_open+0x98> jal	ra,1c008704 <xQueueGenericCreate>
1c00a8da <udma_uart_open+0x9c> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:112
	configASSERT(shSemaphoreHandle);
1c00a8de <udma_uart_open+0xa0> lw	a5,-24(s0)
1c00a8e2 <udma_uart_open+0xa4> bnez	a5,1c00a8ea <udma_uart_open+0xac>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:112 (discriminator 1)
1c00a8e4 <udma_uart_open+0xa6> csrci	mstatus,8
1c00a8e8 <udma_uart_open+0xaa> j	1c00a8e8 <udma_uart_open+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:113
	xSemaphoreGive(shSemaphoreHandle);
1c00a8ea <udma_uart_open+0xac> li	a3,0
1c00a8ec <udma_uart_open+0xae> li	a2,0
1c00a8ee <udma_uart_open+0xb0> li	a1,0
1c00a8f0 <udma_uart_open+0xb2> lw	a0,-24(s0)
1c00a8f4 <udma_uart_open+0xb6> jal	ra,1c0087f4 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:114
	uart_semaphores_rx[uart_id] = shSemaphoreHandle;
1c00a8f8 <udma_uart_open+0xba> lbu	a5,-33(s0)
1c00a8fc <udma_uart_open+0xbe> lui	a4,0x1c017
1c00a900 <udma_uart_open+0xc2> addi	a4,a4,-932 # 1c016c5c <uart_semaphores_rx>
1c00a904 <udma_uart_open+0xc6> slli	a5,a5,0x2
1c00a906 <udma_uart_open+0xc8> add	a5,a5,a4
1c00a908 <udma_uart_open+0xca> lw	a4,-24(s0)
1c00a90c <udma_uart_open+0xce> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:116

	shSemaphoreHandle = xSemaphoreCreateBinary();
1c00a90e <udma_uart_open+0xd0> li	a2,3
1c00a910 <udma_uart_open+0xd2> li	a1,0
1c00a912 <udma_uart_open+0xd4> li	a0,1
1c00a914 <udma_uart_open+0xd6> jal	ra,1c008704 <xQueueGenericCreate>
1c00a918 <udma_uart_open+0xda> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:117
	configASSERT(shSemaphoreHandle);
1c00a91c <udma_uart_open+0xde> lw	a5,-24(s0)
1c00a920 <udma_uart_open+0xe2> bnez	a5,1c00a928 <udma_uart_open+0xea>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:117 (discriminator 1)
1c00a922 <udma_uart_open+0xe4> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:117 (discriminator 2)
1c00a926 <udma_uart_open+0xe8> j	1c00a926 <udma_uart_open+0xe8>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:118
	xSemaphoreGive(shSemaphoreHandle);
1c00a928 <udma_uart_open+0xea> li	a3,0
1c00a92a <udma_uart_open+0xec> li	a2,0
1c00a92c <udma_uart_open+0xee> li	a1,0
1c00a92e <udma_uart_open+0xf0> lw	a0,-24(s0)
1c00a932 <udma_uart_open+0xf4> jal	ra,1c0087f4 <xQueueGenericSend>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:119
	uart_semaphores_tx[uart_id] = shSemaphoreHandle;
1c00a936 <udma_uart_open+0xf8> lbu	a5,-33(s0)
1c00a93a <udma_uart_open+0xfc> lui	a4,0x1c017
1c00a93e <udma_uart_open+0x100> addi	a4,a4,-924 # 1c016c64 <uart_semaphores_tx>
1c00a942 <udma_uart_open+0x104> slli	a5,a5,0x2
1c00a944 <udma_uart_open+0x106> add	a5,a5,a4
1c00a946 <udma_uart_open+0x108> lw	a4,-24(s0)
1c00a94a <udma_uart_open+0x10c> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:122

	/* Set handlers. */
	pi_fc_event_handler_set(SOC_EVENT_UART_RX(uart_id), uart_rx_isr, uart_semaphores_rx[uart_id]);
1c00a94c <udma_uart_open+0x10e> lbu	a5,-33(s0)
1c00a950 <udma_uart_open+0x112> slli	a5,a5,0x2
1c00a952 <udma_uart_open+0x114> addi	a3,a5,2 # 1a102002 <__stack_size+0x1a101802>
1c00a956 <udma_uart_open+0x118> lbu	a5,-33(s0)
1c00a95a <udma_uart_open+0x11c> lui	a4,0x1c017
1c00a95e <udma_uart_open+0x120> addi	a4,a4,-932 # 1c016c5c <uart_semaphores_rx>
1c00a962 <udma_uart_open+0x124> slli	a5,a5,0x2
1c00a964 <udma_uart_open+0x126> add	a5,a5,a4
1c00a966 <udma_uart_open+0x128> lw	a5,0(a5)
1c00a968 <udma_uart_open+0x12a> mv	a2,a5
1c00a96a <udma_uart_open+0x12c> lui	a5,0x1c00a
1c00a96e <udma_uart_open+0x130> addi	a1,a5,1918 # 1c00a77e <uart_rx_isr>
1c00a972 <udma_uart_open+0x134> mv	a0,a3
1c00a974 <udma_uart_open+0x136> jal	ra,1c00996c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:123
	pi_fc_event_handler_set(SOC_EVENT_UDMA_UART_TX(uart_id), NULL, uart_semaphores_tx[uart_id]);
1c00a978 <udma_uart_open+0x13a> lbu	a5,-33(s0)
1c00a97c <udma_uart_open+0x13e> slli	a5,a5,0x2
1c00a97e <udma_uart_open+0x140> addi	a3,a5,1
1c00a982 <udma_uart_open+0x144> lbu	a5,-33(s0)
1c00a986 <udma_uart_open+0x148> lui	a4,0x1c017
1c00a98a <udma_uart_open+0x14c> addi	a4,a4,-924 # 1c016c64 <uart_semaphores_tx>
1c00a98e <udma_uart_open+0x150> slli	a5,a5,0x2
1c00a990 <udma_uart_open+0x152> add	a5,a5,a4
1c00a992 <udma_uart_open+0x154> lw	a5,0(a5)
1c00a994 <udma_uart_open+0x156> mv	a2,a5
1c00a996 <udma_uart_open+0x158> li	a1,0
1c00a998 <udma_uart_open+0x15a> mv	a0,a3
1c00a99a <udma_uart_open+0x15c> jal	ra,1c00996c <pi_fc_event_handler_set>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:125
	/* Enable SOC events propagation to FC. */
	hal_soc_eu_set_fc_mask(SOC_EVENT_UART_RX(uart_id));
1c00a99e <udma_uart_open+0x160> lbu	a5,-33(s0)
1c00a9a2 <udma_uart_open+0x164> slli	a5,a5,0x2
1c00a9a4 <udma_uart_open+0x166> addi	a5,a5,2
1c00a9a6 <udma_uart_open+0x168> mv	a0,a5
1c00a9a8 <udma_uart_open+0x16a> jal	1c00a708 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:126
	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_UART_TX(uart_id));
1c00a9aa <udma_uart_open+0x16c> lbu	a5,-33(s0)
1c00a9ae <udma_uart_open+0x170> slli	a5,a5,0x2
1c00a9b0 <udma_uart_open+0x172> addi	a5,a5,1
1c00a9b2 <udma_uart_open+0x174> mv	a0,a5
1c00a9b4 <udma_uart_open+0x176> jal	1c00a708 <hal_soc_eu_set_fc_mask>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:129

	/* configure */
	puart = (UdmaUart_t*)(UDMA_CH_ADDR_UART + uart_id * UDMA_CH_SIZE);
1c00a9b6 <udma_uart_open+0x178> lbu	a4,-33(s0)
1c00a9ba <udma_uart_open+0x17c> lui	a5,0x342
1c00a9be <udma_uart_open+0x180> addi	a5,a5,65 # 00342041 <__stack_size+0x341841>
1c00a9c2 <udma_uart_open+0x184> add	a5,a5,a4
1c00a9c4 <udma_uart_open+0x186> slli	a5,a5,0x7
1c00a9c6 <udma_uart_open+0x188> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:130
	puart->uart_setup_b.div = (uint16_t)(5000000/xbaudrate);
1c00a9ca <udma_uart_open+0x18c> lui	a5,0x4c5
1c00a9ce <udma_uart_open+0x190> addi	a4,a5,-1216 # 004c4b40 <__stack_size+0x4c4340>
1c00a9d2 <udma_uart_open+0x194> lw	a5,-40(s0)
1c00a9d6 <udma_uart_open+0x198> divu	a5,a4,a5
1c00a9da <udma_uart_open+0x19c> slli	a4,a5,0x10
1c00a9de <udma_uart_open+0x1a0> srli	a4,a4,0x10
1c00a9e0 <udma_uart_open+0x1a2> lw	a5,-28(s0)
1c00a9e4 <udma_uart_open+0x1a6> sh	a4,38(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:131
	puart->uart_setup_b.bits = 3; // 8-bits
1c00a9e8 <udma_uart_open+0x1aa> lw	a5,-28(s0)
1c00a9ec <udma_uart_open+0x1ae> lw	a4,36(a5)
1c00a9ee <udma_uart_open+0x1b0> ori	a4,a4,6
1c00a9f2 <udma_uart_open+0x1b4> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:134
//	if (uart_id == 0) puart->uart_setup_b.rx_polling_en = 1;
//	if (uart_id == 1)
		puart->irq_en_b.rx_irq_en = 1;
1c00a9f4 <udma_uart_open+0x1b6> lw	a5,-28(s0)
1c00a9f8 <udma_uart_open+0x1ba> lbu	a4,44(a5)
1c00a9fc <udma_uart_open+0x1be> ori	a4,a4,1
1c00aa00 <udma_uart_open+0x1c2> sb	a4,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:135
	puart->uart_setup_b.en_tx = 1;
1c00aa04 <udma_uart_open+0x1c6> lw	a5,-28(s0)
1c00aa08 <udma_uart_open+0x1ca> lw	a4,36(a5)
1c00aa0a <udma_uart_open+0x1cc> ori	a4,a4,256
1c00aa0e <udma_uart_open+0x1d0> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:136
	puart->uart_setup_b.en_rx = 1;
1c00aa10 <udma_uart_open+0x1d2> lw	a5,-28(s0)
1c00aa14 <udma_uart_open+0x1d6> lw	a4,36(a5)
1c00aa16 <udma_uart_open+0x1d8> ori	a4,a4,512
1c00aa1a <udma_uart_open+0x1dc> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:137
	puart->uart_setup_b.rx_clean_fifo = 1;
1c00aa1c <udma_uart_open+0x1de> lw	a5,-28(s0)
1c00aa20 <udma_uart_open+0x1e2> lw	a4,36(a5)
1c00aa22 <udma_uart_open+0x1e4> ori	a4,a4,32
1c00aa26 <udma_uart_open+0x1e8> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:139
	
	if (uart_id == 1) {
1c00aa28 <udma_uart_open+0x1ea> lbu	a4,-33(s0)
1c00aa2c <udma_uart_open+0x1ee> li	a5,1
1c00aa2e <udma_uart_open+0x1f0> bne	a4,a5,1c00aa42 <udma_uart_open+0x204>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:140
		 u1rdptr = 0;
1c00aa32 <udma_uart_open+0x1f4> lui	a5,0x1c017
1c00aa36 <udma_uart_open+0x1f8> sw	zero,-1096(a5) # 1c016bb8 <u1rdptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:141
	 	 u1wrptr = 0;
1c00aa3a <udma_uart_open+0x1fc> lui	a5,0x1c017
1c00aa3e <udma_uart_open+0x200> sw	zero,-1092(a5) # 1c016bbc <u1wrptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:143
	}
	if (uart_id == 0) {
1c00aa42 <udma_uart_open+0x204> lbu	a5,-33(s0)
1c00aa46 <udma_uart_open+0x208> bnez	a5,1c00aa58 <udma_uart_open+0x21a>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:144
		 u0rdptr = 0;
1c00aa48 <udma_uart_open+0x20a> lui	a5,0x1c017
1c00aa4c <udma_uart_open+0x20e> sw	zero,-1088(a5) # 1c016bc0 <u0rdptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:145
	 	 u0wrptr = 0;
1c00aa50 <udma_uart_open+0x212> lui	a5,0x1c017
1c00aa54 <udma_uart_open+0x216> sw	zero,-1084(a5) # 1c016bc4 <u0wrptr>
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:148
	}

	return 0;
1c00aa58 <udma_uart_open+0x21a> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/drivers/source/udma_uart_driver.c:149
}
1c00aa5a <udma_uart_open+0x21c> mv	a0,a5
1c00aa5c <udma_uart_open+0x21e> lw	ra,44(sp)
1c00aa5e <udma_uart_open+0x220> lw	s0,40(sp)
1c00aa60 <udma_uart_open+0x222> addi	sp,sp,48
1c00aa62 <udma_uart_open+0x224> ret
setFLLFrequencyInIntegerMode():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:119
/**
 * Board init code. Always call this before anything else.
 */

uint8_t setFLLFrequencyInIntegerMode(uint8_t aFLLNum, uint8_t aRefFreqInMHz, uint16_t aMultiplier, uint8_t aDivideRatio_R_Prescale, uint8_t aPS0_L1, uint8_t aPS0_L2)
{
1c00aa64 <setFLLFrequencyInIntegerMode> addi	sp,sp,-64
1c00aa66 <setFLLFrequencyInIntegerMode+0x2> sw	s0,60(sp)
1c00aa68 <setFLLFrequencyInIntegerMode+0x4> addi	s0,sp,64
1c00aa6a <setFLLFrequencyInIntegerMode+0x6> mv	a6,a0
1c00aa6c <setFLLFrequencyInIntegerMode+0x8> mv	a0,a1
1c00aa6e <setFLLFrequencyInIntegerMode+0xa> mv	a1,a2
1c00aa70 <setFLLFrequencyInIntegerMode+0xc> mv	a2,a3
1c00aa72 <setFLLFrequencyInIntegerMode+0xe> mv	a3,a4
1c00aa74 <setFLLFrequencyInIntegerMode+0x10> mv	a4,a5
1c00aa76 <setFLLFrequencyInIntegerMode+0x12> mv	a5,a6
1c00aa78 <setFLLFrequencyInIntegerMode+0x14> sb	a5,-49(s0)
1c00aa7c <setFLLFrequencyInIntegerMode+0x18> mv	a5,a0
1c00aa7e <setFLLFrequencyInIntegerMode+0x1a> sb	a5,-50(s0)
1c00aa82 <setFLLFrequencyInIntegerMode+0x1e> mv	a5,a1
1c00aa84 <setFLLFrequencyInIntegerMode+0x20> sh	a5,-52(s0)
1c00aa88 <setFLLFrequencyInIntegerMode+0x24> mv	a5,a2
1c00aa8a <setFLLFrequencyInIntegerMode+0x26> sb	a5,-53(s0)
1c00aa8e <setFLLFrequencyInIntegerMode+0x2a> mv	a5,a3
1c00aa90 <setFLLFrequencyInIntegerMode+0x2c> sb	a5,-54(s0)
1c00aa94 <setFLLFrequencyInIntegerMode+0x30> mv	a5,a4
1c00aa96 <setFLLFrequencyInIntegerMode+0x32> sb	a5,-55(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:120
	uint8_t lSts = 0;
1c00aa9a <setFLLFrequencyInIntegerMode+0x36> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:121
	volatile uint32_t *lPLLStartAddress = (uint32_t *)NULL;
1c00aa9e <setFLLFrequencyInIntegerMode+0x3a> sw	zero,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:122
	uint32_t lCounter = 0;
1c00aaa2 <setFLLFrequencyInIntegerMode+0x3e> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:123
	uint32_t lCfgVal = 0;
1c00aaa6 <setFLLFrequencyInIntegerMode+0x42> sw	zero,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:125

	uint8_t lPS0_L1 = aPS0_L1 & 0x03;
1c00aaaa <setFLLFrequencyInIntegerMode+0x46> lbu	a5,-54(s0)
1c00aaae <setFLLFrequencyInIntegerMode+0x4a> andi	a5,a5,3
1c00aab0 <setFLLFrequencyInIntegerMode+0x4c> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:126
	uint8_t lPS0_L2 = aPS0_L2 & 0xFF;
1c00aab4 <setFLLFrequencyInIntegerMode+0x50> lbu	a5,-55(s0)
1c00aab8 <setFLLFrequencyInIntegerMode+0x54> sb	a5,-34(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:128

	if (aFLLNum == 0)
1c00aabc <setFLLFrequencyInIntegerMode+0x58> lbu	a5,-49(s0)
1c00aac0 <setFLLFrequencyInIntegerMode+0x5c> bnez	a5,1c00aacc <setFLLFrequencyInIntegerMode+0x68>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:129
		lPLLStartAddress = (uint32_t *)FLL1_START_ADDR;
1c00aac2 <setFLLFrequencyInIntegerMode+0x5e> lui	a5,0x1a100
1c00aac6 <setFLLFrequencyInIntegerMode+0x62> sw	a5,-24(s0)
1c00aaca <setFLLFrequencyInIntegerMode+0x66> j	1c00ab00 <setFLLFrequencyInIntegerMode+0x9c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:130
	else if (aFLLNum == 1)
1c00aacc <setFLLFrequencyInIntegerMode+0x68> lbu	a4,-49(s0)
1c00aad0 <setFLLFrequencyInIntegerMode+0x6c> li	a5,1
1c00aad2 <setFLLFrequencyInIntegerMode+0x6e> bne	a4,a5,1c00aae4 <setFLLFrequencyInIntegerMode+0x80>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:131
		lPLLStartAddress = (uint32_t *)FLL2_START_ADDR;
1c00aad6 <setFLLFrequencyInIntegerMode+0x72> lui	a5,0x1a100
1c00aada <setFLLFrequencyInIntegerMode+0x76> addi	a5,a5,32 # 1a100020 <__stack_size+0x1a0ff820>
1c00aade <setFLLFrequencyInIntegerMode+0x7a> sw	a5,-24(s0)
1c00aae2 <setFLLFrequencyInIntegerMode+0x7e> j	1c00ab00 <setFLLFrequencyInIntegerMode+0x9c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:132
	else if (aFLLNum == 2)
1c00aae4 <setFLLFrequencyInIntegerMode+0x80> lbu	a4,-49(s0)
1c00aae8 <setFLLFrequencyInIntegerMode+0x84> li	a5,2
1c00aaea <setFLLFrequencyInIntegerMode+0x86> bne	a4,a5,1c00aafc <setFLLFrequencyInIntegerMode+0x98>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:133
		lPLLStartAddress = (uint32_t *)FLL3_START_ADDR;
1c00aaee <setFLLFrequencyInIntegerMode+0x8a> lui	a5,0x1a100
1c00aaf2 <setFLLFrequencyInIntegerMode+0x8e> addi	a5,a5,64 # 1a100040 <__stack_size+0x1a0ff840>
1c00aaf6 <setFLLFrequencyInIntegerMode+0x92> sw	a5,-24(s0)
1c00aafa <setFLLFrequencyInIntegerMode+0x96> j	1c00ab00 <setFLLFrequencyInIntegerMode+0x9c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:135
	else
		lPLLStartAddress = (uint32_t *)NULL;
1c00aafc <setFLLFrequencyInIntegerMode+0x98> sw	zero,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:137

	if (lPLLStartAddress != NULL)
1c00ab00 <setFLLFrequencyInIntegerMode+0x9c> lw	a5,-24(s0)
1c00ab04 <setFLLFrequencyInIntegerMode+0xa0> beqz	a5,1c00ac9a <setFLLFrequencyInIntegerMode+0x236>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:139
	{
		if ((aRefFreqInMHz >= 5) && (aRefFreqInMHz <= 500))
1c00ab08 <setFLLFrequencyInIntegerMode+0xa4> lbu	a4,-50(s0)
1c00ab0c <setFLLFrequencyInIntegerMode+0xa8> li	a5,4
1c00ab0e <setFLLFrequencyInIntegerMode+0xaa> bgeu	a5,a4,1c00ac92 <setFLLFrequencyInIntegerMode+0x22e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:141
		{
			if ((aMultiplier > 0) && (aMultiplier < 2048))
1c00ab12 <setFLLFrequencyInIntegerMode+0xae> lhu	a5,-52(s0)
1c00ab16 <setFLLFrequencyInIntegerMode+0xb2> beqz	a5,1c00ac8a <setFLLFrequencyInIntegerMode+0x226>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:141 (discriminator 1)
1c00ab1a <setFLLFrequencyInIntegerMode+0xb6> lhu	a4,-52(s0)
1c00ab1e <setFLLFrequencyInIntegerMode+0xba> li	a5,2047
1c00ab22 <setFLLFrequencyInIntegerMode+0xbe> bltu	a5,a4,1c00ac8a <setFLLFrequencyInIntegerMode+0x226>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:143
			{
				if (aDivideRatio_R_Prescale < 16)
1c00ab26 <setFLLFrequencyInIntegerMode+0xc2> lbu	a4,-53(s0)
1c00ab2a <setFLLFrequencyInIntegerMode+0xc6> li	a5,15
1c00ab2c <setFLLFrequencyInIntegerMode+0xc8> bltu	a5,a4,1c00ac82 <setFLLFrequencyInIntegerMode+0x21e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:145
				{
					*lPLLStartAddress |= (1 << 19);	     // Bypass on;
1c00ab30 <setFLLFrequencyInIntegerMode+0xcc> lw	a5,-24(s0)
1c00ab34 <setFLLFrequencyInIntegerMode+0xd0> lw	a4,0(a5)
1c00ab36 <setFLLFrequencyInIntegerMode+0xd2> lui	a5,0x80
1c00ab3a <setFLLFrequencyInIntegerMode+0xd6> or	a4,a4,a5
1c00ab3c <setFLLFrequencyInIntegerMode+0xd8> lw	a5,-24(s0)
1c00ab40 <setFLLFrequencyInIntegerMode+0xdc> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:146
					*lPLLStartAddress |= (1 << 2);	     // Reset high
1c00ab42 <setFLLFrequencyInIntegerMode+0xde> lw	a5,-24(s0)
1c00ab46 <setFLLFrequencyInIntegerMode+0xe2> lw	a5,0(a5)
1c00ab48 <setFLLFrequencyInIntegerMode+0xe4> ori	a4,a5,4
1c00ab4c <setFLLFrequencyInIntegerMode+0xe8> lw	a5,-24(s0)
1c00ab50 <setFLLFrequencyInIntegerMode+0xec> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:147
					*lPLLStartAddress &= ~(1 << 2);	     // Reset low;
1c00ab52 <setFLLFrequencyInIntegerMode+0xee> lw	a5,-24(s0)
1c00ab56 <setFLLFrequencyInIntegerMode+0xf2> lw	a5,0(a5)
1c00ab58 <setFLLFrequencyInIntegerMode+0xf4> andi	a4,a5,-5
1c00ab5c <setFLLFrequencyInIntegerMode+0xf8> lw	a5,-24(s0)
1c00ab60 <setFLLFrequencyInIntegerMode+0xfc> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:148
					*lPLLStartAddress &= ~(1 << 18);     // PS0_EN is set to low
1c00ab62 <setFLLFrequencyInIntegerMode+0xfe> lw	a5,-24(s0)
1c00ab66 <setFLLFrequencyInIntegerMode+0x102> lw	a4,0(a5)
1c00ab68 <setFLLFrequencyInIntegerMode+0x104> lui	a5,0xfffc0
1c00ab6c <setFLLFrequencyInIntegerMode+0x108> addi	a5,a5,-1
1c00ab6e <setFLLFrequencyInIntegerMode+0x10a> and	a4,a4,a5
1c00ab70 <setFLLFrequencyInIntegerMode+0x10c> lw	a5,-24(s0)
1c00ab74 <setFLLFrequencyInIntegerMode+0x110> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:149
					*lPLLStartAddress |= (lPS0_L1 << 0); // PS0_L1 0 which gives L01 = 1
1c00ab76 <setFLLFrequencyInIntegerMode+0x112> lw	a5,-24(s0)
1c00ab7a <setFLLFrequencyInIntegerMode+0x116> lw	a4,0(a5)
1c00ab7c <setFLLFrequencyInIntegerMode+0x118> lbu	a5,-33(s0)
1c00ab80 <setFLLFrequencyInIntegerMode+0x11c> or	a4,a4,a5
1c00ab82 <setFLLFrequencyInIntegerMode+0x11e> lw	a5,-24(s0)
1c00ab86 <setFLLFrequencyInIntegerMode+0x122> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:150
					*lPLLStartAddress |= (lPS0_L2 << 4); // PS0_L2_INT 0 and PS0_L2_FRAC 0 which gives L02 = 1
1c00ab88 <setFLLFrequencyInIntegerMode+0x124> lw	a5,-24(s0)
1c00ab8c <setFLLFrequencyInIntegerMode+0x128> lw	a5,0(a5)
1c00ab8e <setFLLFrequencyInIntegerMode+0x12a> lbu	a4,-34(s0)
1c00ab92 <setFLLFrequencyInIntegerMode+0x12e> slli	a4,a4,0x4
1c00ab94 <setFLLFrequencyInIntegerMode+0x130> or	a4,a4,a5
1c00ab96 <setFLLFrequencyInIntegerMode+0x132> lw	a5,-24(s0)
1c00ab9a <setFLLFrequencyInIntegerMode+0x136> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:151
					*lPLLStartAddress |= (0 << 12);	     // PS0_L2_INT 0 and PS0_L2_FRAC 0 which gives L02 = 1
1c00ab9c <setFLLFrequencyInIntegerMode+0x138> lw	a5,-24(s0)
1c00aba0 <setFLLFrequencyInIntegerMode+0x13c> lw	a4,0(a5)
1c00aba2 <setFLLFrequencyInIntegerMode+0x13e> lw	a5,-24(s0)
1c00aba6 <setFLLFrequencyInIntegerMode+0x142> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:154

					// FLL1 Config 1 register not configuring PS1
					*(lPLLStartAddress + 1) = 0;
1c00aba8 <setFLLFrequencyInIntegerMode+0x144> lw	a5,-24(s0)
1c00abac <setFLLFrequencyInIntegerMode+0x148> addi	a5,a5,4
1c00abae <setFLLFrequencyInIntegerMode+0x14a> sw	zero,0(a5) # fffc0000 <__l2_shared_end+0xe3f987d0>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:157

					// FLL1 Config 2 register
					lCfgVal = 0;
1c00abb2 <setFLLFrequencyInIntegerMode+0x14e> sw	zero,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:158
					lCfgVal |= (aMultiplier << 4);		    // MULT_INT	0x28 = 40 (40*10 = 400MHz) Multiplier cannot hold 0
1c00abb6 <setFLLFrequencyInIntegerMode+0x152> lhu	a5,-52(s0)
1c00abba <setFLLFrequencyInIntegerMode+0x156> slli	a5,a5,0x4
1c00abbc <setFLLFrequencyInIntegerMode+0x158> mv	a4,a5
1c00abbe <setFLLFrequencyInIntegerMode+0x15a> lw	a5,-32(s0)
1c00abc2 <setFLLFrequencyInIntegerMode+0x15e> or	a5,a5,a4
1c00abc4 <setFLLFrequencyInIntegerMode+0x160> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:159
					lCfgVal |= (1 << 27);			    // INTEGER_MODE is enabled
1c00abc8 <setFLLFrequencyInIntegerMode+0x164> lw	a4,-32(s0)
1c00abcc <setFLLFrequencyInIntegerMode+0x168> lui	a5,0x8000
1c00abd0 <setFLLFrequencyInIntegerMode+0x16c> or	a5,a5,a4
1c00abd2 <setFLLFrequencyInIntegerMode+0x16e> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:160
					lCfgVal |= (aDivideRatio_R_Prescale << 28); // PRESCALE value (Divide Ratio R = 1)
1c00abd6 <setFLLFrequencyInIntegerMode+0x172> lbu	a5,-53(s0)
1c00abda <setFLLFrequencyInIntegerMode+0x176> slli	a5,a5,0x1c
1c00abdc <setFLLFrequencyInIntegerMode+0x178> mv	a4,a5
1c00abde <setFLLFrequencyInIntegerMode+0x17a> lw	a5,-32(s0)
1c00abe2 <setFLLFrequencyInIntegerMode+0x17e> or	a5,a5,a4
1c00abe4 <setFLLFrequencyInIntegerMode+0x180> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:162

					*(lPLLStartAddress + 2) = lCfgVal;
1c00abe8 <setFLLFrequencyInIntegerMode+0x184> lw	a5,-24(s0)
1c00abec <setFLLFrequencyInIntegerMode+0x188> addi	a5,a5,8
1c00abee <setFLLFrequencyInIntegerMode+0x18a> lw	a4,-32(s0)
1c00abf2 <setFLLFrequencyInIntegerMode+0x18e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:165

					// FLL1 Config 3 register not configuring SSC
					*(lPLLStartAddress + 3) = 0;
1c00abf4 <setFLLFrequencyInIntegerMode+0x190> lw	a5,-24(s0)
1c00abf8 <setFLLFrequencyInIntegerMode+0x194> addi	a5,a5,12
1c00abfa <setFLLFrequencyInIntegerMode+0x196> sw	zero,0(a5) # 08000000 <__stack_size+0x7fff800>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:168

					// FLL1 Config 4 register
					*(lPLLStartAddress + 4) = 0x64;
1c00abfe <setFLLFrequencyInIntegerMode+0x19a> lw	a5,-24(s0)
1c00ac02 <setFLLFrequencyInIntegerMode+0x19e> addi	a5,a5,16
1c00ac04 <setFLLFrequencyInIntegerMode+0x1a0> li	a4,100
1c00ac08 <setFLLFrequencyInIntegerMode+0x1a4> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:171

					// FLL1 Config 5 register
					*(lPLLStartAddress + 5) = 0x269;
1c00ac0a <setFLLFrequencyInIntegerMode+0x1a6> lw	a5,-24(s0)
1c00ac0e <setFLLFrequencyInIntegerMode+0x1aa> addi	a5,a5,20
1c00ac10 <setFLLFrequencyInIntegerMode+0x1ac> li	a4,617
1c00ac14 <setFLLFrequencyInIntegerMode+0x1b0> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:173

					*lPLLStartAddress |= (1 << 2);	// Reset high
1c00ac16 <setFLLFrequencyInIntegerMode+0x1b2> lw	a5,-24(s0)
1c00ac1a <setFLLFrequencyInIntegerMode+0x1b6> lw	a5,0(a5)
1c00ac1c <setFLLFrequencyInIntegerMode+0x1b8> ori	a4,a5,4
1c00ac20 <setFLLFrequencyInIntegerMode+0x1bc> lw	a5,-24(s0)
1c00ac24 <setFLLFrequencyInIntegerMode+0x1c0> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:174
					*lPLLStartAddress |= (1 << 18); // PS0_EN;
1c00ac26 <setFLLFrequencyInIntegerMode+0x1c2> lw	a5,-24(s0)
1c00ac2a <setFLLFrequencyInIntegerMode+0x1c6> lw	a4,0(a5)
1c00ac2c <setFLLFrequencyInIntegerMode+0x1c8> lui	a5,0x40
1c00ac30 <setFLLFrequencyInIntegerMode+0x1cc> or	a4,a4,a5
1c00ac32 <setFLLFrequencyInIntegerMode+0x1ce> lw	a5,-24(s0)
1c00ac36 <setFLLFrequencyInIntegerMode+0x1d2> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:176
					// lCounter = 0;
					while ((*(lPLLStartAddress + 4) & 0x80000000) == 0) // Wait for lock detect to go high
1c00ac38 <setFLLFrequencyInIntegerMode+0x1d4> j	1c00ac5a <setFLLFrequencyInIntegerMode+0x1f6>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:178
					{
						lCounter++;
1c00ac3a <setFLLFrequencyInIntegerMode+0x1d6> lw	a5,-28(s0)
1c00ac3e <setFLLFrequencyInIntegerMode+0x1da> addi	a5,a5,1
1c00ac40 <setFLLFrequencyInIntegerMode+0x1dc> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:179
						if (lCounter >= 0x00010000)
1c00ac44 <setFLLFrequencyInIntegerMode+0x1e0> lw	a4,-28(s0)
1c00ac48 <setFLLFrequencyInIntegerMode+0x1e4> lui	a5,0x10
1c00ac4a <setFLLFrequencyInIntegerMode+0x1e6> bltu	a4,a5,1c00ac5a <setFLLFrequencyInIntegerMode+0x1f6>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:181
						{
							lSts = 5; // Unable to achieve lock
1c00ac4e <setFLLFrequencyInIntegerMode+0x1ea> li	a5,5
1c00ac50 <setFLLFrequencyInIntegerMode+0x1ec> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:182
							lCounter = 0;
1c00ac54 <setFLLFrequencyInIntegerMode+0x1f0> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:183
							break;
1c00ac58 <setFLLFrequencyInIntegerMode+0x1f4> j	1c00ac66 <setFLLFrequencyInIntegerMode+0x202>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:176
					while ((*(lPLLStartAddress + 4) & 0x80000000) == 0) // Wait for lock detect to go high
1c00ac5a <setFLLFrequencyInIntegerMode+0x1f6> lw	a5,-24(s0)
1c00ac5e <setFLLFrequencyInIntegerMode+0x1fa> addi	a5,a5,16
1c00ac60 <setFLLFrequencyInIntegerMode+0x1fc> lw	a5,0(a5)
1c00ac62 <setFLLFrequencyInIntegerMode+0x1fe> bgez	a5,1c00ac3a <setFLLFrequencyInIntegerMode+0x1d6>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:186
						}
					}
					if (lSts == 0)
1c00ac66 <setFLLFrequencyInIntegerMode+0x202> lbu	a5,-17(s0)
1c00ac6a <setFLLFrequencyInIntegerMode+0x206> bnez	a5,1c00aca2 <setFLLFrequencyInIntegerMode+0x23e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:187
						*(lPLLStartAddress) &= ~(1 << 19); // Bypass off;
1c00ac6c <setFLLFrequencyInIntegerMode+0x208> lw	a5,-24(s0)
1c00ac70 <setFLLFrequencyInIntegerMode+0x20c> lw	a4,0(a5)
1c00ac72 <setFLLFrequencyInIntegerMode+0x20e> lui	a5,0xfff80
1c00ac76 <setFLLFrequencyInIntegerMode+0x212> addi	a5,a5,-1
1c00ac78 <setFLLFrequencyInIntegerMode+0x214> and	a4,a4,a5
1c00ac7a <setFLLFrequencyInIntegerMode+0x216> lw	a5,-24(s0)
1c00ac7e <setFLLFrequencyInIntegerMode+0x21a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:143
				if (aDivideRatio_R_Prescale < 16)
1c00ac80 <setFLLFrequencyInIntegerMode+0x21c> j	1c00aca2 <setFLLFrequencyInIntegerMode+0x23e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:191
				}
				else
				{
					lSts = 1; // aDivideRatio_R_Prescale
1c00ac82 <setFLLFrequencyInIntegerMode+0x21e> li	a5,1
1c00ac84 <setFLLFrequencyInIntegerMode+0x220> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:143
				if (aDivideRatio_R_Prescale < 16)
1c00ac88 <setFLLFrequencyInIntegerMode+0x224> j	1c00aca2 <setFLLFrequencyInIntegerMode+0x23e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:196
				}
			}
			else
			{
				lSts = 2; // Invalid aMultiplier
1c00ac8a <setFLLFrequencyInIntegerMode+0x226> li	a5,2
1c00ac8c <setFLLFrequencyInIntegerMode+0x228> sb	a5,-17(s0)
1c00ac90 <setFLLFrequencyInIntegerMode+0x22c> j	1c00aca4 <setFLLFrequencyInIntegerMode+0x240>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:201
			}
		}
		else
		{
			lSts = 3; // Invalid reference freq
1c00ac92 <setFLLFrequencyInIntegerMode+0x22e> li	a5,3
1c00ac94 <setFLLFrequencyInIntegerMode+0x230> sb	a5,-17(s0)
1c00ac98 <setFLLFrequencyInIntegerMode+0x234> j	1c00aca4 <setFLLFrequencyInIntegerMode+0x240>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:206
		}
	}
	else
	{
		lSts = 4; // Invalid PLL number
1c00ac9a <setFLLFrequencyInIntegerMode+0x236> li	a5,4
1c00ac9c <setFLLFrequencyInIntegerMode+0x238> sb	a5,-17(s0)
1c00aca0 <setFLLFrequencyInIntegerMode+0x23c> j	1c00aca4 <setFLLFrequencyInIntegerMode+0x240>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:143
				if (aDivideRatio_R_Prescale < 16)
1c00aca2 <setFLLFrequencyInIntegerMode+0x23e> nop
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:208
	}
	return lSts;
1c00aca4 <setFLLFrequencyInIntegerMode+0x240> lbu	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:209
}
1c00aca8 <setFLLFrequencyInIntegerMode+0x244> mv	a0,a5
1c00acaa <setFLLFrequencyInIntegerMode+0x246> lw	s0,60(sp)
1c00acac <setFLLFrequencyInIntegerMode+0x248> addi	sp,sp,64
1c00acae <setFLLFrequencyInIntegerMode+0x24a> ret
system_init():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:216
int handler_count[32];
uint32_t gSpecialHandlingIRQCnt = 0;
uint8_t gQSPIIdNum = 0;

void system_init(void)
{
1c00acb0 <system_init> addi	sp,sp,-64
1c00acb2 <system_init+0x2> sw	ra,60(sp)
1c00acb4 <system_init+0x4> sw	s0,56(sp)
1c00acb6 <system_init+0x6> addi	s0,sp,64
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:217
	uint32_t lFlashID = 0;
1c00acb8 <system_init+0x8> sw	zero,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:218
	SocCtrl_t *soc = APB_SOC_CTRL_ADDR;
1c00acbc <system_init+0xc> lui	a5,0x1a104
1c00acc0 <system_init+0x10> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:219
	soc->soft_reset = 1;
1c00acc4 <system_init+0x14> lw	a5,-36(s0)
1c00acc8 <system_init+0x18> li	a4,1
1c00acca <system_init+0x1a> sw	a4,252(a5) # 1a1040fc <__stack_size+0x1a1038fc>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:220
	uint32_t val = 0;
1c00acce <system_init+0x1e> sw	zero,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:221
	uint8_t i = 0;
1c00acd2 <system_init+0x22> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:222
	timer_irq_disable();
1c00acd6 <system_init+0x26> jal	ra,1c009c36 <timer_irq_disable>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:224

	uint32_t *lFFL1StartAddress = (uint32_t *)FLL1_START_ADDR;
1c00acda <system_init+0x2a> lui	a5,0x1a100
1c00acde <system_init+0x2e> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:225
	uint32_t *lFFL2StartAddress = (uint32_t *)FLL2_START_ADDR;
1c00ace2 <system_init+0x32> lui	a5,0x1a100
1c00ace6 <system_init+0x36> addi	a5,a5,32 # 1a100020 <__stack_size+0x1a0ff820>
1c00acea <system_init+0x3a> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:226
	uint32_t *lFFL3StartAddress = (uint32_t *)FLL3_START_ADDR;
1c00acee <system_init+0x3e> lui	a5,0x1a100
1c00acf2 <system_init+0x42> addi	a5,a5,64 # 1a100040 <__stack_size+0x1a0ff840>
1c00acf6 <system_init+0x46> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:228

	setFLLFrequencyInIntegerMode(0, 10, 40, 1, 0, 1); // 400
1c00acfa <system_init+0x4a> li	a5,1
1c00acfc <system_init+0x4c> li	a4,0
1c00acfe <system_init+0x4e> li	a3,1
1c00ad00 <system_init+0x50> li	a2,40
1c00ad04 <system_init+0x54> li	a1,10
1c00ad06 <system_init+0x56> li	a0,0
1c00ad08 <system_init+0x58> jal	1c00aa64 <setFLLFrequencyInIntegerMode>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:230

	setFLLFrequencyInIntegerMode(1, 10, 40, 1, 0, 2); // 200
1c00ad0a <system_init+0x5a> li	a5,2
1c00ad0c <system_init+0x5c> li	a4,0
1c00ad0e <system_init+0x5e> li	a3,1
1c00ad10 <system_init+0x60> li	a2,40
1c00ad14 <system_init+0x64> li	a1,10
1c00ad16 <system_init+0x66> li	a0,1
1c00ad18 <system_init+0x68> jal	1c00aa64 <setFLLFrequencyInIntegerMode>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:232

	setFLLFrequencyInIntegerMode(2, 10, 40, 1, 0, 4); // 100
1c00ad1a <system_init+0x6a> li	a5,4
1c00ad1c <system_init+0x6c> li	a4,0
1c00ad1e <system_init+0x6e> li	a3,1
1c00ad20 <system_init+0x70> li	a2,40
1c00ad24 <system_init+0x74> li	a1,10
1c00ad26 <system_init+0x76> li	a0,2
1c00ad28 <system_init+0x78> jal	1c00aa64 <setFLLFrequencyInIntegerMode>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:235

	/* Hook up isr table. This table is temporary until we figure out how to  do proper vectored interrupts. */
	for (int i = 0; i < 32; i++)
1c00ad2a <system_init+0x7a> sw	zero,-24(s0)
1c00ad2e <system_init+0x7e> j	1c00ad68 <system_init+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:237 (discriminator 3)
	{
		isr_table[i] = undefined_handler;
1c00ad30 <system_init+0x80> lui	a5,0x1c017
1c00ad34 <system_init+0x84> addi	a4,a5,-488 # 1c016e18 <isr_table>
1c00ad38 <system_init+0x88> lw	a5,-24(s0)
1c00ad3c <system_init+0x8c> slli	a5,a5,0x2
1c00ad3e <system_init+0x8e> add	a5,a5,a4
1c00ad40 <system_init+0x90> lui	a4,0x1c00b
1c00ad44 <system_init+0x94> addi	a4,a4,-172 # 1c00af54 <undefined_handler>
1c00ad48 <system_init+0x98> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:238 (discriminator 3)
		handler_count[i] = 0;
1c00ad4a <system_init+0x9a> lui	a5,0x1c017
1c00ad4e <system_init+0x9e> addi	a4,a5,-360 # 1c016e98 <handler_count>
1c00ad52 <system_init+0xa2> lw	a5,-24(s0)
1c00ad56 <system_init+0xa6> slli	a5,a5,0x2
1c00ad58 <system_init+0xa8> add	a5,a5,a4
1c00ad5a <system_init+0xaa> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:235 (discriminator 3)
	for (int i = 0; i < 32; i++)
1c00ad5e <system_init+0xae> lw	a5,-24(s0)
1c00ad62 <system_init+0xb2> addi	a5,a5,1
1c00ad64 <system_init+0xb4> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:235 (discriminator 1)
1c00ad68 <system_init+0xb8> lw	a4,-24(s0)
1c00ad6c <system_init+0xbc> li	a5,31
1c00ad6e <system_init+0xbe> bge	a5,a4,1c00ad30 <system_init+0x80>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:240
	}
	isr_table[0x7] = timer_irq_handler;
1c00ad72 <system_init+0xc2> lui	a5,0x1c017
1c00ad76 <system_init+0xc6> addi	a5,a5,-488 # 1c016e18 <isr_table>
1c00ad7a <system_init+0xca> lui	a4,0x1c00b
1c00ad7e <system_init+0xce> addi	a4,a4,-256 # 1c00af00 <timer_irq_handler>
1c00ad82 <system_init+0xd2> sw	a4,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:241
	isr_table[0xb] = (void (*)(uint32_t))fc_soc_event_handler1; // 11 for cv32
1c00ad84 <system_init+0xd4> lui	a5,0x1c017
1c00ad88 <system_init+0xd8> addi	a5,a5,-488 # 1c016e18 <isr_table>
1c00ad8c <system_init+0xdc> lui	a4,0x1c00a
1c00ad90 <system_init+0xe0> addi	a4,a4,-1546 # 1c0099f6 <fc_soc_event_handler1>
1c00ad94 <system_init+0xe4> sw	a4,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:246

	/* mtvec is set in crt0.S */

	/* deactivate all soc events as they are enabled by default */
	pulp_soc_eu_event_init();
1c00ad96 <system_init+0xe6> jal	ra,1c009bdc <pulp_soc_eu_event_init>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:250

	/* Setup soc events handler. */
	// pi_fc_event_handler_init(FC_SOC_EVENT);
	pi_fc_event_handler_init(11);
1c00ad9a <system_init+0xea> li	a0,11
1c00ad9c <system_init+0xec> jal	ra,1c009932 <pi_fc_event_handler_init>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:254

	/* TODO: I$ enable*/
	/* enable core level interrupt (mie) */
	irq_clint_enable();
1c00ada0 <system_init+0xf0> jal	ra,1c009a98 <irq_clint_enable>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:256

	val = csr_read(CSR_MIE);
1c00ada4 <system_init+0xf4> csrr	a5,mie
1c00ada8 <system_init+0xf8> mv	ra,a5
1c00adaa <system_init+0xfa> mv	a5,ra
1c00adac <system_init+0xfc> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:259

	/* TODO: enable uart */
	for (uint8_t id = 0; id != N_UART; id++)
1c00adb0 <system_init+0x100> sb	zero,-25(s0)
1c00adb4 <system_init+0x104> j	1c00add0 <system_init+0x120>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:261 (discriminator 3)
	{
		udma_uart_open(id, 115200);
1c00adb6 <system_init+0x106> lbu	a4,-25(s0)
1c00adba <system_init+0x10a> lui	a5,0x1c
1c00adbc <system_init+0x10c> addi	a1,a5,512 # 0001c200 <__stack_size+0x1ba00>
1c00adc0 <system_init+0x110> mv	a0,a4
1c00adc2 <system_init+0x112> jal	ra,1c00a83e <udma_uart_open>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:259 (discriminator 3)
	for (uint8_t id = 0; id != N_UART; id++)
1c00adc6 <system_init+0x116> lbu	a5,-25(s0)
1c00adca <system_init+0x11a> addi	a5,a5,1
1c00adcc <system_init+0x11c> sb	a5,-25(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:259 (discriminator 1)
1c00add0 <system_init+0x120> lbu	a4,-25(s0)
1c00add4 <system_init+0x124> li	a5,2
1c00add6 <system_init+0x126> bne	a4,a5,1c00adb6 <system_init+0x106>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:263
	}
	for (uint8_t id = 0; id != N_I2CM; id++)
1c00adda <system_init+0x12a> sb	zero,-26(s0)
1c00adde <system_init+0x12e> j	1c00adfc <system_init+0x14c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:265 (discriminator 3)
	{
		udma_i2cm_open(id, 400000); // 200000
1c00ade0 <system_init+0x130> lbu	a4,-26(s0)
1c00ade4 <system_init+0x134> lui	a5,0x62
1c00ade8 <system_init+0x138> addi	a1,a5,-1408 # 00061a80 <__stack_size+0x61280>
1c00adec <system_init+0x13c> mv	a0,a4
1c00adee <system_init+0x13e> jal	ra,1c009e16 <udma_i2cm_open>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:263 (discriminator 3)
	for (uint8_t id = 0; id != N_I2CM; id++)
1c00adf2 <system_init+0x142> lbu	a5,-26(s0)
1c00adf6 <system_init+0x146> addi	a5,a5,1
1c00adf8 <system_init+0x148> sb	a5,-26(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:263 (discriminator 1)
1c00adfc <system_init+0x14c> lbu	a4,-26(s0)
1c00ae00 <system_init+0x150> li	a5,2
1c00ae02 <system_init+0x152> bne	a4,a5,1c00ade0 <system_init+0x130>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:267
	}
	for (i = 0; i < N_QSPIM; i++)
1c00ae06 <system_init+0x156> sb	zero,-17(s0)
1c00ae0a <system_init+0x15a> j	1c00aece <system_init+0x21e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:269
	{
		setQspimPinMux(i);
1c00ae0c <system_init+0x15c> lbu	a5,-17(s0)
1c00ae10 <system_init+0x160> mv	a0,a5
1c00ae12 <system_init+0x162> jal	1c00b02e <setQspimPinMux>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:270
		udma_qspim_open(i, 2500000);
1c00ae14 <system_init+0x164> lbu	a4,-17(s0)
1c00ae18 <system_init+0x168> lui	a5,0x262
1c00ae1c <system_init+0x16c> addi	a1,a5,1440 # 002625a0 <__stack_size+0x261da0>
1c00ae20 <system_init+0x170> mv	a0,a4
1c00ae22 <system_init+0x172> jal	ra,1c00a186 <udma_qspim_open>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:271
		udma_qspim_control((uint8_t)i, (udma_qspim_control_type_t)kQSPImReset, (void *)0);
1c00ae26 <system_init+0x176> lbu	a5,-17(s0)
1c00ae2a <system_init+0x17a> li	a2,0
1c00ae2c <system_init+0x17c> li	a1,0
1c00ae2e <system_init+0x17e> mv	a0,a5
1c00ae30 <system_init+0x180> jal	ra,1c00a466 <udma_qspim_control>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:273

		lFlashID = udma_flash_readid(i, 0);
1c00ae34 <system_init+0x184> lbu	a5,-17(s0)
1c00ae38 <system_init+0x188> li	a1,0
1c00ae3a <system_init+0x18a> mv	a0,a5
1c00ae3c <system_init+0x18c> jal	ra,1c00a502 <udma_flash_readid>
1c00ae40 <system_init+0x190> sw	a0,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:274
		if ((lFlashID == 0xFFFFFFFF) || (lFlashID == 0))
1c00ae44 <system_init+0x194> lw	a4,-32(s0)
1c00ae48 <system_init+0x198> li	a5,-1
1c00ae4a <system_init+0x19a> beq	a4,a5,1c00ae54 <system_init+0x1a4>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:274 (discriminator 1)
1c00ae4e <system_init+0x19e> lw	a5,-32(s0)
1c00ae52 <system_init+0x1a2> bnez	a5,1c00ae68 <system_init+0x1b8>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:276
		{
			gQSPIFlashPresentFlg[i] = 0;
1c00ae54 <system_init+0x1a4> lbu	a4,-17(s0)
1c00ae58 <system_init+0x1a8> lui	a5,0x1c017
1c00ae5c <system_init+0x1ac> addi	a5,a5,-1080 # 1c016bc8 <gQSPIFlashPresentFlg>
1c00ae60 <system_init+0x1b0> add	a5,a5,a4
1c00ae62 <system_init+0x1b2> sb	zero,0(a5)
1c00ae66 <system_init+0x1b6> j	1c00aebc <system_init+0x20c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:280
		}
		else
		{
			gQSPIFlashPresentFlg[i] = 1;
1c00ae68 <system_init+0x1b8> lbu	a4,-17(s0)
1c00ae6c <system_init+0x1bc> lui	a5,0x1c017
1c00ae70 <system_init+0x1c0> addi	a5,a5,-1080 # 1c016bc8 <gQSPIFlashPresentFlg>
1c00ae74 <system_init+0x1c4> add	a5,a5,a4
1c00ae76 <system_init+0x1c6> li	a4,1
1c00ae78 <system_init+0x1c8> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:281
			if ((lFlashID & 0xFF) == 0x20)
1c00ae7c <system_init+0x1cc> lw	a5,-32(s0)
1c00ae80 <system_init+0x1d0> andi	a4,a5,255
1c00ae84 <system_init+0x1d4> li	a5,32
1c00ae88 <system_init+0x1d8> bne	a4,a5,1c00aeaa <system_init+0x1fa>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:283
			{
				gMicronFlashDetectedFlg[i] = 1;
1c00ae8c <system_init+0x1dc> lbu	a4,-17(s0)
1c00ae90 <system_init+0x1e0> lui	a5,0x1c017
1c00ae94 <system_init+0x1e4> addi	a5,a5,-1076 # 1c016bcc <gMicronFlashDetectedFlg>
1c00ae98 <system_init+0x1e8> add	a5,a5,a4
1c00ae9a <system_init+0x1ea> li	a4,1
1c00ae9c <system_init+0x1ec> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:284
				gQSPIIdNum = 0;
1c00aea0 <system_init+0x1f0> lui	a5,0x1c017
1c00aea4 <system_init+0x1f4> sb	zero,-1068(a5) # 1c016bd4 <gQSPIIdNum>
1c00aea8 <system_init+0x1f8> j	1c00aebc <system_init+0x20c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:287
			}
			else
				gMicronFlashDetectedFlg[i] = 0;
1c00aeaa <system_init+0x1fa> lbu	a4,-17(s0)
1c00aeae <system_init+0x1fe> lui	a5,0x1c017
1c00aeb2 <system_init+0x202> addi	a5,a5,-1076 # 1c016bcc <gMicronFlashDetectedFlg>
1c00aeb6 <system_init+0x206> add	a5,a5,a4
1c00aeb8 <system_init+0x208> sb	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:289 (discriminator 2)
		}
		restoreQspimPinMux(i);
1c00aebc <system_init+0x20c> lbu	a5,-17(s0)
1c00aec0 <system_init+0x210> mv	a0,a5
1c00aec2 <system_init+0x212> jal	1c00b19a <restoreQspimPinMux>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:267 (discriminator 2)
	for (i = 0; i < N_QSPIM; i++)
1c00aec4 <system_init+0x214> lbu	a5,-17(s0)
1c00aec8 <system_init+0x218> addi	a5,a5,1
1c00aeca <system_init+0x21a> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:267 (discriminator 1)
1c00aece <system_init+0x21e> lbu	a4,-17(s0)
1c00aed2 <system_init+0x222> li	a5,1
1c00aed4 <system_init+0x224> bgeu	a5,a4,1c00ae0c <system_init+0x15c>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:296

#if (FOR_SIMULATION_TESTING == 1)
	forSimulationTesting();
#endif

	hal_set_apb_i2cs_slave_on_off(1);
1c00aed8 <system_init+0x228> li	a0,1
1c00aeda <system_init+0x22a> jal	ra,1c0098c8 <hal_set_apb_i2cs_slave_on_off>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:297
	if (hal_get_apb_i2cs_slave_address() != MY_I2C_SLAVE_ADDRESS)
1c00aede <system_init+0x22e> jal	ra,1c009862 <hal_get_apb_i2cs_slave_address>
1c00aee2 <system_init+0x232> mv	a5,a0
1c00aee4 <system_init+0x234> mv	a4,a5
1c00aee6 <system_init+0x236> li	a5,98
1c00aeea <system_init+0x23a> beq	a4,a5,1c00aef6 <system_init+0x246>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:298
		hal_set_apb_i2cs_slave_address(MY_I2C_SLAVE_ADDRESS);
1c00aeee <system_init+0x23e> li	a0,98
1c00aef2 <system_init+0x242> jal	ra,1c009886 <hal_set_apb_i2cs_slave_address>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:299
}
1c00aef6 <system_init+0x246> nop
1c00aef8 <system_init+0x248> lw	ra,60(sp)
1c00aefa <system_init+0x24a> lw	s0,56(sp)
1c00aefc <system_init+0x24c> addi	sp,sp,64
1c00aefe <system_init+0x24e> ret
timer_irq_handler():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:326

	return 0;
}

void timer_irq_handler(uint32_t mcause)
{
1c00af00 <timer_irq_handler> addi	sp,sp,-32
1c00af02 <timer_irq_handler+0x2> sw	ra,28(sp)
1c00af04 <timer_irq_handler+0x4> sw	s0,24(sp)
1c00af06 <timer_irq_handler+0x6> addi	s0,sp,32
1c00af08 <timer_irq_handler+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:329
#warning requires critical section if interrupt nesting is used.
	//Writeraw(0, 1 ,(uint8_t*)a);
	rt_interrupt_enter();
1c00af0c <timer_irq_handler+0xc> jal	ra,1c00b992 <rt_interrupt_enter>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:330
	rt_tick_increase();
1c00af10 <timer_irq_handler+0x10> jal	1c00b4b2 <rt_tick_increase>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:331
	rt_interrupt_leave();
1c00af12 <timer_irq_handler+0x12> jal	ra,1c00b9ce <rt_interrupt_leave>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:332
}
1c00af16 <timer_irq_handler+0x16> nop
1c00af18 <timer_irq_handler+0x18> lw	ra,28(sp)
1c00af1a <timer_irq_handler+0x1a> lw	s0,24(sp)
1c00af1c <timer_irq_handler+0x1c> addi	sp,sp,32
1c00af1e <timer_irq_handler+0x1e> ret
vSystemIrqHandler():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:335

void vSystemIrqHandler(uint32_t mcause)
{
1c00af20 <vSystemIrqHandler> addi	sp,sp,-32
1c00af22 <vSystemIrqHandler+0x2> sw	ra,28(sp)
1c00af24 <vSystemIrqHandler+0x4> sw	s0,24(sp)
1c00af26 <vSystemIrqHandler+0x6> addi	s0,sp,32
1c00af28 <vSystemIrqHandler+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:337
	//Writeraw(0, 1,(uint8_t*)b);
	isr_table[mcause & 0x1f](mcause & 0x1f);
1c00af2c <vSystemIrqHandler+0xc> lw	a5,-20(s0)
1c00af30 <vSystemIrqHandler+0x10> andi	a5,a5,31
1c00af32 <vSystemIrqHandler+0x12> lui	a4,0x1c017
1c00af36 <vSystemIrqHandler+0x16> addi	a4,a4,-488 # 1c016e18 <isr_table>
1c00af3a <vSystemIrqHandler+0x1a> slli	a5,a5,0x2
1c00af3c <vSystemIrqHandler+0x1c> add	a5,a5,a4
1c00af3e <vSystemIrqHandler+0x1e> lw	a4,0(a5)
1c00af40 <vSystemIrqHandler+0x20> lw	a5,-20(s0)
1c00af44 <vSystemIrqHandler+0x24> andi	a5,a5,31
1c00af46 <vSystemIrqHandler+0x26> mv	a0,a5
1c00af48 <vSystemIrqHandler+0x28> jalr	a4
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:338
}
1c00af4a <vSystemIrqHandler+0x2a> nop
1c00af4c <vSystemIrqHandler+0x2c> lw	ra,28(sp)
1c00af4e <vSystemIrqHandler+0x2e> lw	s0,24(sp)
1c00af50 <vSystemIrqHandler+0x30> addi	sp,sp,32
1c00af52 <vSystemIrqHandler+0x32> ret
undefined_handler():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:341

void undefined_handler(uint32_t mcause)
{
1c00af54 <undefined_handler> addi	sp,sp,-48
1c00af56 <undefined_handler+0x2> sw	s0,44(sp)
1c00af58 <undefined_handler+0x4> sw	s1,40(sp)
1c00af5a <undefined_handler+0x6> addi	s0,sp,48
1c00af5c <undefined_handler+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:342
	uint32_t RegReadVal = 0;
1c00af60 <undefined_handler+0xc> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:348
#ifdef __PULP_USE_LIBC
	abort();
#else
	//	taskDISABLE_INTERRUPTS();
	//	for(;;);
	if ((mcause == 18) || (mcause == 19) || (mcause == 31))
1c00af64 <undefined_handler+0x10> lw	a4,-36(s0)
1c00af68 <undefined_handler+0x14> li	a5,18
1c00af6a <undefined_handler+0x16> beq	a4,a5,1c00af82 <undefined_handler+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:348 (discriminator 1)
1c00af6e <undefined_handler+0x1a> lw	a4,-36(s0)
1c00af72 <undefined_handler+0x1e> li	a5,19
1c00af74 <undefined_handler+0x20> beq	a4,a5,1c00af82 <undefined_handler+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:348 (discriminator 2)
1c00af78 <undefined_handler+0x24> lw	a4,-36(s0)
1c00af7c <undefined_handler+0x28> li	a5,31
1c00af7e <undefined_handler+0x2a> bne	a4,a5,1c00afdc <undefined_handler+0x88>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:350
	{
		gSpecialHandlingIRQCnt++;
1c00af82 <undefined_handler+0x2e> lui	a5,0x1c017
1c00af86 <undefined_handler+0x32> lw	a5,-1072(a5) # 1c016bd0 <gSpecialHandlingIRQCnt>
1c00af8a <undefined_handler+0x36> addi	a4,a5,1
1c00af8e <undefined_handler+0x3a> lui	a5,0x1c017
1c00af92 <undefined_handler+0x3e> sw	a4,-1072(a5) # 1c016bd0 <gSpecialHandlingIRQCnt>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:351
		if (gSpecialHandlingIRQCnt >= 20)
1c00af96 <undefined_handler+0x42> lui	a5,0x1c017
1c00af9a <undefined_handler+0x46> lw	a4,-1072(a5) # 1c016bd0 <gSpecialHandlingIRQCnt>
1c00af9e <undefined_handler+0x4a> li	a5,19
1c00afa0 <undefined_handler+0x4c> bgeu	a5,a4,1c00b006 <undefined_handler+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:353
		{
			RegReadVal = csr_read(CSR_MIE);
1c00afa4 <undefined_handler+0x50> csrr	a5,mie
1c00afa8 <undefined_handler+0x54> mv	s1,a5
1c00afaa <undefined_handler+0x56> mv	a5,s1
1c00afac <undefined_handler+0x58> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:354
			if ((RegReadVal & BIT(mcause)) != 0) // Check if the event interrupt mask is open.
1c00afb0 <undefined_handler+0x5c> lw	a4,-20(s0)
1c00afb4 <undefined_handler+0x60> lw	a5,-36(s0)
1c00afb8 <undefined_handler+0x64> srl	a5,a4,a5
1c00afbc <undefined_handler+0x68> andi	a5,a5,1
1c00afbe <undefined_handler+0x6a> beqz	a5,1c00b006 <undefined_handler+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:357
			{
				// close the event interrupt mask.
				csr_read_clear(CSR_MIE, BIT(mcause));
1c00afc0 <undefined_handler+0x6c> li	a4,1
1c00afc2 <undefined_handler+0x6e> lw	a5,-36(s0)
1c00afc6 <undefined_handler+0x72> sll	a5,a4,a5
1c00afca <undefined_handler+0x76> sw	a5,-24(s0)
1c00afce <undefined_handler+0x7a> lw	a5,-24(s0)
1c00afd2 <undefined_handler+0x7e> csrrc	a5,mie,a5
1c00afd6 <undefined_handler+0x82> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:351
		if (gSpecialHandlingIRQCnt >= 20)
1c00afda <undefined_handler+0x86> j	1c00b006 <undefined_handler+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:363
			}
		}
	}
	else
	{
		handler_count[mcause]++;
1c00afdc <undefined_handler+0x88> lui	a5,0x1c017
1c00afe0 <undefined_handler+0x8c> addi	a4,a5,-360 # 1c016e98 <handler_count>
1c00afe4 <undefined_handler+0x90> lw	a5,-36(s0)
1c00afe8 <undefined_handler+0x94> slli	a5,a5,0x2
1c00afea <undefined_handler+0x96> add	a5,a5,a4
1c00afec <undefined_handler+0x98> lw	a5,0(a5)
1c00afee <undefined_handler+0x9a> addi	a4,a5,1
1c00aff2 <undefined_handler+0x9e> lui	a5,0x1c017
1c00aff6 <undefined_handler+0xa2> addi	a3,a5,-360 # 1c016e98 <handler_count>
1c00affa <undefined_handler+0xa6> lw	a5,-36(s0)
1c00affe <undefined_handler+0xaa> slli	a5,a5,0x2
1c00b000 <undefined_handler+0xac> add	a5,a5,a3
1c00b002 <undefined_handler+0xae> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:367
	}

#endif
}
1c00b004 <undefined_handler+0xb0> j	1c00b008 <undefined_handler+0xb4>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:351
		if (gSpecialHandlingIRQCnt >= 20)
1c00b006 <undefined_handler+0xb2> nop
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:367
}
1c00b008 <undefined_handler+0xb4> nop
1c00b00a <undefined_handler+0xb6> lw	s0,44(sp)
1c00b00c <undefined_handler+0xb8> lw	s1,40(sp)
1c00b00e <undefined_handler+0xba> addi	sp,sp,48
1c00b010 <undefined_handler+0xbc> ret
vPortSetupTimerInterrupt():
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:370

void vPortSetupTimerInterrupt(void)
{
1c00b012 <vPortSetupTimerInterrupt> addi	sp,sp,-16
1c00b014 <vPortSetupTimerInterrupt+0x2> sw	ra,12(sp)
1c00b016 <vPortSetupTimerInterrupt+0x4> sw	s0,8(sp)
1c00b018 <vPortSetupTimerInterrupt+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:373

	extern int timer_irq_init(uint32_t ticks);
	timer_irq_init(ARCHI_FPGA_FREQUENCY / configTICK_RATE_HZ);
1c00b01a <vPortSetupTimerInterrupt+0x8> lui	a5,0xc
1c00b01c <vPortSetupTimerInterrupt+0xa> addi	a0,a5,848 # 0000c350 <__stack_size+0xbb50>
1c00b020 <vPortSetupTimerInterrupt+0xe> jal	ra,1c009c5e <timer_irq_init>
/home/wangshun/plct_cli/cli_test/cli_test/target/core-v-mcu/core-v-mcu.c:374
}
1c00b024 <vPortSetupTimerInterrupt+0x12> nop
1c00b026 <vPortSetupTimerInterrupt+0x14> lw	ra,12(sp)
1c00b028 <vPortSetupTimerInterrupt+0x16> lw	s0,8(sp)
1c00b02a <vPortSetupTimerInterrupt+0x18> addi	sp,sp,16
1c00b02c <vPortSetupTimerInterrupt+0x1a> ret
setQspimPinMux():
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:81
  CLI_CMD_SIMPLE( "program", program, "Program <filename>"),
  CLI_CMD_TERMINATE()
};

void setQspimPinMux(uint8_t aQspimID)
{
1c00b02e <setQspimPinMux> addi	sp,sp,-48
1c00b030 <setQspimPinMux+0x2> sw	ra,44(sp)
1c00b032 <setQspimPinMux+0x4> sw	s0,40(sp)
1c00b034 <setQspimPinMux+0x6> sw	s1,36(sp)
1c00b036 <setQspimPinMux+0x8> addi	s0,sp,48
1c00b038 <setQspimPinMux+0xa> mv	a5,a0
1c00b03a <setQspimPinMux+0xc> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:82
	uint8_t i = 0;
1c00b03e <setQspimPinMux+0x10> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:84

	if( aQspimID == 0 )
1c00b042 <setQspimPinMux+0x14> lbu	a5,-33(s0)
1c00b046 <setQspimPinMux+0x18> bnez	a5,1c00b136 <setQspimPinMux+0x108>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:86
	{
		for(i=0; i<4; i++ )
1c00b04a <setQspimPinMux+0x1c> sb	zero,-17(s0)
1c00b04e <setQspimPinMux+0x20> j	1c00b08e <setQspimPinMux+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:89 (discriminator 3)
		{
			//Save pin muxes
			gMuxSelSaveBuf[i] = hal_getpinmux(13+i);
1c00b050 <setQspimPinMux+0x22> lbu	a5,-17(s0)
1c00b054 <setQspimPinMux+0x26> addi	a5,a5,13
1c00b056 <setQspimPinMux+0x28> andi	a5,a5,255
1c00b05a <setQspimPinMux+0x2c> lbu	s1,-17(s0)
1c00b05e <setQspimPinMux+0x30> mv	a0,a5
1c00b060 <setQspimPinMux+0x32> jal	ra,1c009b4a <hal_getpinmux>
1c00b064 <setQspimPinMux+0x36> mv	a5,a0
1c00b066 <setQspimPinMux+0x38> mv	a4,a5
1c00b068 <setQspimPinMux+0x3a> addi	a5,gp,-316 # 1c0118bc <gMuxSelSaveBuf>
1c00b06c <setQspimPinMux+0x3e> add	a5,a5,s1
1c00b06e <setQspimPinMux+0x40> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:90 (discriminator 3)
			hal_setpinmux(13+i, 0);
1c00b072 <setQspimPinMux+0x44> lbu	a5,-17(s0)
1c00b076 <setQspimPinMux+0x48> addi	a5,a5,13
1c00b078 <setQspimPinMux+0x4a> andi	a5,a5,255
1c00b07c <setQspimPinMux+0x4e> li	a1,0
1c00b07e <setQspimPinMux+0x50> mv	a0,a5
1c00b080 <setQspimPinMux+0x52> jal	ra,1c009ae4 <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:86 (discriminator 3)
		for(i=0; i<4; i++ )
1c00b084 <setQspimPinMux+0x56> lbu	a5,-17(s0)
1c00b088 <setQspimPinMux+0x5a> addi	a5,a5,1
1c00b08a <setQspimPinMux+0x5c> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:86 (discriminator 1)
1c00b08e <setQspimPinMux+0x60> lbu	a4,-17(s0)
1c00b092 <setQspimPinMux+0x64> li	a5,3
1c00b094 <setQspimPinMux+0x66> bgeu	a5,a4,1c00b050 <setQspimPinMux+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:92
		}
		for(i=0; i<2; i++ )
1c00b098 <setQspimPinMux+0x6a> sb	zero,-17(s0)
1c00b09c <setQspimPinMux+0x6e> j	1c00b0dc <setQspimPinMux+0xae>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:95 (discriminator 3)
		{
			//Save pin muxes
			gMuxSelSaveBuf[i] = hal_getpinmux(19+i);
1c00b09e <setQspimPinMux+0x70> lbu	a5,-17(s0)
1c00b0a2 <setQspimPinMux+0x74> addi	a5,a5,19
1c00b0a4 <setQspimPinMux+0x76> andi	a5,a5,255
1c00b0a8 <setQspimPinMux+0x7a> lbu	s1,-17(s0)
1c00b0ac <setQspimPinMux+0x7e> mv	a0,a5
1c00b0ae <setQspimPinMux+0x80> jal	ra,1c009b4a <hal_getpinmux>
1c00b0b2 <setQspimPinMux+0x84> mv	a5,a0
1c00b0b4 <setQspimPinMux+0x86> mv	a4,a5
1c00b0b6 <setQspimPinMux+0x88> addi	a5,gp,-316 # 1c0118bc <gMuxSelSaveBuf>
1c00b0ba <setQspimPinMux+0x8c> add	a5,a5,s1
1c00b0bc <setQspimPinMux+0x8e> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:96 (discriminator 3)
			hal_setpinmux(19+i, 0);
1c00b0c0 <setQspimPinMux+0x92> lbu	a5,-17(s0)
1c00b0c4 <setQspimPinMux+0x96> addi	a5,a5,19
1c00b0c6 <setQspimPinMux+0x98> andi	a5,a5,255
1c00b0ca <setQspimPinMux+0x9c> li	a1,0
1c00b0cc <setQspimPinMux+0x9e> mv	a0,a5
1c00b0ce <setQspimPinMux+0xa0> jal	ra,1c009ae4 <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:92 (discriminator 3)
		for(i=0; i<2; i++ )
1c00b0d2 <setQspimPinMux+0xa4> lbu	a5,-17(s0)
1c00b0d6 <setQspimPinMux+0xa8> addi	a5,a5,1
1c00b0d8 <setQspimPinMux+0xaa> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:92 (discriminator 1)
1c00b0dc <setQspimPinMux+0xae> lbu	a4,-17(s0)
1c00b0e0 <setQspimPinMux+0xb2> li	a5,1
1c00b0e2 <setQspimPinMux+0xb4> bgeu	a5,a4,1c00b09e <setQspimPinMux+0x70>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:98
		}
		for(i=0; i<3; i++ )
1c00b0e6 <setQspimPinMux+0xb8> sb	zero,-17(s0)
1c00b0ea <setQspimPinMux+0xbc> j	1c00b12a <setQspimPinMux+0xfc>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:101 (discriminator 3)
		{
			//Save pin muxes
			gMuxSelSaveBuf[i] = hal_getpinmux(26+i);
1c00b0ec <setQspimPinMux+0xbe> lbu	a5,-17(s0)
1c00b0f0 <setQspimPinMux+0xc2> addi	a5,a5,26
1c00b0f2 <setQspimPinMux+0xc4> andi	a5,a5,255
1c00b0f6 <setQspimPinMux+0xc8> lbu	s1,-17(s0)
1c00b0fa <setQspimPinMux+0xcc> mv	a0,a5
1c00b0fc <setQspimPinMux+0xce> jal	ra,1c009b4a <hal_getpinmux>
1c00b100 <setQspimPinMux+0xd2> mv	a5,a0
1c00b102 <setQspimPinMux+0xd4> mv	a4,a5
1c00b104 <setQspimPinMux+0xd6> addi	a5,gp,-316 # 1c0118bc <gMuxSelSaveBuf>
1c00b108 <setQspimPinMux+0xda> add	a5,a5,s1
1c00b10a <setQspimPinMux+0xdc> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:102 (discriminator 3)
			hal_setpinmux(26+i, 1);
1c00b10e <setQspimPinMux+0xe0> lbu	a5,-17(s0)
1c00b112 <setQspimPinMux+0xe4> addi	a5,a5,26
1c00b114 <setQspimPinMux+0xe6> andi	a5,a5,255
1c00b118 <setQspimPinMux+0xea> li	a1,1
1c00b11a <setQspimPinMux+0xec> mv	a0,a5
1c00b11c <setQspimPinMux+0xee> jal	ra,1c009ae4 <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:98 (discriminator 3)
		for(i=0; i<3; i++ )
1c00b120 <setQspimPinMux+0xf2> lbu	a5,-17(s0)
1c00b124 <setQspimPinMux+0xf6> addi	a5,a5,1
1c00b126 <setQspimPinMux+0xf8> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:98 (discriminator 1)
1c00b12a <setQspimPinMux+0xfc> lbu	a4,-17(s0)
1c00b12e <setQspimPinMux+0x100> li	a5,2
1c00b130 <setQspimPinMux+0x102> bgeu	a5,a4,1c00b0ec <setQspimPinMux+0xbe>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:114
			//Save pin muxes
			gMuxSelSaveBuf[i] = hal_getpinmux(29+i);
			hal_setpinmux(29+i, 1);
		}
	}
}
1c00b134 <setQspimPinMux+0x106> j	1c00b18e <setQspimPinMux+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:105
	else if( aQspimID == 1 )
1c00b136 <setQspimPinMux+0x108> lbu	a4,-33(s0)
1c00b13a <setQspimPinMux+0x10c> li	a5,1
1c00b13c <setQspimPinMux+0x10e> bne	a4,a5,1c00b18e <setQspimPinMux+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:107
		for(i=0; i<8; i++ )
1c00b140 <setQspimPinMux+0x112> sb	zero,-17(s0)
1c00b144 <setQspimPinMux+0x116> j	1c00b184 <setQspimPinMux+0x156>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:110 (discriminator 3)
			gMuxSelSaveBuf[i] = hal_getpinmux(29+i);
1c00b146 <setQspimPinMux+0x118> lbu	a5,-17(s0)
1c00b14a <setQspimPinMux+0x11c> addi	a5,a5,29
1c00b14c <setQspimPinMux+0x11e> andi	a5,a5,255
1c00b150 <setQspimPinMux+0x122> lbu	s1,-17(s0)
1c00b154 <setQspimPinMux+0x126> mv	a0,a5
1c00b156 <setQspimPinMux+0x128> jal	ra,1c009b4a <hal_getpinmux>
1c00b15a <setQspimPinMux+0x12c> mv	a5,a0
1c00b15c <setQspimPinMux+0x12e> mv	a4,a5
1c00b15e <setQspimPinMux+0x130> addi	a5,gp,-316 # 1c0118bc <gMuxSelSaveBuf>
1c00b162 <setQspimPinMux+0x134> add	a5,a5,s1
1c00b164 <setQspimPinMux+0x136> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:111 (discriminator 3)
			hal_setpinmux(29+i, 1);
1c00b168 <setQspimPinMux+0x13a> lbu	a5,-17(s0)
1c00b16c <setQspimPinMux+0x13e> addi	a5,a5,29
1c00b16e <setQspimPinMux+0x140> andi	a5,a5,255
1c00b172 <setQspimPinMux+0x144> li	a1,1
1c00b174 <setQspimPinMux+0x146> mv	a0,a5
1c00b176 <setQspimPinMux+0x148> jal	ra,1c009ae4 <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:107 (discriminator 3)
		for(i=0; i<8; i++ )
1c00b17a <setQspimPinMux+0x14c> lbu	a5,-17(s0)
1c00b17e <setQspimPinMux+0x150> addi	a5,a5,1
1c00b180 <setQspimPinMux+0x152> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:107 (discriminator 1)
1c00b184 <setQspimPinMux+0x156> lbu	a4,-17(s0)
1c00b188 <setQspimPinMux+0x15a> li	a5,7
1c00b18a <setQspimPinMux+0x15c> bgeu	a5,a4,1c00b146 <setQspimPinMux+0x118>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:114
}
1c00b18e <setQspimPinMux+0x160> nop
1c00b190 <setQspimPinMux+0x162> lw	ra,44(sp)
1c00b192 <setQspimPinMux+0x164> lw	s0,40(sp)
1c00b194 <setQspimPinMux+0x166> lw	s1,36(sp)
1c00b196 <setQspimPinMux+0x168> addi	sp,sp,48
1c00b198 <setQspimPinMux+0x16a> ret
restoreQspimPinMux():
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:117

void restoreQspimPinMux(uint8_t aQspimID)
{
1c00b19a <restoreQspimPinMux> addi	sp,sp,-48
1c00b19c <restoreQspimPinMux+0x2> sw	ra,44(sp)
1c00b19e <restoreQspimPinMux+0x4> sw	s0,40(sp)
1c00b1a0 <restoreQspimPinMux+0x6> addi	s0,sp,48
1c00b1a2 <restoreQspimPinMux+0x8> mv	a5,a0
1c00b1a4 <restoreQspimPinMux+0xa> sb	a5,-33(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:118
	uint8_t i = 0;
1c00b1a8 <restoreQspimPinMux+0xe> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:120

	if( aQspimID == 0 )
1c00b1ac <restoreQspimPinMux+0x12> lbu	a5,-33(s0)
1c00b1b0 <restoreQspimPinMux+0x16> bnez	a5,1c00b262 <restoreQspimPinMux+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:122
	{
		for(i=0; i<4; i++ )
1c00b1b2 <restoreQspimPinMux+0x18> sb	zero,-17(s0)
1c00b1b6 <restoreQspimPinMux+0x1c> j	1c00b1e2 <restoreQspimPinMux+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:124 (discriminator 3)
		{
			hal_setpinmux(13+i, gMuxSelSaveBuf[i]);
1c00b1b8 <restoreQspimPinMux+0x1e> lbu	a5,-17(s0)
1c00b1bc <restoreQspimPinMux+0x22> addi	a5,a5,13
1c00b1be <restoreQspimPinMux+0x24> andi	a3,a5,255
1c00b1c2 <restoreQspimPinMux+0x28> lbu	a5,-17(s0)
1c00b1c6 <restoreQspimPinMux+0x2c> addi	a4,gp,-316 # 1c0118bc <gMuxSelSaveBuf>
1c00b1ca <restoreQspimPinMux+0x30> add	a5,a5,a4
1c00b1cc <restoreQspimPinMux+0x32> lbu	a5,0(a5)
1c00b1d0 <restoreQspimPinMux+0x36> mv	a1,a5
1c00b1d2 <restoreQspimPinMux+0x38> mv	a0,a3
1c00b1d4 <restoreQspimPinMux+0x3a> jal	ra,1c009ae4 <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:122 (discriminator 3)
		for(i=0; i<4; i++ )
1c00b1d8 <restoreQspimPinMux+0x3e> lbu	a5,-17(s0)
1c00b1dc <restoreQspimPinMux+0x42> addi	a5,a5,1
1c00b1de <restoreQspimPinMux+0x44> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:122 (discriminator 1)
1c00b1e2 <restoreQspimPinMux+0x48> lbu	a4,-17(s0)
1c00b1e6 <restoreQspimPinMux+0x4c> li	a5,3
1c00b1e8 <restoreQspimPinMux+0x4e> bgeu	a5,a4,1c00b1b8 <restoreQspimPinMux+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:126
		}
		for(i=0; i<2; i++ )
1c00b1ec <restoreQspimPinMux+0x52> sb	zero,-17(s0)
1c00b1f0 <restoreQspimPinMux+0x56> j	1c00b21c <restoreQspimPinMux+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:128 (discriminator 3)
		{
			hal_setpinmux(19+i, gMuxSelSaveBuf[i]);
1c00b1f2 <restoreQspimPinMux+0x58> lbu	a5,-17(s0)
1c00b1f6 <restoreQspimPinMux+0x5c> addi	a5,a5,19
1c00b1f8 <restoreQspimPinMux+0x5e> andi	a3,a5,255
1c00b1fc <restoreQspimPinMux+0x62> lbu	a5,-17(s0)
1c00b200 <restoreQspimPinMux+0x66> addi	a4,gp,-316 # 1c0118bc <gMuxSelSaveBuf>
1c00b204 <restoreQspimPinMux+0x6a> add	a5,a5,a4
1c00b206 <restoreQspimPinMux+0x6c> lbu	a5,0(a5)
1c00b20a <restoreQspimPinMux+0x70> mv	a1,a5
1c00b20c <restoreQspimPinMux+0x72> mv	a0,a3
1c00b20e <restoreQspimPinMux+0x74> jal	ra,1c009ae4 <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:126 (discriminator 3)
		for(i=0; i<2; i++ )
1c00b212 <restoreQspimPinMux+0x78> lbu	a5,-17(s0)
1c00b216 <restoreQspimPinMux+0x7c> addi	a5,a5,1
1c00b218 <restoreQspimPinMux+0x7e> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:126 (discriminator 1)
1c00b21c <restoreQspimPinMux+0x82> lbu	a4,-17(s0)
1c00b220 <restoreQspimPinMux+0x86> li	a5,1
1c00b222 <restoreQspimPinMux+0x88> bgeu	a5,a4,1c00b1f2 <restoreQspimPinMux+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:130
		}
		for(i=0; i<3; i++ )
1c00b226 <restoreQspimPinMux+0x8c> sb	zero,-17(s0)
1c00b22a <restoreQspimPinMux+0x90> j	1c00b256 <restoreQspimPinMux+0xbc>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:132 (discriminator 3)
		{
			hal_setpinmux(26+i, gMuxSelSaveBuf[i]);
1c00b22c <restoreQspimPinMux+0x92> lbu	a5,-17(s0)
1c00b230 <restoreQspimPinMux+0x96> addi	a5,a5,26
1c00b232 <restoreQspimPinMux+0x98> andi	a3,a5,255
1c00b236 <restoreQspimPinMux+0x9c> lbu	a5,-17(s0)
1c00b23a <restoreQspimPinMux+0xa0> addi	a4,gp,-316 # 1c0118bc <gMuxSelSaveBuf>
1c00b23e <restoreQspimPinMux+0xa4> add	a5,a5,a4
1c00b240 <restoreQspimPinMux+0xa6> lbu	a5,0(a5)
1c00b244 <restoreQspimPinMux+0xaa> mv	a1,a5
1c00b246 <restoreQspimPinMux+0xac> mv	a0,a3
1c00b248 <restoreQspimPinMux+0xae> jal	ra,1c009ae4 <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:130 (discriminator 3)
		for(i=0; i<3; i++ )
1c00b24c <restoreQspimPinMux+0xb2> lbu	a5,-17(s0)
1c00b250 <restoreQspimPinMux+0xb6> addi	a5,a5,1
1c00b252 <restoreQspimPinMux+0xb8> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:130 (discriminator 1)
1c00b256 <restoreQspimPinMux+0xbc> lbu	a4,-17(s0)
1c00b25a <restoreQspimPinMux+0xc0> li	a5,2
1c00b25c <restoreQspimPinMux+0xc2> bgeu	a5,a4,1c00b22c <restoreQspimPinMux+0x92>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:142
		for(i=0; i<8; i++ )
		{
			hal_setpinmux(29+i, gMuxSelSaveBuf[i]);
		}
	}
}
1c00b260 <restoreQspimPinMux+0xc6> j	1c00b2a6 <restoreQspimPinMux+0x10c>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:135
	else if( aQspimID == 1 )
1c00b262 <restoreQspimPinMux+0xc8> lbu	a4,-33(s0)
1c00b266 <restoreQspimPinMux+0xcc> li	a5,1
1c00b268 <restoreQspimPinMux+0xce> bne	a4,a5,1c00b2a6 <restoreQspimPinMux+0x10c>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:137
		for(i=0; i<8; i++ )
1c00b26c <restoreQspimPinMux+0xd2> sb	zero,-17(s0)
1c00b270 <restoreQspimPinMux+0xd6> j	1c00b29c <restoreQspimPinMux+0x102>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:139 (discriminator 3)
			hal_setpinmux(29+i, gMuxSelSaveBuf[i]);
1c00b272 <restoreQspimPinMux+0xd8> lbu	a5,-17(s0)
1c00b276 <restoreQspimPinMux+0xdc> addi	a5,a5,29
1c00b278 <restoreQspimPinMux+0xde> andi	a3,a5,255
1c00b27c <restoreQspimPinMux+0xe2> lbu	a5,-17(s0)
1c00b280 <restoreQspimPinMux+0xe6> addi	a4,gp,-316 # 1c0118bc <gMuxSelSaveBuf>
1c00b284 <restoreQspimPinMux+0xea> add	a5,a5,a4
1c00b286 <restoreQspimPinMux+0xec> lbu	a5,0(a5)
1c00b28a <restoreQspimPinMux+0xf0> mv	a1,a5
1c00b28c <restoreQspimPinMux+0xf2> mv	a0,a3
1c00b28e <restoreQspimPinMux+0xf4> jal	ra,1c009ae4 <hal_setpinmux>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:137 (discriminator 3)
		for(i=0; i<8; i++ )
1c00b292 <restoreQspimPinMux+0xf8> lbu	a5,-17(s0)
1c00b296 <restoreQspimPinMux+0xfc> addi	a5,a5,1
1c00b298 <restoreQspimPinMux+0xfe> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:137 (discriminator 1)
1c00b29c <restoreQspimPinMux+0x102> lbu	a4,-17(s0)
1c00b2a0 <restoreQspimPinMux+0x106> li	a5,7
1c00b2a2 <restoreQspimPinMux+0x108> bgeu	a5,a4,1c00b272 <restoreQspimPinMux+0xd8>
/home/wangshun/plct_cli/cli_test/cli_test/app//qspi_tests.c:142
}
1c00b2a6 <restoreQspimPinMux+0x10c> nop
1c00b2a8 <restoreQspimPinMux+0x10e> lw	ra,44(sp)
1c00b2aa <restoreQspimPinMux+0x110> lw	s0,40(sp)
1c00b2ac <restoreQspimPinMux+0x112> addi	sp,sp,48
1c00b2ae <restoreQspimPinMux+0x114> ret
writeraw():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:124
			a++;
		}
	}
}

uint16_t writeraw(uint8_t uart_id, uint16_t write_len, uint8_t* write_buffer) {
1c00b2b0 <writeraw> addi	sp,sp,-48
1c00b2b2 <writeraw+0x2> sw	s0,44(sp)
1c00b2b4 <writeraw+0x4> addi	s0,sp,48
1c00b2b6 <writeraw+0x6> mv	a5,a0
1c00b2b8 <writeraw+0x8> mv	a4,a1
1c00b2ba <writeraw+0xa> sw	a2,-40(s0)
1c00b2be <writeraw+0xe> sb	a5,-33(s0)
1c00b2c2 <writeraw+0x12> mv	a5,a4
1c00b2c4 <writeraw+0x14> sh	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:125
	UdmaUart_t*				puart = (UdmaUart_t*)(UDMA_CH_ADDR_UART + uart_id * UDMA_CH_SIZE);
1c00b2c8 <writeraw+0x18> lbu	a4,-33(s0)
1c00b2cc <writeraw+0x1c> lui	a5,0x342
1c00b2d0 <writeraw+0x20> addi	a5,a5,65 # 00342041 <__stack_size+0x341841>
1c00b2d4 <writeraw+0x24> add	a5,a5,a4
1c00b2d6 <writeraw+0x26> slli	a5,a5,0x7
1c00b2d8 <writeraw+0x28> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:127

	while (puart->status_b.tx_busy) {  // ToDo: Why is this necessary?  Thought the semaphore should have protected
1c00b2dc <writeraw+0x2c> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:127 (discriminator 1)
1c00b2de <writeraw+0x2e> lw	a5,-20(s0)
1c00b2e2 <writeraw+0x32> lw	a5,32(a5)
1c00b2e4 <writeraw+0x34> andi	a5,a5,1
1c00b2e6 <writeraw+0x36> andi	a5,a5,255
1c00b2ea <writeraw+0x3a> bnez	a5,1c00b2de <writeraw+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:130
	}

	puart->tx_saddr = (uint32_t)write_buffer;
1c00b2ec <writeraw+0x3c> lw	a4,-40(s0)
1c00b2f0 <writeraw+0x40> lw	a5,-20(s0)
1c00b2f4 <writeraw+0x44> sw	a4,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:131
	puart->tx_size = write_len;
1c00b2f6 <writeraw+0x46> lhu	a4,-36(s0)
1c00b2fa <writeraw+0x4a> lw	a5,-20(s0)
1c00b2fe <writeraw+0x4e> sw	a4,20(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:132
	puart->tx_cfg_b.en = 1; //enable the transfer
1c00b300 <writeraw+0x50> lw	a5,-20(s0)
1c00b304 <writeraw+0x54> lbu	a4,24(a5)
1c00b308 <writeraw+0x58> ori	a4,a4,16
1c00b30c <writeraw+0x5c> sb	a4,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:134

	return 0;
1c00b310 <writeraw+0x60> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:135
}
1c00b312 <writeraw+0x62> mv	a0,a5
1c00b314 <writeraw+0x64> lw	s0,44(sp)
1c00b316 <writeraw+0x66> addi	sp,sp,48
1c00b318 <writeraw+0x68> ret
rt_hw_console_output():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:138

rt_hw_console_output(const char *str)
{
1c00b31a <rt_hw_console_output> addi	sp,sp,-32
1c00b31c <rt_hw_console_output+0x2> sw	ra,28(sp)
1c00b31e <rt_hw_console_output+0x4> sw	s0,24(sp)
1c00b320 <rt_hw_console_output+0x6> addi	s0,sp,32
1c00b322 <rt_hw_console_output+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:139
	writeraw(0, strlen(str), (uint8_t*)str);
1c00b326 <rt_hw_console_output+0xc> lw	a0,-20(s0)
1c00b32a <rt_hw_console_output+0x10> jal	ra,1c008318 <strlen>
1c00b32e <rt_hw_console_output+0x14> mv	a5,a0
1c00b330 <rt_hw_console_output+0x16> slli	a5,a5,0x10
1c00b332 <rt_hw_console_output+0x18> srli	a5,a5,0x10
1c00b334 <rt_hw_console_output+0x1a> lw	a2,-20(s0)
1c00b338 <rt_hw_console_output+0x1e> mv	a1,a5
1c00b33a <rt_hw_console_output+0x20> li	a0,0
1c00b33c <rt_hw_console_output+0x22> jal	1c00b2b0 <writeraw>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:140
}
1c00b33e <rt_hw_console_output+0x24> nop
1c00b340 <rt_hw_console_output+0x26> mv	a0,a5
1c00b342 <rt_hw_console_output+0x28> lw	ra,28(sp)
1c00b344 <rt_hw_console_output+0x2a> lw	s0,24(sp)
1c00b346 <rt_hw_console_output+0x2c> addi	sp,sp,32
1c00b348 <rt_hw_console_output+0x2e> ret
rt_hw_console_getchar():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:143

char rt_hw_console_getchar(void)
{
1c00b34a <rt_hw_console_getchar> addi	sp,sp,-32
1c00b34c <rt_hw_console_getchar+0x2> sw	ra,28(sp)
1c00b34e <rt_hw_console_getchar+0x4> sw	s0,24(sp)
1c00b350 <rt_hw_console_getchar+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:144
	char ch=0;
1c00b352 <rt_hw_console_getchar+0x8> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:145
	while(rt_ringbuffer_getchar(&uart_rxTCB,(rt_uint8_t*)&ch)!=0)
1c00b356 <rt_hw_console_getchar+0xc> j	1c00b364 <rt_hw_console_getchar+0x1a>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:147
	{
		rt_sem_take(&shell_rx_semaphore,RT_WAITING_FOREVER);
1c00b358 <rt_hw_console_getchar+0xe> li	a1,-1
1c00b35a <rt_hw_console_getchar+0x10> lui	a5,0x1c017
1c00b35e <rt_hw_console_getchar+0x14> addi	a0,a5,-904 # 1c016c78 <shell_rx_semaphore>
1c00b362 <rt_hw_console_getchar+0x18> jal	1c00b83a <rt_sem_take>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:145
	while(rt_ringbuffer_getchar(&uart_rxTCB,(rt_uint8_t*)&ch)!=0)
1c00b364 <rt_hw_console_getchar+0x1a> addi	a5,s0,-17
1c00b368 <rt_hw_console_getchar+0x1e> mv	a1,a5
1c00b36a <rt_hw_console_getchar+0x20> lui	a5,0x1c017
1c00b36e <rt_hw_console_getchar+0x24> addi	a0,a5,-916 # 1c016c6c <uart_rxTCB>
1c00b372 <rt_hw_console_getchar+0x28> jal	ra,1c00e562 <rt_ringbuffer_getchar>
1c00b376 <rt_hw_console_getchar+0x2c> mv	a5,a0
1c00b378 <rt_hw_console_getchar+0x2e> bnez	a5,1c00b358 <rt_hw_console_getchar+0xe>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:149
	}
	return ch;
1c00b37a <rt_hw_console_getchar+0x30> lb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:151
	//return udma_uart_getchar(0);
}
1c00b37e <rt_hw_console_getchar+0x34> mv	a0,a5
1c00b380 <rt_hw_console_getchar+0x36> lw	ra,28(sp)
1c00b382 <rt_hw_console_getchar+0x38> lw	s0,24(sp)
1c00b384 <rt_hw_console_getchar+0x3a> addi	sp,sp,32
1c00b386 <rt_hw_console_getchar+0x3c> ret
rt_heap_begin_get():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:169

#if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
	#define RT_HEAP_SIZE (20*1024)
	static rt_uint8_t rt_heap[RT_HEAP_SIZE];
	void *rt_heap_begin_get(void)
	{
1c00b388 <rt_heap_begin_get> addi	sp,sp,-16
1c00b38a <rt_heap_begin_get+0x2> sw	s0,12(sp)
1c00b38c <rt_heap_begin_get+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:170
		return rt_heap;
1c00b38e <rt_heap_begin_get+0x6> lui	a5,0x1c012
1c00b392 <rt_heap_begin_get+0xa> addi	a5,a5,-1848 # 1c0118c8 <rt_heap>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:171
	}
1c00b396 <rt_heap_begin_get+0xe> mv	a0,a5
1c00b398 <rt_heap_begin_get+0x10> lw	s0,12(sp)
1c00b39a <rt_heap_begin_get+0x12> addi	sp,sp,16
1c00b39c <rt_heap_begin_get+0x14> ret
rt_heap_end_get():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:173
	void *rt_heap_end_get(void)
	{
1c00b39e <rt_heap_end_get> addi	sp,sp,-16
1c00b3a0 <rt_heap_end_get+0x2> sw	s0,12(sp)
1c00b3a2 <rt_heap_end_get+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:174
		return rt_heap + RT_HEAP_SIZE;
1c00b3a4 <rt_heap_end_get+0x6> lui	a5,0x1c017
1c00b3a8 <rt_heap_end_get+0xa> addi	a5,a5,-1848 # 1c0168c8 <idle>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:175
	}
1c00b3ac <rt_heap_end_get+0xe> mv	a0,a5
1c00b3ae <rt_heap_end_get+0x10> lw	s0,12(sp)
1c00b3b0 <rt_heap_end_get+0x12> addi	sp,sp,16
1c00b3b2 <rt_heap_end_get+0x14> ret
led_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:179
#endif

void led_init(void)
{
1c00b3b4 <led_init> addi	sp,sp,-16
1c00b3b6 <led_init+0x2> sw	ra,12(sp)
1c00b3b8 <led_init+0x4> sw	s0,8(sp)
1c00b3ba <led_init+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:180
	rt_kprintf("Hello RT-Thread 1\r\n");
1c00b3bc <led_init+0x8> lui	a5,0x1c010
1c00b3c0 <led_init+0xc> addi	a0,a5,808 # 1c010328 <__l2_priv0_end>
1c00b3c4 <led_init+0x10> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:181
	rt_kprintf("RT-Thread INIT TEST \r\n");
1c00b3c8 <led_init+0x14> lui	a5,0x1c010
1c00b3cc <led_init+0x18> addi	a0,a5,828 # 1c01033c <__l2_priv0_end+0x14>
1c00b3d0 <led_init+0x1c> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:182
	rt_kprintf("RT-Thread TEST SUCCESS \r\n");
1c00b3d4 <led_init+0x20> lui	a5,0x1c010
1c00b3d8 <led_init+0x24> addi	a0,a5,852 # 1c010354 <__l2_priv0_end+0x2c>
1c00b3dc <led_init+0x28> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:183
}
1c00b3e0 <led_init+0x2c> nop
1c00b3e2 <led_init+0x2e> lw	ra,12(sp)
1c00b3e4 <led_init+0x30> lw	s0,8(sp)
1c00b3e6 <led_init+0x32> addi	sp,sp,16
1c00b3e8 <led_init+0x34> ret
main():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:187
INIT_APP_EXPORT(led_init);

int main(void)
{
1c00b3ea <main> addi	sp,sp,-16
1c00b3ec <main+0x2> sw	ra,12(sp)
1c00b3ee <main+0x4> sw	s0,8(sp)
1c00b3f0 <main+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:222 (discriminator 1)
//        rt_thread_delay(500);   /* 延时500个tick */
//    }

	while(1)
	{
		 rt_thread_delay(500);
1c00b3f2 <main+0x8> li	a0,500
1c00b3f6 <main+0xc> jal	ra,1c00d34e <rt_thread_delay>
1c00b3fa <main+0x10> j	1c00b3f2 <main+0x8>
rt_hw_board_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:245
		writeraw(0,sizeof(note), (uint8_t*)note3);
		rt_thread_delay(500);   /* 延时500个tick */
	}
}
void rt_hw_board_init()
{
1c00b3fc <rt_hw_board_init> addi	sp,sp,-32
1c00b3fe <rt_hw_board_init+0x2> sw	ra,28(sp)
1c00b400 <rt_hw_board_init+0x4> sw	s0,24(sp)
1c00b402 <rt_hw_board_init+0x6> sw	s1,20(sp)
1c00b404 <rt_hw_board_init+0x8> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:247
    /* System Clock Update */
	system_init();
1c00b406 <rt_hw_board_init+0xa> jal	ra,1c00acb0 <system_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:249

	vPortSetupTimerInterrupt();
1c00b40a <rt_hw_board_init+0xe> jal	1c00b012 <vPortSetupTimerInterrupt>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:251

	volatile uint32_t mtvec = 0;
1c00b40c <rt_hw_board_init+0x10> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:252
	__asm volatile( "csrr %0, mtvec" : "=r"( mtvec ) );
1c00b410 <rt_hw_board_init+0x14> csrr	a5,mtvec
1c00b414 <rt_hw_board_init+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:253
	__asm volatile( "csrs mie, %0" :: "r"(0x880) );
1c00b418 <rt_hw_board_init+0x1c> lui	a5,0x1
1c00b41a <rt_hw_board_init+0x1e> addi	a5,a5,-1920 # 00000880 <__stack_size+0x80>
1c00b41e <rt_hw_board_init+0x22> csrs	mie,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:259
    /* System Tick Configuration */
    //SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);

    /* Call components board initial (use INIT_BOARD_EXPORT()) */
#ifdef RT_USING_COMPONENTS_INIT
    rt_components_board_init();
1c00b422 <rt_hw_board_init+0x26> jal	ra,1c00db88 <rt_components_board_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:263
#endif

#if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
    rt_system_heap_init(rt_heap_begin_get(), rt_heap_end_get());
1c00b426 <rt_hw_board_init+0x2a> jal	1c00b388 <rt_heap_begin_get>
1c00b428 <rt_hw_board_init+0x2c> mv	s1,a0
1c00b42a <rt_hw_board_init+0x2e> jal	1c00b39e <rt_heap_end_get>
1c00b42c <rt_hw_board_init+0x30> mv	a5,a0
1c00b42e <rt_hw_board_init+0x32> mv	a1,a5
1c00b430 <rt_hw_board_init+0x34> mv	a0,s1
1c00b432 <rt_hw_board_init+0x36> jal	ra,1c00ddbe <rt_system_heap_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:266
#endif

	rt_ringbuffer_init(&uart_rxTCB,uart_rxbuffer,16);
1c00b436 <rt_hw_board_init+0x3a> li	a2,16
1c00b438 <rt_hw_board_init+0x3c> addi	a1,gp,-332 # 1c0118ac <uart_rxbuffer>
1c00b43c <rt_hw_board_init+0x40> lui	a5,0x1c017
1c00b440 <rt_hw_board_init+0x44> addi	a0,a5,-916 # 1c016c6c <uart_rxTCB>
1c00b444 <rt_hw_board_init+0x48> jal	ra,1c00e3c2 <rt_ringbuffer_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:267
	rt_sem_init(&(shell_rx_semaphore),"shell_rx",0,0);
1c00b448 <rt_hw_board_init+0x4c> li	a3,0
1c00b44a <rt_hw_board_init+0x4e> li	a2,0
1c00b44c <rt_hw_board_init+0x50> lui	a5,0x1c010
1c00b450 <rt_hw_board_init+0x54> addi	a1,a5,880 # 1c010370 <__l2_priv0_end+0x48>
1c00b454 <rt_hw_board_init+0x58> lui	a5,0x1c017
1c00b458 <rt_hw_board_init+0x5c> addi	a0,a5,-904 # 1c016c78 <shell_rx_semaphore>
1c00b45c <rt_hw_board_init+0x60> jal	1c00b7de <rt_sem_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:268
}
1c00b45e <rt_hw_board_init+0x62> nop
1c00b460 <rt_hw_board_init+0x64> lw	ra,28(sp)
1c00b462 <rt_hw_board_init+0x66> lw	s0,24(sp)
1c00b464 <rt_hw_board_init+0x68> lw	s1,20(sp)
1c00b466 <rt_hw_board_init+0x6a> addi	sp,sp,32
1c00b468 <rt_hw_board_init+0x6c> ret
vApplicationMallocFailedHook():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:294
}
/*---------------------------------------------------------*/


void vApplicationMallocFailedHook( void )
{
1c00b46a <vApplicationMallocFailedHook> addi	sp,sp,-16
1c00b46c <vApplicationMallocFailedHook+0x2> sw	s0,12(sp)
1c00b46e <vApplicationMallocFailedHook+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:304
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
1c00b470 <vApplicationMallocFailedHook+0x6> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:306
//	printf( "error: application malloc failed\n" );
	__asm volatile( "ebreak" );
1c00b474 <vApplicationMallocFailedHook+0xa> ebreak
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:307 (discriminator 1)
	for( ;; );
1c00b476 <vApplicationMallocFailedHook+0xc> j	1c00b476 <vApplicationMallocFailedHook+0xc>
vApplicationStackOverflowHook():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:326
	memory allocated by the kernel to any task that has since been deleted. */
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1c00b478 <vApplicationStackOverflowHook> addi	sp,sp,-32
1c00b47a <vApplicationStackOverflowHook+0x2> sw	s0,28(sp)
1c00b47c <vApplicationStackOverflowHook+0x4> addi	s0,sp,32
1c00b47e <vApplicationStackOverflowHook+0x6> sw	a0,-20(s0)
1c00b482 <vApplicationStackOverflowHook+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:333
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
1c00b486 <vApplicationStackOverflowHook+0xe> csrci	mstatus,8
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:334
	__asm volatile( "ebreak" );
1c00b48a <vApplicationStackOverflowHook+0x12> ebreak
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:335 (discriminator 1)
	for( ;; );
1c00b48c <vApplicationStackOverflowHook+0x14> j	1c00b48c <vApplicationStackOverflowHook+0x14>
vApplicationTickHook():
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:340
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
1c00b48e <vApplicationTickHook> addi	sp,sp,-16
1c00b490 <vApplicationTickHook+0x2> sw	s0,12(sp)
1c00b492 <vApplicationTickHook+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//main.c:348
	{
		extern void vFullDemoTickHook( void );
		vFullDemoTickHook();
	}
	#endif
}
1c00b494 <vApplicationTickHook+0x6> nop
1c00b496 <vApplicationTickHook+0x8> lw	s0,12(sp)
1c00b498 <vApplicationTickHook+0xa> addi	sp,sp,16
1c00b49a <vApplicationTickHook+0xc> ret
rt_tick_get():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:46
 * This function will return current tick from operating system startup
 *
 * @return current tick
 */
rt_tick_t rt_tick_get(void)
{
1c00b49c <rt_tick_get> addi	sp,sp,-16
1c00b49e <rt_tick_get+0x2> sw	s0,12(sp)
1c00b4a0 <rt_tick_get+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:48
    /* return the global tick */
    return rt_tick;
1c00b4a2 <rt_tick_get+0x6> lui	a5,0x1c017
1c00b4a6 <rt_tick_get+0xa> lw	a5,-1064(a5) # 1c016bd8 <rt_tick>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:49
}
1c00b4aa <rt_tick_get+0xe> mv	a0,a5
1c00b4ac <rt_tick_get+0x10> lw	s0,12(sp)
1c00b4ae <rt_tick_get+0x12> addi	sp,sp,16
1c00b4b0 <rt_tick_get+0x14> ret
rt_tick_increase():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:68
/**
 * This function will notify kernel there is one tick passed. Normally,
 * this function is invoked by clock ISR.
 */
void rt_tick_increase(void)
{
1c00b4b2 <rt_tick_increase> addi	sp,sp,-32
1c00b4b4 <rt_tick_increase+0x2> sw	ra,28(sp)
1c00b4b6 <rt_tick_increase+0x4> sw	s0,24(sp)
1c00b4b8 <rt_tick_increase+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:72
    struct rt_thread *thread;

    /* increase the global tick */
    ++ rt_tick;
1c00b4ba <rt_tick_increase+0x8> lui	a5,0x1c017
1c00b4be <rt_tick_increase+0xc> lw	a5,-1064(a5) # 1c016bd8 <rt_tick>
1c00b4c2 <rt_tick_increase+0x10> addi	a4,a5,1
1c00b4c6 <rt_tick_increase+0x14> lui	a5,0x1c017
1c00b4ca <rt_tick_increase+0x18> sw	a4,-1064(a5) # 1c016bd8 <rt_tick>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:75

    /* check time slice */
    thread = rt_thread_self();
1c00b4ce <rt_tick_increase+0x1c> jal	ra,1c00d150 <rt_thread_self>
1c00b4d2 <rt_tick_increase+0x20> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:77

    -- thread->remaining_tick;
1c00b4d6 <rt_tick_increase+0x24> lw	a5,-20(s0)
1c00b4da <rt_tick_increase+0x28> lw	a5,64(a5)
1c00b4dc <rt_tick_increase+0x2a> addi	a4,a5,-1
1c00b4e0 <rt_tick_increase+0x2e> lw	a5,-20(s0)
1c00b4e4 <rt_tick_increase+0x32> sw	a4,64(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:78
    if (thread->remaining_tick == 0)
1c00b4e6 <rt_tick_increase+0x34> lw	a5,-20(s0)
1c00b4ea <rt_tick_increase+0x38> lw	a5,64(a5)
1c00b4ec <rt_tick_increase+0x3a> bnez	a5,1c00b4fe <rt_tick_increase+0x4c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:81
    {
        /* change to initialized tick */
        thread->remaining_tick = thread->init_tick;
1c00b4ee <rt_tick_increase+0x3c> lw	a5,-20(s0)
1c00b4f2 <rt_tick_increase+0x40> lw	a4,60(a5)
1c00b4f4 <rt_tick_increase+0x42> lw	a5,-20(s0)
1c00b4f8 <rt_tick_increase+0x46> sw	a4,64(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:84

        /* yield */
        rt_thread_yield();
1c00b4fa <rt_tick_increase+0x48> jal	ra,1c00d24c <rt_thread_yield>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:88
    }

    /* check timer */
    rt_timer_check();
1c00b4fe <rt_tick_increase+0x4c> jal	ra,1c00d9e0 <rt_timer_check>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/clock.c:89
}
1c00b502 <rt_tick_increase+0x50> nop
1c00b504 <rt_tick_increase+0x52> lw	ra,28(sp)
1c00b506 <rt_tick_increase+0x54> lw	s0,24(sp)
1c00b508 <rt_tick_increase+0x56> addi	sp,sp,32
1c00b50a <rt_tick_increase+0x58> ret
rt_list_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:87
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
1c00b50c <rt_list_remove> addi	sp,sp,-32
1c00b50e <rt_list_remove+0x2> sw	s0,28(sp)
1c00b510 <rt_list_remove+0x4> addi	s0,sp,32
1c00b512 <rt_list_remove+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:88
    n->next->prev = n->prev;
1c00b516 <rt_list_remove+0xa> lw	a5,-20(s0)
1c00b51a <rt_list_remove+0xe> lw	a5,0(a5)
1c00b51c <rt_list_remove+0x10> lw	a4,-20(s0)
1c00b520 <rt_list_remove+0x14> lw	a4,4(a4)
1c00b522 <rt_list_remove+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:89
    n->prev->next = n->next;
1c00b524 <rt_list_remove+0x18> lw	a5,-20(s0)
1c00b528 <rt_list_remove+0x1c> lw	a5,4(a5)
1c00b52a <rt_list_remove+0x1e> lw	a4,-20(s0)
1c00b52e <rt_list_remove+0x22> lw	a4,0(a4)
1c00b530 <rt_list_remove+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:91

    n->next = n->prev = n;
1c00b532 <rt_list_remove+0x26> lw	a5,-20(s0)
1c00b536 <rt_list_remove+0x2a> lw	a4,-20(s0)
1c00b53a <rt_list_remove+0x2e> sw	a4,4(a5)
1c00b53c <rt_list_remove+0x30> lw	a5,-20(s0)
1c00b540 <rt_list_remove+0x34> lw	a4,4(a5)
1c00b542 <rt_list_remove+0x36> lw	a5,-20(s0)
1c00b546 <rt_list_remove+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:92
}
1c00b548 <rt_list_remove+0x3c> nop
1c00b54a <rt_list_remove+0x3e> lw	s0,28(sp)
1c00b54c <rt_list_remove+0x40> addi	sp,sp,32
1c00b54e <rt_list_remove+0x42> ret
_has_defunct_thread():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:123
#endif

#ifdef RT_USING_HEAP
/* Return whether there is defunctional thread to be deleted. */
rt_inline int _has_defunct_thread(void)
{
1c00b550 <_has_defunct_thread> addi	sp,sp,-32
1c00b552 <_has_defunct_thread+0x2> sw	s0,28(sp)
1c00b554 <_has_defunct_thread+0x4> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:130
     * So the compiler has a good reason that the rt_thread_defunct list does
     * not change within rt_thread_idle_excute thus optimize the "while" loop
     * into a "if".
     *
     * So add the volatile qualifier here. */
    const volatile rt_list_t *l = (const volatile rt_list_t *)&rt_thread_defunct;
1c00b556 <_has_defunct_thread+0x6> lui	a5,0x1c017
1c00b55a <_has_defunct_thread+0xa> addi	a5,a5,36 # 1c017024 <rt_thread_defunct>
1c00b55e <_has_defunct_thread+0xe> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:132

    return l->next != l;
1c00b562 <_has_defunct_thread+0x12> lw	a5,-20(s0)
1c00b566 <_has_defunct_thread+0x16> lw	a5,0(a5)
1c00b568 <_has_defunct_thread+0x18> lw	a4,-20(s0)
1c00b56c <_has_defunct_thread+0x1c> sub	a5,a4,a5
1c00b570 <_has_defunct_thread+0x20> snez	a5,a5
1c00b574 <_has_defunct_thread+0x24> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:133
}
1c00b578 <_has_defunct_thread+0x28> mv	a0,a5
1c00b57a <_has_defunct_thread+0x2a> lw	s0,28(sp)
1c00b57c <_has_defunct_thread+0x2c> addi	sp,sp,32
1c00b57e <_has_defunct_thread+0x2e> ret
rt_thread_idle_excute():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:142
 * @ingroup Thread
 *
 * This function will perform system background job when system idle.
 */
void rt_thread_idle_excute(void)
{
1c00b580 <rt_thread_idle_excute> addi	sp,sp,-32
1c00b582 <rt_thread_idle_excute+0x2> sw	ra,28(sp)
1c00b584 <rt_thread_idle_excute+0x4> sw	s0,24(sp)
1c00b586 <rt_thread_idle_excute+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:155
    while (1)
    {
        rt_base_t lock;
        rt_thread_t thread;

        lock = rt_hw_interrupt_disable();
1c00b588 <rt_thread_idle_excute+0x8> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00b58c <rt_thread_idle_excute+0xc> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:158

        /* check whether list is empty */
        if (!_has_defunct_thread())
1c00b590 <rt_thread_idle_excute+0x10> jal	1c00b550 <_has_defunct_thread>
1c00b592 <rt_thread_idle_excute+0x12> mv	a5,a0
1c00b594 <rt_thread_idle_excute+0x14> bnez	a5,1c00b5a0 <rt_thread_idle_excute+0x20>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:160
        {
            rt_hw_interrupt_enable(lock);
1c00b596 <rt_thread_idle_excute+0x16> lw	a0,-20(s0)
1c00b59a <rt_thread_idle_excute+0x1a> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:161
            break;
1c00b59e <rt_thread_idle_excute+0x1e> j	1c00b5d8 <rt_thread_idle_excute+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:164
        }
        /* get defunct thread */
        thread = rt_list_entry(rt_thread_defunct.next,
1c00b5a0 <rt_thread_idle_excute+0x20> lui	a5,0x1c017
1c00b5a4 <rt_thread_idle_excute+0x24> addi	a5,a5,36 # 1c017024 <rt_thread_defunct>
1c00b5a8 <rt_thread_idle_excute+0x28> lw	a5,0(a5)
1c00b5aa <rt_thread_idle_excute+0x2a> addi	a5,a5,-20
1c00b5ac <rt_thread_idle_excute+0x2c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:168
                struct rt_thread,
                tlist);
        /* remove defunct thread */
        rt_list_remove(&(thread->tlist));
1c00b5b0 <rt_thread_idle_excute+0x30> lw	a5,-24(s0)
1c00b5b4 <rt_thread_idle_excute+0x34> addi	a5,a5,20
1c00b5b6 <rt_thread_idle_excute+0x36> mv	a0,a5
1c00b5b8 <rt_thread_idle_excute+0x38> jal	1c00b50c <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:170
        /* release thread's stack */
        RT_KERNEL_FREE(thread->stack_addr);
1c00b5ba <rt_thread_idle_excute+0x3a> lw	a5,-24(s0)
1c00b5be <rt_thread_idle_excute+0x3e> lw	a5,40(a5)
1c00b5c0 <rt_thread_idle_excute+0x40> mv	a0,a5
1c00b5c2 <rt_thread_idle_excute+0x42> jal	ra,1c00e1f6 <rt_free>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:172
        /* delete thread object */
        rt_object_delete((rt_object_t)thread);
1c00b5c6 <rt_thread_idle_excute+0x46> lw	a0,-24(s0)
1c00b5ca <rt_thread_idle_excute+0x4a> jal	ra,1c00c9d0 <rt_object_delete>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:173
        rt_hw_interrupt_enable(lock);
1c00b5ce <rt_thread_idle_excute+0x4e> lw	a0,-20(s0)
1c00b5d2 <rt_thread_idle_excute+0x52> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:151
    {
1c00b5d6 <rt_thread_idle_excute+0x56> j	1c00b588 <rt_thread_idle_excute+0x8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:176
    }
#endif
}
1c00b5d8 <rt_thread_idle_excute+0x58> nop
1c00b5da <rt_thread_idle_excute+0x5a> lw	ra,28(sp)
1c00b5dc <rt_thread_idle_excute+0x5c> lw	s0,24(sp)
1c00b5de <rt_thread_idle_excute+0x5e> addi	sp,sp,32
1c00b5e0 <rt_thread_idle_excute+0x60> ret
rt_thread_idle_entry():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:180

extern void rt_system_power_manager(void);
static void rt_thread_idle_entry(void *parameter)
{
1c00b5e2 <rt_thread_idle_entry> addi	sp,sp,-32
1c00b5e4 <rt_thread_idle_entry+0x2> sw	ra,28(sp)
1c00b5e6 <rt_thread_idle_entry+0x4> sw	s0,24(sp)
1c00b5e8 <rt_thread_idle_entry+0x6> addi	s0,sp,32
1c00b5ea <rt_thread_idle_entry+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:196 (discriminator 1)
                idle_hook_list[i]();
            }
        }
#endif

        rt_thread_idle_excute();
1c00b5ee <rt_thread_idle_entry+0xc> jal	1c00b580 <rt_thread_idle_excute>
1c00b5f0 <rt_thread_idle_entry+0xe> j	1c00b5ee <rt_thread_idle_entry+0xc>
rt_thread_idle_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:211
 * This function will initialize idle thread, then start it.
 *
 * @note this function must be invoked when system init.
 */
void rt_thread_idle_init(void)
{
1c00b5f2 <rt_thread_idle_init> addi	sp,sp,-16
1c00b5f4 <rt_thread_idle_init+0x2> sw	ra,12(sp)
1c00b5f6 <rt_thread_idle_init+0x4> sw	s0,8(sp)
1c00b5f8 <rt_thread_idle_init+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:213
    /* initialize thread */
    rt_thread_init(&idle,
1c00b5fa <rt_thread_idle_init+0x8> li	a7,32
1c00b5fe <rt_thread_idle_init+0xc> li	a6,31
1c00b600 <rt_thread_idle_init+0xe> li	a5,256
1c00b604 <rt_thread_idle_init+0x12> lui	a4,0x1c017
1c00b608 <rt_thread_idle_init+0x16> addi	a4,a4,-1728 # 1c016940 <rt_thread_stack>
1c00b60c <rt_thread_idle_init+0x1a> li	a3,0
1c00b60e <rt_thread_idle_init+0x1c> lui	a2,0x1c00b
1c00b612 <rt_thread_idle_init+0x20> addi	a2,a2,1506 # 1c00b5e2 <rt_thread_idle_entry>
1c00b616 <rt_thread_idle_init+0x24> lui	a1,0x1c010
1c00b61a <rt_thread_idle_init+0x28> addi	a1,a1,912 # 1c010390 <__l2_priv0_end+0x68>
1c00b61e <rt_thread_idle_init+0x2c> lui	a0,0x1c017
1c00b622 <rt_thread_idle_init+0x30> addi	a0,a0,-1848 # 1c0168c8 <idle>
1c00b626 <rt_thread_idle_init+0x34> jal	ra,1c00d0e8 <rt_thread_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:223
                   sizeof(rt_thread_stack),
                   RT_THREAD_PRIORITY_MAX - 1,
                   32);

    /* startup */
    rt_thread_startup(&idle);
1c00b62a <rt_thread_idle_init+0x38> lui	a5,0x1c017
1c00b62e <rt_thread_idle_init+0x3c> addi	a0,a5,-1848 # 1c0168c8 <idle>
1c00b632 <rt_thread_idle_init+0x40> jal	ra,1c00d166 <rt_thread_startup>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/idle.c:224
}
1c00b636 <rt_thread_idle_init+0x44> nop
1c00b638 <rt_thread_idle_init+0x46> lw	ra,12(sp)
1c00b63a <rt_thread_idle_init+0x48> lw	s0,8(sp)
1c00b63c <rt_thread_idle_init+0x4a> addi	sp,sp,16
1c00b63e <rt_thread_idle_init+0x4c> ret
rt_list_init():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:48
{
1c00b640 <rt_list_init> addi	sp,sp,-32
1c00b642 <rt_list_init+0x2> sw	s0,28(sp)
1c00b644 <rt_list_init+0x4> addi	s0,sp,32
1c00b646 <rt_list_init+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:49
    l->next = l->prev = l;
1c00b64a <rt_list_init+0xa> lw	a5,-20(s0)
1c00b64e <rt_list_init+0xe> lw	a4,-20(s0)
1c00b652 <rt_list_init+0x12> sw	a4,4(a5)
1c00b654 <rt_list_init+0x14> lw	a5,-20(s0)
1c00b658 <rt_list_init+0x18> lw	a4,4(a5)
1c00b65a <rt_list_init+0x1a> lw	a5,-20(s0)
1c00b65e <rt_list_init+0x1e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:50
}
1c00b660 <rt_list_init+0x20> nop
1c00b662 <rt_list_init+0x22> lw	s0,28(sp)
1c00b664 <rt_list_init+0x24> addi	sp,sp,32
1c00b666 <rt_list_init+0x26> ret
rt_list_insert_before():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:74
{
1c00b668 <rt_list_insert_before> addi	sp,sp,-32
1c00b66a <rt_list_insert_before+0x2> sw	s0,28(sp)
1c00b66c <rt_list_insert_before+0x4> addi	s0,sp,32
1c00b66e <rt_list_insert_before+0x6> sw	a0,-20(s0)
1c00b672 <rt_list_insert_before+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:75
    l->prev->next = n;
1c00b676 <rt_list_insert_before+0xe> lw	a5,-20(s0)
1c00b67a <rt_list_insert_before+0x12> lw	a5,4(a5)
1c00b67c <rt_list_insert_before+0x14> lw	a4,-24(s0)
1c00b680 <rt_list_insert_before+0x18> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:76
    n->prev = l->prev;
1c00b682 <rt_list_insert_before+0x1a> lw	a5,-20(s0)
1c00b686 <rt_list_insert_before+0x1e> lw	a4,4(a5)
1c00b688 <rt_list_insert_before+0x20> lw	a5,-24(s0)
1c00b68c <rt_list_insert_before+0x24> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:78
    l->prev = n;
1c00b68e <rt_list_insert_before+0x26> lw	a5,-20(s0)
1c00b692 <rt_list_insert_before+0x2a> lw	a4,-24(s0)
1c00b696 <rt_list_insert_before+0x2e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:79
    n->next = l;
1c00b698 <rt_list_insert_before+0x30> lw	a5,-24(s0)
1c00b69c <rt_list_insert_before+0x34> lw	a4,-20(s0)
1c00b6a0 <rt_list_insert_before+0x38> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:80
}
1c00b6a2 <rt_list_insert_before+0x3a> nop
1c00b6a4 <rt_list_insert_before+0x3c> lw	s0,28(sp)
1c00b6a6 <rt_list_insert_before+0x3e> addi	sp,sp,32
1c00b6a8 <rt_list_insert_before+0x40> ret
rt_list_isempty():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:99
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
1c00b6aa <rt_list_isempty> addi	sp,sp,-32
1c00b6ac <rt_list_isempty+0x2> sw	s0,28(sp)
1c00b6ae <rt_list_isempty+0x4> addi	s0,sp,32
1c00b6b0 <rt_list_isempty+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:100
    return l->next == l;
1c00b6b4 <rt_list_isempty+0xa> lw	a5,-20(s0)
1c00b6b8 <rt_list_isempty+0xe> lw	a5,0(a5)
1c00b6ba <rt_list_isempty+0x10> lw	a4,-20(s0)
1c00b6be <rt_list_isempty+0x14> sub	a5,a4,a5
1c00b6c2 <rt_list_isempty+0x18> seqz	a5,a5
1c00b6c6 <rt_list_isempty+0x1c> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:101
}
1c00b6ca <rt_list_isempty+0x20> mv	a0,a5
1c00b6cc <rt_list_isempty+0x22> lw	s0,28(sp)
1c00b6ce <rt_list_isempty+0x24> addi	sp,sp,32
1c00b6d0 <rt_list_isempty+0x26> ret
rt_ipc_object_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:65
 * @param ipc the IPC object
 *
 * @return the operation status, RT_EOK on successful
 */
rt_inline rt_err_t rt_ipc_object_init(struct rt_ipc_object *ipc)
{
1c00b6d2 <rt_ipc_object_init> addi	sp,sp,-32
1c00b6d4 <rt_ipc_object_init+0x2> sw	ra,28(sp)
1c00b6d6 <rt_ipc_object_init+0x4> sw	s0,24(sp)
1c00b6d8 <rt_ipc_object_init+0x6> addi	s0,sp,32
1c00b6da <rt_ipc_object_init+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:67
    /* initialize ipc object */
    rt_list_init(&(ipc->suspend_thread));
1c00b6de <rt_ipc_object_init+0xc> lw	a5,-20(s0)
1c00b6e2 <rt_ipc_object_init+0x10> addi	a5,a5,20
1c00b6e4 <rt_ipc_object_init+0x12> mv	a0,a5
1c00b6e6 <rt_ipc_object_init+0x14> jal	1c00b640 <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:69

    return RT_EOK;
1c00b6e8 <rt_ipc_object_init+0x16> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:70
}
1c00b6ea <rt_ipc_object_init+0x18> mv	a0,a5
1c00b6ec <rt_ipc_object_init+0x1a> lw	ra,28(sp)
1c00b6ee <rt_ipc_object_init+0x1c> lw	s0,24(sp)
1c00b6f0 <rt_ipc_object_init+0x1e> addi	sp,sp,32
1c00b6f2 <rt_ipc_object_init+0x20> ret
rt_ipc_list_suspend():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:86
 * @return the operation status, RT_EOK on successful
 */
rt_inline rt_err_t rt_ipc_list_suspend(rt_list_t        *list,
                                       struct rt_thread *thread,
                                       rt_uint8_t        flag)
{
1c00b6f4 <rt_ipc_list_suspend> addi	sp,sp,-48
1c00b6f6 <rt_ipc_list_suspend+0x2> sw	ra,44(sp)
1c00b6f8 <rt_ipc_list_suspend+0x4> sw	s0,40(sp)
1c00b6fa <rt_ipc_list_suspend+0x6> addi	s0,sp,48
1c00b6fc <rt_ipc_list_suspend+0x8> sw	a0,-36(s0)
1c00b700 <rt_ipc_list_suspend+0xc> sw	a1,-40(s0)
1c00b704 <rt_ipc_list_suspend+0x10> mv	a5,a2
1c00b706 <rt_ipc_list_suspend+0x12> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:88
    /* suspend thread */
    rt_thread_suspend(thread);
1c00b70a <rt_ipc_list_suspend+0x16> lw	a0,-40(s0)
1c00b70e <rt_ipc_list_suspend+0x1a> jal	ra,1c00d36c <rt_thread_suspend>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:90

    switch (flag)
1c00b712 <rt_ipc_list_suspend+0x1e> lbu	a5,-41(s0)
1c00b716 <rt_ipc_list_suspend+0x22> beqz	a5,1c00b720 <rt_ipc_list_suspend+0x2c>
1c00b718 <rt_ipc_list_suspend+0x24> li	a4,1
1c00b71a <rt_ipc_list_suspend+0x26> beq	a5,a4,1c00b730 <rt_ipc_list_suspend+0x3c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:125
                rt_list_insert_before(list, &(thread->tlist));
        }
        break;

    default:
        break;
1c00b71e <rt_ipc_list_suspend+0x2a> j	1c00b7a6 <rt_ipc_list_suspend+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:93
        rt_list_insert_before(list, &(thread->tlist));
1c00b720 <rt_ipc_list_suspend+0x2c> lw	a5,-40(s0)
1c00b724 <rt_ipc_list_suspend+0x30> addi	a5,a5,20
1c00b726 <rt_ipc_list_suspend+0x32> mv	a1,a5
1c00b728 <rt_ipc_list_suspend+0x34> lw	a0,-36(s0)
1c00b72c <rt_ipc_list_suspend+0x38> jal	1c00b668 <rt_list_insert_before>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:94
        break;
1c00b72e <rt_ipc_list_suspend+0x3a> j	1c00b7a6 <rt_ipc_list_suspend+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:102
            for (n = list->next; n != list; n = n->next)
1c00b730 <rt_ipc_list_suspend+0x3c> lw	a5,-36(s0)
1c00b734 <rt_ipc_list_suspend+0x40> lw	a5,0(a5)
1c00b736 <rt_ipc_list_suspend+0x42> sw	a5,-20(s0)
1c00b73a <rt_ipc_list_suspend+0x46> j	1c00b77a <rt_ipc_list_suspend+0x86>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:104
                sthread = rt_list_entry(n, struct rt_thread, tlist);
1c00b73c <rt_ipc_list_suspend+0x48> lw	a5,-20(s0)
1c00b740 <rt_ipc_list_suspend+0x4c> addi	a5,a5,-20
1c00b742 <rt_ipc_list_suspend+0x4e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:107
                if (thread->current_priority < sthread->current_priority)
1c00b746 <rt_ipc_list_suspend+0x52> lw	a5,-40(s0)
1c00b74a <rt_ipc_list_suspend+0x56> lbu	a4,53(a5)
1c00b74e <rt_ipc_list_suspend+0x5a> lw	a5,-24(s0)
1c00b752 <rt_ipc_list_suspend+0x5e> lbu	a5,53(a5)
1c00b756 <rt_ipc_list_suspend+0x62> bgeu	a4,a5,1c00b770 <rt_ipc_list_suspend+0x7c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:110
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
1c00b75a <rt_ipc_list_suspend+0x66> lw	a5,-24(s0)
1c00b75e <rt_ipc_list_suspend+0x6a> addi	a4,a5,20
1c00b762 <rt_ipc_list_suspend+0x6e> lw	a5,-40(s0)
1c00b766 <rt_ipc_list_suspend+0x72> addi	a5,a5,20
1c00b768 <rt_ipc_list_suspend+0x74> mv	a1,a5
1c00b76a <rt_ipc_list_suspend+0x76> mv	a0,a4
1c00b76c <rt_ipc_list_suspend+0x78> jal	1c00b668 <rt_list_insert_before>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:111
                    break;
1c00b76e <rt_ipc_list_suspend+0x7a> j	1c00b786 <rt_ipc_list_suspend+0x92>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:102 (discriminator 2)
            for (n = list->next; n != list; n = n->next)
1c00b770 <rt_ipc_list_suspend+0x7c> lw	a5,-20(s0)
1c00b774 <rt_ipc_list_suspend+0x80> lw	a5,0(a5)
1c00b776 <rt_ipc_list_suspend+0x82> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:102 (discriminator 1)
1c00b77a <rt_ipc_list_suspend+0x86> lw	a4,-20(s0)
1c00b77e <rt_ipc_list_suspend+0x8a> lw	a5,-36(s0)
1c00b782 <rt_ipc_list_suspend+0x8e> bne	a4,a5,1c00b73c <rt_ipc_list_suspend+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:119
            if (n == list)
1c00b786 <rt_ipc_list_suspend+0x92> lw	a4,-20(s0)
1c00b78a <rt_ipc_list_suspend+0x96> lw	a5,-36(s0)
1c00b78e <rt_ipc_list_suspend+0x9a> bne	a4,a5,1c00b7a2 <rt_ipc_list_suspend+0xae>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:120
                rt_list_insert_before(list, &(thread->tlist));
1c00b792 <rt_ipc_list_suspend+0x9e> lw	a5,-40(s0)
1c00b796 <rt_ipc_list_suspend+0xa2> addi	a5,a5,20
1c00b798 <rt_ipc_list_suspend+0xa4> mv	a1,a5
1c00b79a <rt_ipc_list_suspend+0xa6> lw	a0,-36(s0)
1c00b79e <rt_ipc_list_suspend+0xaa> jal	1c00b668 <rt_list_insert_before>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:122
        break;
1c00b7a0 <rt_ipc_list_suspend+0xac> j	1c00b7a4 <rt_ipc_list_suspend+0xb0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:97
        {
1c00b7a2 <rt_ipc_list_suspend+0xae> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:122
        break;
1c00b7a4 <rt_ipc_list_suspend+0xb0> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:128
    }

    return RT_EOK;
1c00b7a6 <rt_ipc_list_suspend+0xb2> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:129
}
1c00b7a8 <rt_ipc_list_suspend+0xb4> mv	a0,a5
1c00b7aa <rt_ipc_list_suspend+0xb6> lw	ra,44(sp)
1c00b7ac <rt_ipc_list_suspend+0xb8> lw	s0,40(sp)
1c00b7ae <rt_ipc_list_suspend+0xba> addi	sp,sp,48
1c00b7b0 <rt_ipc_list_suspend+0xbc> ret
rt_ipc_list_resume():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:141
 * @param list the thread list
 *
 * @return the operation status, RT_EOK on successful
 */
rt_inline rt_err_t rt_ipc_list_resume(rt_list_t *list)
{
1c00b7b2 <rt_ipc_list_resume> addi	sp,sp,-48
1c00b7b4 <rt_ipc_list_resume+0x2> sw	ra,44(sp)
1c00b7b6 <rt_ipc_list_resume+0x4> sw	s0,40(sp)
1c00b7b8 <rt_ipc_list_resume+0x6> addi	s0,sp,48
1c00b7ba <rt_ipc_list_resume+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:145
    struct rt_thread *thread;

    /* get thread entry */
    thread = rt_list_entry(list->next, struct rt_thread, tlist);
1c00b7be <rt_ipc_list_resume+0xc> lw	a5,-36(s0)
1c00b7c2 <rt_ipc_list_resume+0x10> lw	a5,0(a5)
1c00b7c4 <rt_ipc_list_resume+0x12> addi	a5,a5,-20
1c00b7c6 <rt_ipc_list_resume+0x14> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:150

    RT_DEBUG_LOG(RT_DEBUG_IPC, ("resume thread:%s\n", thread->name));

    /* resume it */
    rt_thread_resume(thread);
1c00b7ca <rt_ipc_list_resume+0x18> lw	a0,-20(s0)
1c00b7ce <rt_ipc_list_resume+0x1c> jal	ra,1c00d3e4 <rt_thread_resume>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:152

    return RT_EOK;
1c00b7d2 <rt_ipc_list_resume+0x20> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:153
}
1c00b7d4 <rt_ipc_list_resume+0x22> mv	a0,a5
1c00b7d6 <rt_ipc_list_resume+0x24> lw	ra,44(sp)
1c00b7d8 <rt_ipc_list_resume+0x26> lw	s0,40(sp)
1c00b7da <rt_ipc_list_resume+0x28> addi	sp,sp,48
1c00b7dc <rt_ipc_list_resume+0x2a> ret
rt_sem_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:209
 */
rt_err_t rt_sem_init(rt_sem_t    sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
1c00b7de <rt_sem_init> addi	sp,sp,-32
1c00b7e0 <rt_sem_init+0x2> sw	ra,28(sp)
1c00b7e2 <rt_sem_init+0x4> sw	s0,24(sp)
1c00b7e4 <rt_sem_init+0x6> addi	s0,sp,32
1c00b7e6 <rt_sem_init+0x8> sw	a0,-20(s0)
1c00b7ea <rt_sem_init+0xc> sw	a1,-24(s0)
1c00b7ee <rt_sem_init+0x10> sw	a2,-28(s0)
1c00b7f2 <rt_sem_init+0x14> mv	a5,a3
1c00b7f4 <rt_sem_init+0x16> sb	a5,-29(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:214
    RT_ASSERT(sem != RT_NULL);
    RT_ASSERT(value < 0x10000U);

    /* initialize object */
    rt_object_init(&(sem->parent.parent), RT_Object_Class_Semaphore, name);
1c00b7f8 <rt_sem_init+0x1a> lw	a5,-20(s0)
1c00b7fc <rt_sem_init+0x1e> lw	a2,-24(s0)
1c00b800 <rt_sem_init+0x22> li	a1,2
1c00b802 <rt_sem_init+0x24> mv	a0,a5
1c00b804 <rt_sem_init+0x26> jal	ra,1c00c84e <rt_object_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:217

    /* initialize ipc object */
    rt_ipc_object_init(&(sem->parent));
1c00b808 <rt_sem_init+0x2a> lw	a5,-20(s0)
1c00b80c <rt_sem_init+0x2e> mv	a0,a5
1c00b80e <rt_sem_init+0x30> jal	1c00b6d2 <rt_ipc_object_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:220

    /* set initial value */
    sem->value = (rt_uint16_t)value;
1c00b810 <rt_sem_init+0x32> lw	a5,-28(s0)
1c00b814 <rt_sem_init+0x36> slli	a4,a5,0x10
1c00b818 <rt_sem_init+0x3a> srli	a4,a4,0x10
1c00b81a <rt_sem_init+0x3c> lw	a5,-20(s0)
1c00b81e <rt_sem_init+0x40> sh	a4,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:223

    /* set parent */
    sem->parent.parent.flag = flag;
1c00b822 <rt_sem_init+0x44> lw	a5,-20(s0)
1c00b826 <rt_sem_init+0x48> lbu	a4,-29(s0)
1c00b82a <rt_sem_init+0x4c> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:225

    return RT_EOK;
1c00b82e <rt_sem_init+0x50> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:226
}
1c00b830 <rt_sem_init+0x52> mv	a0,a5
1c00b832 <rt_sem_init+0x54> lw	ra,28(sp)
1c00b834 <rt_sem_init+0x56> lw	s0,24(sp)
1c00b836 <rt_sem_init+0x58> addi	sp,sp,32
1c00b838 <rt_sem_init+0x5a> ret
rt_sem_take():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:327
 * @param time the waiting time
 *
 * @return the error code
 */
rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
1c00b83a <rt_sem_take> addi	sp,sp,-48
1c00b83c <rt_sem_take+0x2> sw	ra,44(sp)
1c00b83e <rt_sem_take+0x4> sw	s0,40(sp)
1c00b840 <rt_sem_take+0x6> sw	s1,36(sp)
1c00b842 <rt_sem_take+0x8> addi	s0,sp,48
1c00b844 <rt_sem_take+0xa> sw	a0,-36(s0)
1c00b848 <rt_sem_take+0xe> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:338
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(sem->parent.parent)));

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00b84c <rt_sem_take+0x12> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00b850 <rt_sem_take+0x16> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:345
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s take sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (sem->value > 0)
1c00b852 <rt_sem_take+0x18> lw	a5,-36(s0)
1c00b856 <rt_sem_take+0x1c> lhu	a5,28(a5)
1c00b85a <rt_sem_take+0x20> beqz	a5,1c00b87c <rt_sem_take+0x42>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:348
    {
        /* semaphore is available */
        sem->value --;
1c00b85c <rt_sem_take+0x22> lw	a5,-36(s0)
1c00b860 <rt_sem_take+0x26> lhu	a5,28(a5)
1c00b864 <rt_sem_take+0x2a> addi	a5,a5,-1
1c00b866 <rt_sem_take+0x2c> slli	a4,a5,0x10
1c00b86a <rt_sem_take+0x30> srli	a4,a4,0x10
1c00b86c <rt_sem_take+0x32> lw	a5,-36(s0)
1c00b870 <rt_sem_take+0x36> sh	a4,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:351

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
1c00b874 <rt_sem_take+0x3a> mv	a0,s1
1c00b876 <rt_sem_take+0x3c> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
1c00b87a <rt_sem_take+0x40> j	1c00b8fc <rt_sem_take+0xc2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:356
    }
    else
    {
        /* no waiting, return with timeout */
        if (time == 0)
1c00b87c <rt_sem_take+0x42> lw	a5,-40(s0)
1c00b880 <rt_sem_take+0x46> bnez	a5,1c00b88c <rt_sem_take+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:358
        {
            rt_hw_interrupt_enable(temp);
1c00b882 <rt_sem_take+0x48> mv	a0,s1
1c00b884 <rt_sem_take+0x4a> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:360

            return -RT_ETIMEOUT;
1c00b888 <rt_sem_take+0x4e> li	a5,-2
1c00b88a <rt_sem_take+0x50> j	1c00b8fe <rt_sem_take+0xc4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:369
            /* current context checking */
            RT_DEBUG_IN_THREAD_CONTEXT;

            /* semaphore is unavailable, push to suspend list */
            /* get current thread */
            thread = rt_thread_self();
1c00b88c <rt_sem_take+0x52> jal	ra,1c00d150 <rt_thread_self>
1c00b890 <rt_sem_take+0x56> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:372

            /* reset thread error number */
            thread->error = RT_EOK;
1c00b894 <rt_sem_take+0x5a> lw	a5,-20(s0)
1c00b898 <rt_sem_take+0x5e> sw	zero,48(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:378

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("sem take: suspend thread - %s\n",
                                        thread->name));

            /* suspend thread */
            rt_ipc_list_suspend(&(sem->parent.suspend_thread),
1c00b89c <rt_sem_take+0x62> lw	a5,-36(s0)
1c00b8a0 <rt_sem_take+0x66> addi	a4,a5,20
1c00b8a4 <rt_sem_take+0x6a> lw	a5,-36(s0)
1c00b8a8 <rt_sem_take+0x6e> lbu	a5,9(a5)
1c00b8ac <rt_sem_take+0x72> mv	a2,a5
1c00b8ae <rt_sem_take+0x74> lw	a1,-20(s0)
1c00b8b2 <rt_sem_take+0x78> mv	a0,a4
1c00b8b4 <rt_sem_take+0x7a> jal	1c00b6f4 <rt_ipc_list_suspend>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:383
                                thread,
                                sem->parent.parent.flag);

            /* has waiting time, start thread timer */
            if (time > 0)
1c00b8b6 <rt_sem_take+0x7c> lw	a5,-40(s0)
1c00b8ba <rt_sem_take+0x80> blez	a5,1c00b8e2 <rt_sem_take+0xa8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:389
            {
                RT_DEBUG_LOG(RT_DEBUG_IPC, ("set thread:%s to timer list\n",
                                            thread->name));

                /* reset the timeout of thread timer and start it */
                rt_timer_control(&(thread->thread_timer),
1c00b8be <rt_sem_take+0x84> lw	a5,-20(s0)
1c00b8c2 <rt_sem_take+0x88> addi	a5,a5,68
1c00b8c6 <rt_sem_take+0x8c> addi	a4,s0,-40
1c00b8ca <rt_sem_take+0x90> mv	a2,a4
1c00b8cc <rt_sem_take+0x92> li	a1,0
1c00b8ce <rt_sem_take+0x94> mv	a0,a5
1c00b8d0 <rt_sem_take+0x96> jal	ra,1c00d924 <rt_timer_control>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:392
                                 RT_TIMER_CTRL_SET_TIME,
                                 &time);
                rt_timer_start(&(thread->thread_timer));
1c00b8d4 <rt_sem_take+0x9a> lw	a5,-20(s0)
1c00b8d8 <rt_sem_take+0x9e> addi	a5,a5,68
1c00b8dc <rt_sem_take+0xa2> mv	a0,a5
1c00b8de <rt_sem_take+0xa4> jal	ra,1c00d6d0 <rt_timer_start>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:396
            }

            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
1c00b8e2 <rt_sem_take+0xa8> mv	a0,s1
1c00b8e4 <rt_sem_take+0xaa> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:399

            /* do schedule */
            rt_schedule();
1c00b8e8 <rt_sem_take+0xae> jal	ra,1c00cbba <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:401

            if (thread->error != RT_EOK)
1c00b8ec <rt_sem_take+0xb2> lw	a5,-20(s0)
1c00b8f0 <rt_sem_take+0xb6> lw	a5,48(a5)
1c00b8f2 <rt_sem_take+0xb8> beqz	a5,1c00b8fc <rt_sem_take+0xc2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:403
            {
                return thread->error;
1c00b8f4 <rt_sem_take+0xba> lw	a5,-20(s0)
1c00b8f8 <rt_sem_take+0xbe> lw	a5,48(a5)
1c00b8fa <rt_sem_take+0xc0> j	1c00b8fe <rt_sem_take+0xc4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:410
        }
    }

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));

    return RT_EOK;
1c00b8fc <rt_sem_take+0xc2> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:411
}
1c00b8fe <rt_sem_take+0xc4> mv	a0,a5
1c00b900 <rt_sem_take+0xc6> lw	ra,44(sp)
1c00b902 <rt_sem_take+0xc8> lw	s0,40(sp)
1c00b904 <rt_sem_take+0xca> lw	s1,36(sp)
1c00b906 <rt_sem_take+0xcc> addi	sp,sp,48
1c00b908 <rt_sem_take+0xce> ret
rt_sem_release():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:434
 * @param sem the semaphore object
 *
 * @return the error code
 */
rt_err_t rt_sem_release(rt_sem_t sem)
{
1c00b90a <rt_sem_release> addi	sp,sp,-32
1c00b90c <rt_sem_release+0x2> sw	ra,28(sp)
1c00b90e <rt_sem_release+0x4> sw	s0,24(sp)
1c00b910 <rt_sem_release+0x6> sw	s1,20(sp)
1c00b912 <rt_sem_release+0x8> sw	s2,16(sp)
1c00b914 <rt_sem_release+0xa> addi	s0,sp,32
1c00b916 <rt_sem_release+0xc> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:444
    RT_ASSERT(sem != RT_NULL);
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(sem->parent.parent)));

    need_schedule = RT_FALSE;
1c00b91a <rt_sem_release+0x10> li	s1,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:447

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00b91c <rt_sem_release+0x12> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00b920 <rt_sem_release+0x16> mv	s2,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:454
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s releases sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (!rt_list_isempty(&sem->parent.suspend_thread))
1c00b922 <rt_sem_release+0x18> lw	a5,-20(s0)
1c00b926 <rt_sem_release+0x1c> addi	a5,a5,20
1c00b928 <rt_sem_release+0x1e> mv	a0,a5
1c00b92a <rt_sem_release+0x20> jal	1c00b6aa <rt_list_isempty>
1c00b92c <rt_sem_release+0x22> mv	a5,a0
1c00b92e <rt_sem_release+0x24> bnez	a5,1c00b93e <rt_sem_release+0x34>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:457
    {
        /* resume the suspended thread */
        rt_ipc_list_resume(&(sem->parent.suspend_thread));
1c00b930 <rt_sem_release+0x26> lw	a5,-20(s0)
1c00b934 <rt_sem_release+0x2a> addi	a5,a5,20
1c00b936 <rt_sem_release+0x2c> mv	a0,a5
1c00b938 <rt_sem_release+0x2e> jal	1c00b7b2 <rt_ipc_list_resume>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:458
        need_schedule = RT_TRUE;
1c00b93a <rt_sem_release+0x30> li	s1,1
1c00b93c <rt_sem_release+0x32> j	1c00b972 <rt_sem_release+0x68>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:462
    }
    else
    {
        if(sem->value < RT_SEM_VALUE_MAX)
1c00b93e <rt_sem_release+0x34> lw	a5,-20(s0)
1c00b942 <rt_sem_release+0x38> lhu	a4,28(a5)
1c00b946 <rt_sem_release+0x3c> lui	a5,0x10
1c00b948 <rt_sem_release+0x3e> addi	a5,a5,-1
1c00b94a <rt_sem_release+0x40> beq	a4,a5,1c00b968 <rt_sem_release+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:464
        {
            sem->value ++; /* increase value */
1c00b94e <rt_sem_release+0x44> lw	a5,-20(s0)
1c00b952 <rt_sem_release+0x48> lhu	a5,28(a5) # 0001001c <__stack_size+0xf81c>
1c00b956 <rt_sem_release+0x4c> addi	a5,a5,1
1c00b958 <rt_sem_release+0x4e> slli	a4,a5,0x10
1c00b95c <rt_sem_release+0x52> srli	a4,a4,0x10
1c00b95e <rt_sem_release+0x54> lw	a5,-20(s0)
1c00b962 <rt_sem_release+0x58> sh	a4,28(a5)
1c00b966 <rt_sem_release+0x5c> j	1c00b972 <rt_sem_release+0x68>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:468
        }
        else
        {
            rt_hw_interrupt_enable(temp); /* enable interrupt */
1c00b968 <rt_sem_release+0x5e> mv	a0,s2
1c00b96a <rt_sem_release+0x60> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:469
            return -RT_EFULL; /* value overflowed */
1c00b96e <rt_sem_release+0x64> li	a5,-3
1c00b970 <rt_sem_release+0x66> j	1c00b984 <rt_sem_release+0x7a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:474
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00b972 <rt_sem_release+0x68> mv	a0,s2
1c00b974 <rt_sem_release+0x6a> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:477

    /* resume a thread, re-schedule */
    if (need_schedule == RT_TRUE)
1c00b978 <rt_sem_release+0x6e> li	a5,1
1c00b97a <rt_sem_release+0x70> bne	s1,a5,1c00b982 <rt_sem_release+0x78>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:478
        rt_schedule();
1c00b97e <rt_sem_release+0x74> jal	ra,1c00cbba <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:480

    return RT_EOK;
1c00b982 <rt_sem_release+0x78> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ipc.c:481
}
1c00b984 <rt_sem_release+0x7a> mv	a0,a5
1c00b986 <rt_sem_release+0x7c> lw	ra,28(sp)
1c00b988 <rt_sem_release+0x7e> lw	s0,24(sp)
1c00b98a <rt_sem_release+0x80> lw	s1,20(sp)
1c00b98c <rt_sem_release+0x82> lw	s2,16(sp)
1c00b98e <rt_sem_release+0x84> addi	sp,sp,32
1c00b990 <rt_sem_release+0x86> ret
rt_interrupt_enter():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:62
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_leave
 */
void rt_interrupt_enter(void)
{
1c00b992 <rt_interrupt_enter> addi	sp,sp,-32
1c00b994 <rt_interrupt_enter+0x2> sw	ra,28(sp)
1c00b996 <rt_interrupt_enter+0x4> sw	s0,24(sp)
1c00b998 <rt_interrupt_enter+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:68
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq coming..., irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
1c00b99a <rt_interrupt_enter+0x8> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00b99e <rt_interrupt_enter+0xc> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:69
    rt_interrupt_nest ++;
1c00b9a2 <rt_interrupt_enter+0x10> lui	a5,0x1c017
1c00b9a6 <rt_interrupt_enter+0x14> lbu	a5,-232(a5) # 1c016f18 <rt_interrupt_nest>
1c00b9aa <rt_interrupt_enter+0x18> andi	a5,a5,255
1c00b9ae <rt_interrupt_enter+0x1c> addi	a5,a5,1
1c00b9b0 <rt_interrupt_enter+0x1e> andi	a4,a5,255
1c00b9b4 <rt_interrupt_enter+0x22> lui	a5,0x1c017
1c00b9b8 <rt_interrupt_enter+0x26> sb	a4,-232(a5) # 1c016f18 <rt_interrupt_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:71
    RT_OBJECT_HOOK_CALL(rt_interrupt_enter_hook,());
    rt_hw_interrupt_enable(level);
1c00b9bc <rt_interrupt_enter+0x2a> lw	a0,-20(s0)
1c00b9c0 <rt_interrupt_enter+0x2e> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:72
}
1c00b9c4 <rt_interrupt_enter+0x32> nop
1c00b9c6 <rt_interrupt_enter+0x34> lw	ra,28(sp)
1c00b9c8 <rt_interrupt_enter+0x36> lw	s0,24(sp)
1c00b9ca <rt_interrupt_enter+0x38> addi	sp,sp,32
1c00b9cc <rt_interrupt_enter+0x3a> ret
rt_interrupt_leave():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:82
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_enter
 */
void rt_interrupt_leave(void)
{
1c00b9ce <rt_interrupt_leave> addi	sp,sp,-32
1c00b9d0 <rt_interrupt_leave+0x2> sw	ra,28(sp)
1c00b9d2 <rt_interrupt_leave+0x4> sw	s0,24(sp)
1c00b9d4 <rt_interrupt_leave+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:88
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq leave, irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
1c00b9d6 <rt_interrupt_leave+0x8> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00b9da <rt_interrupt_leave+0xc> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:89
    rt_interrupt_nest --;
1c00b9de <rt_interrupt_leave+0x10> lui	a5,0x1c017
1c00b9e2 <rt_interrupt_leave+0x14> lbu	a5,-232(a5) # 1c016f18 <rt_interrupt_nest>
1c00b9e6 <rt_interrupt_leave+0x18> andi	a5,a5,255
1c00b9ea <rt_interrupt_leave+0x1c> addi	a5,a5,-1
1c00b9ec <rt_interrupt_leave+0x1e> andi	a4,a5,255
1c00b9f0 <rt_interrupt_leave+0x22> lui	a5,0x1c017
1c00b9f4 <rt_interrupt_leave+0x26> sb	a4,-232(a5) # 1c016f18 <rt_interrupt_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:91
    RT_OBJECT_HOOK_CALL(rt_interrupt_leave_hook,());
    rt_hw_interrupt_enable(level);
1c00b9f8 <rt_interrupt_leave+0x2a> lw	a0,-20(s0)
1c00b9fc <rt_interrupt_leave+0x2e> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/irq.c:92
}
1c00ba00 <rt_interrupt_leave+0x32> nop
1c00ba02 <rt_interrupt_leave+0x34> lw	ra,28(sp)
1c00ba04 <rt_interrupt_leave+0x36> lw	s0,24(sp)
1c00ba06 <rt_interrupt_leave+0x38> addi	sp,sp,32
1c00ba08 <rt_interrupt_leave+0x3a> ret
rt_memset():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:120
 * @param count the copied length
 *
 * @return the address of source memory
 */
void *rt_memset(void *s, int c, rt_ubase_t count)
{
1c00ba0a <rt_memset> addi	sp,sp,-48
1c00ba0c <rt_memset+0x2> sw	s0,44(sp)
1c00ba0e <rt_memset+0x4> addi	s0,sp,48
1c00ba10 <rt_memset+0x6> sw	a0,-36(s0)
1c00ba14 <rt_memset+0xa> sw	a1,-40(s0)
1c00ba18 <rt_memset+0xe> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:134
#define LBLOCKSIZE      (sizeof(long))
#define UNALIGNED(X)    ((long)X & (LBLOCKSIZE - 1))
#define TOO_SMALL(LEN)  ((LEN) < LBLOCKSIZE)

    unsigned int i;
    char *m = (char *)s;
1c00ba1c <rt_memset+0x12> lw	a5,-36(s0)
1c00ba20 <rt_memset+0x16> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:137
    unsigned long buffer;
    unsigned long *aligned_addr;
    unsigned int d = c & 0xff;  /* To avoid sign extension, copy C to an
1c00ba24 <rt_memset+0x1a> lw	a5,-40(s0)
1c00ba28 <rt_memset+0x1e> andi	a5,a5,255
1c00ba2c <rt_memset+0x22> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:140
                                unsigned variable.  */

    if (!TOO_SMALL(count) && !UNALIGNED(s))
1c00ba30 <rt_memset+0x26> lw	a4,-44(s0)
1c00ba34 <rt_memset+0x2a> li	a5,3
1c00ba36 <rt_memset+0x2c> bgeu	a5,a4,1c00bb12 <rt_memset+0x108>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:140 (discriminator 1)
1c00ba3a <rt_memset+0x30> lw	a5,-36(s0)
1c00ba3e <rt_memset+0x34> andi	a5,a5,3
1c00ba40 <rt_memset+0x36> bnez	a5,1c00bb12 <rt_memset+0x108>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:143
    {
        /* If we get this far, we know that n is large and m is word-aligned. */
        aligned_addr = (unsigned long *)s;
1c00ba42 <rt_memset+0x38> lw	a5,-36(s0)
1c00ba46 <rt_memset+0x3c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:150
        /* Store D into each char sized location in BUFFER so that
         * we can set large blocks quickly.
         */
        if (LBLOCKSIZE == 4)
        {
            buffer = (d << 8) | d;
1c00ba4a <rt_memset+0x40> lw	a5,-28(s0)
1c00ba4e <rt_memset+0x44> slli	a5,a5,0x8
1c00ba50 <rt_memset+0x46> lw	a4,-28(s0)
1c00ba54 <rt_memset+0x4a> or	a5,a5,a4
1c00ba56 <rt_memset+0x4c> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:151
            buffer |= (buffer << 16);
1c00ba5a <rt_memset+0x50> lw	a5,-32(s0)
1c00ba5e <rt_memset+0x54> slli	a5,a5,0x10
1c00ba60 <rt_memset+0x56> lw	a4,-32(s0)
1c00ba64 <rt_memset+0x5a> or	a5,a5,a4
1c00ba66 <rt_memset+0x5c> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:160
            buffer = 0;
            for (i = 0; i < LBLOCKSIZE; i ++)
                buffer = (buffer << 8) | d;
        }

        while (count >= LBLOCKSIZE * 4)
1c00ba6a <rt_memset+0x60> j	1c00babe <rt_memset+0xb4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:162
        {
            *aligned_addr++ = buffer;
1c00ba6c <rt_memset+0x62> lw	a5,-24(s0)
1c00ba70 <rt_memset+0x66> addi	a4,a5,4
1c00ba74 <rt_memset+0x6a> sw	a4,-24(s0)
1c00ba78 <rt_memset+0x6e> lw	a4,-32(s0)
1c00ba7c <rt_memset+0x72> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:163
            *aligned_addr++ = buffer;
1c00ba7e <rt_memset+0x74> lw	a5,-24(s0)
1c00ba82 <rt_memset+0x78> addi	a4,a5,4
1c00ba86 <rt_memset+0x7c> sw	a4,-24(s0)
1c00ba8a <rt_memset+0x80> lw	a4,-32(s0)
1c00ba8e <rt_memset+0x84> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:164
            *aligned_addr++ = buffer;
1c00ba90 <rt_memset+0x86> lw	a5,-24(s0)
1c00ba94 <rt_memset+0x8a> addi	a4,a5,4
1c00ba98 <rt_memset+0x8e> sw	a4,-24(s0)
1c00ba9c <rt_memset+0x92> lw	a4,-32(s0)
1c00baa0 <rt_memset+0x96> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:165
            *aligned_addr++ = buffer;
1c00baa2 <rt_memset+0x98> lw	a5,-24(s0)
1c00baa6 <rt_memset+0x9c> addi	a4,a5,4
1c00baaa <rt_memset+0xa0> sw	a4,-24(s0)
1c00baae <rt_memset+0xa4> lw	a4,-32(s0)
1c00bab2 <rt_memset+0xa8> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:166
            count -= 4 * LBLOCKSIZE;
1c00bab4 <rt_memset+0xaa> lw	a5,-44(s0)
1c00bab8 <rt_memset+0xae> addi	a5,a5,-16
1c00baba <rt_memset+0xb0> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:160
        while (count >= LBLOCKSIZE * 4)
1c00babe <rt_memset+0xb4> lw	a4,-44(s0)
1c00bac2 <rt_memset+0xb8> li	a5,15
1c00bac4 <rt_memset+0xba> bltu	a5,a4,1c00ba6c <rt_memset+0x62>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:169
        }

        while (count >= LBLOCKSIZE)
1c00bac8 <rt_memset+0xbe> j	1c00bae6 <rt_memset+0xdc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:171
        {
            *aligned_addr++ = buffer;
1c00baca <rt_memset+0xc0> lw	a5,-24(s0)
1c00bace <rt_memset+0xc4> addi	a4,a5,4
1c00bad2 <rt_memset+0xc8> sw	a4,-24(s0)
1c00bad6 <rt_memset+0xcc> lw	a4,-32(s0)
1c00bada <rt_memset+0xd0> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:172
            count -= LBLOCKSIZE;
1c00badc <rt_memset+0xd2> lw	a5,-44(s0)
1c00bae0 <rt_memset+0xd6> addi	a5,a5,-4
1c00bae2 <rt_memset+0xd8> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:169
        while (count >= LBLOCKSIZE)
1c00bae6 <rt_memset+0xdc> lw	a4,-44(s0)
1c00baea <rt_memset+0xe0> li	a5,3
1c00baec <rt_memset+0xe2> bltu	a5,a4,1c00baca <rt_memset+0xc0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:176
        }

        /* Pick up the remainder with a bytewise loop. */
        m = (char *)aligned_addr;
1c00baf0 <rt_memset+0xe6> lw	a5,-24(s0)
1c00baf4 <rt_memset+0xea> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:179
    }

    while (count--)
1c00baf8 <rt_memset+0xee> j	1c00bb12 <rt_memset+0x108>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:181
    {
        *m++ = (char)d;
1c00bafa <rt_memset+0xf0> lw	a5,-20(s0)
1c00bafe <rt_memset+0xf4> addi	a4,a5,1
1c00bb02 <rt_memset+0xf8> sw	a4,-20(s0)
1c00bb06 <rt_memset+0xfc> lw	a4,-28(s0)
1c00bb0a <rt_memset+0x100> slli	a4,a4,0x18
1c00bb0c <rt_memset+0x102> srai	a4,a4,0x18
1c00bb0e <rt_memset+0x104> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:179
    while (count--)
1c00bb12 <rt_memset+0x108> lw	a5,-44(s0)
1c00bb16 <rt_memset+0x10c> addi	a4,a5,-1
1c00bb1a <rt_memset+0x110> sw	a4,-44(s0)
1c00bb1e <rt_memset+0x114> bnez	a5,1c00bafa <rt_memset+0xf0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:184
    }

    return s;
1c00bb20 <rt_memset+0x116> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:190

#undef LBLOCKSIZE
#undef UNALIGNED
#undef TOO_SMALL
#endif
}
1c00bb24 <rt_memset+0x11a> mv	a0,a5
1c00bb26 <rt_memset+0x11c> lw	s0,44(sp)
1c00bb28 <rt_memset+0x11e> addi	sp,sp,48
1c00bb2a <rt_memset+0x120> ret
rt_memmove():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:285
 * @param n the copied length
 *
 * @return the address of destination memory
 */
void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
1c00bb2c <rt_memmove> addi	sp,sp,-48
1c00bb2e <rt_memmove+0x2> sw	s0,44(sp)
1c00bb30 <rt_memmove+0x4> addi	s0,sp,48
1c00bb32 <rt_memmove+0x6> sw	a0,-36(s0)
1c00bb36 <rt_memmove+0xa> sw	a1,-40(s0)
1c00bb3a <rt_memmove+0xe> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:286
    char *tmp = (char *)dest, *s = (char *)src;
1c00bb3e <rt_memmove+0x12> lw	a5,-36(s0)
1c00bb42 <rt_memmove+0x16> sw	a5,-20(s0)
1c00bb46 <rt_memmove+0x1a> lw	a5,-40(s0)
1c00bb4a <rt_memmove+0x1e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:288

    if (s < tmp && tmp < s + n)
1c00bb4e <rt_memmove+0x22> lw	a4,-24(s0)
1c00bb52 <rt_memmove+0x26> lw	a5,-20(s0)
1c00bb56 <rt_memmove+0x2a> bgeu	a4,a5,1c00bbde <rt_memmove+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:288 (discriminator 1)
1c00bb5a <rt_memmove+0x2e> lw	a4,-24(s0)
1c00bb5e <rt_memmove+0x32> lw	a5,-44(s0)
1c00bb62 <rt_memmove+0x36> add	a5,a5,a4
1c00bb64 <rt_memmove+0x38> lw	a4,-20(s0)
1c00bb68 <rt_memmove+0x3c> bgeu	a4,a5,1c00bbde <rt_memmove+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:290
    {
        tmp += n;
1c00bb6c <rt_memmove+0x40> lw	a4,-20(s0)
1c00bb70 <rt_memmove+0x44> lw	a5,-44(s0)
1c00bb74 <rt_memmove+0x48> add	a5,a5,a4
1c00bb76 <rt_memmove+0x4a> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:291
        s += n;
1c00bb7a <rt_memmove+0x4e> lw	a4,-24(s0)
1c00bb7e <rt_memmove+0x52> lw	a5,-44(s0)
1c00bb82 <rt_memmove+0x56> add	a5,a5,a4
1c00bb84 <rt_memmove+0x58> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:293

        while (n--)
1c00bb88 <rt_memmove+0x5c> j	1c00bbae <rt_memmove+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:294
            *(--tmp) = *(--s);
1c00bb8a <rt_memmove+0x5e> lw	a5,-24(s0)
1c00bb8e <rt_memmove+0x62> addi	a5,a5,-1
1c00bb90 <rt_memmove+0x64> sw	a5,-24(s0)
1c00bb94 <rt_memmove+0x68> lw	a5,-20(s0)
1c00bb98 <rt_memmove+0x6c> addi	a5,a5,-1
1c00bb9a <rt_memmove+0x6e> sw	a5,-20(s0)
1c00bb9e <rt_memmove+0x72> lw	a5,-24(s0)
1c00bba2 <rt_memmove+0x76> lb	a4,0(a5)
1c00bba6 <rt_memmove+0x7a> lw	a5,-20(s0)
1c00bbaa <rt_memmove+0x7e> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:293
        while (n--)
1c00bbae <rt_memmove+0x82> lw	a5,-44(s0)
1c00bbb2 <rt_memmove+0x86> addi	a4,a5,-1
1c00bbb6 <rt_memmove+0x8a> sw	a4,-44(s0)
1c00bbba <rt_memmove+0x8e> bnez	a5,1c00bb8a <rt_memmove+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:288
    if (s < tmp && tmp < s + n)
1c00bbbc <rt_memmove+0x90> j	1c00bbec <rt_memmove+0xc0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:299
    }
    else
    {
        while (n--)
            *tmp++ = *s++;
1c00bbbe <rt_memmove+0x92> lw	a4,-24(s0)
1c00bbc2 <rt_memmove+0x96> addi	a5,a4,1
1c00bbc6 <rt_memmove+0x9a> sw	a5,-24(s0)
1c00bbca <rt_memmove+0x9e> lw	a5,-20(s0)
1c00bbce <rt_memmove+0xa2> addi	a3,a5,1
1c00bbd2 <rt_memmove+0xa6> sw	a3,-20(s0)
1c00bbd6 <rt_memmove+0xaa> lb	a4,0(a4)
1c00bbda <rt_memmove+0xae> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:298
        while (n--)
1c00bbde <rt_memmove+0xb2> lw	a5,-44(s0)
1c00bbe2 <rt_memmove+0xb6> addi	a4,a5,-1
1c00bbe6 <rt_memmove+0xba> sw	a4,-44(s0)
1c00bbea <rt_memmove+0xbe> bnez	a5,1c00bbbe <rt_memmove+0x92>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:302
    }

    return dest;
1c00bbec <rt_memmove+0xc0> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:303
}
1c00bbf0 <rt_memmove+0xc4> mv	a0,a5
1c00bbf2 <rt_memmove+0xc6> lw	s0,44(sp)
1c00bbf4 <rt_memmove+0xc8> addi	sp,sp,48
1c00bbf6 <rt_memmove+0xca> ret
rt_strncpy():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:389
 * @param n the maximum copied length
 *
 * @return the result
 */
char *rt_strncpy(char *dst, const char *src, rt_ubase_t n)
{
1c00bbf8 <rt_strncpy> addi	sp,sp,-48
1c00bbfa <rt_strncpy+0x2> sw	s0,44(sp)
1c00bbfc <rt_strncpy+0x4> addi	s0,sp,48
1c00bbfe <rt_strncpy+0x6> sw	a0,-36(s0)
1c00bc02 <rt_strncpy+0xa> sw	a1,-40(s0)
1c00bc06 <rt_strncpy+0xe> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:390
    if (n != 0)
1c00bc0a <rt_strncpy+0x12> lw	a5,-44(s0)
1c00bc0e <rt_strncpy+0x16> beqz	a5,1c00bc7a <rt_strncpy+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:392
    {
        char *d = dst;
1c00bc10 <rt_strncpy+0x18> lw	a5,-36(s0)
1c00bc14 <rt_strncpy+0x1c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:393
        const char *s = src;
1c00bc18 <rt_strncpy+0x20> lw	a5,-40(s0)
1c00bc1c <rt_strncpy+0x24> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:397

        do
        {
            if ((*d++ = *s++) == 0)
1c00bc20 <rt_strncpy+0x28> lw	a4,-24(s0)
1c00bc24 <rt_strncpy+0x2c> addi	a5,a4,1
1c00bc28 <rt_strncpy+0x30> sw	a5,-24(s0)
1c00bc2c <rt_strncpy+0x34> lw	a5,-20(s0)
1c00bc30 <rt_strncpy+0x38> addi	a3,a5,1
1c00bc34 <rt_strncpy+0x3c> sw	a3,-20(s0)
1c00bc38 <rt_strncpy+0x40> lb	a4,0(a4)
1c00bc3c <rt_strncpy+0x44> sb	a4,0(a5)
1c00bc40 <rt_strncpy+0x48> lb	a5,0(a5)
1c00bc44 <rt_strncpy+0x4c> bnez	a5,1c00bc6a <rt_strncpy+0x72>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:400
            {
                /* NUL pad the remaining n-1 bytes */
                while (--n != 0)
1c00bc46 <rt_strncpy+0x4e> j	1c00bc58 <rt_strncpy+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:401
                    *d++ = 0;
1c00bc48 <rt_strncpy+0x50> lw	a5,-20(s0)
1c00bc4c <rt_strncpy+0x54> addi	a4,a5,1
1c00bc50 <rt_strncpy+0x58> sw	a4,-20(s0)
1c00bc54 <rt_strncpy+0x5c> sb	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:400
                while (--n != 0)
1c00bc58 <rt_strncpy+0x60> lw	a5,-44(s0)
1c00bc5c <rt_strncpy+0x64> addi	a5,a5,-1
1c00bc5e <rt_strncpy+0x66> sw	a5,-44(s0)
1c00bc62 <rt_strncpy+0x6a> lw	a5,-44(s0)
1c00bc66 <rt_strncpy+0x6e> bnez	a5,1c00bc48 <rt_strncpy+0x50>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:402
                break;
1c00bc68 <rt_strncpy+0x70> j	1c00bc7a <rt_strncpy+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:404
            }
        } while (--n != 0);
1c00bc6a <rt_strncpy+0x72> lw	a5,-44(s0)
1c00bc6e <rt_strncpy+0x76> addi	a5,a5,-1
1c00bc70 <rt_strncpy+0x78> sw	a5,-44(s0)
1c00bc74 <rt_strncpy+0x7c> lw	a5,-44(s0)
1c00bc78 <rt_strncpy+0x80> bnez	a5,1c00bc20 <rt_strncpy+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:407
    }

    return (dst);
1c00bc7a <rt_strncpy+0x82> lw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:408
}
1c00bc7e <rt_strncpy+0x86> mv	a0,a5
1c00bc80 <rt_strncpy+0x88> lw	s0,44(sp)
1c00bc82 <rt_strncpy+0x8a> addi	sp,sp,48
1c00bc84 <rt_strncpy+0x8c> ret
rt_show_version():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:521

/**
 * This function will show the version of rt-thread rtos
 */
void rt_show_version(void)
{
1c00bc86 <rt_show_version> addi	sp,sp,-16
1c00bc88 <rt_show_version+0x2> sw	ra,12(sp)
1c00bc8a <rt_show_version+0x4> sw	s0,8(sp)
1c00bc8c <rt_show_version+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:522
    rt_kprintf("\n \\ | /\n");
1c00bc8e <rt_show_version+0x8> lui	a5,0x1c010
1c00bc92 <rt_show_version+0xc> addi	a0,a5,920 # 1c010398 <__l2_priv0_end+0x70>
1c00bc96 <rt_show_version+0x10> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:523
    rt_kprintf("- RT -     Thread Operating System\n");
1c00bc9a <rt_show_version+0x14> lui	a5,0x1c010
1c00bc9e <rt_show_version+0x18> addi	a0,a5,932 # 1c0103a4 <__l2_priv0_end+0x7c>
1c00bca2 <rt_show_version+0x1c> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:524
    rt_kprintf(" / | \\     %d.%d.%d build %s\n",
1c00bca6 <rt_show_version+0x20> lui	a5,0x1c010
1c00bcaa <rt_show_version+0x24> addi	a4,a5,968 # 1c0103c8 <__l2_priv0_end+0xa0>
1c00bcae <rt_show_version+0x28> li	a3,5
1c00bcb0 <rt_show_version+0x2a> li	a2,1
1c00bcb2 <rt_show_version+0x2c> li	a1,3
1c00bcb4 <rt_show_version+0x2e> lui	a5,0x1c010
1c00bcb8 <rt_show_version+0x32> addi	a0,a5,980 # 1c0103d4 <__l2_priv0_end+0xac>
1c00bcbc <rt_show_version+0x36> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:526
               RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__);
    rt_kprintf(" 2006 - 2020 Copyright by rt-thread team\n");
1c00bcc0 <rt_show_version+0x3a> lui	a5,0x1c010
1c00bcc4 <rt_show_version+0x3e> addi	a0,a5,1012 # 1c0103f4 <__l2_priv0_end+0xcc>
1c00bcc8 <rt_show_version+0x42> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:527
}
1c00bccc <rt_show_version+0x46> nop
1c00bcce <rt_show_version+0x48> lw	ra,12(sp)
1c00bcd0 <rt_show_version+0x4a> lw	s0,8(sp)
1c00bcd2 <rt_show_version+0x4c> addi	sp,sp,16
1c00bcd4 <rt_show_version+0x4e> ret
divide():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:553

    return res;
}
#else
rt_inline int divide(long *n, int base)
{
1c00bcd6 <divide> addi	sp,sp,-48
1c00bcd8 <divide+0x2> sw	s0,44(sp)
1c00bcda <divide+0x4> addi	s0,sp,48
1c00bcdc <divide+0x6> sw	a0,-36(s0)
1c00bce0 <divide+0xa> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:557
    int res;

    /* optimized for processor which does not support divide instructions. */
    if (base == 10)
1c00bce4 <divide+0xe> lw	a4,-40(s0)
1c00bce8 <divide+0x12> li	a5,10
1c00bcea <divide+0x14> bne	a4,a5,1c00bd18 <divide+0x42>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:559
    {
        res = (int)(((unsigned long)*n) % 10U);
1c00bcee <divide+0x18> lw	a5,-36(s0)
1c00bcf2 <divide+0x1c> lw	a5,0(a5)
1c00bcf4 <divide+0x1e> mv	a4,a5
1c00bcf6 <divide+0x20> li	a5,10
1c00bcf8 <divide+0x22> remu	a5,a4,a5
1c00bcfc <divide+0x26> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:560
        *n = (long)(((unsigned long)*n) / 10U);
1c00bd00 <divide+0x2a> lw	a5,-36(s0)
1c00bd04 <divide+0x2e> lw	a5,0(a5)
1c00bd06 <divide+0x30> mv	a4,a5
1c00bd08 <divide+0x32> li	a5,10
1c00bd0a <divide+0x34> divu	a5,a4,a5
1c00bd0e <divide+0x38> mv	a4,a5
1c00bd10 <divide+0x3a> lw	a5,-36(s0)
1c00bd14 <divide+0x3e> sw	a4,0(a5)
1c00bd16 <divide+0x40> j	1c00bd34 <divide+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:564
    }
    else
    {
        res = (int)(((unsigned long)*n) % 16U);
1c00bd18 <divide+0x42> lw	a5,-36(s0)
1c00bd1c <divide+0x46> lw	a5,0(a5)
1c00bd1e <divide+0x48> andi	a5,a5,15
1c00bd20 <divide+0x4a> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:565
        *n = (long)(((unsigned long)*n) / 16U);
1c00bd24 <divide+0x4e> lw	a5,-36(s0)
1c00bd28 <divide+0x52> lw	a5,0(a5)
1c00bd2a <divide+0x54> srli	a5,a5,0x4
1c00bd2c <divide+0x56> mv	a4,a5
1c00bd2e <divide+0x58> lw	a5,-36(s0)
1c00bd32 <divide+0x5c> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:568
    }

    return res;
1c00bd34 <divide+0x5e> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:569
}
1c00bd38 <divide+0x62> mv	a0,a5
1c00bd3a <divide+0x64> lw	s0,44(sp)
1c00bd3c <divide+0x66> addi	sp,sp,48
1c00bd3e <divide+0x68> ret
skip_atoi():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:573
#endif

rt_inline int skip_atoi(const char **s)
{
1c00bd40 <skip_atoi> addi	sp,sp,-32
1c00bd42 <skip_atoi+0x2> sw	s0,28(sp)
1c00bd44 <skip_atoi+0x4> sw	s1,24(sp)
1c00bd46 <skip_atoi+0x6> addi	s0,sp,32
1c00bd48 <skip_atoi+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:574
    register int i = 0;
1c00bd4c <skip_atoi+0xc> li	s1,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:575
    while (_ISDIGIT(**s))
1c00bd4e <skip_atoi+0xe> j	1c00bd74 <skip_atoi+0x34>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:576
        i = i * 10 + *((*s)++) - '0';
1c00bd50 <skip_atoi+0x10> mv	a5,s1
1c00bd52 <skip_atoi+0x12> slli	a5,a5,0x2
1c00bd54 <skip_atoi+0x14> add	a5,a5,s1
1c00bd56 <skip_atoi+0x16> slli	a5,a5,0x1
1c00bd58 <skip_atoi+0x18> mv	a2,a5
1c00bd5a <skip_atoi+0x1a> lw	a5,-20(s0)
1c00bd5e <skip_atoi+0x1e> lw	a5,0(a5)
1c00bd60 <skip_atoi+0x20> addi	a3,a5,1
1c00bd64 <skip_atoi+0x24> lw	a4,-20(s0)
1c00bd68 <skip_atoi+0x28> sw	a3,0(a4)
1c00bd6a <skip_atoi+0x2a> lb	a5,0(a5)
1c00bd6e <skip_atoi+0x2e> add	a5,a5,a2
1c00bd70 <skip_atoi+0x30> addi	s1,a5,-48
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:575
    while (_ISDIGIT(**s))
1c00bd74 <skip_atoi+0x34> lw	a5,-20(s0)
1c00bd78 <skip_atoi+0x38> lw	a5,0(a5)
1c00bd7a <skip_atoi+0x3a> lb	a5,0(a5)
1c00bd7e <skip_atoi+0x3e> addi	a5,a5,-48
1c00bd82 <skip_atoi+0x42> mv	a4,a5
1c00bd84 <skip_atoi+0x44> li	a5,9
1c00bd86 <skip_atoi+0x46> bgeu	a5,a4,1c00bd50 <skip_atoi+0x10>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:578

    return i;
1c00bd8a <skip_atoi+0x4a> mv	a5,s1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:579
}
1c00bd8c <skip_atoi+0x4c> mv	a0,a5
1c00bd8e <skip_atoi+0x4e> lw	s0,28(sp)
1c00bd90 <skip_atoi+0x50> lw	s1,24(sp)
1c00bd92 <skip_atoi+0x52> addi	sp,sp,32
1c00bd94 <skip_atoi+0x54> ret
print_number():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:613
#endif
                          int   base,
                          int   s,
                          int   type)
#endif
{
1c00bd96 <print_number> addi	sp,sp,-80
1c00bd98 <print_number+0x2> sw	ra,76(sp)
1c00bd9a <print_number+0x4> sw	s0,72(sp)
1c00bd9c <print_number+0x6> sw	s1,68(sp)
1c00bd9e <print_number+0x8> sw	s2,64(sp)
1c00bda0 <print_number+0xa> addi	s0,sp,80
1c00bda2 <print_number+0xc> sw	a0,-52(s0)
1c00bda6 <print_number+0x10> sw	a1,-56(s0)
1c00bdaa <print_number+0x14> sw	a2,-60(s0)
1c00bdae <print_number+0x18> sw	a3,-64(s0)
1c00bdb2 <print_number+0x1c> sw	a4,-68(s0)
1c00bdb6 <print_number+0x20> sw	a5,-72(s0)
1c00bdba <print_number+0x24> sw	a6,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:620
#ifdef RT_PRINTF_LONGLONG
    char tmp[32];
#else
    char tmp[16];
#endif
    int precision_bak = precision;
1c00bdbe <print_number+0x28> lw	a5,-72(s0)
1c00bdc2 <print_number+0x2c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:627
    static const char small_digits[] = "0123456789abcdef";
    static const char large_digits[] = "0123456789ABCDEF";
    register int i;
    register int size;

    size = s;
1c00bdc6 <print_number+0x30> lw	s1,-68(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:629

    digits = (type & LARGE) ? large_digits : small_digits;
1c00bdca <print_number+0x34> lw	a5,-76(s0)
1c00bdce <print_number+0x38> andi	a5,a5,64
1c00bdd2 <print_number+0x3c> beqz	a5,1c00bdde <print_number+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:629 (discriminator 1)
1c00bdd4 <print_number+0x3e> lui	a5,0x1c010
1c00bdd8 <print_number+0x42> addi	a5,a5,1656 # 1c010678 <large_digits.2104>
1c00bddc <print_number+0x46> j	1c00bde6 <print_number+0x50>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:629 (discriminator 2)
1c00bdde <print_number+0x48> lui	a5,0x1c010
1c00bde2 <print_number+0x4c> addi	a5,a5,1676 # 1c01068c <small_digits.2103>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:629 (discriminator 4)
1c00bde6 <print_number+0x50> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:630 (discriminator 4)
    if (type & LEFT)
1c00bdea <print_number+0x54> lw	a5,-76(s0)
1c00bdee <print_number+0x58> andi	a5,a5,16
1c00bdf0 <print_number+0x5a> beqz	a5,1c00bdfc <print_number+0x66>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:631
        type &= ~ZEROPAD;
1c00bdf2 <print_number+0x5c> lw	a5,-76(s0)
1c00bdf6 <print_number+0x60> andi	a5,a5,-2
1c00bdf8 <print_number+0x62> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:633

    c = (type & ZEROPAD) ? '0' : ' ';
1c00bdfc <print_number+0x66> lw	a5,-76(s0)
1c00be00 <print_number+0x6a> andi	a5,a5,1
1c00be02 <print_number+0x6c> beqz	a5,1c00be0a <print_number+0x74>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:633 (discriminator 1)
1c00be04 <print_number+0x6e> li	a5,48
1c00be08 <print_number+0x72> j	1c00be0e <print_number+0x78>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:633 (discriminator 2)
1c00be0a <print_number+0x74> li	a5,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:633 (discriminator 4)
1c00be0e <print_number+0x78> sb	a5,-29(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:636 (discriminator 4)

    /* get sign */
    sign = 0;
1c00be12 <print_number+0x7c> sb	zero,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:637 (discriminator 4)
    if (type & SIGN)
1c00be16 <print_number+0x80> lw	a5,-76(s0)
1c00be1a <print_number+0x84> andi	a5,a5,2
1c00be1c <print_number+0x86> beqz	a5,1c00be5e <print_number+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:639
    {
        if (num < 0)
1c00be1e <print_number+0x88> lw	a5,-60(s0)
1c00be22 <print_number+0x8c> bgez	a5,1c00be3c <print_number+0xa6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:641
        {
            sign = '-';
1c00be26 <print_number+0x90> li	a5,45
1c00be2a <print_number+0x94> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:642
            num = -num;
1c00be2e <print_number+0x98> lw	a5,-60(s0)
1c00be32 <print_number+0x9c> neg	a5,a5
1c00be36 <print_number+0xa0> sw	a5,-60(s0)
1c00be3a <print_number+0xa4> j	1c00be5e <print_number+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:644
        }
        else if (type & PLUS)
1c00be3c <print_number+0xa6> lw	a5,-76(s0)
1c00be40 <print_number+0xaa> andi	a5,a5,4
1c00be42 <print_number+0xac> beqz	a5,1c00be4e <print_number+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:645
            sign = '+';
1c00be44 <print_number+0xae> li	a5,43
1c00be48 <print_number+0xb2> sb	a5,-17(s0)
1c00be4c <print_number+0xb6> j	1c00be5e <print_number+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:646
        else if (type & SPACE)
1c00be4e <print_number+0xb8> lw	a5,-76(s0)
1c00be52 <print_number+0xbc> andi	a5,a5,8
1c00be54 <print_number+0xbe> beqz	a5,1c00be5e <print_number+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:647
            sign = ' ';
1c00be56 <print_number+0xc0> li	a5,32
1c00be5a <print_number+0xc4> sb	a5,-17(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:660
        else if (base == 8)
            size--;
    }
#endif

    i = 0;
1c00be5e <print_number+0xc8> li	s2,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:661
    if (num == 0)
1c00be60 <print_number+0xca> lw	a5,-60(s0)
1c00be64 <print_number+0xce> bnez	a5,1c00bea6 <print_number+0x110>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:662
        tmp[i++] = '0';
1c00be66 <print_number+0xd0> mv	a5,s2
1c00be68 <print_number+0xd2> addi	s2,a5,1
1c00be6c <print_number+0xd6> addi	a4,s0,-16
1c00be70 <print_number+0xda> add	a5,a5,a4
1c00be72 <print_number+0xdc> li	a4,48
1c00be76 <print_number+0xe0> sb	a4,-32(a5)
1c00be7a <print_number+0xe4> j	1c00beac <print_number+0x116>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:666
    else
    {
        while (num != 0)
            tmp[i++] = digits[divide(&num, base)];
1c00be7c <print_number+0xe6> addi	a5,s0,-60
1c00be80 <print_number+0xea> lw	a1,-64(s0)
1c00be84 <print_number+0xee> mv	a0,a5
1c00be86 <print_number+0xf0> jal	1c00bcd6 <divide>
1c00be88 <print_number+0xf2> mv	a5,a0
1c00be8a <print_number+0xf4> mv	a4,a5
1c00be8c <print_number+0xf6> lw	a5,-28(s0)
1c00be90 <print_number+0xfa> add	a4,a4,a5
1c00be92 <print_number+0xfc> mv	a5,s2
1c00be94 <print_number+0xfe> addi	s2,a5,1
1c00be98 <print_number+0x102> lb	a4,0(a4)
1c00be9c <print_number+0x106> addi	a3,s0,-16
1c00bea0 <print_number+0x10a> add	a5,a5,a3
1c00bea2 <print_number+0x10c> sb	a4,-32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:665
        while (num != 0)
1c00bea6 <print_number+0x110> lw	a5,-60(s0)
1c00beaa <print_number+0x114> bnez	a5,1c00be7c <print_number+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:670
    }

#ifdef RT_PRINTF_PRECISION
    if (i > precision)
1c00beac <print_number+0x116> lw	a5,-72(s0)
1c00beb0 <print_number+0x11a> bge	a5,s2,1c00beb8 <print_number+0x122>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:671
        precision = i;
1c00beb4 <print_number+0x11e> sw	s2,-72(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:672
    size -= precision;
1c00beb8 <print_number+0x122> lw	a5,-72(s0)
1c00bebc <print_number+0x126> sub	s1,s1,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:677
#else
    size -= i;
#endif

    if (!(type & (ZEROPAD | LEFT)))
1c00bebe <print_number+0x128> lw	a5,-76(s0)
1c00bec2 <print_number+0x12c> andi	a5,a5,17
1c00bec4 <print_number+0x12e> bnez	a5,1c00bf00 <print_number+0x16a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:679
    {
        if ((sign) && (size > 0))
1c00bec6 <print_number+0x130> lb	a5,-17(s0)
1c00beca <print_number+0x134> beqz	a5,1c00bef6 <print_number+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:679 (discriminator 1)
1c00becc <print_number+0x136> blez	s1,1c00bef6 <print_number+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:680
            size--;
1c00bed0 <print_number+0x13a> addi	s1,s1,-1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:682

        while (size-- > 0)
1c00bed2 <print_number+0x13c> j	1c00bef6 <print_number+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:684
        {
            if (buf < end)
1c00bed4 <print_number+0x13e> lw	a4,-52(s0)
1c00bed8 <print_number+0x142> lw	a5,-56(s0)
1c00bedc <print_number+0x146> bgeu	a4,a5,1c00beec <print_number+0x156>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:685
                *buf = ' ';
1c00bee0 <print_number+0x14a> lw	a5,-52(s0)
1c00bee4 <print_number+0x14e> li	a4,32
1c00bee8 <print_number+0x152> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:686
            ++ buf;
1c00beec <print_number+0x156> lw	a5,-52(s0)
1c00bef0 <print_number+0x15a> addi	a5,a5,1
1c00bef2 <print_number+0x15c> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:682
        while (size-- > 0)
1c00bef6 <print_number+0x160> mv	a5,s1
1c00bef8 <print_number+0x162> addi	s1,a5,-1
1c00befc <print_number+0x166> bgtz	a5,1c00bed4 <print_number+0x13e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:690
        }
    }

    if (sign)
1c00bf00 <print_number+0x16a> lb	a5,-17(s0)
1c00bf04 <print_number+0x16e> beqz	a5,1c00bf2a <print_number+0x194>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:692
    {
        if (buf < end)
1c00bf06 <print_number+0x170> lw	a4,-52(s0)
1c00bf0a <print_number+0x174> lw	a5,-56(s0)
1c00bf0e <print_number+0x178> bgeu	a4,a5,1c00bf1e <print_number+0x188>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:694
        {
            *buf = sign;
1c00bf12 <print_number+0x17c> lw	a5,-52(s0)
1c00bf16 <print_number+0x180> lbu	a4,-17(s0)
1c00bf1a <print_number+0x184> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:696
        }
        -- size;
1c00bf1e <print_number+0x188> addi	s1,s1,-1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:697
        ++ buf;
1c00bf20 <print_number+0x18a> lw	a5,-52(s0)
1c00bf24 <print_number+0x18e> addi	a5,a5,1
1c00bf26 <print_number+0x190> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:724
        }
    }
#endif

    /* no align to the left */
    if (!(type & LEFT))
1c00bf2a <print_number+0x194> lw	a5,-76(s0)
1c00bf2e <print_number+0x198> andi	a5,a5,16
1c00bf30 <print_number+0x19a> bnez	a5,1c00bf84 <print_number+0x1ee>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:726
    {
        while (size-- > 0)
1c00bf32 <print_number+0x19c> j	1c00bf56 <print_number+0x1c0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:728
        {
            if (buf < end)
1c00bf34 <print_number+0x19e> lw	a4,-52(s0)
1c00bf38 <print_number+0x1a2> lw	a5,-56(s0)
1c00bf3c <print_number+0x1a6> bgeu	a4,a5,1c00bf4c <print_number+0x1b6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:729
                *buf = c;
1c00bf40 <print_number+0x1aa> lw	a5,-52(s0)
1c00bf44 <print_number+0x1ae> lbu	a4,-29(s0)
1c00bf48 <print_number+0x1b2> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:730
            ++ buf;
1c00bf4c <print_number+0x1b6> lw	a5,-52(s0)
1c00bf50 <print_number+0x1ba> addi	a5,a5,1
1c00bf52 <print_number+0x1bc> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:726
        while (size-- > 0)
1c00bf56 <print_number+0x1c0> mv	a5,s1
1c00bf58 <print_number+0x1c2> addi	s1,a5,-1
1c00bf5c <print_number+0x1c6> bgtz	a5,1c00bf34 <print_number+0x19e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:735
        }
    }

#ifdef RT_PRINTF_PRECISION
    while (i < precision--)
1c00bf60 <print_number+0x1ca> j	1c00bf84 <print_number+0x1ee>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:737
    {
        if (buf < end)
1c00bf62 <print_number+0x1cc> lw	a4,-52(s0)
1c00bf66 <print_number+0x1d0> lw	a5,-56(s0)
1c00bf6a <print_number+0x1d4> bgeu	a4,a5,1c00bf7a <print_number+0x1e4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:738
            *buf = '0';
1c00bf6e <print_number+0x1d8> lw	a5,-52(s0)
1c00bf72 <print_number+0x1dc> li	a4,48
1c00bf76 <print_number+0x1e0> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:739
        ++ buf;
1c00bf7a <print_number+0x1e4> lw	a5,-52(s0)
1c00bf7e <print_number+0x1e8> addi	a5,a5,1
1c00bf80 <print_number+0x1ea> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:735
    while (i < precision--)
1c00bf84 <print_number+0x1ee> lw	a5,-72(s0)
1c00bf88 <print_number+0x1f2> addi	a4,a5,-1
1c00bf8c <print_number+0x1f6> sw	a4,-72(s0)
1c00bf90 <print_number+0x1fa> blt	s2,a5,1c00bf62 <print_number+0x1cc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:744
    }
#endif

    /* put number in the temporary buffer */
    while (i-- > 0 && (precision_bak != 0))
1c00bf94 <print_number+0x1fe> j	1c00bfbe <print_number+0x228>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:746
    {
        if (buf < end)
1c00bf96 <print_number+0x200> lw	a4,-52(s0)
1c00bf9a <print_number+0x204> lw	a5,-56(s0)
1c00bf9e <print_number+0x208> bgeu	a4,a5,1c00bfb4 <print_number+0x21e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:747
            *buf = tmp[i];
1c00bfa2 <print_number+0x20c> addi	a5,s0,-16
1c00bfa6 <print_number+0x210> add	a5,a5,s2
1c00bfa8 <print_number+0x212> lb	a4,-32(a5)
1c00bfac <print_number+0x216> lw	a5,-52(s0)
1c00bfb0 <print_number+0x21a> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:748
        ++ buf;
1c00bfb4 <print_number+0x21e> lw	a5,-52(s0)
1c00bfb8 <print_number+0x222> addi	a5,a5,1
1c00bfba <print_number+0x224> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:744
    while (i-- > 0 && (precision_bak != 0))
1c00bfbe <print_number+0x228> mv	a5,s2
1c00bfc0 <print_number+0x22a> addi	s2,a5,-1
1c00bfc4 <print_number+0x22e> blez	a5,1c00bff2 <print_number+0x25c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:744 (discriminator 1)
1c00bfc8 <print_number+0x232> lw	a5,-24(s0)
1c00bfcc <print_number+0x236> bnez	a5,1c00bf96 <print_number+0x200>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:751
    }

    while (size-- > 0)
1c00bfce <print_number+0x238> j	1c00bff2 <print_number+0x25c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:753
    {
        if (buf < end)
1c00bfd0 <print_number+0x23a> lw	a4,-52(s0)
1c00bfd4 <print_number+0x23e> lw	a5,-56(s0)
1c00bfd8 <print_number+0x242> bgeu	a4,a5,1c00bfe8 <print_number+0x252>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:754
            *buf = ' ';
1c00bfdc <print_number+0x246> lw	a5,-52(s0)
1c00bfe0 <print_number+0x24a> li	a4,32
1c00bfe4 <print_number+0x24e> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:755
        ++ buf;
1c00bfe8 <print_number+0x252> lw	a5,-52(s0)
1c00bfec <print_number+0x256> addi	a5,a5,1
1c00bfee <print_number+0x258> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:751
    while (size-- > 0)
1c00bff2 <print_number+0x25c> mv	a5,s1
1c00bff4 <print_number+0x25e> addi	s1,a5,-1
1c00bff8 <print_number+0x262> bgtz	a5,1c00bfd0 <print_number+0x23a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:758
    }

    return buf;
1c00bffc <print_number+0x266> lw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:759
}
1c00c000 <print_number+0x26a> mv	a0,a5
1c00c002 <print_number+0x26c> lw	ra,76(sp)
1c00c004 <print_number+0x26e> lw	s0,72(sp)
1c00c006 <print_number+0x270> lw	s1,68(sp)
1c00c008 <print_number+0x272> lw	s2,64(sp)
1c00c00a <print_number+0x274> addi	sp,sp,80
1c00c00c <print_number+0x276> ret
rt_vsnprintf():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:765

rt_int32_t rt_vsnprintf(char       *buf,
                        rt_size_t   size,
                        const char *fmt,
                        va_list     args)
{
1c00c00e <rt_vsnprintf> addi	sp,sp,-80
1c00c010 <rt_vsnprintf+0x2> sw	ra,76(sp)
1c00c012 <rt_vsnprintf+0x4> sw	s0,72(sp)
1c00c014 <rt_vsnprintf+0x6> addi	s0,sp,80
1c00c016 <rt_vsnprintf+0x8> sw	a0,-68(s0)
1c00c01a <rt_vsnprintf+0xc> sw	a1,-72(s0)
1c00c01e <rt_vsnprintf+0x10> sw	a2,-76(s0)
1c00c022 <rt_vsnprintf+0x14> sw	a3,-80(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:784

#ifdef RT_PRINTF_PRECISION
    int precision;      /* min. # of digits for integers and max for a string */
#endif

    str = buf;
1c00c026 <rt_vsnprintf+0x18> lw	a5,-68(s0)
1c00c02a <rt_vsnprintf+0x1c> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:785
    end = buf + size;
1c00c02e <rt_vsnprintf+0x20> lw	a4,-68(s0)
1c00c032 <rt_vsnprintf+0x24> lw	a5,-72(s0)
1c00c036 <rt_vsnprintf+0x28> add	a5,a5,a4
1c00c038 <rt_vsnprintf+0x2a> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:788

    /* Make sure end is always >= buf */
    if (end < buf)
1c00c03c <rt_vsnprintf+0x2e> lw	a4,-36(s0)
1c00c040 <rt_vsnprintf+0x32> lw	a5,-68(s0)
1c00c044 <rt_vsnprintf+0x36> bgeu	a4,a5,1c00c60a <rt_vsnprintf+0x5fc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:790
    {
        end  = ((char *) - 1);
1c00c048 <rt_vsnprintf+0x3a> li	a5,-1
1c00c04a <rt_vsnprintf+0x3c> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:791
        size = end - buf;
1c00c04e <rt_vsnprintf+0x40> lw	a4,-36(s0)
1c00c052 <rt_vsnprintf+0x44> lw	a5,-68(s0)
1c00c056 <rt_vsnprintf+0x48> sub	a5,a4,a5
1c00c05a <rt_vsnprintf+0x4c> sw	a5,-72(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:794
    }

    for (; *fmt ; ++fmt)
1c00c05e <rt_vsnprintf+0x50> j	1c00c60a <rt_vsnprintf+0x5fc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:796
    {
        if (*fmt != '%')
1c00c060 <rt_vsnprintf+0x52> lw	a5,-76(s0)
1c00c064 <rt_vsnprintf+0x56> lb	a4,0(a5)
1c00c068 <rt_vsnprintf+0x5a> li	a5,37
1c00c06c <rt_vsnprintf+0x5e> beq	a4,a5,1c00c098 <rt_vsnprintf+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:798
        {
            if (str < end)
1c00c070 <rt_vsnprintf+0x62> lw	a4,-32(s0)
1c00c074 <rt_vsnprintf+0x66> lw	a5,-36(s0)
1c00c078 <rt_vsnprintf+0x6a> bgeu	a4,a5,1c00c08c <rt_vsnprintf+0x7e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:799
                *str = *fmt;
1c00c07c <rt_vsnprintf+0x6e> lw	a5,-76(s0)
1c00c080 <rt_vsnprintf+0x72> lb	a4,0(a5)
1c00c084 <rt_vsnprintf+0x76> lw	a5,-32(s0)
1c00c088 <rt_vsnprintf+0x7a> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:800
            ++ str;
1c00c08c <rt_vsnprintf+0x7e> lw	a5,-32(s0)
1c00c090 <rt_vsnprintf+0x82> addi	a5,a5,1
1c00c092 <rt_vsnprintf+0x84> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:801
            continue;
1c00c096 <rt_vsnprintf+0x88> j	1c00c600 <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:805
        }

        /* process flags */
        flags = 0;
1c00c098 <rt_vsnprintf+0x8a> sb	zero,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:810

        while (1)
        {
            /* skips the first '%' also */
            ++ fmt;
1c00c09c <rt_vsnprintf+0x8e> lw	a5,-76(s0)
1c00c0a0 <rt_vsnprintf+0x92> addi	a5,a5,1
1c00c0a2 <rt_vsnprintf+0x94> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:811
            if (*fmt == '-') flags |= LEFT;
1c00c0a6 <rt_vsnprintf+0x98> lw	a5,-76(s0)
1c00c0aa <rt_vsnprintf+0x9c> lb	a4,0(a5)
1c00c0ae <rt_vsnprintf+0xa0> li	a5,45
1c00c0b2 <rt_vsnprintf+0xa4> bne	a4,a5,1c00c0c4 <rt_vsnprintf+0xb6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:811 (discriminator 1)
1c00c0b6 <rt_vsnprintf+0xa8> lbu	a5,-42(s0)
1c00c0ba <rt_vsnprintf+0xac> ori	a5,a5,16
1c00c0be <rt_vsnprintf+0xb0> sb	a5,-42(s0)
1c00c0c2 <rt_vsnprintf+0xb4> j	1c00c09c <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:812
            else if (*fmt == '+') flags |= PLUS;
1c00c0c4 <rt_vsnprintf+0xb6> lw	a5,-76(s0)
1c00c0c8 <rt_vsnprintf+0xba> lb	a4,0(a5)
1c00c0cc <rt_vsnprintf+0xbe> li	a5,43
1c00c0d0 <rt_vsnprintf+0xc2> bne	a4,a5,1c00c0e2 <rt_vsnprintf+0xd4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:812 (discriminator 1)
1c00c0d4 <rt_vsnprintf+0xc6> lbu	a5,-42(s0)
1c00c0d8 <rt_vsnprintf+0xca> ori	a5,a5,4
1c00c0dc <rt_vsnprintf+0xce> sb	a5,-42(s0)
1c00c0e0 <rt_vsnprintf+0xd2> j	1c00c09c <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:813
            else if (*fmt == ' ') flags |= SPACE;
1c00c0e2 <rt_vsnprintf+0xd4> lw	a5,-76(s0)
1c00c0e6 <rt_vsnprintf+0xd8> lb	a4,0(a5)
1c00c0ea <rt_vsnprintf+0xdc> li	a5,32
1c00c0ee <rt_vsnprintf+0xe0> bne	a4,a5,1c00c100 <rt_vsnprintf+0xf2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:813 (discriminator 1)
1c00c0f2 <rt_vsnprintf+0xe4> lbu	a5,-42(s0)
1c00c0f6 <rt_vsnprintf+0xe8> ori	a5,a5,8
1c00c0fa <rt_vsnprintf+0xec> sb	a5,-42(s0)
1c00c0fe <rt_vsnprintf+0xf0> j	1c00c09c <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:814
            else if (*fmt == '#') flags |= SPECIAL;
1c00c100 <rt_vsnprintf+0xf2> lw	a5,-76(s0)
1c00c104 <rt_vsnprintf+0xf6> lb	a4,0(a5)
1c00c108 <rt_vsnprintf+0xfa> li	a5,35
1c00c10c <rt_vsnprintf+0xfe> bne	a4,a5,1c00c11e <rt_vsnprintf+0x110>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:814 (discriminator 1)
1c00c110 <rt_vsnprintf+0x102> lbu	a5,-42(s0)
1c00c114 <rt_vsnprintf+0x106> ori	a5,a5,32
1c00c118 <rt_vsnprintf+0x10a> sb	a5,-42(s0)
1c00c11c <rt_vsnprintf+0x10e> j	1c00c09c <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:815
            else if (*fmt == '0') flags |= ZEROPAD;
1c00c11e <rt_vsnprintf+0x110> lw	a5,-76(s0)
1c00c122 <rt_vsnprintf+0x114> lb	a4,0(a5)
1c00c126 <rt_vsnprintf+0x118> li	a5,48
1c00c12a <rt_vsnprintf+0x11c> bne	a4,a5,1c00c13c <rt_vsnprintf+0x12e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:815 (discriminator 1)
1c00c12e <rt_vsnprintf+0x120> lbu	a5,-42(s0)
1c00c132 <rt_vsnprintf+0x124> ori	a5,a5,1
1c00c136 <rt_vsnprintf+0x128> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:810 (discriminator 1)
            ++ fmt;
1c00c13a <rt_vsnprintf+0x12c> j	1c00c09c <rt_vsnprintf+0x8e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:816
            else break;
1c00c13c <rt_vsnprintf+0x12e> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:820
        }

        /* get field width */
        field_width = -1;
1c00c13e <rt_vsnprintf+0x130> li	a5,-1
1c00c140 <rt_vsnprintf+0x132> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:821
        if (_ISDIGIT(*fmt)) field_width = skip_atoi(&fmt);
1c00c144 <rt_vsnprintf+0x136> lw	a5,-76(s0)
1c00c148 <rt_vsnprintf+0x13a> lb	a5,0(a5)
1c00c14c <rt_vsnprintf+0x13e> addi	a5,a5,-48
1c00c150 <rt_vsnprintf+0x142> mv	a4,a5
1c00c152 <rt_vsnprintf+0x144> li	a5,9
1c00c154 <rt_vsnprintf+0x146> bltu	a5,a4,1c00c168 <rt_vsnprintf+0x15a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:821 (discriminator 1)
1c00c158 <rt_vsnprintf+0x14a> addi	a5,s0,-76
1c00c15c <rt_vsnprintf+0x14e> mv	a0,a5
1c00c15e <rt_vsnprintf+0x150> jal	ra,1c00bd40 <skip_atoi>
1c00c162 <rt_vsnprintf+0x154> sw	a0,-48(s0)
1c00c166 <rt_vsnprintf+0x158> j	1c00c1b4 <rt_vsnprintf+0x1a6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:822
        else if (*fmt == '*')
1c00c168 <rt_vsnprintf+0x15a> lw	a5,-76(s0)
1c00c16c <rt_vsnprintf+0x15e> lb	a4,0(a5)
1c00c170 <rt_vsnprintf+0x162> li	a5,42
1c00c174 <rt_vsnprintf+0x166> bne	a4,a5,1c00c1b4 <rt_vsnprintf+0x1a6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:824
        {
            ++ fmt;
1c00c178 <rt_vsnprintf+0x16a> lw	a5,-76(s0)
1c00c17c <rt_vsnprintf+0x16e> addi	a5,a5,1
1c00c17e <rt_vsnprintf+0x170> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:826
            /* it's the next argument */
            field_width = va_arg(args, int);
1c00c182 <rt_vsnprintf+0x174> lw	a5,-80(s0)
1c00c186 <rt_vsnprintf+0x178> addi	a4,a5,4
1c00c18a <rt_vsnprintf+0x17c> sw	a4,-80(s0)
1c00c18e <rt_vsnprintf+0x180> lw	a5,0(a5)
1c00c190 <rt_vsnprintf+0x182> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:827
            if (field_width < 0)
1c00c194 <rt_vsnprintf+0x186> lw	a5,-48(s0)
1c00c198 <rt_vsnprintf+0x18a> bgez	a5,1c00c1b4 <rt_vsnprintf+0x1a6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:829
            {
                field_width = -field_width;
1c00c19c <rt_vsnprintf+0x18e> lw	a5,-48(s0)
1c00c1a0 <rt_vsnprintf+0x192> neg	a5,a5
1c00c1a4 <rt_vsnprintf+0x196> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:830
                flags |= LEFT;
1c00c1a8 <rt_vsnprintf+0x19a> lbu	a5,-42(s0)
1c00c1ac <rt_vsnprintf+0x19e> ori	a5,a5,16
1c00c1b0 <rt_vsnprintf+0x1a2> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:836
            }
        }

#ifdef RT_PRINTF_PRECISION
        /* get the precision */
        precision = -1;
1c00c1b4 <rt_vsnprintf+0x1a6> li	a5,-1
1c00c1b6 <rt_vsnprintf+0x1a8> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:837
        if (*fmt == '.')
1c00c1ba <rt_vsnprintf+0x1ac> lw	a5,-76(s0)
1c00c1be <rt_vsnprintf+0x1b0> lb	a4,0(a5)
1c00c1c2 <rt_vsnprintf+0x1b4> li	a5,46
1c00c1c6 <rt_vsnprintf+0x1b8> bne	a4,a5,1c00c230 <rt_vsnprintf+0x222>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:839
        {
            ++ fmt;
1c00c1ca <rt_vsnprintf+0x1bc> lw	a5,-76(s0)
1c00c1ce <rt_vsnprintf+0x1c0> addi	a5,a5,1
1c00c1d0 <rt_vsnprintf+0x1c2> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:840
            if (_ISDIGIT(*fmt)) precision = skip_atoi(&fmt);
1c00c1d4 <rt_vsnprintf+0x1c6> lw	a5,-76(s0)
1c00c1d8 <rt_vsnprintf+0x1ca> lb	a5,0(a5)
1c00c1dc <rt_vsnprintf+0x1ce> addi	a5,a5,-48
1c00c1e0 <rt_vsnprintf+0x1d2> mv	a4,a5
1c00c1e2 <rt_vsnprintf+0x1d4> li	a5,9
1c00c1e4 <rt_vsnprintf+0x1d6> bltu	a5,a4,1c00c1f8 <rt_vsnprintf+0x1ea>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:840 (discriminator 1)
1c00c1e8 <rt_vsnprintf+0x1da> addi	a5,s0,-76
1c00c1ec <rt_vsnprintf+0x1de> mv	a0,a5
1c00c1ee <rt_vsnprintf+0x1e0> jal	ra,1c00bd40 <skip_atoi>
1c00c1f2 <rt_vsnprintf+0x1e4> sw	a0,-52(s0)
1c00c1f6 <rt_vsnprintf+0x1e8> j	1c00c224 <rt_vsnprintf+0x216>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:841
            else if (*fmt == '*')
1c00c1f8 <rt_vsnprintf+0x1ea> lw	a5,-76(s0)
1c00c1fc <rt_vsnprintf+0x1ee> lb	a4,0(a5)
1c00c200 <rt_vsnprintf+0x1f2> li	a5,42
1c00c204 <rt_vsnprintf+0x1f6> bne	a4,a5,1c00c224 <rt_vsnprintf+0x216>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:843
            {
                ++ fmt;
1c00c208 <rt_vsnprintf+0x1fa> lw	a5,-76(s0)
1c00c20c <rt_vsnprintf+0x1fe> addi	a5,a5,1
1c00c20e <rt_vsnprintf+0x200> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:845
                /* it's the next argument */
                precision = va_arg(args, int);
1c00c212 <rt_vsnprintf+0x204> lw	a5,-80(s0)
1c00c216 <rt_vsnprintf+0x208> addi	a4,a5,4
1c00c21a <rt_vsnprintf+0x20c> sw	a4,-80(s0)
1c00c21e <rt_vsnprintf+0x210> lw	a5,0(a5)
1c00c220 <rt_vsnprintf+0x212> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:847
            }
            if (precision < 0) precision = 0;
1c00c224 <rt_vsnprintf+0x216> lw	a5,-52(s0)
1c00c228 <rt_vsnprintf+0x21a> bgez	a5,1c00c230 <rt_vsnprintf+0x222>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:847 (discriminator 1)
1c00c22c <rt_vsnprintf+0x21e> sw	zero,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:851
        }
#endif
        /* get the conversion qualifier */
        qualifier = 0;
1c00c230 <rt_vsnprintf+0x222> sb	zero,-43(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:855
#ifdef RT_PRINTF_LONGLONG
        if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
#else
        if (*fmt == 'h' || *fmt == 'l')
1c00c234 <rt_vsnprintf+0x226> lw	a5,-76(s0)
1c00c238 <rt_vsnprintf+0x22a> lb	a4,0(a5)
1c00c23c <rt_vsnprintf+0x22e> li	a5,104
1c00c240 <rt_vsnprintf+0x232> beq	a4,a5,1c00c254 <rt_vsnprintf+0x246>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:855 (discriminator 1)
1c00c244 <rt_vsnprintf+0x236> lw	a5,-76(s0)
1c00c248 <rt_vsnprintf+0x23a> lb	a4,0(a5)
1c00c24c <rt_vsnprintf+0x23e> li	a5,108
1c00c250 <rt_vsnprintf+0x242> bne	a4,a5,1c00c26a <rt_vsnprintf+0x25c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:858
#endif
        {
            qualifier = *fmt;
1c00c254 <rt_vsnprintf+0x246> lw	a5,-76(s0)
1c00c258 <rt_vsnprintf+0x24a> lb	a5,0(a5)
1c00c25c <rt_vsnprintf+0x24e> sb	a5,-43(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:859
            ++ fmt;
1c00c260 <rt_vsnprintf+0x252> lw	a5,-76(s0)
1c00c264 <rt_vsnprintf+0x256> addi	a5,a5,1
1c00c266 <rt_vsnprintf+0x258> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:870
            }
#endif
        }

        /* the default base */
        base = 10;
1c00c26a <rt_vsnprintf+0x25c> li	a5,10
1c00c26c <rt_vsnprintf+0x25e> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:872

        switch (*fmt)
1c00c270 <rt_vsnprintf+0x262> lw	a5,-76(s0)
1c00c274 <rt_vsnprintf+0x266> lb	a5,0(a5)
1c00c278 <rt_vsnprintf+0x26a> addi	a5,a5,-37
1c00c27c <rt_vsnprintf+0x26e> li	a4,83
1c00c280 <rt_vsnprintf+0x272> bltu	a4,a5,1c00c50e <rt_vsnprintf+0x500>
1c00c284 <rt_vsnprintf+0x276> slli	a4,a5,0x2
1c00c288 <rt_vsnprintf+0x27a> lui	a5,0x1c010
1c00c28c <rt_vsnprintf+0x27e> addi	a5,a5,1064 # 1c010428 <__l2_priv0_end+0x100>
1c00c290 <rt_vsnprintf+0x282> add	a5,a5,a4
1c00c292 <rt_vsnprintf+0x284> lw	a5,0(a5)
1c00c294 <rt_vsnprintf+0x286> jr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:875
        {
        case 'c':
            if (!(flags & LEFT))
1c00c296 <rt_vsnprintf+0x288> lbu	a5,-42(s0)
1c00c29a <rt_vsnprintf+0x28c> andi	a5,a5,16
1c00c29c <rt_vsnprintf+0x28e> bnez	a5,1c00c2d4 <rt_vsnprintf+0x2c6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:877
            {
                while (--field_width > 0)
1c00c29e <rt_vsnprintf+0x290> j	1c00c2c2 <rt_vsnprintf+0x2b4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:879
                {
                    if (str < end) *str = ' ';
1c00c2a0 <rt_vsnprintf+0x292> lw	a4,-32(s0)
1c00c2a4 <rt_vsnprintf+0x296> lw	a5,-36(s0)
1c00c2a8 <rt_vsnprintf+0x29a> bgeu	a4,a5,1c00c2b8 <rt_vsnprintf+0x2aa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:879 (discriminator 1)
1c00c2ac <rt_vsnprintf+0x29e> lw	a5,-32(s0)
1c00c2b0 <rt_vsnprintf+0x2a2> li	a4,32
1c00c2b4 <rt_vsnprintf+0x2a6> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:880
                    ++ str;
1c00c2b8 <rt_vsnprintf+0x2aa> lw	a5,-32(s0)
1c00c2bc <rt_vsnprintf+0x2ae> addi	a5,a5,1
1c00c2be <rt_vsnprintf+0x2b0> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:877
                while (--field_width > 0)
1c00c2c2 <rt_vsnprintf+0x2b4> lw	a5,-48(s0)
1c00c2c6 <rt_vsnprintf+0x2b8> addi	a5,a5,-1
1c00c2c8 <rt_vsnprintf+0x2ba> sw	a5,-48(s0)
1c00c2cc <rt_vsnprintf+0x2be> lw	a5,-48(s0)
1c00c2d0 <rt_vsnprintf+0x2c2> bgtz	a5,1c00c2a0 <rt_vsnprintf+0x292>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:885
                }
            }

            /* get character */
            c = (rt_uint8_t)va_arg(args, int);
1c00c2d4 <rt_vsnprintf+0x2c6> lw	a5,-80(s0)
1c00c2d8 <rt_vsnprintf+0x2ca> addi	a4,a5,4
1c00c2dc <rt_vsnprintf+0x2ce> sw	a4,-80(s0)
1c00c2e0 <rt_vsnprintf+0x2d2> lw	a5,0(a5)
1c00c2e2 <rt_vsnprintf+0x2d4> sb	a5,-53(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:886
            if (str < end) *str = c;
1c00c2e6 <rt_vsnprintf+0x2d8> lw	a4,-32(s0)
1c00c2ea <rt_vsnprintf+0x2dc> lw	a5,-36(s0)
1c00c2ee <rt_vsnprintf+0x2e0> bgeu	a4,a5,1c00c2fe <rt_vsnprintf+0x2f0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:886 (discriminator 1)
1c00c2f2 <rt_vsnprintf+0x2e4> lw	a5,-32(s0)
1c00c2f6 <rt_vsnprintf+0x2e8> lbu	a4,-53(s0)
1c00c2fa <rt_vsnprintf+0x2ec> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:887
            ++ str;
1c00c2fe <rt_vsnprintf+0x2f0> lw	a5,-32(s0)
1c00c302 <rt_vsnprintf+0x2f4> addi	a5,a5,1
1c00c304 <rt_vsnprintf+0x2f6> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:890

            /* put width */
            while (--field_width > 0)
1c00c308 <rt_vsnprintf+0x2fa> j	1c00c32c <rt_vsnprintf+0x31e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:892
            {
                if (str < end) *str = ' ';
1c00c30a <rt_vsnprintf+0x2fc> lw	a4,-32(s0)
1c00c30e <rt_vsnprintf+0x300> lw	a5,-36(s0)
1c00c312 <rt_vsnprintf+0x304> bgeu	a4,a5,1c00c322 <rt_vsnprintf+0x314>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:892 (discriminator 1)
1c00c316 <rt_vsnprintf+0x308> lw	a5,-32(s0)
1c00c31a <rt_vsnprintf+0x30c> li	a4,32
1c00c31e <rt_vsnprintf+0x310> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:893
                ++ str;
1c00c322 <rt_vsnprintf+0x314> lw	a5,-32(s0)
1c00c326 <rt_vsnprintf+0x318> addi	a5,a5,1
1c00c328 <rt_vsnprintf+0x31a> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:890
            while (--field_width > 0)
1c00c32c <rt_vsnprintf+0x31e> lw	a5,-48(s0)
1c00c330 <rt_vsnprintf+0x322> addi	a5,a5,-1
1c00c332 <rt_vsnprintf+0x324> sw	a5,-48(s0)
1c00c336 <rt_vsnprintf+0x328> lw	a5,-48(s0)
1c00c33a <rt_vsnprintf+0x32c> bgtz	a5,1c00c30a <rt_vsnprintf+0x2fc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:895
            }
            continue;
1c00c33e <rt_vsnprintf+0x330> j	1c00c600 <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:898

        case 's':
            s = va_arg(args, char *);
1c00c340 <rt_vsnprintf+0x332> lw	a5,-80(s0)
1c00c344 <rt_vsnprintf+0x336> addi	a4,a5,4
1c00c348 <rt_vsnprintf+0x33a> sw	a4,-80(s0)
1c00c34c <rt_vsnprintf+0x33e> lw	a5,0(a5)
1c00c34e <rt_vsnprintf+0x340> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:899
            if (!s) s = "(NULL)";
1c00c352 <rt_vsnprintf+0x344> lw	a5,-40(s0)
1c00c356 <rt_vsnprintf+0x348> bnez	a5,1c00c364 <rt_vsnprintf+0x356>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:899 (discriminator 1)
1c00c358 <rt_vsnprintf+0x34a> lui	a5,0x1c010
1c00c35c <rt_vsnprintf+0x34e> addi	a5,a5,1056 # 1c010420 <__l2_priv0_end+0xf8>
1c00c360 <rt_vsnprintf+0x352> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:901

            for (len = 0; (len != field_width) && (s[len] != '\0'); len++);
1c00c364 <rt_vsnprintf+0x356> sw	zero,-28(s0)
1c00c368 <rt_vsnprintf+0x35a> j	1c00c374 <rt_vsnprintf+0x366>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:901 (discriminator 4)
1c00c36a <rt_vsnprintf+0x35c> lw	a5,-28(s0)
1c00c36e <rt_vsnprintf+0x360> addi	a5,a5,1
1c00c370 <rt_vsnprintf+0x362> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:901 (discriminator 1)
1c00c374 <rt_vsnprintf+0x366> lw	a4,-28(s0)
1c00c378 <rt_vsnprintf+0x36a> lw	a5,-48(s0)
1c00c37c <rt_vsnprintf+0x36e> beq	a4,a5,1c00c390 <rt_vsnprintf+0x382>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:901 (discriminator 3)
1c00c380 <rt_vsnprintf+0x372> lw	a5,-28(s0)
1c00c384 <rt_vsnprintf+0x376> lw	a4,-40(s0)
1c00c388 <rt_vsnprintf+0x37a> add	a5,a5,a4
1c00c38a <rt_vsnprintf+0x37c> lb	a5,0(a5)
1c00c38e <rt_vsnprintf+0x380> bnez	a5,1c00c36a <rt_vsnprintf+0x35c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:903
#ifdef RT_PRINTF_PRECISION
            if (precision > 0 && len > precision) len = precision;
1c00c390 <rt_vsnprintf+0x382> lw	a5,-52(s0)
1c00c394 <rt_vsnprintf+0x386> blez	a5,1c00c3ac <rt_vsnprintf+0x39e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:903 (discriminator 1)
1c00c398 <rt_vsnprintf+0x38a> lw	a4,-28(s0)
1c00c39c <rt_vsnprintf+0x38e> lw	a5,-52(s0)
1c00c3a0 <rt_vsnprintf+0x392> bge	a5,a4,1c00c3ac <rt_vsnprintf+0x39e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:903 (discriminator 2)
1c00c3a4 <rt_vsnprintf+0x396> lw	a5,-52(s0)
1c00c3a8 <rt_vsnprintf+0x39a> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:906
#endif

            if (!(flags & LEFT))
1c00c3ac <rt_vsnprintf+0x39e> lbu	a5,-42(s0)
1c00c3b0 <rt_vsnprintf+0x3a2> andi	a5,a5,16
1c00c3b2 <rt_vsnprintf+0x3a4> bnez	a5,1c00c3ec <rt_vsnprintf+0x3de>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:908
            {
                while (len < field_width--)
1c00c3b4 <rt_vsnprintf+0x3a6> j	1c00c3d8 <rt_vsnprintf+0x3ca>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:910
                {
                    if (str < end) *str = ' ';
1c00c3b6 <rt_vsnprintf+0x3a8> lw	a4,-32(s0)
1c00c3ba <rt_vsnprintf+0x3ac> lw	a5,-36(s0)
1c00c3be <rt_vsnprintf+0x3b0> bgeu	a4,a5,1c00c3ce <rt_vsnprintf+0x3c0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:910 (discriminator 1)
1c00c3c2 <rt_vsnprintf+0x3b4> lw	a5,-32(s0)
1c00c3c6 <rt_vsnprintf+0x3b8> li	a4,32
1c00c3ca <rt_vsnprintf+0x3bc> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:911
                    ++ str;
1c00c3ce <rt_vsnprintf+0x3c0> lw	a5,-32(s0)
1c00c3d2 <rt_vsnprintf+0x3c4> addi	a5,a5,1
1c00c3d4 <rt_vsnprintf+0x3c6> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:908
                while (len < field_width--)
1c00c3d8 <rt_vsnprintf+0x3ca> lw	a5,-48(s0)
1c00c3dc <rt_vsnprintf+0x3ce> addi	a4,a5,-1
1c00c3e0 <rt_vsnprintf+0x3d2> sw	a4,-48(s0)
1c00c3e4 <rt_vsnprintf+0x3d6> lw	a4,-28(s0)
1c00c3e8 <rt_vsnprintf+0x3da> blt	a4,a5,1c00c3b6 <rt_vsnprintf+0x3a8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:915
                }
            }

            for (i = 0; i < len; ++i)
1c00c3ec <rt_vsnprintf+0x3de> sw	zero,-24(s0)
1c00c3f0 <rt_vsnprintf+0x3e2> j	1c00c42c <rt_vsnprintf+0x41e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:917
            {
                if (str < end) *str = *s;
1c00c3f2 <rt_vsnprintf+0x3e4> lw	a4,-32(s0)
1c00c3f6 <rt_vsnprintf+0x3e8> lw	a5,-36(s0)
1c00c3fa <rt_vsnprintf+0x3ec> bgeu	a4,a5,1c00c40e <rt_vsnprintf+0x400>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:917 (discriminator 1)
1c00c3fe <rt_vsnprintf+0x3f0> lw	a5,-40(s0)
1c00c402 <rt_vsnprintf+0x3f4> lb	a4,0(a5)
1c00c406 <rt_vsnprintf+0x3f8> lw	a5,-32(s0)
1c00c40a <rt_vsnprintf+0x3fc> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:918 (discriminator 2)
                ++ str;
1c00c40e <rt_vsnprintf+0x400> lw	a5,-32(s0)
1c00c412 <rt_vsnprintf+0x404> addi	a5,a5,1
1c00c414 <rt_vsnprintf+0x406> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:919 (discriminator 2)
                ++ s;
1c00c418 <rt_vsnprintf+0x40a> lw	a5,-40(s0)
1c00c41c <rt_vsnprintf+0x40e> addi	a5,a5,1
1c00c41e <rt_vsnprintf+0x410> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:915 (discriminator 2)
            for (i = 0; i < len; ++i)
1c00c422 <rt_vsnprintf+0x414> lw	a5,-24(s0)
1c00c426 <rt_vsnprintf+0x418> addi	a5,a5,1
1c00c428 <rt_vsnprintf+0x41a> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:915 (discriminator 1)
1c00c42c <rt_vsnprintf+0x41e> lw	a4,-24(s0)
1c00c430 <rt_vsnprintf+0x422> lw	a5,-28(s0)
1c00c434 <rt_vsnprintf+0x426> blt	a4,a5,1c00c3f2 <rt_vsnprintf+0x3e4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:922
            }

            while (len < field_width--)
1c00c438 <rt_vsnprintf+0x42a> j	1c00c45c <rt_vsnprintf+0x44e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:924
            {
                if (str < end) *str = ' ';
1c00c43a <rt_vsnprintf+0x42c> lw	a4,-32(s0)
1c00c43e <rt_vsnprintf+0x430> lw	a5,-36(s0)
1c00c442 <rt_vsnprintf+0x434> bgeu	a4,a5,1c00c452 <rt_vsnprintf+0x444>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:924 (discriminator 1)
1c00c446 <rt_vsnprintf+0x438> lw	a5,-32(s0)
1c00c44a <rt_vsnprintf+0x43c> li	a4,32
1c00c44e <rt_vsnprintf+0x440> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:925
                ++ str;
1c00c452 <rt_vsnprintf+0x444> lw	a5,-32(s0)
1c00c456 <rt_vsnprintf+0x448> addi	a5,a5,1
1c00c458 <rt_vsnprintf+0x44a> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:922
            while (len < field_width--)
1c00c45c <rt_vsnprintf+0x44e> lw	a5,-48(s0)
1c00c460 <rt_vsnprintf+0x452> addi	a4,a5,-1
1c00c464 <rt_vsnprintf+0x456> sw	a4,-48(s0)
1c00c468 <rt_vsnprintf+0x45a> lw	a4,-28(s0)
1c00c46c <rt_vsnprintf+0x45e> blt	a4,a5,1c00c43a <rt_vsnprintf+0x42c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:927
            }
            continue;
1c00c470 <rt_vsnprintf+0x462> j	1c00c600 <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:930

        case 'p':
            if (field_width == -1)
1c00c472 <rt_vsnprintf+0x464> lw	a4,-48(s0)
1c00c476 <rt_vsnprintf+0x468> li	a5,-1
1c00c478 <rt_vsnprintf+0x46a> bne	a4,a5,1c00c48e <rt_vsnprintf+0x480>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:932
            {
                field_width = sizeof(void *) << 1;
1c00c47c <rt_vsnprintf+0x46e> li	a5,8
1c00c47e <rt_vsnprintf+0x470> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:933
                flags |= ZEROPAD;
1c00c482 <rt_vsnprintf+0x474> lbu	a5,-42(s0)
1c00c486 <rt_vsnprintf+0x478> ori	a5,a5,1
1c00c48a <rt_vsnprintf+0x47c> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:937
            }
#ifdef RT_PRINTF_PRECISION
            str = print_number(str, end,
                               (long)va_arg(args, void *),
1c00c48e <rt_vsnprintf+0x480> lw	a5,-80(s0)
1c00c492 <rt_vsnprintf+0x484> addi	a4,a5,4
1c00c496 <rt_vsnprintf+0x488> sw	a4,-80(s0)
1c00c49a <rt_vsnprintf+0x48c> lw	a5,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:936
            str = print_number(str, end,
1c00c49c <rt_vsnprintf+0x48e> mv	a2,a5
1c00c49e <rt_vsnprintf+0x490> lbu	a5,-42(s0)
1c00c4a2 <rt_vsnprintf+0x494> mv	a6,a5
1c00c4a4 <rt_vsnprintf+0x496> lw	a5,-52(s0)
1c00c4a8 <rt_vsnprintf+0x49a> lw	a4,-48(s0)
1c00c4ac <rt_vsnprintf+0x49e> li	a3,16
1c00c4ae <rt_vsnprintf+0x4a0> lw	a1,-36(s0)
1c00c4b2 <rt_vsnprintf+0x4a4> lw	a0,-32(s0)
1c00c4b6 <rt_vsnprintf+0x4a8> jal	ra,1c00bd96 <print_number>
1c00c4ba <rt_vsnprintf+0x4ac> sw	a0,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:944
#else
            str = print_number(str, end,
                               (long)va_arg(args, void *),
                               16, field_width, flags);
#endif
            continue;
1c00c4be <rt_vsnprintf+0x4b0> j	1c00c600 <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:947

        case '%':
            if (str < end) *str = '%';
1c00c4c0 <rt_vsnprintf+0x4b2> lw	a4,-32(s0)
1c00c4c4 <rt_vsnprintf+0x4b6> lw	a5,-36(s0)
1c00c4c8 <rt_vsnprintf+0x4ba> bgeu	a4,a5,1c00c4d8 <rt_vsnprintf+0x4ca>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:947 (discriminator 1)
1c00c4cc <rt_vsnprintf+0x4be> lw	a5,-32(s0)
1c00c4d0 <rt_vsnprintf+0x4c2> li	a4,37
1c00c4d4 <rt_vsnprintf+0x4c6> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:948
            ++ str;
1c00c4d8 <rt_vsnprintf+0x4ca> lw	a5,-32(s0)
1c00c4dc <rt_vsnprintf+0x4ce> addi	a5,a5,1
1c00c4de <rt_vsnprintf+0x4d0> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:949
            continue;
1c00c4e2 <rt_vsnprintf+0x4d4> j	1c00c600 <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:953

        /* integer number formats - set up the flags and "break" */
        case 'o':
            base = 8;
1c00c4e4 <rt_vsnprintf+0x4d6> li	a5,8
1c00c4e6 <rt_vsnprintf+0x4d8> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:954
            break;
1c00c4ea <rt_vsnprintf+0x4dc> j	1c00c570 <rt_vsnprintf+0x562>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:957

        case 'X':
            flags |= LARGE;
1c00c4ec <rt_vsnprintf+0x4de> lbu	a5,-42(s0)
1c00c4f0 <rt_vsnprintf+0x4e2> ori	a5,a5,64
1c00c4f4 <rt_vsnprintf+0x4e6> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:959
        case 'x':
            base = 16;
1c00c4f8 <rt_vsnprintf+0x4ea> li	a5,16
1c00c4fa <rt_vsnprintf+0x4ec> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:960
            break;
1c00c4fe <rt_vsnprintf+0x4f0> j	1c00c570 <rt_vsnprintf+0x562>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:964

        case 'd':
        case 'i':
            flags |= SIGN;
1c00c500 <rt_vsnprintf+0x4f2> lbu	a5,-42(s0)
1c00c504 <rt_vsnprintf+0x4f6> ori	a5,a5,2
1c00c508 <rt_vsnprintf+0x4fa> sb	a5,-42(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:966
        case 'u':
            break;
1c00c50c <rt_vsnprintf+0x4fe> j	1c00c56e <rt_vsnprintf+0x560>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:969

        default:
            if (str < end) *str = '%';
1c00c50e <rt_vsnprintf+0x500> lw	a4,-32(s0)
1c00c512 <rt_vsnprintf+0x504> lw	a5,-36(s0)
1c00c516 <rt_vsnprintf+0x508> bgeu	a4,a5,1c00c526 <rt_vsnprintf+0x518>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:969 (discriminator 1)
1c00c51a <rt_vsnprintf+0x50c> lw	a5,-32(s0)
1c00c51e <rt_vsnprintf+0x510> li	a4,37
1c00c522 <rt_vsnprintf+0x514> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:970
            ++ str;
1c00c526 <rt_vsnprintf+0x518> lw	a5,-32(s0)
1c00c52a <rt_vsnprintf+0x51c> addi	a5,a5,1
1c00c52c <rt_vsnprintf+0x51e> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:972

            if (*fmt)
1c00c530 <rt_vsnprintf+0x522> lw	a5,-76(s0)
1c00c534 <rt_vsnprintf+0x526> lb	a5,0(a5)
1c00c538 <rt_vsnprintf+0x52a> beqz	a5,1c00c562 <rt_vsnprintf+0x554>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:974
            {
                if (str < end) *str = *fmt;
1c00c53a <rt_vsnprintf+0x52c> lw	a4,-32(s0)
1c00c53e <rt_vsnprintf+0x530> lw	a5,-36(s0)
1c00c542 <rt_vsnprintf+0x534> bgeu	a4,a5,1c00c556 <rt_vsnprintf+0x548>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:974 (discriminator 1)
1c00c546 <rt_vsnprintf+0x538> lw	a5,-76(s0)
1c00c54a <rt_vsnprintf+0x53c> lb	a4,0(a5)
1c00c54e <rt_vsnprintf+0x540> lw	a5,-32(s0)
1c00c552 <rt_vsnprintf+0x544> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:975
                ++ str;
1c00c556 <rt_vsnprintf+0x548> lw	a5,-32(s0)
1c00c55a <rt_vsnprintf+0x54c> addi	a5,a5,1
1c00c55c <rt_vsnprintf+0x54e> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:981
            }
            else
            {
                -- fmt;
            }
            continue;
1c00c560 <rt_vsnprintf+0x552> j	1c00c600 <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:979
                -- fmt;
1c00c562 <rt_vsnprintf+0x554> lw	a5,-76(s0)
1c00c566 <rt_vsnprintf+0x558> addi	a5,a5,-1
1c00c568 <rt_vsnprintf+0x55a> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:981
            continue;
1c00c56c <rt_vsnprintf+0x55e> j	1c00c600 <rt_vsnprintf+0x5f2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:966
            break;
1c00c56e <rt_vsnprintf+0x560> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:988

#ifdef RT_PRINTF_LONGLONG
        if (qualifier == 'L') num = va_arg(args, long long);
        else if (qualifier == 'l')
#else
        if (qualifier == 'l')
1c00c570 <rt_vsnprintf+0x562> lbu	a4,-43(s0)
1c00c574 <rt_vsnprintf+0x566> li	a5,108
1c00c578 <rt_vsnprintf+0x56a> bne	a4,a5,1c00c590 <rt_vsnprintf+0x582>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:991
#endif
        {
            num = va_arg(args, rt_uint32_t);
1c00c57c <rt_vsnprintf+0x56e> lw	a5,-80(s0)
1c00c580 <rt_vsnprintf+0x572> addi	a4,a5,4
1c00c584 <rt_vsnprintf+0x576> sw	a4,-80(s0)
1c00c588 <rt_vsnprintf+0x57a> lw	a5,0(a5)
1c00c58a <rt_vsnprintf+0x57c> sw	a5,-20(s0)
1c00c58e <rt_vsnprintf+0x580> j	1c00c5da <rt_vsnprintf+0x5cc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:994
            if (flags & SIGN) num = (rt_int32_t)num;
        }
        else if (qualifier == 'h')
1c00c590 <rt_vsnprintf+0x582> lbu	a4,-43(s0)
1c00c594 <rt_vsnprintf+0x586> li	a5,104
1c00c598 <rt_vsnprintf+0x58a> bne	a4,a5,1c00c5c8 <rt_vsnprintf+0x5ba>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:996
        {
            num = (rt_uint16_t)va_arg(args, rt_int32_t);
1c00c59c <rt_vsnprintf+0x58e> lw	a5,-80(s0)
1c00c5a0 <rt_vsnprintf+0x592> addi	a4,a5,4
1c00c5a4 <rt_vsnprintf+0x596> sw	a4,-80(s0)
1c00c5a8 <rt_vsnprintf+0x59a> lw	a5,0(a5)
1c00c5aa <rt_vsnprintf+0x59c> slli	a5,a5,0x10
1c00c5ac <rt_vsnprintf+0x59e> srli	a5,a5,0x10
1c00c5ae <rt_vsnprintf+0x5a0> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:997
            if (flags & SIGN) num = (rt_int16_t)num;
1c00c5b2 <rt_vsnprintf+0x5a4> lbu	a5,-42(s0)
1c00c5b6 <rt_vsnprintf+0x5a8> andi	a5,a5,2
1c00c5b8 <rt_vsnprintf+0x5aa> beqz	a5,1c00c5da <rt_vsnprintf+0x5cc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:997 (discriminator 1)
1c00c5ba <rt_vsnprintf+0x5ac> lw	a5,-20(s0)
1c00c5be <rt_vsnprintf+0x5b0> slli	a5,a5,0x10
1c00c5c0 <rt_vsnprintf+0x5b2> srai	a5,a5,0x10
1c00c5c2 <rt_vsnprintf+0x5b4> sw	a5,-20(s0)
1c00c5c6 <rt_vsnprintf+0x5b8> j	1c00c5da <rt_vsnprintf+0x5cc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1001
        }
        else
        {
            num = va_arg(args, rt_uint32_t);
1c00c5c8 <rt_vsnprintf+0x5ba> lw	a5,-80(s0)
1c00c5cc <rt_vsnprintf+0x5be> addi	a4,a5,4
1c00c5d0 <rt_vsnprintf+0x5c2> sw	a4,-80(s0)
1c00c5d4 <rt_vsnprintf+0x5c6> lw	a5,0(a5)
1c00c5d6 <rt_vsnprintf+0x5c8> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1005
            if (flags & SIGN) num = (rt_int32_t)num;
        }
#ifdef RT_PRINTF_PRECISION
        str = print_number(str, end, num, base, field_width, precision, flags);
1c00c5da <rt_vsnprintf+0x5cc> lw	a2,-20(s0)
1c00c5de <rt_vsnprintf+0x5d0> lbu	a3,-41(s0)
1c00c5e2 <rt_vsnprintf+0x5d4> lbu	a5,-42(s0)
1c00c5e6 <rt_vsnprintf+0x5d8> mv	a6,a5
1c00c5e8 <rt_vsnprintf+0x5da> lw	a5,-52(s0)
1c00c5ec <rt_vsnprintf+0x5de> lw	a4,-48(s0)
1c00c5f0 <rt_vsnprintf+0x5e2> lw	a1,-36(s0)
1c00c5f4 <rt_vsnprintf+0x5e6> lw	a0,-32(s0)
1c00c5f8 <rt_vsnprintf+0x5ea> jal	ra,1c00bd96 <print_number>
1c00c5fc <rt_vsnprintf+0x5ee> sw	a0,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:794
    for (; *fmt ; ++fmt)
1c00c600 <rt_vsnprintf+0x5f2> lw	a5,-76(s0)
1c00c604 <rt_vsnprintf+0x5f6> addi	a5,a5,1
1c00c606 <rt_vsnprintf+0x5f8> sw	a5,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:794 (discriminator 1)
1c00c60a <rt_vsnprintf+0x5fc> lw	a5,-76(s0)
1c00c60e <rt_vsnprintf+0x600> lb	a5,0(a5)
1c00c612 <rt_vsnprintf+0x604> bnez	a5,1c00c060 <rt_vsnprintf+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1011
#else
        str = print_number(str, end, num, base, field_width, flags);
#endif
    }

    if (size > 0)
1c00c616 <rt_vsnprintf+0x608> lw	a5,-72(s0)
1c00c61a <rt_vsnprintf+0x60c> beqz	a5,1c00c63c <rt_vsnprintf+0x62e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1013
    {
        if (str < end) *str = '\0';
1c00c61c <rt_vsnprintf+0x60e> lw	a4,-32(s0)
1c00c620 <rt_vsnprintf+0x612> lw	a5,-36(s0)
1c00c624 <rt_vsnprintf+0x616> bgeu	a4,a5,1c00c632 <rt_vsnprintf+0x624>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1013 (discriminator 1)
1c00c628 <rt_vsnprintf+0x61a> lw	a5,-32(s0)
1c00c62c <rt_vsnprintf+0x61e> sb	zero,0(a5)
1c00c630 <rt_vsnprintf+0x622> j	1c00c63c <rt_vsnprintf+0x62e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1016
        else
        {
            end[-1] = '\0';
1c00c632 <rt_vsnprintf+0x624> lw	a5,-36(s0)
1c00c636 <rt_vsnprintf+0x628> addi	a5,a5,-1
1c00c638 <rt_vsnprintf+0x62a> sb	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1023
    }

    /* the trailing null byte doesn't count towards the total
    * ++str;
    */
    return str - buf;
1c00c63c <rt_vsnprintf+0x62e> lw	a4,-32(s0)
1c00c640 <rt_vsnprintf+0x632> lw	a5,-68(s0)
1c00c644 <rt_vsnprintf+0x636> sub	a5,a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1024
}
1c00c648 <rt_vsnprintf+0x63a> mv	a0,a5
1c00c64a <rt_vsnprintf+0x63c> lw	ra,76(sp)
1c00c64c <rt_vsnprintf+0x63e> lw	s0,72(sp)
1c00c64e <rt_vsnprintf+0x640> addi	sp,sp,80
1c00c650 <rt_vsnprintf+0x642> ret
rt_kprintf():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1165
 * This function will print a formatted string on system console
 *
 * @param fmt the format
 */
void rt_kprintf(const char *fmt, ...)
{
1c00c652 <rt_kprintf> addi	sp,sp,-80
1c00c654 <rt_kprintf+0x2> sw	ra,44(sp)
1c00c656 <rt_kprintf+0x4> sw	s0,40(sp)
1c00c658 <rt_kprintf+0x6> addi	s0,sp,48
1c00c65a <rt_kprintf+0x8> sw	a0,-36(s0)
1c00c65e <rt_kprintf+0xc> sw	a1,4(s0)
1c00c660 <rt_kprintf+0xe> sw	a2,8(s0)
1c00c662 <rt_kprintf+0x10> sw	a3,12(s0)
1c00c664 <rt_kprintf+0x12> sw	a4,16(s0)
1c00c666 <rt_kprintf+0x14> sw	a5,20(s0)
1c00c668 <rt_kprintf+0x16> sw	a6,24(s0)
1c00c66c <rt_kprintf+0x1a> sw	a7,28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1170
    va_list args;
    rt_size_t length;
    static char rt_log_buf[RT_CONSOLEBUF_SIZE];

    va_start(args, fmt);
1c00c670 <rt_kprintf+0x1e> addi	a5,s0,32
1c00c674 <rt_kprintf+0x22> addi	a5,a5,-28
1c00c676 <rt_kprintf+0x24> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1176
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
1c00c67a <rt_kprintf+0x28> lw	a5,-24(s0)
1c00c67e <rt_kprintf+0x2c> mv	a3,a5
1c00c680 <rt_kprintf+0x2e> lw	a2,-36(s0)
1c00c684 <rt_kprintf+0x32> li	a1,127
1c00c688 <rt_kprintf+0x36> lui	a5,0x1c017
1c00c68c <rt_kprintf+0x3a> addi	a0,a5,-1472 # 1c016a40 <rt_log_buf.2208>
1c00c690 <rt_kprintf+0x3e> jal	ra,1c00c00e <rt_vsnprintf>
1c00c694 <rt_kprintf+0x42> mv	a5,a0
1c00c696 <rt_kprintf+0x44> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1177
    if (length > RT_CONSOLEBUF_SIZE - 1)
1c00c69a <rt_kprintf+0x48> lw	a4,-20(s0)
1c00c69e <rt_kprintf+0x4c> li	a5,127
1c00c6a2 <rt_kprintf+0x50> bgeu	a5,a4,1c00c6ae <rt_kprintf+0x5c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1178
        length = RT_CONSOLEBUF_SIZE - 1;
1c00c6a6 <rt_kprintf+0x54> li	a5,127
1c00c6aa <rt_kprintf+0x58> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1193
        _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
        rt_device_write(_console_device, 0, rt_log_buf, length);
        _console_device->open_flag = old_flag;
    }
#else
    rt_hw_console_output(rt_log_buf);
1c00c6ae <rt_kprintf+0x5c> lui	a5,0x1c017
1c00c6b2 <rt_kprintf+0x60> addi	a0,a5,-1472 # 1c016a40 <rt_log_buf.2208>
1c00c6b6 <rt_kprintf+0x64> jal	ra,1c00b31a <rt_hw_console_output>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1196
#endif
    va_end(args);
}
1c00c6ba <rt_kprintf+0x68> nop
1c00c6bc <rt_kprintf+0x6a> lw	ra,44(sp)
1c00c6be <rt_kprintf+0x6c> lw	s0,40(sp)
1c00c6c0 <rt_kprintf+0x6e> addi	sp,sp,80
1c00c6c2 <rt_kprintf+0x70> ret
__rt_ffs():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1295
 *
 * @return return the index of the first bit set. If value is 0, then this function
 * shall return 0.
 */
int __rt_ffs(int value)
{
1c00c6c4 <__rt_ffs> addi	sp,sp,-32
1c00c6c6 <__rt_ffs+0x2> sw	s0,28(sp)
1c00c6c8 <__rt_ffs+0x4> addi	s0,sp,32
1c00c6ca <__rt_ffs+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1296
    if (value == 0) return 0;
1c00c6ce <__rt_ffs+0xa> lw	a5,-20(s0)
1c00c6d2 <__rt_ffs+0xe> bnez	a5,1c00c6d8 <__rt_ffs+0x14>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1296 (discriminator 1)
1c00c6d4 <__rt_ffs+0x10> li	a5,0
1c00c6d6 <__rt_ffs+0x12> j	1c00c764 <__rt_ffs+0xa0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1298

    if (value & 0xff)
1c00c6d8 <__rt_ffs+0x14> lw	a5,-20(s0)
1c00c6dc <__rt_ffs+0x18> andi	a5,a5,255
1c00c6e0 <__rt_ffs+0x1c> beqz	a5,1c00c6fc <__rt_ffs+0x38>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1299
        return __lowest_bit_bitmap[value & 0xff] + 1;
1c00c6e2 <__rt_ffs+0x1e> lw	a5,-20(s0)
1c00c6e6 <__rt_ffs+0x22> andi	a5,a5,255
1c00c6ea <__rt_ffs+0x26> lui	a4,0x1c010
1c00c6ee <__rt_ffs+0x2a> addi	a4,a4,1400 # 1c010578 <__lowest_bit_bitmap>
1c00c6f2 <__rt_ffs+0x2e> add	a5,a5,a4
1c00c6f4 <__rt_ffs+0x30> lbu	a5,0(a5)
1c00c6f8 <__rt_ffs+0x34> addi	a5,a5,1
1c00c6fa <__rt_ffs+0x36> j	1c00c764 <__rt_ffs+0xa0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1301

    if (value & 0xff00)
1c00c6fc <__rt_ffs+0x38> lw	a4,-20(s0)
1c00c700 <__rt_ffs+0x3c> lui	a5,0x10
1c00c702 <__rt_ffs+0x3e> addi	a5,a5,-256 # 0000ff00 <__stack_size+0xf700>
1c00c706 <__rt_ffs+0x42> and	a5,a5,a4
1c00c708 <__rt_ffs+0x44> beqz	a5,1c00c726 <__rt_ffs+0x62>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1302
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
1c00c70a <__rt_ffs+0x46> lw	a5,-20(s0)
1c00c70e <__rt_ffs+0x4a> srai	a5,a5,0x8
1c00c710 <__rt_ffs+0x4c> andi	a5,a5,255
1c00c714 <__rt_ffs+0x50> lui	a4,0x1c010
1c00c718 <__rt_ffs+0x54> addi	a4,a4,1400 # 1c010578 <__lowest_bit_bitmap>
1c00c71c <__rt_ffs+0x58> add	a5,a5,a4
1c00c71e <__rt_ffs+0x5a> lbu	a5,0(a5)
1c00c722 <__rt_ffs+0x5e> addi	a5,a5,9
1c00c724 <__rt_ffs+0x60> j	1c00c764 <__rt_ffs+0xa0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1304

    if (value & 0xff0000)
1c00c726 <__rt_ffs+0x62> lw	a4,-20(s0)
1c00c72a <__rt_ffs+0x66> lui	a5,0xff0
1c00c72e <__rt_ffs+0x6a> and	a5,a5,a4
1c00c730 <__rt_ffs+0x6c> beqz	a5,1c00c74e <__rt_ffs+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1305
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
1c00c732 <__rt_ffs+0x6e> lw	a5,-20(s0)
1c00c736 <__rt_ffs+0x72> srai	a5,a5,0x10
1c00c738 <__rt_ffs+0x74> andi	a5,a5,255
1c00c73c <__rt_ffs+0x78> lui	a4,0x1c010
1c00c740 <__rt_ffs+0x7c> addi	a4,a4,1400 # 1c010578 <__lowest_bit_bitmap>
1c00c744 <__rt_ffs+0x80> add	a5,a5,a4
1c00c746 <__rt_ffs+0x82> lbu	a5,0(a5) # 00ff0000 <__stack_size+0xfef800>
1c00c74a <__rt_ffs+0x86> addi	a5,a5,17
1c00c74c <__rt_ffs+0x88> j	1c00c764 <__rt_ffs+0xa0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1307

    return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
1c00c74e <__rt_ffs+0x8a> lw	a5,-20(s0)
1c00c752 <__rt_ffs+0x8e> srli	a5,a5,0x18
1c00c754 <__rt_ffs+0x90> lui	a4,0x1c010
1c00c758 <__rt_ffs+0x94> addi	a4,a4,1400 # 1c010578 <__lowest_bit_bitmap>
1c00c75c <__rt_ffs+0x98> add	a5,a5,a4
1c00c75e <__rt_ffs+0x9a> lbu	a5,0(a5)
1c00c762 <__rt_ffs+0x9e> addi	a5,a5,25
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/kservice.c:1308
}
1c00c764 <__rt_ffs+0xa0> mv	a0,a5
1c00c766 <__rt_ffs+0xa2> lw	s0,28(sp)
1c00c768 <__rt_ffs+0xa4> addi	sp,sp,32
1c00c76a <__rt_ffs+0xa6> ret
rt_list_insert_after():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:59
{
1c00c76c <rt_list_insert_after> addi	sp,sp,-32
1c00c76e <rt_list_insert_after+0x2> sw	s0,28(sp)
1c00c770 <rt_list_insert_after+0x4> addi	s0,sp,32
1c00c772 <rt_list_insert_after+0x6> sw	a0,-20(s0)
1c00c776 <rt_list_insert_after+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:60
    l->next->prev = n;
1c00c77a <rt_list_insert_after+0xe> lw	a5,-20(s0)
1c00c77e <rt_list_insert_after+0x12> lw	a5,0(a5)
1c00c780 <rt_list_insert_after+0x14> lw	a4,-24(s0)
1c00c784 <rt_list_insert_after+0x18> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:61
    n->next = l->next;
1c00c786 <rt_list_insert_after+0x1a> lw	a5,-20(s0)
1c00c78a <rt_list_insert_after+0x1e> lw	a4,0(a5)
1c00c78c <rt_list_insert_after+0x20> lw	a5,-24(s0)
1c00c790 <rt_list_insert_after+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:63
    l->next = n;
1c00c792 <rt_list_insert_after+0x26> lw	a5,-20(s0)
1c00c796 <rt_list_insert_after+0x2a> lw	a4,-24(s0)
1c00c79a <rt_list_insert_after+0x2e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:64
    n->prev = l;
1c00c79c <rt_list_insert_after+0x30> lw	a5,-24(s0)
1c00c7a0 <rt_list_insert_after+0x34> lw	a4,-20(s0)
1c00c7a4 <rt_list_insert_after+0x38> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:65
}
1c00c7a6 <rt_list_insert_after+0x3a> nop
1c00c7a8 <rt_list_insert_after+0x3c> lw	s0,28(sp)
1c00c7aa <rt_list_insert_after+0x3e> addi	sp,sp,32
1c00c7ac <rt_list_insert_after+0x40> ret
rt_list_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:87
{
1c00c7ae <rt_list_remove> addi	sp,sp,-32
1c00c7b0 <rt_list_remove+0x2> sw	s0,28(sp)
1c00c7b2 <rt_list_remove+0x4> addi	s0,sp,32
1c00c7b4 <rt_list_remove+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:88
    n->next->prev = n->prev;
1c00c7b8 <rt_list_remove+0xa> lw	a5,-20(s0)
1c00c7bc <rt_list_remove+0xe> lw	a5,0(a5)
1c00c7be <rt_list_remove+0x10> lw	a4,-20(s0)
1c00c7c2 <rt_list_remove+0x14> lw	a4,4(a4)
1c00c7c4 <rt_list_remove+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:89
    n->prev->next = n->next;
1c00c7c6 <rt_list_remove+0x18> lw	a5,-20(s0)
1c00c7ca <rt_list_remove+0x1c> lw	a5,4(a5)
1c00c7cc <rt_list_remove+0x1e> lw	a4,-20(s0)
1c00c7d0 <rt_list_remove+0x22> lw	a4,0(a4)
1c00c7d2 <rt_list_remove+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:91
    n->next = n->prev = n;
1c00c7d4 <rt_list_remove+0x26> lw	a5,-20(s0)
1c00c7d8 <rt_list_remove+0x2a> lw	a4,-20(s0)
1c00c7dc <rt_list_remove+0x2e> sw	a4,4(a5)
1c00c7de <rt_list_remove+0x30> lw	a5,-20(s0)
1c00c7e2 <rt_list_remove+0x34> lw	a4,4(a5)
1c00c7e4 <rt_list_remove+0x36> lw	a5,-20(s0)
1c00c7e8 <rt_list_remove+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:92
}
1c00c7ea <rt_list_remove+0x3c> nop
1c00c7ec <rt_list_remove+0x3e> lw	s0,28(sp)
1c00c7ee <rt_list_remove+0x40> addi	sp,sp,32
1c00c7f0 <rt_list_remove+0x42> ret
rt_object_get_information():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:211
 *
 * @return the object type information or RT_NULL
 */
struct rt_object_information *
rt_object_get_information(enum rt_object_class_type type)
{
1c00c7f2 <rt_object_get_information> addi	sp,sp,-48
1c00c7f4 <rt_object_get_information+0x2> sw	s0,44(sp)
1c00c7f6 <rt_object_get_information+0x4> addi	s0,sp,48
1c00c7f8 <rt_object_get_information+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:214
    int index;

    for (index = 0; index < RT_Object_Info_Unknown; index ++)
1c00c7fc <rt_object_get_information+0xa> sw	zero,-20(s0)
1c00c800 <rt_object_get_information+0xe> j	1c00c83a <rt_object_get_information+0x48>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:215
        if (rt_object_container[index].type == type) return &rt_object_container[index];
1c00c802 <rt_object_get_information+0x10> lui	a5,0x1c011
1c00c806 <rt_object_get_information+0x14> addi	a4,a5,440 # 1c0111b8 <rt_object_container>
1c00c80a <rt_object_get_information+0x18> lw	a5,-20(s0)
1c00c80e <rt_object_get_information+0x1c> slli	a5,a5,0x4
1c00c810 <rt_object_get_information+0x1e> add	a5,a5,a4
1c00c812 <rt_object_get_information+0x20> lw	a5,0(a5)
1c00c814 <rt_object_get_information+0x22> lw	a4,-36(s0)
1c00c818 <rt_object_get_information+0x26> bne	a4,a5,1c00c830 <rt_object_get_information+0x3e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:215 (discriminator 1)
1c00c81c <rt_object_get_information+0x2a> lw	a5,-20(s0)
1c00c820 <rt_object_get_information+0x2e> slli	a4,a5,0x4
1c00c824 <rt_object_get_information+0x32> lui	a5,0x1c011
1c00c828 <rt_object_get_information+0x36> addi	a5,a5,440 # 1c0111b8 <rt_object_container>
1c00c82c <rt_object_get_information+0x3a> add	a5,a5,a4
1c00c82e <rt_object_get_information+0x3c> j	1c00c846 <rt_object_get_information+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:214 (discriminator 2)
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
1c00c830 <rt_object_get_information+0x3e> lw	a5,-20(s0)
1c00c834 <rt_object_get_information+0x42> addi	a5,a5,1
1c00c836 <rt_object_get_information+0x44> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:214 (discriminator 1)
1c00c83a <rt_object_get_information+0x48> lw	a4,-20(s0)
1c00c83e <rt_object_get_information+0x4c> li	a5,3
1c00c840 <rt_object_get_information+0x4e> bge	a5,a4,1c00c802 <rt_object_get_information+0x10>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:217

    return RT_NULL;
1c00c844 <rt_object_get_information+0x52> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:218
}
1c00c846 <rt_object_get_information+0x54> mv	a0,a5
1c00c848 <rt_object_get_information+0x56> lw	s0,44(sp)
1c00c84a <rt_object_get_information+0x58> addi	sp,sp,48
1c00c84c <rt_object_get_information+0x5a> ret
rt_object_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:300
 * @param name the object name. In system, the object's name must be unique.
 */
void rt_object_init(struct rt_object         *object,
                    enum rt_object_class_type type,
                    const char               *name)
{
1c00c84e <rt_object_init> addi	sp,sp,-48
1c00c850 <rt_object_init+0x2> sw	ra,44(sp)
1c00c852 <rt_object_init+0x4> sw	s0,40(sp)
1c00c854 <rt_object_init+0x6> sw	s1,36(sp)
1c00c856 <rt_object_init+0x8> addi	s0,sp,48
1c00c858 <rt_object_init+0xa> sw	a0,-36(s0)
1c00c85c <rt_object_init+0xe> sw	a1,-40(s0)
1c00c860 <rt_object_init+0x12> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:302
    register rt_base_t temp;
    struct rt_list_node *node = RT_NULL;
1c00c864 <rt_object_init+0x16> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:306
    struct rt_object_information *information;

    /* get object information */
    information = rt_object_get_information(type);
1c00c868 <rt_object_init+0x1a> lw	a0,-40(s0)
1c00c86c <rt_object_init+0x1e> jal	1c00c7f2 <rt_object_get_information>
1c00c86e <rt_object_init+0x20> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:312
    RT_ASSERT(information != RT_NULL);

    /* check object type to avoid re-initialization */

    /* enter critical */
    rt_enter_critical();
1c00c872 <rt_object_init+0x24> jal	1c00cd76 <rt_enter_critical>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:314
    /* try to find object */
    for (node  = information->object_list.next;
1c00c874 <rt_object_init+0x26> lw	a5,-24(s0)
1c00c878 <rt_object_init+0x2a> lw	a5,4(a5)
1c00c87a <rt_object_init+0x2c> sw	a5,-20(s0)
1c00c87e <rt_object_init+0x30> j	1c00c894 <rt_object_init+0x46>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:320
            node != &(information->object_list);
            node  = node->next)
    {
        struct rt_object *obj;

        obj = rt_list_entry(node, struct rt_object, list);
1c00c880 <rt_object_init+0x32> lw	a5,-20(s0)
1c00c884 <rt_object_init+0x36> addi	a5,a5,-12
1c00c886 <rt_object_init+0x38> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:316
            node  = node->next)
1c00c88a <rt_object_init+0x3c> lw	a5,-20(s0)
1c00c88e <rt_object_init+0x40> lw	a5,0(a5)
1c00c890 <rt_object_init+0x42> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:315 (discriminator 1)
            node != &(information->object_list);
1c00c894 <rt_object_init+0x46> lw	a5,-24(s0)
1c00c898 <rt_object_init+0x4a> addi	a5,a5,4
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:314 (discriminator 1)
    for (node  = information->object_list.next;
1c00c89a <rt_object_init+0x4c> lw	a4,-20(s0)
1c00c89e <rt_object_init+0x50> bne	a4,a5,1c00c880 <rt_object_init+0x32>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:327
        {
            RT_ASSERT(obj != object);
        }
    }
    /* leave critical */
    rt_exit_critical();
1c00c8a2 <rt_object_init+0x54> jal	1c00cdb4 <rt_exit_critical>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:331

    /* initialize object's parameters */
    /* set object type to static */
    object->type = type | RT_Object_Class_Static;
1c00c8a4 <rt_object_init+0x56> lw	a5,-40(s0)
1c00c8a8 <rt_object_init+0x5a> andi	a5,a5,255
1c00c8ac <rt_object_init+0x5e> ori	a5,a5,-128
1c00c8b0 <rt_object_init+0x62> andi	a4,a5,255
1c00c8b4 <rt_object_init+0x66> lw	a5,-36(s0)
1c00c8b8 <rt_object_init+0x6a> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:333
    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
1c00c8bc <rt_object_init+0x6e> lw	a5,-36(s0)
1c00c8c0 <rt_object_init+0x72> li	a2,8
1c00c8c2 <rt_object_init+0x74> lw	a1,-44(s0)
1c00c8c6 <rt_object_init+0x78> mv	a0,a5
1c00c8c8 <rt_object_init+0x7a> jal	ra,1c00bbf8 <rt_strncpy>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:338

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
1c00c8cc <rt_object_init+0x7e> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00c8d0 <rt_object_init+0x82> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:341

    /* insert object into information object list */
    rt_list_insert_after(&(information->object_list), &(object->list));
1c00c8d2 <rt_object_init+0x84> lw	a5,-24(s0)
1c00c8d6 <rt_object_init+0x88> addi	a4,a5,4
1c00c8da <rt_object_init+0x8c> lw	a5,-36(s0)
1c00c8de <rt_object_init+0x90> addi	a5,a5,12
1c00c8e0 <rt_object_init+0x92> mv	a1,a5
1c00c8e2 <rt_object_init+0x94> mv	a0,a4
1c00c8e4 <rt_object_init+0x96> jal	1c00c76c <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:344

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
1c00c8e6 <rt_object_init+0x98> mv	a0,s1
1c00c8e8 <rt_object_init+0x9a> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:345
}
1c00c8ec <rt_object_init+0x9e> nop
1c00c8ee <rt_object_init+0xa0> lw	ra,44(sp)
1c00c8f0 <rt_object_init+0xa2> lw	s0,40(sp)
1c00c8f2 <rt_object_init+0xa4> lw	s1,36(sp)
1c00c8f4 <rt_object_init+0xa6> addi	sp,sp,48
1c00c8f6 <rt_object_init+0xa8> ret
rt_object_detach():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:354
 * and the memory of static object is not freed.
 *
 * @param object the specified object to be detached.
 */
void rt_object_detach(rt_object_t object)
{
1c00c8f8 <rt_object_detach> addi	sp,sp,-32
1c00c8fa <rt_object_detach+0x2> sw	ra,28(sp)
1c00c8fc <rt_object_detach+0x4> sw	s0,24(sp)
1c00c8fe <rt_object_detach+0x6> sw	s1,20(sp)
1c00c900 <rt_object_detach+0x8> addi	s0,sp,32
1c00c902 <rt_object_detach+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:363
    RT_ASSERT(object != RT_NULL);

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));

    /* reset object type */
    object->type = 0;
1c00c906 <rt_object_detach+0xe> lw	a5,-20(s0)
1c00c90a <rt_object_detach+0x12> sb	zero,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:366

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
1c00c90e <rt_object_detach+0x16> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00c912 <rt_object_detach+0x1a> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:369

    /* remove from old list */
    rt_list_remove(&(object->list));
1c00c914 <rt_object_detach+0x1c> lw	a5,-20(s0)
1c00c918 <rt_object_detach+0x20> addi	a5,a5,12
1c00c91a <rt_object_detach+0x22> mv	a0,a5
1c00c91c <rt_object_detach+0x24> jal	1c00c7ae <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:372

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
1c00c91e <rt_object_detach+0x26> mv	a0,s1
1c00c920 <rt_object_detach+0x28> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:373
}
1c00c924 <rt_object_detach+0x2c> nop
1c00c926 <rt_object_detach+0x2e> lw	ra,28(sp)
1c00c928 <rt_object_detach+0x30> lw	s0,24(sp)
1c00c92a <rt_object_detach+0x32> lw	s1,20(sp)
1c00c92c <rt_object_detach+0x34> addi	sp,sp,32
1c00c92e <rt_object_detach+0x36> ret
rt_object_allocate():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:385
 * @param name the object name. In system, the object's name must be unique.
 *
 * @return object
 */
rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
{
1c00c930 <rt_object_allocate> addi	sp,sp,-48
1c00c932 <rt_object_allocate+0x2> sw	ra,44(sp)
1c00c934 <rt_object_allocate+0x4> sw	s0,40(sp)
1c00c936 <rt_object_allocate+0x6> sw	s1,36(sp)
1c00c938 <rt_object_allocate+0x8> addi	s0,sp,48
1c00c93a <rt_object_allocate+0xa> sw	a0,-36(s0)
1c00c93e <rt_object_allocate+0xe> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:393
    struct rt_object_information *information;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get object information */
    information = rt_object_get_information(type);
1c00c942 <rt_object_allocate+0x12> lw	a0,-36(s0)
1c00c946 <rt_object_allocate+0x16> jal	1c00c7f2 <rt_object_get_information>
1c00c948 <rt_object_allocate+0x18> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:396
    RT_ASSERT(information != RT_NULL);

    object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
1c00c94c <rt_object_allocate+0x1c> lw	a5,-20(s0)
1c00c950 <rt_object_allocate+0x20> lw	a5,12(a5)
1c00c952 <rt_object_allocate+0x22> mv	a0,a5
1c00c954 <rt_object_allocate+0x24> jal	ra,1c00df08 <rt_malloc>
1c00c958 <rt_object_allocate+0x28> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:397
    if (object == RT_NULL)
1c00c95c <rt_object_allocate+0x2c> lw	a5,-24(s0)
1c00c960 <rt_object_allocate+0x30> bnez	a5,1c00c966 <rt_object_allocate+0x36>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:400
    {
        /* no memory can be allocated */
        return RT_NULL;
1c00c962 <rt_object_allocate+0x32> li	a5,0
1c00c964 <rt_object_allocate+0x34> j	1c00c9c4 <rt_object_allocate+0x94>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:404
    }

    /* clean memory data of object */
    rt_memset(object, 0x0, information->object_size);
1c00c966 <rt_object_allocate+0x36> lw	a5,-20(s0)
1c00c96a <rt_object_allocate+0x3a> lw	a5,12(a5)
1c00c96c <rt_object_allocate+0x3c> mv	a2,a5
1c00c96e <rt_object_allocate+0x3e> li	a1,0
1c00c970 <rt_object_allocate+0x40> lw	a0,-24(s0)
1c00c974 <rt_object_allocate+0x44> jal	ra,1c00ba0a <rt_memset>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:409

    /* initialize object's parameters */

    /* set object type */
    object->type = type;
1c00c978 <rt_object_allocate+0x48> lw	a5,-36(s0)
1c00c97c <rt_object_allocate+0x4c> andi	a4,a5,255
1c00c980 <rt_object_allocate+0x50> lw	a5,-24(s0)
1c00c984 <rt_object_allocate+0x54> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:412

    /* set object flag */
    object->flag = 0;
1c00c988 <rt_object_allocate+0x58> lw	a5,-24(s0)
1c00c98c <rt_object_allocate+0x5c> sb	zero,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:415

    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
1c00c990 <rt_object_allocate+0x60> lw	a5,-24(s0)
1c00c994 <rt_object_allocate+0x64> li	a2,8
1c00c996 <rt_object_allocate+0x66> lw	a1,-40(s0)
1c00c99a <rt_object_allocate+0x6a> mv	a0,a5
1c00c99c <rt_object_allocate+0x6c> jal	ra,1c00bbf8 <rt_strncpy>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:420

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
1c00c9a0 <rt_object_allocate+0x70> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00c9a4 <rt_object_allocate+0x74> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:423

    /* insert object into information object list */
    rt_list_insert_after(&(information->object_list), &(object->list));
1c00c9a6 <rt_object_allocate+0x76> lw	a5,-20(s0)
1c00c9aa <rt_object_allocate+0x7a> addi	a4,a5,4
1c00c9ae <rt_object_allocate+0x7e> lw	a5,-24(s0)
1c00c9b2 <rt_object_allocate+0x82> addi	a5,a5,12
1c00c9b4 <rt_object_allocate+0x84> mv	a1,a5
1c00c9b6 <rt_object_allocate+0x86> mv	a0,a4
1c00c9b8 <rt_object_allocate+0x88> jal	1c00c76c <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:426

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
1c00c9ba <rt_object_allocate+0x8a> mv	a0,s1
1c00c9bc <rt_object_allocate+0x8c> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:429

    /* return object */
    return object;
1c00c9c0 <rt_object_allocate+0x90> lw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:430
}
1c00c9c4 <rt_object_allocate+0x94> mv	a0,a5
1c00c9c6 <rt_object_allocate+0x96> lw	ra,44(sp)
1c00c9c8 <rt_object_allocate+0x98> lw	s0,40(sp)
1c00c9ca <rt_object_allocate+0x9a> lw	s1,36(sp)
1c00c9cc <rt_object_allocate+0x9c> addi	sp,sp,48
1c00c9ce <rt_object_allocate+0x9e> ret
rt_object_delete():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:438
 * This function will delete an object and release object memory.
 *
 * @param object the specified object to be deleted.
 */
void rt_object_delete(rt_object_t object)
{
1c00c9d0 <rt_object_delete> addi	sp,sp,-32
1c00c9d2 <rt_object_delete+0x2> sw	ra,28(sp)
1c00c9d4 <rt_object_delete+0x4> sw	s0,24(sp)
1c00c9d6 <rt_object_delete+0x6> sw	s1,20(sp)
1c00c9d8 <rt_object_delete+0x8> addi	s0,sp,32
1c00c9da <rt_object_delete+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:448
    RT_ASSERT(!(object->type & RT_Object_Class_Static));

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));

    /* reset object type */
    object->type = RT_Object_Class_Null;
1c00c9de <rt_object_delete+0xe> lw	a5,-20(s0)
1c00c9e2 <rt_object_delete+0x12> sb	zero,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:451

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
1c00c9e6 <rt_object_delete+0x16> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00c9ea <rt_object_delete+0x1a> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:454

    /* remove from old list */
    rt_list_remove(&(object->list));
1c00c9ec <rt_object_delete+0x1c> lw	a5,-20(s0)
1c00c9f0 <rt_object_delete+0x20> addi	a5,a5,12
1c00c9f2 <rt_object_delete+0x22> mv	a0,a5
1c00c9f4 <rt_object_delete+0x24> jal	1c00c7ae <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:457

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
1c00c9f6 <rt_object_delete+0x26> mv	a0,s1
1c00c9f8 <rt_object_delete+0x28> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:460

    /* free the memory of object */
    RT_KERNEL_FREE(object);
1c00c9fc <rt_object_delete+0x2c> lw	a0,-20(s0)
1c00ca00 <rt_object_delete+0x30> jal	ra,1c00e1f6 <rt_free>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:461
}
1c00ca04 <rt_object_delete+0x34> nop
1c00ca06 <rt_object_delete+0x36> lw	ra,28(sp)
1c00ca08 <rt_object_delete+0x38> lw	s0,24(sp)
1c00ca0a <rt_object_delete+0x3a> lw	s1,20(sp)
1c00ca0c <rt_object_delete+0x3c> addi	sp,sp,32
1c00ca0e <rt_object_delete+0x3e> ret
rt_object_is_systemobject():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:474
 * @param object the specified object to be judged.
 *
 * @return RT_TRUE if a system object, RT_FALSE for others.
 */
rt_bool_t rt_object_is_systemobject(rt_object_t object)
{
1c00ca10 <rt_object_is_systemobject> addi	sp,sp,-32
1c00ca12 <rt_object_is_systemobject+0x2> sw	s0,28(sp)
1c00ca14 <rt_object_is_systemobject+0x4> addi	s0,sp,32
1c00ca16 <rt_object_is_systemobject+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:478
    /* object check */
    RT_ASSERT(object != RT_NULL);

    if (object->type & RT_Object_Class_Static)
1c00ca1a <rt_object_is_systemobject+0xa> lw	a5,-20(s0)
1c00ca1e <rt_object_is_systemobject+0xe> lbu	a5,8(a5)
1c00ca22 <rt_object_is_systemobject+0x12> slli	a5,a5,0x18
1c00ca24 <rt_object_is_systemobject+0x14> srai	a5,a5,0x18
1c00ca26 <rt_object_is_systemobject+0x16> bgez	a5,1c00ca2e <rt_object_is_systemobject+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:479
        return RT_TRUE;
1c00ca2a <rt_object_is_systemobject+0x1a> li	a5,1
1c00ca2c <rt_object_is_systemobject+0x1c> j	1c00ca30 <rt_object_is_systemobject+0x20>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:481

    return RT_FALSE;
1c00ca2e <rt_object_is_systemobject+0x1e> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/object.c:482
}
1c00ca30 <rt_object_is_systemobject+0x20> mv	a0,a5
1c00ca32 <rt_object_is_systemobject+0x22> lw	s0,28(sp)
1c00ca34 <rt_object_is_systemobject+0x24> addi	sp,sp,32
1c00ca36 <rt_object_is_systemobject+0x26> ret
rt_list_init():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:48
{
1c00ca38 <rt_list_init> addi	sp,sp,-32
1c00ca3a <rt_list_init+0x2> sw	s0,28(sp)
1c00ca3c <rt_list_init+0x4> addi	s0,sp,32
1c00ca3e <rt_list_init+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:49
    l->next = l->prev = l;
1c00ca42 <rt_list_init+0xa> lw	a5,-20(s0)
1c00ca46 <rt_list_init+0xe> lw	a4,-20(s0)
1c00ca4a <rt_list_init+0x12> sw	a4,4(a5)
1c00ca4c <rt_list_init+0x14> lw	a5,-20(s0)
1c00ca50 <rt_list_init+0x18> lw	a4,4(a5)
1c00ca52 <rt_list_init+0x1a> lw	a5,-20(s0)
1c00ca56 <rt_list_init+0x1e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:50
}
1c00ca58 <rt_list_init+0x20> nop
1c00ca5a <rt_list_init+0x22> lw	s0,28(sp)
1c00ca5c <rt_list_init+0x24> addi	sp,sp,32
1c00ca5e <rt_list_init+0x26> ret
rt_list_insert_before():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:74
{
1c00ca60 <rt_list_insert_before> addi	sp,sp,-32
1c00ca62 <rt_list_insert_before+0x2> sw	s0,28(sp)
1c00ca64 <rt_list_insert_before+0x4> addi	s0,sp,32
1c00ca66 <rt_list_insert_before+0x6> sw	a0,-20(s0)
1c00ca6a <rt_list_insert_before+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:75
    l->prev->next = n;
1c00ca6e <rt_list_insert_before+0xe> lw	a5,-20(s0)
1c00ca72 <rt_list_insert_before+0x12> lw	a5,4(a5)
1c00ca74 <rt_list_insert_before+0x14> lw	a4,-24(s0)
1c00ca78 <rt_list_insert_before+0x18> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:76
    n->prev = l->prev;
1c00ca7a <rt_list_insert_before+0x1a> lw	a5,-20(s0)
1c00ca7e <rt_list_insert_before+0x1e> lw	a4,4(a5)
1c00ca80 <rt_list_insert_before+0x20> lw	a5,-24(s0)
1c00ca84 <rt_list_insert_before+0x24> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:78
    l->prev = n;
1c00ca86 <rt_list_insert_before+0x26> lw	a5,-20(s0)
1c00ca8a <rt_list_insert_before+0x2a> lw	a4,-24(s0)
1c00ca8e <rt_list_insert_before+0x2e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:79
    n->next = l;
1c00ca90 <rt_list_insert_before+0x30> lw	a5,-24(s0)
1c00ca94 <rt_list_insert_before+0x34> lw	a4,-20(s0)
1c00ca98 <rt_list_insert_before+0x38> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:80
}
1c00ca9a <rt_list_insert_before+0x3a> nop
1c00ca9c <rt_list_insert_before+0x3c> lw	s0,28(sp)
1c00ca9e <rt_list_insert_before+0x3e> addi	sp,sp,32
1c00caa0 <rt_list_insert_before+0x40> ret
rt_list_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:87
{
1c00caa2 <rt_list_remove> addi	sp,sp,-32
1c00caa4 <rt_list_remove+0x2> sw	s0,28(sp)
1c00caa6 <rt_list_remove+0x4> addi	s0,sp,32
1c00caa8 <rt_list_remove+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:88
    n->next->prev = n->prev;
1c00caac <rt_list_remove+0xa> lw	a5,-20(s0)
1c00cab0 <rt_list_remove+0xe> lw	a5,0(a5)
1c00cab2 <rt_list_remove+0x10> lw	a4,-20(s0)
1c00cab6 <rt_list_remove+0x14> lw	a4,4(a4)
1c00cab8 <rt_list_remove+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:89
    n->prev->next = n->next;
1c00caba <rt_list_remove+0x18> lw	a5,-20(s0)
1c00cabe <rt_list_remove+0x1c> lw	a5,4(a5)
1c00cac0 <rt_list_remove+0x1e> lw	a4,-20(s0)
1c00cac4 <rt_list_remove+0x22> lw	a4,0(a4)
1c00cac6 <rt_list_remove+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:91
    n->next = n->prev = n;
1c00cac8 <rt_list_remove+0x26> lw	a5,-20(s0)
1c00cacc <rt_list_remove+0x2a> lw	a4,-20(s0)
1c00cad0 <rt_list_remove+0x2e> sw	a4,4(a5)
1c00cad2 <rt_list_remove+0x30> lw	a5,-20(s0)
1c00cad6 <rt_list_remove+0x34> lw	a4,4(a5)
1c00cad8 <rt_list_remove+0x36> lw	a5,-20(s0)
1c00cadc <rt_list_remove+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:92
}
1c00cade <rt_list_remove+0x3c> nop
1c00cae0 <rt_list_remove+0x3e> lw	s0,28(sp)
1c00cae2 <rt_list_remove+0x40> addi	sp,sp,32
1c00cae4 <rt_list_remove+0x42> ret
rt_list_isempty():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:99
{
1c00cae6 <rt_list_isempty> addi	sp,sp,-32
1c00cae8 <rt_list_isempty+0x2> sw	s0,28(sp)
1c00caea <rt_list_isempty+0x4> addi	s0,sp,32
1c00caec <rt_list_isempty+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:100
    return l->next == l;
1c00caf0 <rt_list_isempty+0xa> lw	a5,-20(s0)
1c00caf4 <rt_list_isempty+0xe> lw	a5,0(a5)
1c00caf6 <rt_list_isempty+0x10> lw	a4,-20(s0)
1c00cafa <rt_list_isempty+0x14> sub	a5,a4,a5
1c00cafe <rt_list_isempty+0x18> seqz	a5,a5
1c00cb02 <rt_list_isempty+0x1c> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:101
}
1c00cb06 <rt_list_isempty+0x20> mv	a0,a5
1c00cb08 <rt_list_isempty+0x22> lw	s0,28(sp)
1c00cb0a <rt_list_isempty+0x24> addi	sp,sp,32
1c00cb0c <rt_list_isempty+0x26> ret
rt_system_scheduler_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:124
/**
 * @ingroup SystemInit
 * This function will initialize the system scheduler
 */
void rt_system_scheduler_init(void)
{
1c00cb0e <rt_system_scheduler_init> addi	sp,sp,-16
1c00cb10 <rt_system_scheduler_init+0x2> sw	ra,12(sp)
1c00cb12 <rt_system_scheduler_init+0x4> sw	s0,8(sp)
1c00cb14 <rt_system_scheduler_init+0x6> sw	s1,4(sp)
1c00cb16 <rt_system_scheduler_init+0x8> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:127
    register rt_base_t offset;

    rt_scheduler_lock_nest = 0;
1c00cb18 <rt_system_scheduler_init+0xa> lui	a5,0x1c017
1c00cb1c <rt_system_scheduler_init+0xe> sh	zero,-1060(a5) # 1c016bdc <rt_scheduler_lock_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:132

    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
                                      RT_THREAD_PRIORITY_MAX));

    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
1c00cb20 <rt_system_scheduler_init+0x12> li	s1,0
1c00cb22 <rt_system_scheduler_init+0x14> j	1c00cb38 <rt_system_scheduler_init+0x2a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:134 (discriminator 3)
    {
        rt_list_init(&rt_thread_priority_table[offset]);
1c00cb24 <rt_system_scheduler_init+0x16> slli	a4,s1,0x3
1c00cb28 <rt_system_scheduler_init+0x1a> lui	a5,0x1c017
1c00cb2c <rt_system_scheduler_init+0x1e> addi	a5,a5,-228 # 1c016f1c <rt_thread_priority_table>
1c00cb30 <rt_system_scheduler_init+0x22> add	a5,a5,a4
1c00cb32 <rt_system_scheduler_init+0x24> mv	a0,a5
1c00cb34 <rt_system_scheduler_init+0x26> jal	1c00ca38 <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:132 (discriminator 3)
    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
1c00cb36 <rt_system_scheduler_init+0x28> addi	s1,s1,1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:132 (discriminator 1)
1c00cb38 <rt_system_scheduler_init+0x2a> li	a5,31
1c00cb3a <rt_system_scheduler_init+0x2c> bge	a5,s1,1c00cb24 <rt_system_scheduler_init+0x16>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:137
    }

    rt_current_priority = RT_THREAD_PRIORITY_MAX - 1;
1c00cb3e <rt_system_scheduler_init+0x30> lui	a5,0x1c017
1c00cb42 <rt_system_scheduler_init+0x34> li	a4,31
1c00cb44 <rt_system_scheduler_init+0x36> sb	a4,28(a5) # 1c01701c <rt_current_priority>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:138
    rt_current_thread = RT_NULL;
1c00cb48 <rt_system_scheduler_init+0x3a> lui	a5,0x1c017
1c00cb4c <rt_system_scheduler_init+0x3e> sw	zero,-1056(a5) # 1c016be0 <rt_current_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:141

    /* initialize ready priority group */
    rt_thread_ready_priority_group = 0;
1c00cb50 <rt_system_scheduler_init+0x42> lui	a5,0x1c017
1c00cb54 <rt_system_scheduler_init+0x46> sw	zero,32(a5) # 1c017020 <rt_thread_ready_priority_group>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:149
    /* initialize ready table */
    rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
#endif

    /* initialize thread defunct */
    rt_list_init(&rt_thread_defunct);
1c00cb58 <rt_system_scheduler_init+0x4a> lui	a5,0x1c017
1c00cb5c <rt_system_scheduler_init+0x4e> addi	a0,a5,36 # 1c017024 <rt_thread_defunct>
1c00cb60 <rt_system_scheduler_init+0x52> jal	1c00ca38 <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:150
}
1c00cb62 <rt_system_scheduler_init+0x54> nop
1c00cb64 <rt_system_scheduler_init+0x56> lw	ra,12(sp)
1c00cb66 <rt_system_scheduler_init+0x58> lw	s0,8(sp)
1c00cb68 <rt_system_scheduler_init+0x5a> lw	s1,4(sp)
1c00cb6a <rt_system_scheduler_init+0x5c> addi	sp,sp,16
1c00cb6c <rt_system_scheduler_init+0x5e> ret
rt_system_scheduler_start():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:158
 * @ingroup SystemInit
 * This function will startup scheduler. It will select one thread
 * with the highest priority level, then switch to it.
 */
void rt_system_scheduler_start(void)
{
1c00cb6e <rt_system_scheduler_start> addi	sp,sp,-16
1c00cb70 <rt_system_scheduler_start+0x2> sw	ra,12(sp)
1c00cb72 <rt_system_scheduler_start+0x4> sw	s0,8(sp)
1c00cb74 <rt_system_scheduler_start+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:168
    register rt_ubase_t number;

    number = __rt_ffs(rt_thread_ready_priority_group) - 1;
    highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#else
    highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
1c00cb76 <rt_system_scheduler_start+0x8> lui	a5,0x1c017
1c00cb7a <rt_system_scheduler_start+0xc> lw	a5,32(a5) # 1c017020 <rt_thread_ready_priority_group>
1c00cb7e <rt_system_scheduler_start+0x10> mv	a0,a5
1c00cb80 <rt_system_scheduler_start+0x12> jal	ra,1c00c6c4 <__rt_ffs>
1c00cb84 <rt_system_scheduler_start+0x16> mv	a5,a0
1c00cb86 <rt_system_scheduler_start+0x18> addi	a5,a5,-1
1c00cb88 <rt_system_scheduler_start+0x1a> mv	ra,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:172
#endif

    /* get switch to thread */
    to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
1c00cb8a <rt_system_scheduler_start+0x1c> lui	a5,0x1c017
1c00cb8e <rt_system_scheduler_start+0x20> addi	a4,a5,-228 # 1c016f1c <rt_thread_priority_table>
1c00cb92 <rt_system_scheduler_start+0x24> slli	a5,ra,0x3
1c00cb96 <rt_system_scheduler_start+0x28> add	a5,a5,a4
1c00cb98 <rt_system_scheduler_start+0x2a> lw	a5,0(a5)
1c00cb9a <rt_system_scheduler_start+0x2c> addi	ra,a5,-20
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:176
                              struct rt_thread,
                              tlist);

    rt_current_thread = to_thread;
1c00cb9e <rt_system_scheduler_start+0x30> lui	a5,0x1c017
1c00cba2 <rt_system_scheduler_start+0x34> sw	ra,-1056(a5) # 1c016be0 <rt_current_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:179

    /* switch to new thread */
    rt_hw_context_switch_to((rt_uint32_t)&to_thread->sp);
1c00cba6 <rt_system_scheduler_start+0x38> addi	a5,ra,28
1c00cbaa <rt_system_scheduler_start+0x3c> mv	a0,a5
1c00cbac <rt_system_scheduler_start+0x3e> jal	ra,1c0080da <rt_hw_context_switch_to>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:182

    /* never come back */
}
1c00cbb0 <rt_system_scheduler_start+0x42> nop
1c00cbb2 <rt_system_scheduler_start+0x44> lw	ra,12(sp)
1c00cbb4 <rt_system_scheduler_start+0x46> lw	s0,8(sp)
1c00cbb6 <rt_system_scheduler_start+0x48> addi	sp,sp,16
1c00cbb8 <rt_system_scheduler_start+0x4a> ret
rt_schedule():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:195
/**
 * This function will perform one schedule. It will select one thread
 * with the highest priority level, then switch to it.
 */
void rt_schedule(void)
{
1c00cbba <rt_schedule> addi	sp,sp,-32
1c00cbbc <rt_schedule+0x2> sw	ra,28(sp)
1c00cbbe <rt_schedule+0x4> sw	s0,24(sp)
1c00cbc0 <rt_schedule+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:201
    rt_base_t level;
    struct rt_thread *to_thread;
    struct rt_thread *from_thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00cbc2 <rt_schedule+0x8> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00cbc6 <rt_schedule+0xc> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:204

    /* check the scheduler is enabled or not */
    if (rt_scheduler_lock_nest == 0)
1c00cbca <rt_schedule+0x10> lui	a5,0x1c017
1c00cbce <rt_schedule+0x14> lh	a5,-1060(a5) # 1c016bdc <rt_scheduler_lock_nest>
1c00cbd2 <rt_schedule+0x18> bnez	a5,1c00cc76 <rt_schedule+0xbc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:209
    {
        register rt_ubase_t highest_ready_priority;

#if RT_THREAD_PRIORITY_MAX <= 32
        highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
1c00cbd4 <rt_schedule+0x1a> lui	a5,0x1c017
1c00cbd8 <rt_schedule+0x1e> lw	a5,32(a5) # 1c017020 <rt_thread_ready_priority_group>
1c00cbdc <rt_schedule+0x22> mv	a0,a5
1c00cbde <rt_schedule+0x24> jal	ra,1c00c6c4 <__rt_ffs>
1c00cbe2 <rt_schedule+0x28> mv	a5,a0
1c00cbe4 <rt_schedule+0x2a> addi	a5,a5,-1
1c00cbe6 <rt_schedule+0x2c> mv	ra,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:218
        number = __rt_ffs(rt_thread_ready_priority_group) - 1;
        highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#endif

        /* get switch to thread */
        to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
1c00cbe8 <rt_schedule+0x2e> lui	a5,0x1c017
1c00cbec <rt_schedule+0x32> addi	a4,a5,-228 # 1c016f1c <rt_thread_priority_table>
1c00cbf0 <rt_schedule+0x36> slli	a5,ra,0x3
1c00cbf4 <rt_schedule+0x3a> add	a5,a5,a4
1c00cbf6 <rt_schedule+0x3c> lw	a5,0(a5)
1c00cbf8 <rt_schedule+0x3e> addi	a5,a5,-20
1c00cbfa <rt_schedule+0x40> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:223
                                  struct rt_thread,
                                  tlist);

        /* if the destination thread is not the same as current thread */
        if (to_thread != rt_current_thread)
1c00cbfe <rt_schedule+0x44> lui	a5,0x1c017
1c00cc02 <rt_schedule+0x48> lw	a5,-1056(a5) # 1c016be0 <rt_current_thread>
1c00cc06 <rt_schedule+0x4c> lw	a4,-24(s0)
1c00cc0a <rt_schedule+0x50> beq	a4,a5,1c00cc76 <rt_schedule+0xbc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:225
        {
            rt_current_priority = (rt_uint8_t)highest_ready_priority;
1c00cc0e <rt_schedule+0x54> andi	a4,ra,255
1c00cc12 <rt_schedule+0x58> lui	a5,0x1c017
1c00cc16 <rt_schedule+0x5c> sb	a4,28(a5) # 1c01701c <rt_current_priority>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:226
            from_thread         = rt_current_thread;
1c00cc1a <rt_schedule+0x60> lui	a5,0x1c017
1c00cc1e <rt_schedule+0x64> lw	a5,-1056(a5) # 1c016be0 <rt_current_thread>
1c00cc22 <rt_schedule+0x68> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:227
            rt_current_thread   = to_thread;
1c00cc26 <rt_schedule+0x6c> lui	a5,0x1c017
1c00cc2a <rt_schedule+0x70> lw	a4,-24(s0)
1c00cc2e <rt_schedule+0x74> sw	a4,-1056(a5) # 1c016be0 <rt_current_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:244

#ifdef RT_USING_OVERFLOW_CHECK
            _rt_scheduler_stack_check(to_thread);
#endif

            if (rt_interrupt_nest == 0)
1c00cc32 <rt_schedule+0x78> lui	a5,0x1c017
1c00cc36 <rt_schedule+0x7c> lbu	a5,-232(a5) # 1c016f18 <rt_interrupt_nest>
1c00cc3a <rt_schedule+0x80> andi	a5,a5,255
1c00cc3e <rt_schedule+0x84> bnez	a5,1c00cc60 <rt_schedule+0xa6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:246
            {
                rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
1c00cc40 <rt_schedule+0x86> lw	a5,-28(s0)
1c00cc44 <rt_schedule+0x8a> addi	a5,a5,28
1c00cc46 <rt_schedule+0x8c> mv	a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:247
                                     (rt_ubase_t)&to_thread->sp);
1c00cc48 <rt_schedule+0x8e> lw	a5,-24(s0)
1c00cc4c <rt_schedule+0x92> addi	a5,a5,28
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:246
                rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
1c00cc4e <rt_schedule+0x94> mv	a1,a5
1c00cc50 <rt_schedule+0x96> mv	a0,a4
1c00cc52 <rt_schedule+0x98> jal	ra,1c0080e6 <rt_hw_context_switch>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:250

                /* enable interrupt */
                rt_hw_interrupt_enable(level);
1c00cc56 <rt_schedule+0x9c> lw	a0,-20(s0)
1c00cc5a <rt_schedule+0xa0> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:252

                return ;
1c00cc5e <rt_schedule+0xa4> j	1c00cc7e <rt_schedule+0xc4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:258
            }
            else
            {
                RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("switch in interrupt\n"));

                rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
1c00cc60 <rt_schedule+0xa6> lw	a5,-28(s0)
1c00cc64 <rt_schedule+0xaa> addi	a5,a5,28
1c00cc66 <rt_schedule+0xac> mv	a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:259
                                               (rt_ubase_t)&to_thread->sp);
1c00cc68 <rt_schedule+0xae> lw	a5,-24(s0)
1c00cc6c <rt_schedule+0xb2> addi	a5,a5,28
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:258
                rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
1c00cc6e <rt_schedule+0xb4> mv	a1,a5
1c00cc70 <rt_schedule+0xb6> mv	a0,a4
1c00cc72 <rt_schedule+0xb8> jal	ra,1c0101fa <rt_hw_context_switch_interrupt>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:265
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00cc76 <rt_schedule+0xbc> lw	a0,-20(s0)
1c00cc7a <rt_schedule+0xc0> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:266
}
1c00cc7e <rt_schedule+0xc4> lw	ra,28(sp)
1c00cc80 <rt_schedule+0xc6> lw	s0,24(sp)
1c00cc82 <rt_schedule+0xc8> addi	sp,sp,32
1c00cc84 <rt_schedule+0xca> ret
rt_schedule_insert_thread():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:276
 *
 * @param thread the thread to be inserted
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_insert_thread(struct rt_thread *thread)
{
1c00cc86 <rt_schedule_insert_thread> addi	sp,sp,-32
1c00cc88 <rt_schedule_insert_thread+0x2> sw	ra,28(sp)
1c00cc8a <rt_schedule_insert_thread+0x4> sw	s0,24(sp)
1c00cc8c <rt_schedule_insert_thread+0x6> sw	s1,20(sp)
1c00cc8e <rt_schedule_insert_thread+0x8> addi	s0,sp,32
1c00cc90 <rt_schedule_insert_thread+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:282
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00cc94 <rt_schedule_insert_thread+0xe> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00cc98 <rt_schedule_insert_thread+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:285

    /* change stat */
    thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
1c00cc9a <rt_schedule_insert_thread+0x14> lw	a5,-20(s0)
1c00cc9e <rt_schedule_insert_thread+0x18> lbu	a5,52(a5)
1c00cca2 <rt_schedule_insert_thread+0x1c> slli	a5,a5,0x18
1c00cca4 <rt_schedule_insert_thread+0x1e> srai	a5,a5,0x18
1c00cca6 <rt_schedule_insert_thread+0x20> andi	a5,a5,-16
1c00cca8 <rt_schedule_insert_thread+0x22> slli	a5,a5,0x18
1c00ccaa <rt_schedule_insert_thread+0x24> srai	a5,a5,0x18
1c00ccac <rt_schedule_insert_thread+0x26> ori	a5,a5,1
1c00ccb0 <rt_schedule_insert_thread+0x2a> slli	a5,a5,0x18
1c00ccb2 <rt_schedule_insert_thread+0x2c> srai	a5,a5,0x18
1c00ccb4 <rt_schedule_insert_thread+0x2e> andi	a4,a5,255
1c00ccb8 <rt_schedule_insert_thread+0x32> lw	a5,-20(s0)
1c00ccbc <rt_schedule_insert_thread+0x36> sb	a4,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:288

    /* insert thread to ready list */
    rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
1c00ccc0 <rt_schedule_insert_thread+0x3a> lw	a5,-20(s0)
1c00ccc4 <rt_schedule_insert_thread+0x3e> lbu	a5,53(a5)
1c00ccc8 <rt_schedule_insert_thread+0x42> slli	a4,a5,0x3
1c00cccc <rt_schedule_insert_thread+0x46> lui	a5,0x1c017
1c00ccd0 <rt_schedule_insert_thread+0x4a> addi	a5,a5,-228 # 1c016f1c <rt_thread_priority_table>
1c00ccd4 <rt_schedule_insert_thread+0x4e> add	a4,a4,a5
1c00ccd6 <rt_schedule_insert_thread+0x50> lw	a5,-20(s0)
1c00ccda <rt_schedule_insert_thread+0x54> addi	a5,a5,20
1c00ccdc <rt_schedule_insert_thread+0x56> mv	a1,a5
1c00ccde <rt_schedule_insert_thread+0x58> mv	a0,a4
1c00cce0 <rt_schedule_insert_thread+0x5a> jal	1c00ca60 <rt_list_insert_before>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:308
#endif

#if RT_THREAD_PRIORITY_MAX > 32
    rt_thread_ready_table[thread->number] |= thread->high_mask;
#endif
    rt_thread_ready_priority_group |= thread->number_mask;
1c00cce2 <rt_schedule_insert_thread+0x5c> lw	a5,-20(s0)
1c00cce6 <rt_schedule_insert_thread+0x60> lw	a4,56(a5)
1c00cce8 <rt_schedule_insert_thread+0x62> lui	a5,0x1c017
1c00ccec <rt_schedule_insert_thread+0x66> lw	a5,32(a5) # 1c017020 <rt_thread_ready_priority_group>
1c00ccf0 <rt_schedule_insert_thread+0x6a> or	a4,a4,a5
1c00ccf2 <rt_schedule_insert_thread+0x6c> lui	a5,0x1c017
1c00ccf6 <rt_schedule_insert_thread+0x70> sw	a4,32(a5) # 1c017020 <rt_thread_ready_priority_group>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:311

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00ccfa <rt_schedule_insert_thread+0x74> mv	a0,s1
1c00ccfc <rt_schedule_insert_thread+0x76> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:312
}
1c00cd00 <rt_schedule_insert_thread+0x7a> nop
1c00cd02 <rt_schedule_insert_thread+0x7c> lw	ra,28(sp)
1c00cd04 <rt_schedule_insert_thread+0x7e> lw	s0,24(sp)
1c00cd06 <rt_schedule_insert_thread+0x80> lw	s1,20(sp)
1c00cd08 <rt_schedule_insert_thread+0x82> addi	sp,sp,32
1c00cd0a <rt_schedule_insert_thread+0x84> ret
rt_schedule_remove_thread():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:322
 * @param thread the thread to be removed
 *
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_remove_thread(struct rt_thread *thread)
{
1c00cd0c <rt_schedule_remove_thread> addi	sp,sp,-32
1c00cd0e <rt_schedule_remove_thread+0x2> sw	ra,28(sp)
1c00cd10 <rt_schedule_remove_thread+0x4> sw	s0,24(sp)
1c00cd12 <rt_schedule_remove_thread+0x6> sw	s1,20(sp)
1c00cd14 <rt_schedule_remove_thread+0x8> addi	s0,sp,32
1c00cd16 <rt_schedule_remove_thread+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:328
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00cd1a <rt_schedule_remove_thread+0xe> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00cd1e <rt_schedule_remove_thread+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:345
                  thread->number_mask,
                  thread->high_mask));
#endif

    /* remove thread from ready list */
    rt_list_remove(&(thread->tlist));
1c00cd20 <rt_schedule_remove_thread+0x14> lw	a5,-20(s0)
1c00cd24 <rt_schedule_remove_thread+0x18> addi	a5,a5,20
1c00cd26 <rt_schedule_remove_thread+0x1a> mv	a0,a5
1c00cd28 <rt_schedule_remove_thread+0x1c> jal	1c00caa2 <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:346
    if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
1c00cd2a <rt_schedule_remove_thread+0x1e> lw	a5,-20(s0)
1c00cd2e <rt_schedule_remove_thread+0x22> lbu	a5,53(a5)
1c00cd32 <rt_schedule_remove_thread+0x26> slli	a4,a5,0x3
1c00cd36 <rt_schedule_remove_thread+0x2a> lui	a5,0x1c017
1c00cd3a <rt_schedule_remove_thread+0x2e> addi	a5,a5,-228 # 1c016f1c <rt_thread_priority_table>
1c00cd3e <rt_schedule_remove_thread+0x32> add	a5,a5,a4
1c00cd40 <rt_schedule_remove_thread+0x34> mv	a0,a5
1c00cd42 <rt_schedule_remove_thread+0x36> jal	1c00cae6 <rt_list_isempty>
1c00cd44 <rt_schedule_remove_thread+0x38> mv	a5,a0
1c00cd46 <rt_schedule_remove_thread+0x3a> beqz	a5,1c00cd64 <rt_schedule_remove_thread+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:355
        if (rt_thread_ready_table[thread->number] == 0)
        {
            rt_thread_ready_priority_group &= ~thread->number_mask;
        }
#else
        rt_thread_ready_priority_group &= ~thread->number_mask;
1c00cd48 <rt_schedule_remove_thread+0x3c> lw	a5,-20(s0)
1c00cd4c <rt_schedule_remove_thread+0x40> lw	a5,56(a5)
1c00cd4e <rt_schedule_remove_thread+0x42> not	a4,a5
1c00cd52 <rt_schedule_remove_thread+0x46> lui	a5,0x1c017
1c00cd56 <rt_schedule_remove_thread+0x4a> lw	a5,32(a5) # 1c017020 <rt_thread_ready_priority_group>
1c00cd5a <rt_schedule_remove_thread+0x4e> and	a4,a4,a5
1c00cd5c <rt_schedule_remove_thread+0x50> lui	a5,0x1c017
1c00cd60 <rt_schedule_remove_thread+0x54> sw	a4,32(a5) # 1c017020 <rt_thread_ready_priority_group>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:360
#endif
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00cd64 <rt_schedule_remove_thread+0x58> mv	a0,s1
1c00cd66 <rt_schedule_remove_thread+0x5a> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:361
}
1c00cd6a <rt_schedule_remove_thread+0x5e> nop
1c00cd6c <rt_schedule_remove_thread+0x60> lw	ra,28(sp)
1c00cd6e <rt_schedule_remove_thread+0x62> lw	s0,24(sp)
1c00cd70 <rt_schedule_remove_thread+0x64> lw	s1,20(sp)
1c00cd72 <rt_schedule_remove_thread+0x66> addi	sp,sp,32
1c00cd74 <rt_schedule_remove_thread+0x68> ret
rt_enter_critical():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:367

/**
 * This function will lock the thread scheduler.
 */
void rt_enter_critical(void)
{
1c00cd76 <rt_enter_critical> addi	sp,sp,-16
1c00cd78 <rt_enter_critical+0x2> sw	ra,12(sp)
1c00cd7a <rt_enter_critical+0x4> sw	s0,8(sp)
1c00cd7c <rt_enter_critical+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:371
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00cd7e <rt_enter_critical+0x8> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00cd82 <rt_enter_critical+0xc> mv	ra,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:377

    /*
     * the maximal number of nest is RT_UINT16_MAX, which is big
     * enough and does not check here
     */
    rt_scheduler_lock_nest ++;
1c00cd84 <rt_enter_critical+0xe> lui	a5,0x1c017
1c00cd88 <rt_enter_critical+0x12> lh	a5,-1060(a5) # 1c016bdc <rt_scheduler_lock_nest>
1c00cd8c <rt_enter_critical+0x16> slli	a5,a5,0x10
1c00cd8e <rt_enter_critical+0x18> srli	a5,a5,0x10
1c00cd90 <rt_enter_critical+0x1a> addi	a5,a5,1
1c00cd92 <rt_enter_critical+0x1c> slli	a5,a5,0x10
1c00cd94 <rt_enter_critical+0x1e> srli	a5,a5,0x10
1c00cd96 <rt_enter_critical+0x20> slli	a4,a5,0x10
1c00cd9a <rt_enter_critical+0x24> srai	a4,a4,0x10
1c00cd9c <rt_enter_critical+0x26> lui	a5,0x1c017
1c00cda0 <rt_enter_critical+0x2a> sh	a4,-1060(a5) # 1c016bdc <rt_scheduler_lock_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:380

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00cda4 <rt_enter_critical+0x2e> mv	a0,ra
1c00cda6 <rt_enter_critical+0x30> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:381
}
1c00cdaa <rt_enter_critical+0x34> nop
1c00cdac <rt_enter_critical+0x36> lw	ra,12(sp)
1c00cdae <rt_enter_critical+0x38> lw	s0,8(sp)
1c00cdb0 <rt_enter_critical+0x3a> addi	sp,sp,16
1c00cdb2 <rt_enter_critical+0x3c> ret
rt_exit_critical():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:387

/**
 * This function will unlock the thread scheduler.
 */
void rt_exit_critical(void)
{
1c00cdb4 <rt_exit_critical> addi	sp,sp,-16
1c00cdb6 <rt_exit_critical+0x2> sw	ra,12(sp)
1c00cdb8 <rt_exit_critical+0x4> sw	s0,8(sp)
1c00cdba <rt_exit_critical+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:391
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00cdbc <rt_exit_critical+0x8> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00cdc0 <rt_exit_critical+0xc> mv	ra,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:393

    rt_scheduler_lock_nest --;
1c00cdc2 <rt_exit_critical+0xe> lui	a5,0x1c017
1c00cdc6 <rt_exit_critical+0x12> lh	a5,-1060(a5) # 1c016bdc <rt_scheduler_lock_nest>
1c00cdca <rt_exit_critical+0x16> slli	a5,a5,0x10
1c00cdcc <rt_exit_critical+0x18> srli	a5,a5,0x10
1c00cdce <rt_exit_critical+0x1a> addi	a5,a5,-1
1c00cdd0 <rt_exit_critical+0x1c> slli	a5,a5,0x10
1c00cdd2 <rt_exit_critical+0x1e> srli	a5,a5,0x10
1c00cdd4 <rt_exit_critical+0x20> slli	a4,a5,0x10
1c00cdd8 <rt_exit_critical+0x24> srai	a4,a4,0x10
1c00cdda <rt_exit_critical+0x26> lui	a5,0x1c017
1c00cdde <rt_exit_critical+0x2a> sh	a4,-1060(a5) # 1c016bdc <rt_scheduler_lock_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:394
    if (rt_scheduler_lock_nest <= 0)
1c00cde2 <rt_exit_critical+0x2e> lui	a5,0x1c017
1c00cde6 <rt_exit_critical+0x32> lh	a5,-1060(a5) # 1c016bdc <rt_scheduler_lock_nest>
1c00cdea <rt_exit_critical+0x36> bgtz	a5,1c00ce0a <rt_exit_critical+0x56>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:396
    {
        rt_scheduler_lock_nest = 0;
1c00cdee <rt_exit_critical+0x3a> lui	a5,0x1c017
1c00cdf2 <rt_exit_critical+0x3e> sh	zero,-1060(a5) # 1c016bdc <rt_scheduler_lock_nest>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:398
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
1c00cdf6 <rt_exit_critical+0x42> mv	a0,ra
1c00cdf8 <rt_exit_critical+0x44> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:400

        if (rt_current_thread)
1c00cdfc <rt_exit_critical+0x48> lui	a5,0x1c017
1c00ce00 <rt_exit_critical+0x4c> lw	a5,-1056(a5) # 1c016be0 <rt_current_thread>
1c00ce04 <rt_exit_critical+0x50> beqz	a5,1c00ce10 <rt_exit_critical+0x5c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:403
        {
            /* if scheduler is started, do a schedule */
            rt_schedule();
1c00ce06 <rt_exit_critical+0x52> jal	1c00cbba <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:411
    else
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    }
}
1c00ce08 <rt_exit_critical+0x54> j	1c00ce10 <rt_exit_critical+0x5c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:409
        rt_hw_interrupt_enable(level);
1c00ce0a <rt_exit_critical+0x56> mv	a0,ra
1c00ce0c <rt_exit_critical+0x58> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/scheduler.c:411
}
1c00ce10 <rt_exit_critical+0x5c> nop
1c00ce12 <rt_exit_critical+0x5e> lw	ra,12(sp)
1c00ce14 <rt_exit_critical+0x60> lw	s0,8(sp)
1c00ce16 <rt_exit_critical+0x62> addi	sp,sp,16
1c00ce18 <rt_exit_critical+0x64> ret
rt_list_init():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:48
{
1c00ce1a <rt_list_init> addi	sp,sp,-32
1c00ce1c <rt_list_init+0x2> sw	s0,28(sp)
1c00ce1e <rt_list_init+0x4> addi	s0,sp,32
1c00ce20 <rt_list_init+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:49
    l->next = l->prev = l;
1c00ce24 <rt_list_init+0xa> lw	a5,-20(s0)
1c00ce28 <rt_list_init+0xe> lw	a4,-20(s0)
1c00ce2c <rt_list_init+0x12> sw	a4,4(a5)
1c00ce2e <rt_list_init+0x14> lw	a5,-20(s0)
1c00ce32 <rt_list_init+0x18> lw	a4,4(a5)
1c00ce34 <rt_list_init+0x1a> lw	a5,-20(s0)
1c00ce38 <rt_list_init+0x1e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:50
}
1c00ce3a <rt_list_init+0x20> nop
1c00ce3c <rt_list_init+0x22> lw	s0,28(sp)
1c00ce3e <rt_list_init+0x24> addi	sp,sp,32
1c00ce40 <rt_list_init+0x26> ret
rt_list_insert_after():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:59
{
1c00ce42 <rt_list_insert_after> addi	sp,sp,-32
1c00ce44 <rt_list_insert_after+0x2> sw	s0,28(sp)
1c00ce46 <rt_list_insert_after+0x4> addi	s0,sp,32
1c00ce48 <rt_list_insert_after+0x6> sw	a0,-20(s0)
1c00ce4c <rt_list_insert_after+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:60
    l->next->prev = n;
1c00ce50 <rt_list_insert_after+0xe> lw	a5,-20(s0)
1c00ce54 <rt_list_insert_after+0x12> lw	a5,0(a5)
1c00ce56 <rt_list_insert_after+0x14> lw	a4,-24(s0)
1c00ce5a <rt_list_insert_after+0x18> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:61
    n->next = l->next;
1c00ce5c <rt_list_insert_after+0x1a> lw	a5,-20(s0)
1c00ce60 <rt_list_insert_after+0x1e> lw	a4,0(a5)
1c00ce62 <rt_list_insert_after+0x20> lw	a5,-24(s0)
1c00ce66 <rt_list_insert_after+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:63
    l->next = n;
1c00ce68 <rt_list_insert_after+0x26> lw	a5,-20(s0)
1c00ce6c <rt_list_insert_after+0x2a> lw	a4,-24(s0)
1c00ce70 <rt_list_insert_after+0x2e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:64
    n->prev = l;
1c00ce72 <rt_list_insert_after+0x30> lw	a5,-24(s0)
1c00ce76 <rt_list_insert_after+0x34> lw	a4,-20(s0)
1c00ce7a <rt_list_insert_after+0x38> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:65
}
1c00ce7c <rt_list_insert_after+0x3a> nop
1c00ce7e <rt_list_insert_after+0x3c> lw	s0,28(sp)
1c00ce80 <rt_list_insert_after+0x3e> addi	sp,sp,32
1c00ce82 <rt_list_insert_after+0x40> ret
rt_list_insert_before():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:74
{
1c00ce84 <rt_list_insert_before> addi	sp,sp,-32
1c00ce86 <rt_list_insert_before+0x2> sw	s0,28(sp)
1c00ce88 <rt_list_insert_before+0x4> addi	s0,sp,32
1c00ce8a <rt_list_insert_before+0x6> sw	a0,-20(s0)
1c00ce8e <rt_list_insert_before+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:75
    l->prev->next = n;
1c00ce92 <rt_list_insert_before+0xe> lw	a5,-20(s0)
1c00ce96 <rt_list_insert_before+0x12> lw	a5,4(a5)
1c00ce98 <rt_list_insert_before+0x14> lw	a4,-24(s0)
1c00ce9c <rt_list_insert_before+0x18> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:76
    n->prev = l->prev;
1c00ce9e <rt_list_insert_before+0x1a> lw	a5,-20(s0)
1c00cea2 <rt_list_insert_before+0x1e> lw	a4,4(a5)
1c00cea4 <rt_list_insert_before+0x20> lw	a5,-24(s0)
1c00cea8 <rt_list_insert_before+0x24> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:78
    l->prev = n;
1c00ceaa <rt_list_insert_before+0x26> lw	a5,-20(s0)
1c00ceae <rt_list_insert_before+0x2a> lw	a4,-24(s0)
1c00ceb2 <rt_list_insert_before+0x2e> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:79
    n->next = l;
1c00ceb4 <rt_list_insert_before+0x30> lw	a5,-24(s0)
1c00ceb8 <rt_list_insert_before+0x34> lw	a4,-20(s0)
1c00cebc <rt_list_insert_before+0x38> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:80
}
1c00cebe <rt_list_insert_before+0x3a> nop
1c00cec0 <rt_list_insert_before+0x3c> lw	s0,28(sp)
1c00cec2 <rt_list_insert_before+0x3e> addi	sp,sp,32
1c00cec4 <rt_list_insert_before+0x40> ret
rt_list_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:87
{
1c00cec6 <rt_list_remove> addi	sp,sp,-32
1c00cec8 <rt_list_remove+0x2> sw	s0,28(sp)
1c00ceca <rt_list_remove+0x4> addi	s0,sp,32
1c00cecc <rt_list_remove+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:88
    n->next->prev = n->prev;
1c00ced0 <rt_list_remove+0xa> lw	a5,-20(s0)
1c00ced4 <rt_list_remove+0xe> lw	a5,0(a5)
1c00ced6 <rt_list_remove+0x10> lw	a4,-20(s0)
1c00ceda <rt_list_remove+0x14> lw	a4,4(a4)
1c00cedc <rt_list_remove+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:89
    n->prev->next = n->next;
1c00cede <rt_list_remove+0x18> lw	a5,-20(s0)
1c00cee2 <rt_list_remove+0x1c> lw	a5,4(a5)
1c00cee4 <rt_list_remove+0x1e> lw	a4,-20(s0)
1c00cee8 <rt_list_remove+0x22> lw	a4,0(a4)
1c00ceea <rt_list_remove+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:91
    n->next = n->prev = n;
1c00ceec <rt_list_remove+0x26> lw	a5,-20(s0)
1c00cef0 <rt_list_remove+0x2a> lw	a4,-20(s0)
1c00cef4 <rt_list_remove+0x2e> sw	a4,4(a5)
1c00cef6 <rt_list_remove+0x30> lw	a5,-20(s0)
1c00cefa <rt_list_remove+0x34> lw	a4,4(a5)
1c00cefc <rt_list_remove+0x36> lw	a5,-20(s0)
1c00cf00 <rt_list_remove+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:92
}
1c00cf02 <rt_list_remove+0x3c> nop
1c00cf04 <rt_list_remove+0x3e> lw	s0,28(sp)
1c00cf06 <rt_list_remove+0x40> addi	sp,sp,32
1c00cf08 <rt_list_remove+0x42> ret
_thread_cleanup_execute():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:85

#endif

/* must be invoke witch rt_hw_interrupt_disable */
static void _thread_cleanup_execute(rt_thread_t thread)
{
1c00cf0a <_thread_cleanup_execute> addi	sp,sp,-32
1c00cf0c <_thread_cleanup_execute+0x2> sw	ra,28(sp)
1c00cf0e <_thread_cleanup_execute+0x4> sw	s0,24(sp)
1c00cf10 <_thread_cleanup_execute+0x6> sw	s1,20(sp)
1c00cf12 <_thread_cleanup_execute+0x8> addi	s0,sp,32
1c00cf14 <_thread_cleanup_execute+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:88
    register rt_base_t level;

    level = rt_hw_interrupt_disable();
1c00cf18 <_thread_cleanup_execute+0xe> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00cf1c <_thread_cleanup_execute+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:91

    /* invoke thread cleanup */
    if (thread->cleanup != RT_NULL)
1c00cf1e <_thread_cleanup_execute+0x14> lw	a5,-20(s0)
1c00cf22 <_thread_cleanup_execute+0x18> lw	a5,112(a5)
1c00cf24 <_thread_cleanup_execute+0x1a> beqz	a5,1c00cf32 <_thread_cleanup_execute+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:92
        thread->cleanup(thread);
1c00cf26 <_thread_cleanup_execute+0x1c> lw	a5,-20(s0)
1c00cf2a <_thread_cleanup_execute+0x20> lw	a5,112(a5)
1c00cf2c <_thread_cleanup_execute+0x22> lw	a0,-20(s0)
1c00cf30 <_thread_cleanup_execute+0x26> jalr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:94

    rt_hw_interrupt_enable(level);
1c00cf32 <_thread_cleanup_execute+0x28> mv	a0,s1
1c00cf34 <_thread_cleanup_execute+0x2a> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:95
}
1c00cf38 <_thread_cleanup_execute+0x2e> nop
1c00cf3a <_thread_cleanup_execute+0x30> lw	ra,28(sp)
1c00cf3c <_thread_cleanup_execute+0x32> lw	s0,24(sp)
1c00cf3e <_thread_cleanup_execute+0x34> lw	s1,20(sp)
1c00cf40 <_thread_cleanup_execute+0x36> addi	sp,sp,32
1c00cf42 <_thread_cleanup_execute+0x38> ret
rt_thread_exit():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:98

void rt_thread_exit(void)
{
1c00cf44 <rt_thread_exit> addi	sp,sp,-32
1c00cf46 <rt_thread_exit+0x2> sw	ra,28(sp)
1c00cf48 <rt_thread_exit+0x4> sw	s0,24(sp)
1c00cf4a <rt_thread_exit+0x6> sw	s1,20(sp)
1c00cf4c <rt_thread_exit+0x8> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:103
    struct rt_thread *thread;
    register rt_base_t level;

    /* get current thread */
    thread = rt_current_thread;
1c00cf4e <rt_thread_exit+0xa> lui	a5,0x1c017
1c00cf52 <rt_thread_exit+0xe> lw	a5,-1056(a5) # 1c016be0 <rt_current_thread>
1c00cf56 <rt_thread_exit+0x12> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:106

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00cf5a <rt_thread_exit+0x16> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00cf5e <rt_thread_exit+0x1a> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:108

    _thread_cleanup_execute(thread);
1c00cf60 <rt_thread_exit+0x1c> lw	a0,-20(s0)
1c00cf64 <rt_thread_exit+0x20> jal	1c00cf0a <_thread_cleanup_execute>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:111

    /* remove from schedule */
    rt_schedule_remove_thread(thread);
1c00cf66 <rt_thread_exit+0x22> lw	a0,-20(s0)
1c00cf6a <rt_thread_exit+0x26> jal	1c00cd0c <rt_schedule_remove_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:113
    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
1c00cf6c <rt_thread_exit+0x28> lw	a5,-20(s0)
1c00cf70 <rt_thread_exit+0x2c> li	a4,4
1c00cf72 <rt_thread_exit+0x2e> sb	a4,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:116

    /* remove it from timer list */
    rt_timer_detach(&thread->thread_timer);
1c00cf76 <rt_thread_exit+0x32> lw	a5,-20(s0)
1c00cf7a <rt_thread_exit+0x36> addi	a5,a5,68
1c00cf7e <rt_thread_exit+0x3a> mv	a0,a5
1c00cf80 <rt_thread_exit+0x3c> jal	1c00d684 <rt_timer_detach>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:118

    if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
1c00cf82 <rt_thread_exit+0x3e> lw	a0,-20(s0)
1c00cf86 <rt_thread_exit+0x42> jal	ra,1c00ca10 <rt_object_is_systemobject>
1c00cf8a <rt_thread_exit+0x46> mv	a4,a0
1c00cf8c <rt_thread_exit+0x48> li	a5,1
1c00cf8e <rt_thread_exit+0x4a> bne	a4,a5,1c00cf9c <rt_thread_exit+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:120
    {
        rt_object_detach((rt_object_t)thread);
1c00cf92 <rt_thread_exit+0x4e> lw	a0,-20(s0)
1c00cf96 <rt_thread_exit+0x52> jal	ra,1c00c8f8 <rt_object_detach>
1c00cf9a <rt_thread_exit+0x56> j	1c00cfae <rt_thread_exit+0x6a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:125
    }
    else
    {
        /* insert to defunct thread list */
        rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
1c00cf9c <rt_thread_exit+0x58> lw	a5,-20(s0)
1c00cfa0 <rt_thread_exit+0x5c> addi	a5,a5,20
1c00cfa2 <rt_thread_exit+0x5e> mv	a1,a5
1c00cfa4 <rt_thread_exit+0x60> lui	a5,0x1c017
1c00cfa8 <rt_thread_exit+0x64> addi	a0,a5,36 # 1c017024 <rt_thread_defunct>
1c00cfac <rt_thread_exit+0x68> jal	1c00ce42 <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:129
    }

    /* switch to next task */
    rt_schedule();
1c00cfae <rt_thread_exit+0x6a> jal	ra,1c00cbba <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:132

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00cfb2 <rt_thread_exit+0x6e> mv	a0,s1
1c00cfb4 <rt_thread_exit+0x70> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:133
}
1c00cfb8 <rt_thread_exit+0x74> nop
1c00cfba <rt_thread_exit+0x76> lw	ra,28(sp)
1c00cfbc <rt_thread_exit+0x78> lw	s0,24(sp)
1c00cfbe <rt_thread_exit+0x7a> lw	s1,20(sp)
1c00cfc0 <rt_thread_exit+0x7c> addi	sp,sp,32
1c00cfc2 <rt_thread_exit+0x7e> ret
_rt_thread_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:143
                                void             *parameter,
                                void             *stack_start,
                                rt_uint32_t       stack_size,
                                rt_uint8_t        priority,
                                rt_uint32_t       tick)
{
1c00cfc4 <_rt_thread_init> addi	sp,sp,-48
1c00cfc6 <_rt_thread_init+0x2> sw	ra,44(sp)
1c00cfc8 <_rt_thread_init+0x4> sw	s0,40(sp)
1c00cfca <_rt_thread_init+0x6> addi	s0,sp,48
1c00cfcc <_rt_thread_init+0x8> sw	a0,-20(s0)
1c00cfd0 <_rt_thread_init+0xc> sw	a1,-24(s0)
1c00cfd4 <_rt_thread_init+0x10> sw	a2,-28(s0)
1c00cfd8 <_rt_thread_init+0x14> sw	a3,-32(s0)
1c00cfdc <_rt_thread_init+0x18> sw	a4,-36(s0)
1c00cfe0 <_rt_thread_init+0x1c> sw	a5,-40(s0)
1c00cfe4 <_rt_thread_init+0x20> mv	a5,a6
1c00cfe6 <_rt_thread_init+0x22> sw	a7,-48(s0)
1c00cfea <_rt_thread_init+0x26> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:145
    /* init thread list */
    rt_list_init(&(thread->tlist));
1c00cfee <_rt_thread_init+0x2a> lw	a5,-20(s0)
1c00cff2 <_rt_thread_init+0x2e> addi	a5,a5,20
1c00cff4 <_rt_thread_init+0x30> mv	a0,a5
1c00cff6 <_rt_thread_init+0x32> jal	1c00ce1a <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:147

    thread->entry = (void *)entry;
1c00cff8 <_rt_thread_init+0x34> lw	a5,-20(s0)
1c00cffc <_rt_thread_init+0x38> lw	a4,-28(s0)
1c00d000 <_rt_thread_init+0x3c> sw	a4,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:148
    thread->parameter = parameter;
1c00d002 <_rt_thread_init+0x3e> lw	a5,-20(s0)
1c00d006 <_rt_thread_init+0x42> lw	a4,-32(s0)
1c00d00a <_rt_thread_init+0x46> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:151

    /* stack init */
    thread->stack_addr = stack_start;
1c00d00c <_rt_thread_init+0x48> lw	a5,-20(s0)
1c00d010 <_rt_thread_init+0x4c> lw	a4,-36(s0)
1c00d014 <_rt_thread_init+0x50> sw	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:152
    thread->stack_size = stack_size;
1c00d016 <_rt_thread_init+0x52> lw	a5,-20(s0)
1c00d01a <_rt_thread_init+0x56> lw	a4,-40(s0)
1c00d01e <_rt_thread_init+0x5a> sw	a4,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:155

    /* init thread stack */
    rt_memset(thread->stack_addr, '#', thread->stack_size);
1c00d020 <_rt_thread_init+0x5c> lw	a5,-20(s0)
1c00d024 <_rt_thread_init+0x60> lw	a4,40(a5)
1c00d026 <_rt_thread_init+0x62> lw	a5,-20(s0)
1c00d02a <_rt_thread_init+0x66> lw	a5,44(a5)
1c00d02c <_rt_thread_init+0x68> mv	a2,a5
1c00d02e <_rt_thread_init+0x6a> li	a1,35
1c00d032 <_rt_thread_init+0x6e> mv	a0,a4
1c00d034 <_rt_thread_init+0x70> jal	ra,1c00ba0a <rt_memset>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:161
#ifdef ARCH_CPU_STACK_GROWS_UPWARD
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
                                          (void *)((char *)thread->stack_addr),
                                          (void *)rt_thread_exit);
#else
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
1c00d038 <_rt_thread_init+0x74> lw	a5,-20(s0)
1c00d03c <_rt_thread_init+0x78> lw	a0,32(a5)
1c00d03e <_rt_thread_init+0x7a> lw	a5,-20(s0)
1c00d042 <_rt_thread_init+0x7e> lw	a1,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:162
                                          (rt_uint8_t *)((char *)thread->stack_addr + thread->stack_size - sizeof(rt_ubase_t)),
1c00d044 <_rt_thread_init+0x80> lw	a5,-20(s0)
1c00d048 <_rt_thread_init+0x84> lw	a4,40(a5)
1c00d04a <_rt_thread_init+0x86> lw	a5,-20(s0)
1c00d04e <_rt_thread_init+0x8a> lw	a5,44(a5)
1c00d050 <_rt_thread_init+0x8c> addi	a5,a5,-4
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:161
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
1c00d052 <_rt_thread_init+0x8e> add	a4,a4,a5
1c00d054 <_rt_thread_init+0x90> lui	a5,0x1c00d
1c00d058 <_rt_thread_init+0x94> addi	a3,a5,-188 # 1c00cf44 <rt_thread_exit>
1c00d05c <_rt_thread_init+0x98> mv	a2,a4
1c00d05e <_rt_thread_init+0x9a> jal	ra,1c010156 <rt_hw_stack_init>
1c00d062 <_rt_thread_init+0x9e> mv	a4,a0
1c00d064 <_rt_thread_init+0xa0> lw	a5,-20(s0)
1c00d068 <_rt_thread_init+0xa4> sw	a4,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:168
                                          (void *)rt_thread_exit);
#endif

    /* priority init */
    RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
    thread->init_priority    = priority;
1c00d06a <_rt_thread_init+0xa6> lw	a5,-20(s0)
1c00d06e <_rt_thread_init+0xaa> lbu	a4,-41(s0)
1c00d072 <_rt_thread_init+0xae> sb	a4,54(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:169
    thread->current_priority = priority;
1c00d076 <_rt_thread_init+0xb2> lw	a5,-20(s0)
1c00d07a <_rt_thread_init+0xb6> lbu	a4,-41(s0)
1c00d07e <_rt_thread_init+0xba> sb	a4,53(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:171

    thread->number_mask = 0;
1c00d082 <_rt_thread_init+0xbe> lw	a5,-20(s0)
1c00d086 <_rt_thread_init+0xc2> sw	zero,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:178
    thread->number = 0;
    thread->high_mask = 0;
#endif

    /* tick init */
    thread->init_tick      = tick;
1c00d08a <_rt_thread_init+0xc6> lw	a5,-20(s0)
1c00d08e <_rt_thread_init+0xca> lw	a4,-48(s0)
1c00d092 <_rt_thread_init+0xce> sw	a4,60(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:179
    thread->remaining_tick = tick;
1c00d094 <_rt_thread_init+0xd0> lw	a5,-20(s0)
1c00d098 <_rt_thread_init+0xd4> lw	a4,-48(s0)
1c00d09c <_rt_thread_init+0xd8> sw	a4,64(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:182

    /* error and flags */
    thread->error = RT_EOK;
1c00d09e <_rt_thread_init+0xda> lw	a5,-20(s0)
1c00d0a2 <_rt_thread_init+0xde> sw	zero,48(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:183
    thread->stat  = RT_THREAD_INIT;
1c00d0a6 <_rt_thread_init+0xe2> lw	a5,-20(s0)
1c00d0aa <_rt_thread_init+0xe6> sb	zero,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:186

    /* initialize cleanup function and user data */
    thread->cleanup   = 0;
1c00d0ae <_rt_thread_init+0xea> lw	a5,-20(s0)
1c00d0b2 <_rt_thread_init+0xee> sw	zero,112(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:187
    thread->user_data = 0;
1c00d0b6 <_rt_thread_init+0xf2> lw	a5,-20(s0)
1c00d0ba <_rt_thread_init+0xf6> sw	zero,116(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:190

    /* initialize thread timer */
    rt_timer_init(&(thread->thread_timer),
1c00d0be <_rt_thread_init+0xfa> lw	a5,-20(s0)
1c00d0c2 <_rt_thread_init+0xfe> addi	a0,a5,68
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:191
                  thread->name,
1c00d0c6 <_rt_thread_init+0x102> lw	a1,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:190
    rt_timer_init(&(thread->thread_timer),
1c00d0ca <_rt_thread_init+0x106> li	a5,0
1c00d0cc <_rt_thread_init+0x108> li	a4,0
1c00d0ce <_rt_thread_init+0x10a> lw	a3,-20(s0)
1c00d0d2 <_rt_thread_init+0x10e> lui	a2,0x1c00d
1c00d0d6 <_rt_thread_init+0x112> addi	a2,a2,1090 # 1c00d442 <rt_thread_timeout>
1c00d0da <_rt_thread_init+0x116> jal	1c00d634 <rt_timer_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:199
                  0,
                  RT_TIMER_FLAG_ONE_SHOT);

    RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));

    return RT_EOK;
1c00d0dc <_rt_thread_init+0x118> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:200
}
1c00d0de <_rt_thread_init+0x11a> mv	a0,a5
1c00d0e0 <_rt_thread_init+0x11c> lw	ra,44(sp)
1c00d0e2 <_rt_thread_init+0x11e> lw	s0,40(sp)
1c00d0e4 <_rt_thread_init+0x120> addi	sp,sp,48
1c00d0e6 <_rt_thread_init+0x122> ret
rt_thread_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:231
                        void             *parameter,
                        void             *stack_start,
                        rt_uint32_t       stack_size,
                        rt_uint8_t        priority,
                        rt_uint32_t       tick)
{
1c00d0e8 <rt_thread_init> addi	sp,sp,-48
1c00d0ea <rt_thread_init+0x2> sw	ra,44(sp)
1c00d0ec <rt_thread_init+0x4> sw	s0,40(sp)
1c00d0ee <rt_thread_init+0x6> addi	s0,sp,48
1c00d0f0 <rt_thread_init+0x8> sw	a0,-20(s0)
1c00d0f4 <rt_thread_init+0xc> sw	a1,-24(s0)
1c00d0f8 <rt_thread_init+0x10> sw	a2,-28(s0)
1c00d0fc <rt_thread_init+0x14> sw	a3,-32(s0)
1c00d100 <rt_thread_init+0x18> sw	a4,-36(s0)
1c00d104 <rt_thread_init+0x1c> sw	a5,-40(s0)
1c00d108 <rt_thread_init+0x20> mv	a5,a6
1c00d10a <rt_thread_init+0x22> sw	a7,-48(s0)
1c00d10e <rt_thread_init+0x26> sb	a5,-41(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:237
    /* thread check */
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(stack_start != RT_NULL);

    /* initialize thread object */
    rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
1c00d112 <rt_thread_init+0x2a> lw	a2,-24(s0)
1c00d116 <rt_thread_init+0x2e> li	a1,1
1c00d118 <rt_thread_init+0x30> lw	a0,-20(s0)
1c00d11c <rt_thread_init+0x34> jal	ra,1c00c84e <rt_object_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:239

    return _rt_thread_init(thread,
1c00d120 <rt_thread_init+0x38> lbu	a5,-41(s0)
1c00d124 <rt_thread_init+0x3c> lw	a7,-48(s0)
1c00d128 <rt_thread_init+0x40> mv	a6,a5
1c00d12a <rt_thread_init+0x42> lw	a5,-40(s0)
1c00d12e <rt_thread_init+0x46> lw	a4,-36(s0)
1c00d132 <rt_thread_init+0x4a> lw	a3,-32(s0)
1c00d136 <rt_thread_init+0x4e> lw	a2,-28(s0)
1c00d13a <rt_thread_init+0x52> lw	a1,-24(s0)
1c00d13e <rt_thread_init+0x56> lw	a0,-20(s0)
1c00d142 <rt_thread_init+0x5a> jal	1c00cfc4 <_rt_thread_init>
1c00d144 <rt_thread_init+0x5c> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:247
                           parameter,
                           stack_start,
                           stack_size,
                           priority,
                           tick);
}
1c00d146 <rt_thread_init+0x5e> mv	a0,a5
1c00d148 <rt_thread_init+0x60> lw	ra,44(sp)
1c00d14a <rt_thread_init+0x62> lw	s0,40(sp)
1c00d14c <rt_thread_init+0x64> addi	sp,sp,48
1c00d14e <rt_thread_init+0x66> ret
rt_thread_self():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:255
 * This function will return self thread object
 *
 * @return the self thread object
 */
rt_thread_t rt_thread_self(void)
{
1c00d150 <rt_thread_self> addi	sp,sp,-16
1c00d152 <rt_thread_self+0x2> sw	s0,12(sp)
1c00d154 <rt_thread_self+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:256
    return rt_current_thread;
1c00d156 <rt_thread_self+0x6> lui	a5,0x1c017
1c00d15a <rt_thread_self+0xa> lw	a5,-1056(a5) # 1c016be0 <rt_current_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:257
}
1c00d15e <rt_thread_self+0xe> mv	a0,a5
1c00d160 <rt_thread_self+0x10> lw	s0,12(sp)
1c00d162 <rt_thread_self+0x12> addi	sp,sp,16
1c00d164 <rt_thread_self+0x14> ret
rt_thread_startup():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:267
 * @param thread the thread to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_thread_startup(rt_thread_t thread)
{
1c00d166 <rt_thread_startup> addi	sp,sp,-32
1c00d168 <rt_thread_startup+0x2> sw	ra,28(sp)
1c00d16a <rt_thread_startup+0x4> sw	s0,24(sp)
1c00d16c <rt_thread_startup+0x6> addi	s0,sp,32
1c00d16e <rt_thread_startup+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:274
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    /* set current priority to initialize priority */
    thread->current_priority = thread->init_priority;
1c00d172 <rt_thread_startup+0xc> lw	a5,-20(s0)
1c00d176 <rt_thread_startup+0x10> lbu	a4,54(a5)
1c00d17a <rt_thread_startup+0x14> lw	a5,-20(s0)
1c00d17e <rt_thread_startup+0x18> sb	a4,53(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:282
#if RT_THREAD_PRIORITY_MAX > 32
    thread->number      = thread->current_priority >> 3;            /* 5bit */
    thread->number_mask = 1L << thread->number;
    thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
#else
    thread->number_mask = 1L << thread->current_priority;
1c00d182 <rt_thread_startup+0x1c> lw	a5,-20(s0)
1c00d186 <rt_thread_startup+0x20> lbu	a5,53(a5)
1c00d18a <rt_thread_startup+0x24> mv	a4,a5
1c00d18c <rt_thread_startup+0x26> li	a5,1
1c00d18e <rt_thread_startup+0x28> sll	a5,a5,a4
1c00d192 <rt_thread_startup+0x2c> mv	a4,a5
1c00d194 <rt_thread_startup+0x2e> lw	a5,-20(s0)
1c00d198 <rt_thread_startup+0x32> sw	a4,56(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:288
#endif

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("startup a thread:%s with priority:%d\n",
                                   thread->name, thread->init_priority));
    /* change thread stat */
    thread->stat = RT_THREAD_SUSPEND;
1c00d19a <rt_thread_startup+0x34> lw	a5,-20(s0)
1c00d19e <rt_thread_startup+0x38> li	a4,2
1c00d1a0 <rt_thread_startup+0x3a> sb	a4,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:290
    /* then resume it */
    rt_thread_resume(thread);
1c00d1a4 <rt_thread_startup+0x3e> lw	a0,-20(s0)
1c00d1a8 <rt_thread_startup+0x42> jal	1c00d3e4 <rt_thread_resume>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:291
    if (rt_thread_self() != RT_NULL)
1c00d1aa <rt_thread_startup+0x44> jal	1c00d150 <rt_thread_self>
1c00d1ac <rt_thread_startup+0x46> mv	a5,a0
1c00d1ae <rt_thread_startup+0x48> beqz	a5,1c00d1b4 <rt_thread_startup+0x4e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:294
    {
        /* do a scheduling */
        rt_schedule();
1c00d1b0 <rt_thread_startup+0x4a> jal	ra,1c00cbba <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:297
    }

    return RT_EOK;
1c00d1b4 <rt_thread_startup+0x4e> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:298
}
1c00d1b6 <rt_thread_startup+0x50> mv	a0,a5
1c00d1b8 <rt_thread_startup+0x52> lw	ra,28(sp)
1c00d1ba <rt_thread_startup+0x54> lw	s0,24(sp)
1c00d1bc <rt_thread_startup+0x56> addi	sp,sp,32
1c00d1be <rt_thread_startup+0x58> ret
rt_thread_create():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:371
                             void (*entry)(void *parameter),
                             void       *parameter,
                             rt_uint32_t stack_size,
                             rt_uint8_t  priority,
                             rt_uint32_t tick)
{
1c00d1c0 <rt_thread_create> addi	sp,sp,-64
1c00d1c2 <rt_thread_create+0x2> sw	ra,60(sp)
1c00d1c4 <rt_thread_create+0x4> sw	s0,56(sp)
1c00d1c6 <rt_thread_create+0x6> addi	s0,sp,64
1c00d1c8 <rt_thread_create+0x8> sw	a0,-36(s0)
1c00d1cc <rt_thread_create+0xc> sw	a1,-40(s0)
1c00d1d0 <rt_thread_create+0x10> sw	a2,-44(s0)
1c00d1d4 <rt_thread_create+0x14> sw	a3,-48(s0)
1c00d1d8 <rt_thread_create+0x18> sw	a5,-56(s0)
1c00d1dc <rt_thread_create+0x1c> mv	a5,a4
1c00d1de <rt_thread_create+0x1e> sb	a5,-49(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:375
    struct rt_thread *thread;
    void *stack_start;

    thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
1c00d1e2 <rt_thread_create+0x22> lw	a1,-36(s0)
1c00d1e6 <rt_thread_create+0x26> li	a0,1
1c00d1e8 <rt_thread_create+0x28> jal	ra,1c00c930 <rt_object_allocate>
1c00d1ec <rt_thread_create+0x2c> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:377
                                                    name);
    if (thread == RT_NULL)
1c00d1f0 <rt_thread_create+0x30> lw	a5,-20(s0)
1c00d1f4 <rt_thread_create+0x34> bnez	a5,1c00d1fa <rt_thread_create+0x3a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:378
        return RT_NULL;
1c00d1f6 <rt_thread_create+0x36> li	a5,0
1c00d1f8 <rt_thread_create+0x38> j	1c00d242 <rt_thread_create+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:380

    stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
1c00d1fa <rt_thread_create+0x3a> lw	a0,-48(s0)
1c00d1fe <rt_thread_create+0x3e> jal	ra,1c00df08 <rt_malloc>
1c00d202 <rt_thread_create+0x42> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:381
    if (stack_start == RT_NULL)
1c00d206 <rt_thread_create+0x46> lw	a5,-24(s0)
1c00d20a <rt_thread_create+0x4a> bnez	a5,1c00d218 <rt_thread_create+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:384
    {
        /* allocate stack failure */
        rt_object_delete((rt_object_t)thread);
1c00d20c <rt_thread_create+0x4c> lw	a0,-20(s0)
1c00d210 <rt_thread_create+0x50> jal	ra,1c00c9d0 <rt_object_delete>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:386

        return RT_NULL;
1c00d214 <rt_thread_create+0x54> li	a5,0
1c00d216 <rt_thread_create+0x56> j	1c00d242 <rt_thread_create+0x82>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:389
    }

    _rt_thread_init(thread,
1c00d218 <rt_thread_create+0x58> lbu	a5,-49(s0)
1c00d21c <rt_thread_create+0x5c> lw	a7,-56(s0)
1c00d220 <rt_thread_create+0x60> mv	a6,a5
1c00d222 <rt_thread_create+0x62> lw	a5,-48(s0)
1c00d226 <rt_thread_create+0x66> lw	a4,-24(s0)
1c00d22a <rt_thread_create+0x6a> lw	a3,-44(s0)
1c00d22e <rt_thread_create+0x6e> lw	a2,-40(s0)
1c00d232 <rt_thread_create+0x72> lw	a1,-36(s0)
1c00d236 <rt_thread_create+0x76> lw	a0,-20(s0)
1c00d23a <rt_thread_create+0x7a> jal	ra,1c00cfc4 <_rt_thread_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:398
                    stack_start,
                    stack_size,
                    priority,
                    tick);

    return thread;
1c00d23e <rt_thread_create+0x7e> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:399
}
1c00d242 <rt_thread_create+0x82> mv	a0,a5
1c00d244 <rt_thread_create+0x84> lw	ra,60(sp)
1c00d246 <rt_thread_create+0x86> lw	s0,56(sp)
1c00d248 <rt_thread_create+0x88> addi	sp,sp,64
1c00d24a <rt_thread_create+0x8a> ret
rt_thread_yield():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:456
 * is still in READY state.
 *
 * @return RT_EOK
 */
rt_err_t rt_thread_yield(void)
{
1c00d24c <rt_thread_yield> addi	sp,sp,-32
1c00d24e <rt_thread_yield+0x2> sw	ra,28(sp)
1c00d250 <rt_thread_yield+0x4> sw	s0,24(sp)
1c00d252 <rt_thread_yield+0x6> sw	s1,20(sp)
1c00d254 <rt_thread_yield+0x8> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:461
    register rt_base_t level;
    struct rt_thread *thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00d256 <rt_thread_yield+0xa> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00d25a <rt_thread_yield+0xe> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:464

    /* set to current thread */
    thread = rt_current_thread;
1c00d25c <rt_thread_yield+0x10> lui	a5,0x1c017
1c00d260 <rt_thread_yield+0x14> lw	a5,-1056(a5) # 1c016be0 <rt_current_thread>
1c00d264 <rt_thread_yield+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:467

    /* if the thread stat is READY and on ready queue list */
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
1c00d268 <rt_thread_yield+0x1c> lw	a5,-20(s0)
1c00d26c <rt_thread_yield+0x20> lbu	a5,52(a5)
1c00d270 <rt_thread_yield+0x24> andi	a4,a5,15
1c00d274 <rt_thread_yield+0x28> li	a5,1
1c00d276 <rt_thread_yield+0x2a> bne	a4,a5,1c00d2c8 <rt_thread_yield+0x7c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:468 (discriminator 1)
        thread->tlist.next != thread->tlist.prev)
1c00d27a <rt_thread_yield+0x2e> lw	a5,-20(s0)
1c00d27e <rt_thread_yield+0x32> lw	a4,20(a5)
1c00d280 <rt_thread_yield+0x34> lw	a5,-20(s0)
1c00d284 <rt_thread_yield+0x38> lw	a5,24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:467 (discriminator 1)
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
1c00d286 <rt_thread_yield+0x3a> beq	a4,a5,1c00d2c8 <rt_thread_yield+0x7c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:471
    {
        /* remove thread from thread list */
        rt_list_remove(&(thread->tlist));
1c00d28a <rt_thread_yield+0x3e> lw	a5,-20(s0)
1c00d28e <rt_thread_yield+0x42> addi	a5,a5,20
1c00d290 <rt_thread_yield+0x44> mv	a0,a5
1c00d292 <rt_thread_yield+0x46> jal	ra,1c00cec6 <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:474

        /* put thread to end of ready queue */
        rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
1c00d296 <rt_thread_yield+0x4a> lw	a5,-20(s0)
1c00d29a <rt_thread_yield+0x4e> lbu	a5,53(a5)
1c00d29e <rt_thread_yield+0x52> slli	a4,a5,0x3
1c00d2a2 <rt_thread_yield+0x56> lui	a5,0x1c017
1c00d2a6 <rt_thread_yield+0x5a> addi	a5,a5,-228 # 1c016f1c <rt_thread_priority_table>
1c00d2aa <rt_thread_yield+0x5e> add	a4,a4,a5
1c00d2ac <rt_thread_yield+0x60> lw	a5,-20(s0)
1c00d2b0 <rt_thread_yield+0x64> addi	a5,a5,20
1c00d2b2 <rt_thread_yield+0x66> mv	a1,a5
1c00d2b4 <rt_thread_yield+0x68> mv	a0,a4
1c00d2b6 <rt_thread_yield+0x6a> jal	ra,1c00ce84 <rt_list_insert_before>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:478
                              &(thread->tlist));

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
1c00d2ba <rt_thread_yield+0x6e> mv	a0,s1
1c00d2bc <rt_thread_yield+0x70> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:480

        rt_schedule();
1c00d2c0 <rt_thread_yield+0x74> jal	ra,1c00cbba <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:482

        return RT_EOK;
1c00d2c4 <rt_thread_yield+0x78> li	a5,0
1c00d2c6 <rt_thread_yield+0x7a> j	1c00d2d0 <rt_thread_yield+0x84>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:486
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00d2c8 <rt_thread_yield+0x7c> mv	a0,s1
1c00d2ca <rt_thread_yield+0x7e> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:488

    return RT_EOK;
1c00d2ce <rt_thread_yield+0x82> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:489
}
1c00d2d0 <rt_thread_yield+0x84> mv	a0,a5
1c00d2d2 <rt_thread_yield+0x86> lw	ra,28(sp)
1c00d2d4 <rt_thread_yield+0x88> lw	s0,24(sp)
1c00d2d6 <rt_thread_yield+0x8a> lw	s1,20(sp)
1c00d2d8 <rt_thread_yield+0x8c> addi	sp,sp,32
1c00d2da <rt_thread_yield+0x8e> ret
rt_thread_sleep():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:499
 * @param tick the sleep ticks
 *
 * @return RT_EOK
 */
rt_err_t rt_thread_sleep(rt_tick_t tick)
{
1c00d2dc <rt_thread_sleep> addi	sp,sp,-48
1c00d2de <rt_thread_sleep+0x2> sw	ra,44(sp)
1c00d2e0 <rt_thread_sleep+0x4> sw	s0,40(sp)
1c00d2e2 <rt_thread_sleep+0x6> sw	s1,36(sp)
1c00d2e4 <rt_thread_sleep+0x8> addi	s0,sp,48
1c00d2e6 <rt_thread_sleep+0xa> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:504
    register rt_base_t temp;
    struct rt_thread *thread;

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00d2ea <rt_thread_sleep+0xe> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00d2ee <rt_thread_sleep+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:506
    /* set to current thread */
    thread = rt_current_thread;
1c00d2f0 <rt_thread_sleep+0x14> lui	a5,0x1c017
1c00d2f4 <rt_thread_sleep+0x18> lw	a5,-1056(a5) # 1c016be0 <rt_current_thread>
1c00d2f8 <rt_thread_sleep+0x1c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:511
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    /* suspend thread */
    rt_thread_suspend(thread);
1c00d2fc <rt_thread_sleep+0x20> lw	a0,-20(s0)
1c00d300 <rt_thread_sleep+0x24> jal	1c00d36c <rt_thread_suspend>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:514

    /* reset the timeout of thread timer and start it */
    rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
1c00d302 <rt_thread_sleep+0x26> lw	a5,-20(s0)
1c00d306 <rt_thread_sleep+0x2a> addi	a5,a5,68
1c00d30a <rt_thread_sleep+0x2e> addi	a4,s0,-36
1c00d30e <rt_thread_sleep+0x32> mv	a2,a4
1c00d310 <rt_thread_sleep+0x34> li	a1,0
1c00d312 <rt_thread_sleep+0x36> mv	a0,a5
1c00d314 <rt_thread_sleep+0x38> jal	1c00d924 <rt_timer_control>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:515
    rt_timer_start(&(thread->thread_timer));
1c00d316 <rt_thread_sleep+0x3a> lw	a5,-20(s0)
1c00d31a <rt_thread_sleep+0x3e> addi	a5,a5,68
1c00d31e <rt_thread_sleep+0x42> mv	a0,a5
1c00d320 <rt_thread_sleep+0x44> jal	1c00d6d0 <rt_timer_start>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:518

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00d322 <rt_thread_sleep+0x46> mv	a0,s1
1c00d324 <rt_thread_sleep+0x48> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:520

    rt_schedule();
1c00d328 <rt_thread_sleep+0x4c> jal	ra,1c00cbba <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:523

    /* clear error number of this thread to RT_EOK */
    if (thread->error == -RT_ETIMEOUT)
1c00d32c <rt_thread_sleep+0x50> lw	a5,-20(s0)
1c00d330 <rt_thread_sleep+0x54> lw	a4,48(a5)
1c00d332 <rt_thread_sleep+0x56> li	a5,-2
1c00d334 <rt_thread_sleep+0x58> bne	a4,a5,1c00d340 <rt_thread_sleep+0x64>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:524
        thread->error = RT_EOK;
1c00d338 <rt_thread_sleep+0x5c> lw	a5,-20(s0)
1c00d33c <rt_thread_sleep+0x60> sw	zero,48(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:526

    return RT_EOK;
1c00d340 <rt_thread_sleep+0x64> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:527
}
1c00d342 <rt_thread_sleep+0x66> mv	a0,a5
1c00d344 <rt_thread_sleep+0x68> lw	ra,44(sp)
1c00d346 <rt_thread_sleep+0x6a> lw	s0,40(sp)
1c00d348 <rt_thread_sleep+0x6c> lw	s1,36(sp)
1c00d34a <rt_thread_sleep+0x6e> addi	sp,sp,48
1c00d34c <rt_thread_sleep+0x70> ret
rt_thread_delay():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:537
 * @param tick the delay ticks
 *
 * @return RT_EOK
 */
rt_err_t rt_thread_delay(rt_tick_t tick)
{
1c00d34e <rt_thread_delay> addi	sp,sp,-32
1c00d350 <rt_thread_delay+0x2> sw	ra,28(sp)
1c00d352 <rt_thread_delay+0x4> sw	s0,24(sp)
1c00d354 <rt_thread_delay+0x6> addi	s0,sp,32
1c00d356 <rt_thread_delay+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:538
    return rt_thread_sleep(tick);
1c00d35a <rt_thread_delay+0xc> lw	a0,-20(s0)
1c00d35e <rt_thread_delay+0x10> jal	1c00d2dc <rt_thread_sleep>
1c00d360 <rt_thread_delay+0x12> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:539
}
1c00d362 <rt_thread_delay+0x14> mv	a0,a5
1c00d364 <rt_thread_delay+0x16> lw	ra,28(sp)
1c00d366 <rt_thread_delay+0x18> lw	s0,24(sp)
1c00d368 <rt_thread_delay+0x1a> addi	sp,sp,32
1c00d36a <rt_thread_delay+0x1c> ret
rt_thread_suspend():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:713
 *
 * @note if suspend self thread, after this function call, the
 * rt_schedule() must be invoked.
 */
rt_err_t rt_thread_suspend(rt_thread_t thread)
{
1c00d36c <rt_thread_suspend> addi	sp,sp,-32
1c00d36e <rt_thread_suspend+0x2> sw	ra,28(sp)
1c00d370 <rt_thread_suspend+0x4> sw	s0,24(sp)
1c00d372 <rt_thread_suspend+0x6> sw	s1,20(sp)
1c00d374 <rt_thread_suspend+0x8> addi	s0,sp,32
1c00d376 <rt_thread_suspend+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:722
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend:  %s\n", thread->name));

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_READY)
1c00d37a <rt_thread_suspend+0xe> lw	a5,-20(s0)
1c00d37e <rt_thread_suspend+0x12> lbu	a5,52(a5)
1c00d382 <rt_thread_suspend+0x16> andi	a4,a5,15
1c00d386 <rt_thread_suspend+0x1a> li	a5,1
1c00d388 <rt_thread_suspend+0x1c> beq	a4,a5,1c00d390 <rt_thread_suspend+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:727
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend: thread disorder, 0x%2x\n",
                                       thread->stat));

        return -RT_ERROR;
1c00d38c <rt_thread_suspend+0x20> li	a5,-1
1c00d38e <rt_thread_suspend+0x22> j	1c00d3d8 <rt_thread_suspend+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:731
    }

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00d390 <rt_thread_suspend+0x24> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00d394 <rt_thread_suspend+0x28> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:734

    /* change thread stat */
    rt_schedule_remove_thread(thread);
1c00d396 <rt_thread_suspend+0x2a> lw	a0,-20(s0)
1c00d39a <rt_thread_suspend+0x2e> jal	ra,1c00cd0c <rt_schedule_remove_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:735
    thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
1c00d39e <rt_thread_suspend+0x32> lw	a5,-20(s0)
1c00d3a2 <rt_thread_suspend+0x36> lbu	a5,52(a5)
1c00d3a6 <rt_thread_suspend+0x3a> slli	a5,a5,0x18
1c00d3a8 <rt_thread_suspend+0x3c> srai	a5,a5,0x18
1c00d3aa <rt_thread_suspend+0x3e> andi	a5,a5,-16
1c00d3ac <rt_thread_suspend+0x40> slli	a5,a5,0x18
1c00d3ae <rt_thread_suspend+0x42> srai	a5,a5,0x18
1c00d3b0 <rt_thread_suspend+0x44> ori	a5,a5,2
1c00d3b4 <rt_thread_suspend+0x48> slli	a5,a5,0x18
1c00d3b6 <rt_thread_suspend+0x4a> srai	a5,a5,0x18
1c00d3b8 <rt_thread_suspend+0x4c> andi	a4,a5,255
1c00d3bc <rt_thread_suspend+0x50> lw	a5,-20(s0)
1c00d3c0 <rt_thread_suspend+0x54> sb	a4,52(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:738

    /* stop thread timer anyway */
    rt_timer_stop(&(thread->thread_timer));
1c00d3c4 <rt_thread_suspend+0x58> lw	a5,-20(s0)
1c00d3c8 <rt_thread_suspend+0x5c> addi	a5,a5,68
1c00d3cc <rt_thread_suspend+0x60> mv	a0,a5
1c00d3ce <rt_thread_suspend+0x62> jal	1c00d8ce <rt_timer_stop>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:741

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00d3d0 <rt_thread_suspend+0x64> mv	a0,s1
1c00d3d2 <rt_thread_suspend+0x66> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:744

    RT_OBJECT_HOOK_CALL(rt_thread_suspend_hook, (thread));
    return RT_EOK;
1c00d3d6 <rt_thread_suspend+0x6a> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:745
}
1c00d3d8 <rt_thread_suspend+0x6c> mv	a0,a5
1c00d3da <rt_thread_suspend+0x6e> lw	ra,28(sp)
1c00d3dc <rt_thread_suspend+0x70> lw	s0,24(sp)
1c00d3de <rt_thread_suspend+0x72> lw	s1,20(sp)
1c00d3e0 <rt_thread_suspend+0x74> addi	sp,sp,32
1c00d3e2 <rt_thread_suspend+0x76> ret
rt_thread_resume():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:755
 * @param thread the thread to be resumed
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_thread_resume(rt_thread_t thread)
{
1c00d3e4 <rt_thread_resume> addi	sp,sp,-32
1c00d3e6 <rt_thread_resume+0x2> sw	ra,28(sp)
1c00d3e8 <rt_thread_resume+0x4> sw	s0,24(sp)
1c00d3ea <rt_thread_resume+0x6> sw	s1,20(sp)
1c00d3ec <rt_thread_resume+0x8> addi	s0,sp,32
1c00d3ee <rt_thread_resume+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:764
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume:  %s\n", thread->name));

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
1c00d3f2 <rt_thread_resume+0xe> lw	a5,-20(s0)
1c00d3f6 <rt_thread_resume+0x12> lbu	a5,52(a5)
1c00d3fa <rt_thread_resume+0x16> andi	a4,a5,15
1c00d3fe <rt_thread_resume+0x1a> li	a5,2
1c00d400 <rt_thread_resume+0x1c> beq	a4,a5,1c00d408 <rt_thread_resume+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:769
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume: thread disorder, %d\n",
                                       thread->stat));

        return -RT_ERROR;
1c00d404 <rt_thread_resume+0x20> li	a5,-1
1c00d406 <rt_thread_resume+0x22> j	1c00d436 <rt_thread_resume+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:773
    }

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
1c00d408 <rt_thread_resume+0x24> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00d40c <rt_thread_resume+0x28> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:776

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
1c00d40e <rt_thread_resume+0x2a> lw	a5,-20(s0)
1c00d412 <rt_thread_resume+0x2e> addi	a5,a5,20
1c00d414 <rt_thread_resume+0x30> mv	a0,a5
1c00d416 <rt_thread_resume+0x32> jal	ra,1c00cec6 <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:778

    rt_timer_stop(&thread->thread_timer);
1c00d41a <rt_thread_resume+0x36> lw	a5,-20(s0)
1c00d41e <rt_thread_resume+0x3a> addi	a5,a5,68
1c00d422 <rt_thread_resume+0x3e> mv	a0,a5
1c00d424 <rt_thread_resume+0x40> jal	1c00d8ce <rt_timer_stop>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:781

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
1c00d426 <rt_thread_resume+0x42> mv	a0,s1
1c00d428 <rt_thread_resume+0x44> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:784

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
1c00d42c <rt_thread_resume+0x48> lw	a0,-20(s0)
1c00d430 <rt_thread_resume+0x4c> jal	ra,1c00cc86 <rt_schedule_insert_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:787

    RT_OBJECT_HOOK_CALL(rt_thread_resume_hook, (thread));
    return RT_EOK;
1c00d434 <rt_thread_resume+0x50> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:788
}
1c00d436 <rt_thread_resume+0x52> mv	a0,a5
1c00d438 <rt_thread_resume+0x54> lw	ra,28(sp)
1c00d43a <rt_thread_resume+0x56> lw	s0,24(sp)
1c00d43c <rt_thread_resume+0x58> lw	s1,20(sp)
1c00d43e <rt_thread_resume+0x5a> addi	sp,sp,32
1c00d440 <rt_thread_resume+0x5c> ret
rt_thread_timeout():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:797
 * when thread is timeout to wait some resource.
 *
 * @param parameter the parameter of thread timeout function
 */
void rt_thread_timeout(void *parameter)
{
1c00d442 <rt_thread_timeout> addi	sp,sp,-48
1c00d444 <rt_thread_timeout+0x2> sw	ra,44(sp)
1c00d446 <rt_thread_timeout+0x4> sw	s0,40(sp)
1c00d448 <rt_thread_timeout+0x6> addi	s0,sp,48
1c00d44a <rt_thread_timeout+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:800
    struct rt_thread *thread;

    thread = (struct rt_thread *)parameter;
1c00d44e <rt_thread_timeout+0xc> lw	a5,-36(s0)
1c00d452 <rt_thread_timeout+0x10> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:808
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    /* set error number */
    thread->error = -RT_ETIMEOUT;
1c00d456 <rt_thread_timeout+0x14> lw	a5,-20(s0)
1c00d45a <rt_thread_timeout+0x18> li	a4,-2
1c00d45c <rt_thread_timeout+0x1a> sw	a4,48(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:811

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
1c00d45e <rt_thread_timeout+0x1c> lw	a5,-20(s0)
1c00d462 <rt_thread_timeout+0x20> addi	a5,a5,20
1c00d464 <rt_thread_timeout+0x22> mv	a0,a5
1c00d466 <rt_thread_timeout+0x24> jal	ra,1c00cec6 <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:814

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
1c00d46a <rt_thread_timeout+0x28> lw	a0,-20(s0)
1c00d46e <rt_thread_timeout+0x2c> jal	ra,1c00cc86 <rt_schedule_insert_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:817

    /* do schedule */
    rt_schedule();
1c00d472 <rt_thread_timeout+0x30> jal	ra,1c00cbba <rt_schedule>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/thread.c:818
}
1c00d476 <rt_thread_timeout+0x34> nop
1c00d478 <rt_thread_timeout+0x36> lw	ra,44(sp)
1c00d47a <rt_thread_timeout+0x38> lw	s0,40(sp)
1c00d47c <rt_thread_timeout+0x3a> addi	sp,sp,48
1c00d47e <rt_thread_timeout+0x3c> ret
rt_list_init():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:48
{
1c00d480 <rt_list_init> addi	sp,sp,-32
1c00d482 <rt_list_init+0x2> sw	s0,28(sp)
1c00d484 <rt_list_init+0x4> addi	s0,sp,32
1c00d486 <rt_list_init+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:49
    l->next = l->prev = l;
1c00d48a <rt_list_init+0xa> lw	a5,-20(s0)
1c00d48e <rt_list_init+0xe> lw	a4,-20(s0)
1c00d492 <rt_list_init+0x12> sw	a4,4(a5)
1c00d494 <rt_list_init+0x14> lw	a5,-20(s0)
1c00d498 <rt_list_init+0x18> lw	a4,4(a5)
1c00d49a <rt_list_init+0x1a> lw	a5,-20(s0)
1c00d49e <rt_list_init+0x1e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:50
}
1c00d4a0 <rt_list_init+0x20> nop
1c00d4a2 <rt_list_init+0x22> lw	s0,28(sp)
1c00d4a4 <rt_list_init+0x24> addi	sp,sp,32
1c00d4a6 <rt_list_init+0x26> ret
rt_list_insert_after():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:59
{
1c00d4a8 <rt_list_insert_after> addi	sp,sp,-32
1c00d4aa <rt_list_insert_after+0x2> sw	s0,28(sp)
1c00d4ac <rt_list_insert_after+0x4> addi	s0,sp,32
1c00d4ae <rt_list_insert_after+0x6> sw	a0,-20(s0)
1c00d4b2 <rt_list_insert_after+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:60
    l->next->prev = n;
1c00d4b6 <rt_list_insert_after+0xe> lw	a5,-20(s0)
1c00d4ba <rt_list_insert_after+0x12> lw	a5,0(a5)
1c00d4bc <rt_list_insert_after+0x14> lw	a4,-24(s0)
1c00d4c0 <rt_list_insert_after+0x18> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:61
    n->next = l->next;
1c00d4c2 <rt_list_insert_after+0x1a> lw	a5,-20(s0)
1c00d4c6 <rt_list_insert_after+0x1e> lw	a4,0(a5)
1c00d4c8 <rt_list_insert_after+0x20> lw	a5,-24(s0)
1c00d4cc <rt_list_insert_after+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:63
    l->next = n;
1c00d4ce <rt_list_insert_after+0x26> lw	a5,-20(s0)
1c00d4d2 <rt_list_insert_after+0x2a> lw	a4,-24(s0)
1c00d4d6 <rt_list_insert_after+0x2e> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:64
    n->prev = l;
1c00d4d8 <rt_list_insert_after+0x30> lw	a5,-24(s0)
1c00d4dc <rt_list_insert_after+0x34> lw	a4,-20(s0)
1c00d4e0 <rt_list_insert_after+0x38> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:65
}
1c00d4e2 <rt_list_insert_after+0x3a> nop
1c00d4e4 <rt_list_insert_after+0x3c> lw	s0,28(sp)
1c00d4e6 <rt_list_insert_after+0x3e> addi	sp,sp,32
1c00d4e8 <rt_list_insert_after+0x40> ret
rt_list_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:87
{
1c00d4ea <rt_list_remove> addi	sp,sp,-32
1c00d4ec <rt_list_remove+0x2> sw	s0,28(sp)
1c00d4ee <rt_list_remove+0x4> addi	s0,sp,32
1c00d4f0 <rt_list_remove+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:88
    n->next->prev = n->prev;
1c00d4f4 <rt_list_remove+0xa> lw	a5,-20(s0)
1c00d4f8 <rt_list_remove+0xe> lw	a5,0(a5)
1c00d4fa <rt_list_remove+0x10> lw	a4,-20(s0)
1c00d4fe <rt_list_remove+0x14> lw	a4,4(a4)
1c00d500 <rt_list_remove+0x16> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:89
    n->prev->next = n->next;
1c00d502 <rt_list_remove+0x18> lw	a5,-20(s0)
1c00d506 <rt_list_remove+0x1c> lw	a5,4(a5)
1c00d508 <rt_list_remove+0x1e> lw	a4,-20(s0)
1c00d50c <rt_list_remove+0x22> lw	a4,0(a4)
1c00d50e <rt_list_remove+0x24> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:91
    n->next = n->prev = n;
1c00d510 <rt_list_remove+0x26> lw	a5,-20(s0)
1c00d514 <rt_list_remove+0x2a> lw	a4,-20(s0)
1c00d518 <rt_list_remove+0x2e> sw	a4,4(a5)
1c00d51a <rt_list_remove+0x30> lw	a5,-20(s0)
1c00d51e <rt_list_remove+0x34> lw	a4,4(a5)
1c00d520 <rt_list_remove+0x36> lw	a5,-20(s0)
1c00d524 <rt_list_remove+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:92
}
1c00d526 <rt_list_remove+0x3c> nop
1c00d528 <rt_list_remove+0x3e> lw	s0,28(sp)
1c00d52a <rt_list_remove+0x40> addi	sp,sp,32
1c00d52c <rt_list_remove+0x42> ret
rt_list_isempty():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:99
{
1c00d52e <rt_list_isempty> addi	sp,sp,-32
1c00d530 <rt_list_isempty+0x2> sw	s0,28(sp)
1c00d532 <rt_list_isempty+0x4> addi	s0,sp,32
1c00d534 <rt_list_isempty+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:100
    return l->next == l;
1c00d538 <rt_list_isempty+0xa> lw	a5,-20(s0)
1c00d53c <rt_list_isempty+0xe> lw	a5,0(a5)
1c00d53e <rt_list_isempty+0x10> lw	a4,-20(s0)
1c00d542 <rt_list_isempty+0x14> sub	a5,a4,a5
1c00d546 <rt_list_isempty+0x18> seqz	a5,a5
1c00d54a <rt_list_isempty+0x1c> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:101
}
1c00d54e <rt_list_isempty+0x20> mv	a0,a5
1c00d550 <rt_list_isempty+0x22> lw	s0,28(sp)
1c00d552 <rt_list_isempty+0x24> addi	sp,sp,32
1c00d554 <rt_list_isempty+0x26> ret
_rt_timer_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:91
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
1c00d556 <_rt_timer_init> addi	sp,sp,-64
1c00d558 <_rt_timer_init+0x2> sw	ra,60(sp)
1c00d55a <_rt_timer_init+0x4> sw	s0,56(sp)
1c00d55c <_rt_timer_init+0x6> addi	s0,sp,64
1c00d55e <_rt_timer_init+0x8> sw	a0,-36(s0)
1c00d562 <_rt_timer_init+0xc> sw	a1,-40(s0)
1c00d566 <_rt_timer_init+0x10> sw	a2,-44(s0)
1c00d56a <_rt_timer_init+0x14> sw	a3,-48(s0)
1c00d56e <_rt_timer_init+0x18> mv	a5,a4
1c00d570 <_rt_timer_init+0x1a> sb	a5,-49(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:95
    int i;

    /* set flag */
    timer->parent.flag  = flag;
1c00d574 <_rt_timer_init+0x1e> lw	a5,-36(s0)
1c00d578 <_rt_timer_init+0x22> lbu	a4,-49(s0)
1c00d57c <_rt_timer_init+0x26> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:98

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d580 <_rt_timer_init+0x2a> lw	a5,-36(s0)
1c00d584 <_rt_timer_init+0x2e> lbu	a5,9(a5)
1c00d588 <_rt_timer_init+0x32> andi	a5,a5,-2
1c00d58a <_rt_timer_init+0x34> andi	a4,a5,255
1c00d58e <_rt_timer_init+0x38> lw	a5,-36(s0)
1c00d592 <_rt_timer_init+0x3c> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:100

    timer->timeout_func = timeout;
1c00d596 <_rt_timer_init+0x40> lw	a5,-36(s0)
1c00d59a <_rt_timer_init+0x44> lw	a4,-40(s0)
1c00d59e <_rt_timer_init+0x48> sw	a4,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:101
    timer->parameter    = parameter;
1c00d5a0 <_rt_timer_init+0x4a> lw	a5,-36(s0)
1c00d5a4 <_rt_timer_init+0x4e> lw	a4,-44(s0)
1c00d5a8 <_rt_timer_init+0x52> sw	a4,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:103

    timer->timeout_tick = 0;
1c00d5aa <_rt_timer_init+0x54> lw	a5,-36(s0)
1c00d5ae <_rt_timer_init+0x58> sw	zero,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:104
    timer->init_tick    = time;
1c00d5b2 <_rt_timer_init+0x5c> lw	a5,-36(s0)
1c00d5b6 <_rt_timer_init+0x60> lw	a4,-48(s0)
1c00d5ba <_rt_timer_init+0x64> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:107

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
1c00d5bc <_rt_timer_init+0x66> sw	zero,-20(s0)
1c00d5c0 <_rt_timer_init+0x6a> j	1c00d5e0 <_rt_timer_init+0x8a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:109 (discriminator 3)
    {
        rt_list_init(&(timer->row[i]));
1c00d5c2 <_rt_timer_init+0x6c> lw	a5,-20(s0)
1c00d5c6 <_rt_timer_init+0x70> addi	a5,a5,2
1c00d5c8 <_rt_timer_init+0x72> slli	a5,a5,0x3
1c00d5ca <_rt_timer_init+0x74> lw	a4,-36(s0)
1c00d5ce <_rt_timer_init+0x78> add	a5,a5,a4
1c00d5d0 <_rt_timer_init+0x7a> addi	a5,a5,4
1c00d5d2 <_rt_timer_init+0x7c> mv	a0,a5
1c00d5d4 <_rt_timer_init+0x7e> jal	1c00d480 <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:107 (discriminator 3)
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
1c00d5d6 <_rt_timer_init+0x80> lw	a5,-20(s0)
1c00d5da <_rt_timer_init+0x84> addi	a5,a5,1
1c00d5dc <_rt_timer_init+0x86> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:107 (discriminator 1)
1c00d5e0 <_rt_timer_init+0x8a> lw	a5,-20(s0)
1c00d5e4 <_rt_timer_init+0x8e> blez	a5,1c00d5c2 <_rt_timer_init+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:111
    }
}
1c00d5e8 <_rt_timer_init+0x92> nop
1c00d5ea <_rt_timer_init+0x94> lw	ra,60(sp)
1c00d5ec <_rt_timer_init+0x96> lw	s0,56(sp)
1c00d5ee <_rt_timer_init+0x98> addi	sp,sp,64
1c00d5f0 <_rt_timer_init+0x9a> ret
_rt_timer_remove():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:137

    return timeout_tick;
}

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
1c00d5f2 <_rt_timer_remove> addi	sp,sp,-48
1c00d5f4 <_rt_timer_remove+0x2> sw	ra,44(sp)
1c00d5f6 <_rt_timer_remove+0x4> sw	s0,40(sp)
1c00d5f8 <_rt_timer_remove+0x6> addi	s0,sp,48
1c00d5fa <_rt_timer_remove+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:140
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
1c00d5fe <_rt_timer_remove+0xc> sw	zero,-20(s0)
1c00d602 <_rt_timer_remove+0x10> j	1c00d622 <_rt_timer_remove+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:142 (discriminator 3)
    {
        rt_list_remove(&timer->row[i]);
1c00d604 <_rt_timer_remove+0x12> lw	a5,-20(s0)
1c00d608 <_rt_timer_remove+0x16> addi	a5,a5,2
1c00d60a <_rt_timer_remove+0x18> slli	a5,a5,0x3
1c00d60c <_rt_timer_remove+0x1a> lw	a4,-36(s0)
1c00d610 <_rt_timer_remove+0x1e> add	a5,a5,a4
1c00d612 <_rt_timer_remove+0x20> addi	a5,a5,4
1c00d614 <_rt_timer_remove+0x22> mv	a0,a5
1c00d616 <_rt_timer_remove+0x24> jal	1c00d4ea <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:140 (discriminator 3)
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
1c00d618 <_rt_timer_remove+0x26> lw	a5,-20(s0)
1c00d61c <_rt_timer_remove+0x2a> addi	a5,a5,1
1c00d61e <_rt_timer_remove+0x2c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:140 (discriminator 1)
1c00d622 <_rt_timer_remove+0x30> lw	a5,-20(s0)
1c00d626 <_rt_timer_remove+0x34> blez	a5,1c00d604 <_rt_timer_remove+0x12>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:144
    }
}
1c00d62a <_rt_timer_remove+0x38> nop
1c00d62c <_rt_timer_remove+0x3a> lw	ra,44(sp)
1c00d62e <_rt_timer_remove+0x3c> lw	s0,40(sp)
1c00d630 <_rt_timer_remove+0x3e> addi	sp,sp,48
1c00d632 <_rt_timer_remove+0x40> ret
rt_timer_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:199
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
1c00d634 <rt_timer_init> addi	sp,sp,-48
1c00d636 <rt_timer_init+0x2> sw	ra,44(sp)
1c00d638 <rt_timer_init+0x4> sw	s0,40(sp)
1c00d63a <rt_timer_init+0x6> addi	s0,sp,48
1c00d63c <rt_timer_init+0x8> sw	a0,-20(s0)
1c00d640 <rt_timer_init+0xc> sw	a1,-24(s0)
1c00d644 <rt_timer_init+0x10> sw	a2,-28(s0)
1c00d648 <rt_timer_init+0x14> sw	a3,-32(s0)
1c00d64c <rt_timer_init+0x18> sw	a4,-36(s0)
1c00d650 <rt_timer_init+0x1c> sb	a5,-37(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:204
    /* timer check */
    RT_ASSERT(timer != RT_NULL);

    /* timer object initialization */
    rt_object_init((rt_object_t)timer, RT_Object_Class_Timer, name);
1c00d654 <rt_timer_init+0x20> lw	a2,-24(s0)
1c00d658 <rt_timer_init+0x24> li	a1,10
1c00d65a <rt_timer_init+0x26> lw	a0,-20(s0)
1c00d65e <rt_timer_init+0x2a> jal	ra,1c00c84e <rt_object_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:206

    _rt_timer_init(timer, timeout, parameter, time, flag);
1c00d662 <rt_timer_init+0x2e> lbu	a5,-37(s0)
1c00d666 <rt_timer_init+0x32> mv	a4,a5
1c00d668 <rt_timer_init+0x34> lw	a3,-36(s0)
1c00d66c <rt_timer_init+0x38> lw	a2,-32(s0)
1c00d670 <rt_timer_init+0x3c> lw	a1,-28(s0)
1c00d674 <rt_timer_init+0x40> lw	a0,-20(s0)
1c00d678 <rt_timer_init+0x44> jal	1c00d556 <_rt_timer_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:207
}
1c00d67a <rt_timer_init+0x46> nop
1c00d67c <rt_timer_init+0x48> lw	ra,44(sp)
1c00d67e <rt_timer_init+0x4a> lw	s0,40(sp)
1c00d680 <rt_timer_init+0x4c> addi	sp,sp,48
1c00d682 <rt_timer_init+0x4e> ret
rt_timer_detach():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:217
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
1c00d684 <rt_timer_detach> addi	sp,sp,-32
1c00d686 <rt_timer_detach+0x2> sw	ra,28(sp)
1c00d688 <rt_timer_detach+0x4> sw	s0,24(sp)
1c00d68a <rt_timer_detach+0x6> sw	s1,20(sp)
1c00d68c <rt_timer_detach+0x8> addi	s0,sp,32
1c00d68e <rt_timer_detach+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:226
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    RT_ASSERT(rt_object_is_systemobject(&timer->parent));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00d692 <rt_timer_detach+0xe> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00d696 <rt_timer_detach+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:228

    _rt_timer_remove(timer);
1c00d698 <rt_timer_detach+0x14> lw	a0,-20(s0)
1c00d69c <rt_timer_detach+0x18> jal	1c00d5f2 <_rt_timer_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:230
    /* stop timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d69e <rt_timer_detach+0x1a> lw	a5,-20(s0)
1c00d6a2 <rt_timer_detach+0x1e> lbu	a5,9(a5)
1c00d6a6 <rt_timer_detach+0x22> andi	a5,a5,-2
1c00d6a8 <rt_timer_detach+0x24> andi	a4,a5,255
1c00d6ac <rt_timer_detach+0x28> lw	a5,-20(s0)
1c00d6b0 <rt_timer_detach+0x2c> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:233

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00d6b4 <rt_timer_detach+0x30> mv	a0,s1
1c00d6b6 <rt_timer_detach+0x32> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:235

    rt_object_detach((rt_object_t)timer);
1c00d6ba <rt_timer_detach+0x36> lw	a0,-20(s0)
1c00d6be <rt_timer_detach+0x3a> jal	ra,1c00c8f8 <rt_object_detach>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:237

    return RT_EOK;
1c00d6c2 <rt_timer_detach+0x3e> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:238
}
1c00d6c4 <rt_timer_detach+0x40> mv	a0,a5
1c00d6c6 <rt_timer_detach+0x42> lw	ra,28(sp)
1c00d6c8 <rt_timer_detach+0x44> lw	s0,24(sp)
1c00d6ca <rt_timer_detach+0x46> lw	s1,20(sp)
1c00d6cc <rt_timer_detach+0x48> addi	sp,sp,32
1c00d6ce <rt_timer_detach+0x4a> ret
rt_timer_start():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:312
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
1c00d6d0 <rt_timer_start> addi	sp,sp,-64
1c00d6d2 <rt_timer_start+0x2> sw	ra,60(sp)
1c00d6d4 <rt_timer_start+0x4> sw	s0,56(sp)
1c00d6d6 <rt_timer_start+0x6> sw	s1,52(sp)
1c00d6d8 <rt_timer_start+0x8> addi	s0,sp,64
1c00d6da <rt_timer_start+0xa> sw	a0,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:325
    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    /* stop timer firstly */
    level = rt_hw_interrupt_disable();
1c00d6de <rt_timer_start+0xe> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00d6e2 <rt_timer_start+0x12> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:327
    /* remove timer from list */
    _rt_timer_remove(timer);
1c00d6e4 <rt_timer_start+0x14> lw	a0,-52(s0)
1c00d6e8 <rt_timer_start+0x18> jal	1c00d5f2 <_rt_timer_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:329
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d6ea <rt_timer_start+0x1a> lw	a5,-52(s0)
1c00d6ee <rt_timer_start+0x1e> lbu	a5,9(a5)
1c00d6f2 <rt_timer_start+0x22> andi	a5,a5,-2
1c00d6f4 <rt_timer_start+0x24> andi	a4,a5,255
1c00d6f8 <rt_timer_start+0x28> lw	a5,-52(s0)
1c00d6fc <rt_timer_start+0x2c> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:338
    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    RT_ASSERT(timer->init_tick < RT_TICK_MAX / 2);
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
1c00d700 <rt_timer_start+0x30> jal	ra,1c00b49c <rt_tick_get>
1c00d704 <rt_timer_start+0x34> mv	a4,a0
1c00d706 <rt_timer_start+0x36> lw	a5,-52(s0)
1c00d70a <rt_timer_start+0x3a> lw	a5,36(a5)
1c00d70c <rt_timer_start+0x3c> add	a4,a4,a5
1c00d70e <rt_timer_start+0x3e> lw	a5,-52(s0)
1c00d712 <rt_timer_start+0x42> sw	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:350
    }
    else
#endif
    {
        /* insert timer to system timer list */
        timer_list = rt_timer_list;
1c00d714 <rt_timer_start+0x44> lui	a5,0x1c017
1c00d718 <rt_timer_start+0x48> addi	a5,a5,-1052 # 1c016be4 <rt_timer_list>
1c00d71c <rt_timer_start+0x4c> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:353
    }

    row_head[0]  = &timer_list[0];
1c00d720 <rt_timer_start+0x50> lw	a5,-28(s0)
1c00d724 <rt_timer_start+0x54> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:354
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
1c00d728 <rt_timer_start+0x58> sw	zero,-20(s0)
1c00d72c <rt_timer_start+0x5c> j	1c00d804 <rt_timer_start+0x134>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:360
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
1c00d72e <rt_timer_start+0x5e> lw	a5,-20(s0)
1c00d732 <rt_timer_start+0x62> slli	a5,a5,0x2
1c00d734 <rt_timer_start+0x64> addi	a4,s0,-16
1c00d738 <rt_timer_start+0x68> add	a5,a5,a4
1c00d73a <rt_timer_start+0x6a> lw	a5,-24(a5)
1c00d73e <rt_timer_start+0x6e> lw	a5,0(a5)
1c00d740 <rt_timer_start+0x70> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:363

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
1c00d744 <rt_timer_start+0x74> lw	a5,-20(s0)
1c00d748 <rt_timer_start+0x78> slli	a5,a5,0x3
1c00d74a <rt_timer_start+0x7a> addi	a5,a5,20
1c00d74c <rt_timer_start+0x7c> neg	a5,a5
1c00d750 <rt_timer_start+0x80> lw	a4,-32(s0)
1c00d754 <rt_timer_start+0x84> add	a5,a5,a4
1c00d756 <rt_timer_start+0x86> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:370
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
1c00d75a <rt_timer_start+0x8a> lw	a5,-36(s0)
1c00d75e <rt_timer_start+0x8e> lw	a4,40(a5)
1c00d760 <rt_timer_start+0x90> lw	a5,-52(s0)
1c00d764 <rt_timer_start+0x94> lw	a5,40(a5)
1c00d766 <rt_timer_start+0x96> beq	a4,a5,1c00d786 <rt_timer_start+0xb6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:374
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
1c00d76a <rt_timer_start+0x9a> lw	a5,-36(s0)
1c00d76e <rt_timer_start+0x9e> lw	a4,40(a5)
1c00d770 <rt_timer_start+0xa0> lw	a5,-52(s0)
1c00d774 <rt_timer_start+0xa4> lw	a5,40(a5)
1c00d776 <rt_timer_start+0xa6> sub	a4,a4,a5
1c00d778 <rt_timer_start+0xa8> lui	a5,0x80000
1c00d77c <rt_timer_start+0xac> xori	a5,a5,-2
1c00d780 <rt_timer_start+0xb0> bgeu	a5,a4,1c00d7ce <rt_timer_start+0xfe>
1c00d784 <rt_timer_start+0xb4> j	1c00d788 <rt_timer_start+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:372
                continue;
1c00d786 <rt_timer_start+0xb6> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:357
             row_head[row_lvl]  = row_head[row_lvl]->next)
1c00d788 <rt_timer_start+0xb8> lw	a5,-20(s0)
1c00d78c <rt_timer_start+0xbc> slli	a5,a5,0x2
1c00d78e <rt_timer_start+0xbe> addi	a4,s0,-16
1c00d792 <rt_timer_start+0xc2> add	a5,a5,a4
1c00d794 <rt_timer_start+0xc4> lw	a5,-24(a5) # 7fffffe8 <__l2_shared_end+0x63fd87b8>
1c00d798 <rt_timer_start+0xc8> lw	a4,0(a5)
1c00d79a <rt_timer_start+0xca> lw	a5,-20(s0)
1c00d79e <rt_timer_start+0xce> slli	a5,a5,0x2
1c00d7a0 <rt_timer_start+0xd0> addi	a3,s0,-16
1c00d7a4 <rt_timer_start+0xd4> add	a5,a5,a3
1c00d7a6 <rt_timer_start+0xd6> sw	a4,-24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:356
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
1c00d7aa <rt_timer_start+0xda> lw	a5,-20(s0)
1c00d7ae <rt_timer_start+0xde> slli	a5,a5,0x2
1c00d7b0 <rt_timer_start+0xe0> addi	a4,s0,-16
1c00d7b4 <rt_timer_start+0xe4> add	a5,a5,a4
1c00d7b6 <rt_timer_start+0xe6> lw	a4,-24(a5)
1c00d7ba <rt_timer_start+0xea> lw	a5,-20(s0)
1c00d7be <rt_timer_start+0xee> slli	a5,a5,0x3
1c00d7c0 <rt_timer_start+0xf0> lw	a3,-28(s0)
1c00d7c4 <rt_timer_start+0xf4> add	a5,a5,a3
1c00d7c6 <rt_timer_start+0xf6> lw	a5,4(a5)
1c00d7c8 <rt_timer_start+0xf8> bne	a4,a5,1c00d72e <rt_timer_start+0x5e>
1c00d7cc <rt_timer_start+0xfc> j	1c00d7d0 <rt_timer_start+0x100>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:376
            {
                break;
1c00d7ce <rt_timer_start+0xfe> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:379
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
1c00d7d0 <rt_timer_start+0x100> lw	a5,-20(s0)
1c00d7d4 <rt_timer_start+0x104> beqz	a5,1c00d7fa <rt_timer_start+0x12a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:380
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
1c00d7d6 <rt_timer_start+0x106> lw	a5,-20(s0)
1c00d7da <rt_timer_start+0x10a> slli	a5,a5,0x2
1c00d7dc <rt_timer_start+0x10c> addi	a4,s0,-16
1c00d7e0 <rt_timer_start+0x110> add	a5,a5,a4
1c00d7e2 <rt_timer_start+0x112> lw	a4,-24(a5)
1c00d7e6 <rt_timer_start+0x116> lw	a5,-20(s0)
1c00d7ea <rt_timer_start+0x11a> addi	a5,a5,1
1c00d7ec <rt_timer_start+0x11c> addi	a4,a4,8
1c00d7ee <rt_timer_start+0x11e> slli	a5,a5,0x2
1c00d7f0 <rt_timer_start+0x120> addi	a3,s0,-16
1c00d7f4 <rt_timer_start+0x124> add	a5,a5,a3
1c00d7f6 <rt_timer_start+0x126> sw	a4,-24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:354 (discriminator 2)
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
1c00d7fa <rt_timer_start+0x12a> lw	a5,-20(s0)
1c00d7fe <rt_timer_start+0x12e> addi	a5,a5,1
1c00d800 <rt_timer_start+0x130> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:354 (discriminator 1)
1c00d804 <rt_timer_start+0x134> lw	a5,-20(s0)
1c00d808 <rt_timer_start+0x138> beqz	a5,1c00d7aa <rt_timer_start+0xda>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:387

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
1c00d80a <rt_timer_start+0x13a> lui	a5,0x1c017
1c00d80e <rt_timer_start+0x13e> lw	a5,-1044(a5) # 1c016bec <random_nr.1991>
1c00d812 <rt_timer_start+0x142> addi	a4,a5,1
1c00d816 <rt_timer_start+0x146> lui	a5,0x1c017
1c00d81a <rt_timer_start+0x14a> sw	a4,-1044(a5) # 1c016bec <random_nr.1991>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:388
    tst_nr = random_nr;
1c00d81e <rt_timer_start+0x14e> lui	a5,0x1c017
1c00d822 <rt_timer_start+0x152> lw	a5,-1044(a5) # 1c016bec <random_nr.1991>
1c00d826 <rt_timer_start+0x156> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:390

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
1c00d82a <rt_timer_start+0x15a> lw	a4,-40(s0)
1c00d82e <rt_timer_start+0x15e> lw	a5,-52(s0)
1c00d832 <rt_timer_start+0x162> addi	a5,a5,20
1c00d834 <rt_timer_start+0x164> mv	a1,a5
1c00d836 <rt_timer_start+0x166> mv	a0,a4
1c00d838 <rt_timer_start+0x168> jal	ra,1c00d4a8 <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:392
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
1c00d83c <rt_timer_start+0x16c> li	a5,2
1c00d83e <rt_timer_start+0x16e> sw	a5,-20(s0)
1c00d842 <rt_timer_start+0x172> j	1c00d894 <rt_timer_start+0x1c4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:394
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
1c00d844 <rt_timer_start+0x174> lw	a5,-24(s0)
1c00d848 <rt_timer_start+0x178> andi	a5,a5,3
1c00d84a <rt_timer_start+0x17a> bnez	a5,1c00d8a0 <rt_timer_start+0x1d0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:395
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
1c00d84c <rt_timer_start+0x17c> li	a4,1
1c00d84e <rt_timer_start+0x17e> lw	a5,-20(s0)
1c00d852 <rt_timer_start+0x182> sub	a5,a4,a5
1c00d856 <rt_timer_start+0x186> slli	a5,a5,0x2
1c00d858 <rt_timer_start+0x188> addi	a4,s0,-16
1c00d85c <rt_timer_start+0x18c> add	a5,a5,a4
1c00d85e <rt_timer_start+0x18e> lw	a3,-24(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:396
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
1c00d862 <rt_timer_start+0x192> li	a4,1
1c00d864 <rt_timer_start+0x194> lw	a5,-20(s0)
1c00d868 <rt_timer_start+0x198> sub	a5,a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:395
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
1c00d86c <rt_timer_start+0x19c> addi	a5,a5,2
1c00d86e <rt_timer_start+0x19e> slli	a5,a5,0x3
1c00d870 <rt_timer_start+0x1a0> lw	a4,-52(s0)
1c00d874 <rt_timer_start+0x1a4> add	a5,a5,a4
1c00d876 <rt_timer_start+0x1a6> addi	a5,a5,4
1c00d878 <rt_timer_start+0x1a8> mv	a1,a5
1c00d87a <rt_timer_start+0x1aa> mv	a0,a3
1c00d87c <rt_timer_start+0x1ac> jal	ra,1c00d4a8 <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:401
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
1c00d880 <rt_timer_start+0x1b0> lw	a5,-24(s0)
1c00d884 <rt_timer_start+0x1b4> srli	a5,a5,0x2
1c00d886 <rt_timer_start+0x1b6> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:392
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
1c00d88a <rt_timer_start+0x1ba> lw	a5,-20(s0)
1c00d88e <rt_timer_start+0x1be> addi	a5,a5,1
1c00d890 <rt_timer_start+0x1c0> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:392 (discriminator 1)
1c00d894 <rt_timer_start+0x1c4> lw	a4,-20(s0)
1c00d898 <rt_timer_start+0x1c8> li	a5,1
1c00d89a <rt_timer_start+0x1ca> bgeu	a5,a4,1c00d844 <rt_timer_start+0x174>
1c00d89e <rt_timer_start+0x1ce> j	1c00d8a2 <rt_timer_start+0x1d2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:398
            break;
1c00d8a0 <rt_timer_start+0x1d0> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:404
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
1c00d8a2 <rt_timer_start+0x1d2> lw	a5,-52(s0)
1c00d8a6 <rt_timer_start+0x1d6> lbu	a5,9(a5)
1c00d8aa <rt_timer_start+0x1da> ori	a5,a5,1
1c00d8ae <rt_timer_start+0x1de> andi	a4,a5,255
1c00d8b2 <rt_timer_start+0x1e2> lw	a5,-52(s0)
1c00d8b6 <rt_timer_start+0x1e6> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:407

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00d8ba <rt_timer_start+0x1ea> mv	a0,s1
1c00d8bc <rt_timer_start+0x1ec> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:423
            rt_schedule();
        }
    }
#endif

    return RT_EOK;
1c00d8c0 <rt_timer_start+0x1f0> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:424
}
1c00d8c2 <rt_timer_start+0x1f2> mv	a0,a5
1c00d8c4 <rt_timer_start+0x1f4> lw	ra,60(sp)
1c00d8c6 <rt_timer_start+0x1f6> lw	s0,56(sp)
1c00d8c8 <rt_timer_start+0x1f8> lw	s1,52(sp)
1c00d8ca <rt_timer_start+0x1fa> addi	sp,sp,64
1c00d8cc <rt_timer_start+0x1fc> ret
rt_timer_stop():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:434
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
1c00d8ce <rt_timer_stop> addi	sp,sp,-32
1c00d8d0 <rt_timer_stop+0x2> sw	ra,28(sp)
1c00d8d2 <rt_timer_stop+0x4> sw	s0,24(sp)
1c00d8d4 <rt_timer_stop+0x6> sw	s1,20(sp)
1c00d8d6 <rt_timer_stop+0x8> addi	s0,sp,32
1c00d8d8 <rt_timer_stop+0xa> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:441

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
1c00d8dc <rt_timer_stop+0xe> lw	a5,-20(s0)
1c00d8e0 <rt_timer_stop+0x12> lbu	a5,9(a5)
1c00d8e4 <rt_timer_stop+0x16> andi	a5,a5,1
1c00d8e6 <rt_timer_stop+0x18> bnez	a5,1c00d8ec <rt_timer_stop+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:442
        return -RT_ERROR;
1c00d8e8 <rt_timer_stop+0x1a> li	a5,-1
1c00d8ea <rt_timer_stop+0x1c> j	1c00d918 <rt_timer_stop+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:447

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00d8ec <rt_timer_stop+0x1e> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00d8f0 <rt_timer_stop+0x22> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:449

    _rt_timer_remove(timer);
1c00d8f2 <rt_timer_stop+0x24> lw	a0,-20(s0)
1c00d8f6 <rt_timer_stop+0x28> jal	ra,1c00d5f2 <_rt_timer_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:451
    /* change status */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00d8fa <rt_timer_stop+0x2c> lw	a5,-20(s0)
1c00d8fe <rt_timer_stop+0x30> lbu	a5,9(a5)
1c00d902 <rt_timer_stop+0x34> andi	a5,a5,-2
1c00d904 <rt_timer_stop+0x36> andi	a4,a5,255
1c00d908 <rt_timer_stop+0x3a> lw	a5,-20(s0)
1c00d90c <rt_timer_stop+0x3e> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:454

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00d910 <rt_timer_stop+0x42> mv	a0,s1
1c00d912 <rt_timer_stop+0x44> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:456

    return RT_EOK;
1c00d916 <rt_timer_stop+0x48> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:457
}
1c00d918 <rt_timer_stop+0x4a> mv	a0,a5
1c00d91a <rt_timer_stop+0x4c> lw	ra,28(sp)
1c00d91c <rt_timer_stop+0x4e> lw	s0,24(sp)
1c00d91e <rt_timer_stop+0x50> lw	s1,20(sp)
1c00d920 <rt_timer_stop+0x52> addi	sp,sp,32
1c00d922 <rt_timer_stop+0x54> ret
rt_timer_control():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:469
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
1c00d924 <rt_timer_control> addi	sp,sp,-32
1c00d926 <rt_timer_control+0x2> sw	ra,28(sp)
1c00d928 <rt_timer_control+0x4> sw	s0,24(sp)
1c00d92a <rt_timer_control+0x6> addi	s0,sp,32
1c00d92c <rt_timer_control+0x8> sw	a0,-20(s0)
1c00d930 <rt_timer_control+0xc> sw	a1,-24(s0)
1c00d934 <rt_timer_control+0x10> sw	a2,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:476

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    level = rt_hw_interrupt_disable();
1c00d938 <rt_timer_control+0x14> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00d93c <rt_timer_control+0x18> mv	ra,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:477
    switch (cmd)
1c00d93e <rt_timer_control+0x1a> lw	a4,-24(s0)
1c00d942 <rt_timer_control+0x1e> li	a5,4
1c00d944 <rt_timer_control+0x20> bltu	a5,a4,1c00d9cc <rt_timer_control+0xa8>
1c00d948 <rt_timer_control+0x24> lw	a5,-24(s0)
1c00d94c <rt_timer_control+0x28> slli	a4,a5,0x2
1c00d950 <rt_timer_control+0x2c> lui	a5,0x1c010
1c00d954 <rt_timer_control+0x30> addi	a5,a5,1696 # 1c0106a0 <small_digits.2103+0x14>
1c00d958 <rt_timer_control+0x34> add	a5,a5,a4
1c00d95a <rt_timer_control+0x36> lw	a5,0(a5)
1c00d95c <rt_timer_control+0x38> jr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:480
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
1c00d95e <rt_timer_control+0x3a> lw	a5,-20(s0)
1c00d962 <rt_timer_control+0x3e> lw	a4,36(a5)
1c00d964 <rt_timer_control+0x40> lw	a5,-28(s0)
1c00d968 <rt_timer_control+0x44> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:481
        break;
1c00d96a <rt_timer_control+0x46> j	1c00d9ce <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:484

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
1c00d96c <rt_timer_control+0x48> lw	a5,-28(s0)
1c00d970 <rt_timer_control+0x4c> lw	a4,0(a5)
1c00d972 <rt_timer_control+0x4e> lw	a5,-20(s0)
1c00d976 <rt_timer_control+0x52> sw	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:485
        break;
1c00d978 <rt_timer_control+0x54> j	1c00d9ce <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:488

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
1c00d97a <rt_timer_control+0x56> lw	a5,-20(s0)
1c00d97e <rt_timer_control+0x5a> lbu	a5,9(a5)
1c00d982 <rt_timer_control+0x5e> andi	a5,a5,-3
1c00d984 <rt_timer_control+0x60> andi	a4,a5,255
1c00d988 <rt_timer_control+0x64> lw	a5,-20(s0)
1c00d98c <rt_timer_control+0x68> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:489
        break;
1c00d990 <rt_timer_control+0x6c> j	1c00d9ce <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:492

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
1c00d992 <rt_timer_control+0x6e> lw	a5,-20(s0)
1c00d996 <rt_timer_control+0x72> lbu	a5,9(a5)
1c00d99a <rt_timer_control+0x76> ori	a5,a5,2
1c00d99e <rt_timer_control+0x7a> andi	a4,a5,255
1c00d9a2 <rt_timer_control+0x7e> lw	a5,-20(s0)
1c00d9a6 <rt_timer_control+0x82> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:493
        break;
1c00d9aa <rt_timer_control+0x86> j	1c00d9ce <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:496

    case RT_TIMER_CTRL_GET_STATE:
        if(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
1c00d9ac <rt_timer_control+0x88> lw	a5,-20(s0)
1c00d9b0 <rt_timer_control+0x8c> lbu	a5,9(a5)
1c00d9b4 <rt_timer_control+0x90> andi	a5,a5,1
1c00d9b6 <rt_timer_control+0x92> beqz	a5,1c00d9c2 <rt_timer_control+0x9e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:499
        {
            /*timer is start and run*/
            *(rt_tick_t *)arg = RT_TIMER_FLAG_ACTIVATED;
1c00d9b8 <rt_timer_control+0x94> lw	a5,-28(s0)
1c00d9bc <rt_timer_control+0x98> li	a4,1
1c00d9be <rt_timer_control+0x9a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:506
        else
        {
            /*timer is stop*/
            *(rt_tick_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
        }
        break;
1c00d9c0 <rt_timer_control+0x9c> j	1c00d9ce <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:504
            *(rt_tick_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
1c00d9c2 <rt_timer_control+0x9e> lw	a5,-28(s0)
1c00d9c6 <rt_timer_control+0xa2> sw	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:506
        break;
1c00d9ca <rt_timer_control+0xa6> j	1c00d9ce <rt_timer_control+0xaa>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:509

    default:
        break;
1c00d9cc <rt_timer_control+0xa8> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:511
    }
    rt_hw_interrupt_enable(level);
1c00d9ce <rt_timer_control+0xaa> mv	a0,ra
1c00d9d0 <rt_timer_control+0xac> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:513

    return RT_EOK;
1c00d9d4 <rt_timer_control+0xb0> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:514
}
1c00d9d6 <rt_timer_control+0xb2> mv	a0,a5
1c00d9d8 <rt_timer_control+0xb4> lw	ra,28(sp)
1c00d9da <rt_timer_control+0xb6> lw	s0,24(sp)
1c00d9dc <rt_timer_control+0xb8> addi	sp,sp,32
1c00d9de <rt_timer_control+0xba> ret
rt_timer_check():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:523
 * corresponding timeout function will be invoked.
 *
 * @note this function shall be invoked in operating system timer interrupt.
 */
void rt_timer_check(void)
{
1c00d9e0 <rt_timer_check> addi	sp,sp,-32
1c00d9e2 <rt_timer_check+0x2> sw	ra,28(sp)
1c00d9e4 <rt_timer_check+0x4> sw	s0,24(sp)
1c00d9e6 <rt_timer_check+0x6> sw	s1,20(sp)
1c00d9e8 <rt_timer_check+0x8> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:529
    struct rt_timer *t;
    rt_tick_t current_tick;
    register rt_base_t level;
    rt_list_t list;

    rt_list_init(&list);
1c00d9ea <rt_timer_check+0xa> addi	a5,s0,-32
1c00d9ee <rt_timer_check+0xe> mv	a0,a5
1c00d9f0 <rt_timer_check+0x10> jal	ra,1c00d480 <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:533

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));

    current_tick = rt_tick_get();
1c00d9f4 <rt_timer_check+0x14> jal	ra,1c00b49c <rt_tick_get>
1c00d9f8 <rt_timer_check+0x18> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:536

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
1c00d9fc <rt_timer_check+0x1c> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00da00 <rt_timer_check+0x20> mv	s1,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:538

    while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
1c00da02 <rt_timer_check+0x22> j	1c00dad4 <rt_timer_check+0xf4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:540
    {
        t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
1c00da04 <rt_timer_check+0x24> lui	a5,0x1c017
1c00da08 <rt_timer_check+0x28> addi	a5,a5,-1052 # 1c016be4 <rt_timer_list>
1c00da0c <rt_timer_check+0x2c> lw	a5,0(a5)
1c00da0e <rt_timer_check+0x2e> addi	a5,a5,-20
1c00da10 <rt_timer_check+0x30> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:547

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
1c00da14 <rt_timer_check+0x34> lw	a5,-24(s0)
1c00da18 <rt_timer_check+0x38> lw	a5,40(a5)
1c00da1a <rt_timer_check+0x3a> lw	a4,-20(s0)
1c00da1e <rt_timer_check+0x3e> sub	a4,a4,a5
1c00da20 <rt_timer_check+0x40> lui	a5,0x80000
1c00da24 <rt_timer_check+0x44> xori	a5,a5,-2
1c00da28 <rt_timer_check+0x48> bltu	a5,a4,1c00dae6 <rt_timer_check+0x106>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:552
        {
            RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
1c00da2c <rt_timer_check+0x4c> lw	a0,-24(s0)
1c00da30 <rt_timer_check+0x50> jal	ra,1c00d5f2 <_rt_timer_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:553
            if (!(t->parent.flag & RT_TIMER_FLAG_PERIODIC))
1c00da34 <rt_timer_check+0x54> lw	a5,-24(s0)
1c00da38 <rt_timer_check+0x58> lbu	a5,9(a5) # 80000009 <__l2_shared_end+0x63fd87d9>
1c00da3c <rt_timer_check+0x5c> andi	a5,a5,2
1c00da3e <rt_timer_check+0x5e> bnez	a5,1c00da56 <rt_timer_check+0x76>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:555
            {
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00da40 <rt_timer_check+0x60> lw	a5,-24(s0)
1c00da44 <rt_timer_check+0x64> lbu	a5,9(a5)
1c00da48 <rt_timer_check+0x68> andi	a5,a5,-2
1c00da4a <rt_timer_check+0x6a> andi	a4,a5,255
1c00da4e <rt_timer_check+0x6e> lw	a5,-24(s0)
1c00da52 <rt_timer_check+0x72> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:558
            }
            /* add timer to temporary list  */
            rt_list_insert_after(&list, &(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
1c00da56 <rt_timer_check+0x76> lw	a5,-24(s0)
1c00da5a <rt_timer_check+0x7a> addi	a4,a5,20
1c00da5e <rt_timer_check+0x7e> addi	a5,s0,-32
1c00da62 <rt_timer_check+0x82> mv	a1,a4
1c00da64 <rt_timer_check+0x84> mv	a0,a5
1c00da66 <rt_timer_check+0x86> jal	ra,1c00d4a8 <rt_list_insert_after>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:560
            /* call timeout function */
            t->timeout_func(t->parameter);
1c00da6a <rt_timer_check+0x8a> lw	a5,-24(s0)
1c00da6e <rt_timer_check+0x8e> lw	a4,28(a5)
1c00da70 <rt_timer_check+0x90> lw	a5,-24(s0)
1c00da74 <rt_timer_check+0x94> lw	a5,32(a5)
1c00da76 <rt_timer_check+0x96> mv	a0,a5
1c00da78 <rt_timer_check+0x98> jalr	a4
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:563

            /* re-get tick */
            current_tick = rt_tick_get();
1c00da7a <rt_timer_check+0x9a> jal	ra,1c00b49c <rt_tick_get>
1c00da7e <rt_timer_check+0x9e> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:569

            RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* Check whether the timer object is detached or started again */
            if (rt_list_isempty(&list))
1c00da82 <rt_timer_check+0xa2> addi	a5,s0,-32
1c00da86 <rt_timer_check+0xa6> mv	a0,a5
1c00da88 <rt_timer_check+0xa8> jal	ra,1c00d52e <rt_list_isempty>
1c00da8c <rt_timer_check+0xac> mv	a5,a0
1c00da8e <rt_timer_check+0xae> beqz	a5,1c00da92 <rt_timer_check+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:571
            {
                continue;
1c00da90 <rt_timer_check+0xb0> j	1c00dad4 <rt_timer_check+0xf4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:573
            }
            rt_list_remove(&(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
1c00da92 <rt_timer_check+0xb2> lw	a5,-24(s0)
1c00da96 <rt_timer_check+0xb6> addi	a5,a5,20
1c00da98 <rt_timer_check+0xb8> mv	a0,a5
1c00da9a <rt_timer_check+0xba> jal	ra,1c00d4ea <rt_list_remove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:574
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
1c00da9e <rt_timer_check+0xbe> lw	a5,-24(s0)
1c00daa2 <rt_timer_check+0xc2> lbu	a5,9(a5)
1c00daa6 <rt_timer_check+0xc6> andi	a5,a5,2
1c00daa8 <rt_timer_check+0xc8> beqz	a5,1c00dad4 <rt_timer_check+0xf4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:575 (discriminator 1)
                (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
1c00daaa <rt_timer_check+0xca> lw	a5,-24(s0)
1c00daae <rt_timer_check+0xce> lbu	a5,9(a5)
1c00dab2 <rt_timer_check+0xd2> andi	a5,a5,1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:574 (discriminator 1)
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
1c00dab4 <rt_timer_check+0xd4> beqz	a5,1c00dad4 <rt_timer_check+0xf4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:578
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
1c00dab6 <rt_timer_check+0xd6> lw	a5,-24(s0)
1c00daba <rt_timer_check+0xda> lbu	a5,9(a5)
1c00dabe <rt_timer_check+0xde> andi	a5,a5,-2
1c00dac0 <rt_timer_check+0xe0> andi	a4,a5,255
1c00dac4 <rt_timer_check+0xe4> lw	a5,-24(s0)
1c00dac8 <rt_timer_check+0xe8> sb	a4,9(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:579
                rt_timer_start(t);
1c00dacc <rt_timer_check+0xec> lw	a0,-24(s0)
1c00dad0 <rt_timer_check+0xf0> jal	ra,1c00d6d0 <rt_timer_start>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:538
    while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
1c00dad4 <rt_timer_check+0xf4> lui	a5,0x1c017
1c00dad8 <rt_timer_check+0xf8> addi	a0,a5,-1052 # 1c016be4 <rt_timer_list>
1c00dadc <rt_timer_check+0xfc> jal	ra,1c00d52e <rt_list_isempty>
1c00dae0 <rt_timer_check+0x100> mv	a5,a0
1c00dae2 <rt_timer_check+0x102> beqz	a5,1c00da04 <rt_timer_check+0x24>
1c00dae4 <rt_timer_check+0x104> j	1c00dae8 <rt_timer_check+0x108>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:582
            }
        }
        else break;
1c00dae6 <rt_timer_check+0x106> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:586
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
1c00dae8 <rt_timer_check+0x108> mv	a0,s1
1c00daea <rt_timer_check+0x10a> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:589

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
}
1c00daee <rt_timer_check+0x10e> nop
1c00daf0 <rt_timer_check+0x110> lw	ra,28(sp)
1c00daf2 <rt_timer_check+0x112> lw	s0,24(sp)
1c00daf4 <rt_timer_check+0x114> lw	s1,20(sp)
1c00daf6 <rt_timer_check+0x116> addi	sp,sp,32
1c00daf8 <rt_timer_check+0x118> ret
rt_system_timer_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:722
 * @ingroup SystemInit
 *
 * This function will initialize system timer
 */
void rt_system_timer_init(void)
{
1c00dafa <rt_system_timer_init> addi	sp,sp,-32
1c00dafc <rt_system_timer_init+0x2> sw	ra,28(sp)
1c00dafe <rt_system_timer_init+0x4> sw	s0,24(sp)
1c00db00 <rt_system_timer_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:725
    int i;

    for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
1c00db02 <rt_system_timer_init+0x8> sw	zero,-20(s0)
1c00db06 <rt_system_timer_init+0xc> j	1c00db2a <rt_system_timer_init+0x30>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:727 (discriminator 3)
    {
        rt_list_init(rt_timer_list + i);
1c00db08 <rt_system_timer_init+0xe> lw	a5,-20(s0)
1c00db0c <rt_system_timer_init+0x12> slli	a4,a5,0x3
1c00db10 <rt_system_timer_init+0x16> lui	a5,0x1c017
1c00db14 <rt_system_timer_init+0x1a> addi	a5,a5,-1052 # 1c016be4 <rt_timer_list>
1c00db18 <rt_system_timer_init+0x1e> add	a5,a5,a4
1c00db1a <rt_system_timer_init+0x20> mv	a0,a5
1c00db1c <rt_system_timer_init+0x22> jal	ra,1c00d480 <rt_list_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:725 (discriminator 3)
    for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
1c00db20 <rt_system_timer_init+0x26> lw	a5,-20(s0)
1c00db24 <rt_system_timer_init+0x2a> addi	a5,a5,1
1c00db26 <rt_system_timer_init+0x2c> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:725 (discriminator 1)
1c00db2a <rt_system_timer_init+0x30> lw	a5,-20(s0)
1c00db2e <rt_system_timer_init+0x34> beqz	a5,1c00db08 <rt_system_timer_init+0xe>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:729
    }
}
1c00db30 <rt_system_timer_init+0x36> nop
1c00db32 <rt_system_timer_init+0x38> lw	ra,28(sp)
1c00db34 <rt_system_timer_init+0x3a> lw	s0,24(sp)
1c00db36 <rt_system_timer_init+0x3c> addi	sp,sp,32
1c00db38 <rt_system_timer_init+0x3e> ret
rt_system_timer_thread_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:737
 * @ingroup SystemInit
 *
 * This function will initialize system timer thread
 */
void rt_system_timer_thread_init(void)
{
1c00db3a <rt_system_timer_thread_init> addi	sp,sp,-16
1c00db3c <rt_system_timer_thread_init+0x2> sw	s0,12(sp)
1c00db3e <rt_system_timer_thread_init+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/timer.c:761
                   10);

    /* startup */
    rt_thread_startup(&timer_thread);
#endif
}
1c00db40 <rt_system_timer_thread_init+0x6> nop
1c00db42 <rt_system_timer_thread_init+0x8> lw	s0,12(sp)
1c00db44 <rt_system_timer_thread_init+0xa> addi	sp,sp,16
1c00db46 <rt_system_timer_thread_init+0xc> ret
rti_start():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:57
 * ...
 * INIT_APP_EXPORT(fn);
 * etc.
 */
static int rti_start(void)
{
1c00db48 <rti_start> addi	sp,sp,-16
1c00db4a <rti_start+0x2> sw	s0,12(sp)
1c00db4c <rti_start+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:58
    return 0;
1c00db4e <rti_start+0x6> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:59
}
1c00db50 <rti_start+0x8> mv	a0,a5
1c00db52 <rti_start+0xa> lw	s0,12(sp)
1c00db54 <rti_start+0xc> addi	sp,sp,16
1c00db56 <rti_start+0xe> ret
rti_board_start():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:63
INIT_EXPORT(rti_start, "0");

static int rti_board_start(void)
{
1c00db58 <rti_board_start> addi	sp,sp,-16
1c00db5a <rti_board_start+0x2> sw	s0,12(sp)
1c00db5c <rti_board_start+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:64
    return 0;
1c00db5e <rti_board_start+0x6> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:65
}
1c00db60 <rti_board_start+0x8> mv	a0,a5
1c00db62 <rti_board_start+0xa> lw	s0,12(sp)
1c00db64 <rti_board_start+0xc> addi	sp,sp,16
1c00db66 <rti_board_start+0xe> ret
rti_board_end():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:69
INIT_EXPORT(rti_board_start, "0.end");

static int rti_board_end(void)
{
1c00db68 <rti_board_end> addi	sp,sp,-16
1c00db6a <rti_board_end+0x2> sw	s0,12(sp)
1c00db6c <rti_board_end+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:70
    return 0;
1c00db6e <rti_board_end+0x6> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:71
}
1c00db70 <rti_board_end+0x8> mv	a0,a5
1c00db72 <rti_board_end+0xa> lw	s0,12(sp)
1c00db74 <rti_board_end+0xc> addi	sp,sp,16
1c00db76 <rti_board_end+0xe> ret
rti_end():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:75
INIT_EXPORT(rti_board_end, "1.end");

static int rti_end(void)
{
1c00db78 <rti_end> addi	sp,sp,-16
1c00db7a <rti_end+0x2> sw	s0,12(sp)
1c00db7c <rti_end+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:76
    return 0;
1c00db7e <rti_end+0x6> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:77
}
1c00db80 <rti_end+0x8> mv	a0,a5
1c00db82 <rti_end+0xa> lw	s0,12(sp)
1c00db84 <rti_end+0xc> addi	sp,sp,16
1c00db86 <rti_end+0xe> ret
rt_components_board_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:84

/**
 * RT-Thread Components Initialization for board
 */
void rt_components_board_init(void)
{
1c00db88 <rt_components_board_init> addi	sp,sp,-32
1c00db8a <rt_components_board_init+0x2> sw	ra,28(sp)
1c00db8c <rt_components_board_init+0x4> sw	s0,24(sp)
1c00db8e <rt_components_board_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:97
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
1c00db90 <rt_components_board_init+0x8> lui	a5,0x1c010
1c00db94 <rt_components_board_init+0xc> addi	a5,a5,788 # 1c010314 <__rt_init_rti_board_start>
1c00db98 <rt_components_board_init+0x10> sw	a5,-20(s0)
1c00db9c <rt_components_board_init+0x14> j	1c00dbb0 <rt_components_board_init+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:99 (discriminator 3)
    {
        (*fn_ptr)();
1c00db9e <rt_components_board_init+0x16> lw	a5,-20(s0)
1c00dba2 <rt_components_board_init+0x1a> lw	a5,0(a5)
1c00dba4 <rt_components_board_init+0x1c> jalr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:97 (discriminator 3)
    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
1c00dba6 <rt_components_board_init+0x1e> lw	a5,-20(s0)
1c00dbaa <rt_components_board_init+0x22> addi	a5,a5,4
1c00dbac <rt_components_board_init+0x24> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:97 (discriminator 1)
1c00dbb0 <rt_components_board_init+0x28> lw	a4,-20(s0)
1c00dbb4 <rt_components_board_init+0x2c> lui	a5,0x1c010
1c00dbb8 <rt_components_board_init+0x30> addi	a5,a5,792 # 1c010318 <__rt_init_rti_board_end>
1c00dbbc <rt_components_board_init+0x34> bltu	a4,a5,1c00db9e <rt_components_board_init+0x16>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:102
    }
#endif
}
1c00dbc0 <rt_components_board_init+0x38> nop
1c00dbc2 <rt_components_board_init+0x3a> lw	ra,28(sp)
1c00dbc4 <rt_components_board_init+0x3c> lw	s0,24(sp)
1c00dbc6 <rt_components_board_init+0x3e> addi	sp,sp,32
1c00dbc8 <rt_components_board_init+0x40> ret
rt_components_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:108

/**
 * RT-Thread Components Initialization
 */
void rt_components_init(void)
{
1c00dbca <rt_components_init> addi	sp,sp,-32
1c00dbcc <rt_components_init+0x2> sw	ra,28(sp)
1c00dbce <rt_components_init+0x4> sw	s0,24(sp)
1c00dbd0 <rt_components_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:123
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
1c00dbd2 <rt_components_init+0x8> lui	a5,0x1c010
1c00dbd6 <rt_components_init+0xc> addi	a5,a5,792 # 1c010318 <__rt_init_rti_board_end>
1c00dbda <rt_components_init+0x10> sw	a5,-20(s0)
1c00dbde <rt_components_init+0x14> j	1c00dbf2 <rt_components_init+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:125 (discriminator 3)
    {
        (*fn_ptr)();
1c00dbe0 <rt_components_init+0x16> lw	a5,-20(s0)
1c00dbe4 <rt_components_init+0x1a> lw	a5,0(a5)
1c00dbe6 <rt_components_init+0x1c> jalr	a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:123 (discriminator 3)
    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
1c00dbe8 <rt_components_init+0x1e> lw	a5,-20(s0)
1c00dbec <rt_components_init+0x22> addi	a5,a5,4
1c00dbee <rt_components_init+0x24> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:123 (discriminator 1)
1c00dbf2 <rt_components_init+0x28> lw	a4,-20(s0)
1c00dbf6 <rt_components_init+0x2c> lui	a5,0x1c010
1c00dbfa <rt_components_init+0x30> addi	a5,a5,804 # 1c010324 <__rt_init_rti_end>
1c00dbfe <rt_components_init+0x34> bltu	a4,a5,1c00dbe0 <rt_components_init+0x16>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:128
    }
#endif
}
1c00dc02 <rt_components_init+0x38> nop
1c00dc04 <rt_components_init+0x3a> lw	ra,28(sp)
1c00dc06 <rt_components_init+0x3c> lw	s0,24(sp)
1c00dc08 <rt_components_init+0x3e> addi	sp,sp,32
1c00dc0a <rt_components_init+0x40> ret
entry():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:159
    return 0;
}
#elif defined(__GNUC__)
/* Add -eentry to arm-none-eabi-gcc argument */
int entry(void)
{
1c00dc0c <entry> addi	sp,sp,-16
1c00dc0e <entry+0x2> sw	ra,12(sp)
1c00dc10 <entry+0x4> sw	s0,8(sp)
1c00dc12 <entry+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:160
    rtthread_startup();
1c00dc14 <entry+0x8> jal	1c00dc7a <rtthread_startup>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:161
    return 0;
1c00dc16 <entry+0xa> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:162
}
1c00dc18 <entry+0xc> mv	a0,a5
1c00dc1a <entry+0xe> lw	ra,12(sp)
1c00dc1c <entry+0x10> lw	s0,8(sp)
1c00dc1e <entry+0x12> addi	sp,sp,16
1c00dc20 <entry+0x14> ret
main_thread_entry():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:174
struct rt_thread main_thread;
#endif

/* the system main thread */
void main_thread_entry(void *parameter)
{
1c00dc22 <main_thread_entry> addi	sp,sp,-32
1c00dc24 <main_thread_entry+0x2> sw	ra,28(sp)
1c00dc26 <main_thread_entry+0x4> sw	s0,24(sp)
1c00dc28 <main_thread_entry+0x6> addi	s0,sp,32
1c00dc2a <main_thread_entry+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:180
    extern int main(void);
    extern int $Super$$main(void);

#ifdef RT_USING_COMPONENTS_INIT
    /* RT-Thread components initialization */
    rt_components_init();
1c00dc2e <main_thread_entry+0xc> jal	1c00dbca <rt_components_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:186
#endif
    /* invoke system main function */
#if defined(__CC_ARM) || defined(__CLANG_ARM)
    $Super$$main(); /* for ARMCC. */
#elif defined(__ICCARM__) || defined(__GNUC__)
    main();
1c00dc30 <main_thread_entry+0xe> jal	ra,1c00b3ea <main>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:188
#endif
}
1c00dc34 <main_thread_entry+0x12> nop
1c00dc36 <main_thread_entry+0x14> lw	ra,28(sp)
1c00dc38 <main_thread_entry+0x16> lw	s0,24(sp)
1c00dc3a <main_thread_entry+0x18> addi	sp,sp,32
1c00dc3c <main_thread_entry+0x1a> ret
rt_application_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:195
//ALIGN(8)
//static rt_uint8_t main_stack[RT_MAIN_THREAD_STACK_SIZE];
//struct rt_thread main_thread;

void rt_application_init(void)
{
1c00dc3e <rt_application_init> addi	sp,sp,-32
1c00dc40 <rt_application_init+0x2> sw	ra,28(sp)
1c00dc42 <rt_application_init+0x4> sw	s0,24(sp)
1c00dc44 <rt_application_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:199
    rt_thread_t tid;

#ifdef RT_USING_HEAP
    tid = rt_thread_create("main", main_thread_entry, RT_NULL,
1c00dc46 <rt_application_init+0x8> li	a5,20
1c00dc48 <rt_application_init+0xa> li	a4,10
1c00dc4a <rt_application_init+0xc> li	a3,1024
1c00dc4e <rt_application_init+0x10> li	a2,0
1c00dc50 <rt_application_init+0x12> lui	a1,0x1c00e
1c00dc54 <rt_application_init+0x16> addi	a1,a1,-990 # 1c00dc22 <main_thread_entry>
1c00dc58 <rt_application_init+0x1a> lui	a0,0x1c010
1c00dc5c <rt_application_init+0x1e> addi	a0,a0,1716 # 1c0106b4 <small_digits.2103+0x28>
1c00dc60 <rt_application_init+0x22> jal	ra,1c00d1c0 <rt_thread_create>
1c00dc64 <rt_application_init+0x26> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:214

    /* if not define RT_USING_HEAP, using to eliminate the warning */
    (void)result;
#endif

    rt_thread_startup(tid);
1c00dc68 <rt_application_init+0x2a> lw	a0,-20(s0)
1c00dc6c <rt_application_init+0x2e> jal	ra,1c00d166 <rt_thread_startup>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:215
}
1c00dc70 <rt_application_init+0x32> nop
1c00dc72 <rt_application_init+0x34> lw	ra,28(sp)
1c00dc74 <rt_application_init+0x36> lw	s0,24(sp)
1c00dc76 <rt_application_init+0x38> addi	sp,sp,32
1c00dc78 <rt_application_init+0x3a> ret
rtthread_startup():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:218

int rtthread_startup(void)
{
1c00dc7a <rtthread_startup> addi	sp,sp,-16
1c00dc7c <rtthread_startup+0x2> sw	ra,12(sp)
1c00dc7e <rtthread_startup+0x4> sw	s0,8(sp)
1c00dc80 <rtthread_startup+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:219
    rt_hw_interrupt_disable();
1c00dc82 <rtthread_startup+0x8> jal	ra,1c0080ce <rt_hw_interrupt_disable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:224

    /* board level initialization
     * NOTE: please initialize heap inside board initialization.
     */
    rt_hw_board_init();
1c00dc86 <rtthread_startup+0xc> jal	ra,1c00b3fc <rt_hw_board_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:227

    /* show RT-Thread version */
    rt_show_version();
1c00dc8a <rtthread_startup+0x10> jal	ra,1c00bc86 <rt_show_version>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:230

    /* timer system initialization */
    rt_system_timer_init();
1c00dc8e <rtthread_startup+0x14> jal	ra,1c00dafa <rt_system_timer_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:233

    /* scheduler system initialization */
    rt_system_scheduler_init();
1c00dc92 <rtthread_startup+0x18> jal	ra,1c00cb0e <rt_system_scheduler_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:236

    /* create init_thread */
    rt_application_init();
1c00dc96 <rtthread_startup+0x1c> jal	1c00dc3e <rt_application_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:239

    /* timer thread initialization */
    rt_system_timer_thread_init();
1c00dc98 <rtthread_startup+0x1e> jal	ra,1c00db3a <rt_system_timer_thread_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:242

    /* idle thread initialization */
    rt_thread_idle_init();
1c00dc9c <rtthread_startup+0x22> jal	ra,1c00b5f2 <rt_thread_idle_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:245

    /* start scheduler */
    rt_system_scheduler_start();
1c00dca0 <rtthread_startup+0x26> jal	ra,1c00cb6e <rt_system_scheduler_start>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:248

    /* never reach here */
    return 0;
1c00dca4 <rtthread_startup+0x2a> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/components.c:249
}
1c00dca6 <rtthread_startup+0x2c> mv	a0,a5
1c00dca8 <rtthread_startup+0x2e> lw	ra,12(sp)
1c00dcaa <rtthread_startup+0x30> lw	s0,8(sp)
1c00dcac <rtthread_startup+0x32> addi	sp,sp,16
1c00dcae <rtthread_startup+0x34> ret
plug_holes():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:157
    }
}
#endif

static void plug_holes(struct heap_mem *mem)
{
1c00dcb0 <plug_holes> addi	sp,sp,-48
1c00dcb2 <plug_holes+0x2> sw	s0,44(sp)
1c00dcb4 <plug_holes+0x4> addi	s0,sp,48
1c00dcb6 <plug_holes+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:166
    RT_ASSERT((rt_uint8_t *)mem >= heap_ptr);
    RT_ASSERT((rt_uint8_t *)mem < (rt_uint8_t *)heap_end);
    RT_ASSERT(mem->used == 0);

    /* plug hole forward */
    nmem = (struct heap_mem *)&heap_ptr[mem->next];
1c00dcba <plug_holes+0xa> lui	a5,0x1c017
1c00dcbe <plug_holes+0xe> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00dcc2 <plug_holes+0x12> lw	a5,-36(s0)
1c00dcc6 <plug_holes+0x16> lw	a5,4(a5)
1c00dcc8 <plug_holes+0x18> add	a5,a5,a4
1c00dcca <plug_holes+0x1a> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:167
    if (mem != nmem &&
1c00dcce <plug_holes+0x1e> lw	a4,-36(s0)
1c00dcd2 <plug_holes+0x22> lw	a5,-20(s0)
1c00dcd6 <plug_holes+0x26> beq	a4,a5,1c00dd40 <plug_holes+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:168 (discriminator 1)
        nmem->used == 0 &&
1c00dcda <plug_holes+0x2a> lw	a5,-20(s0)
1c00dcde <plug_holes+0x2e> lhu	a5,2(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:167 (discriminator 1)
    if (mem != nmem &&
1c00dce2 <plug_holes+0x32> bnez	a5,1c00dd40 <plug_holes+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:169
        (rt_uint8_t *)nmem != (rt_uint8_t *)heap_end)
1c00dce4 <plug_holes+0x34> lui	a5,0x1c017
1c00dce8 <plug_holes+0x38> lw	a5,-1036(a5) # 1c016bf4 <heap_end>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:168
        nmem->used == 0 &&
1c00dcec <plug_holes+0x3c> lw	a4,-20(s0)
1c00dcf0 <plug_holes+0x40> beq	a4,a5,1c00dd40 <plug_holes+0x90>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:174
    {
        /* if mem->next is unused and not end of heap_ptr,
         * combine mem and mem->next
         */
        if (lfree == nmem)
1c00dcf4 <plug_holes+0x44> lui	a5,0x1c017
1c00dcf8 <plug_holes+0x48> lw	a5,-1032(a5) # 1c016bf8 <lfree>
1c00dcfc <plug_holes+0x4c> lw	a4,-20(s0)
1c00dd00 <plug_holes+0x50> bne	a4,a5,1c00dd10 <plug_holes+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:176
        {
            lfree = mem;
1c00dd04 <plug_holes+0x54> lui	a5,0x1c017
1c00dd08 <plug_holes+0x58> lw	a4,-36(s0)
1c00dd0c <plug_holes+0x5c> sw	a4,-1032(a5) # 1c016bf8 <lfree>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:178
        }
        mem->next = nmem->next;
1c00dd10 <plug_holes+0x60> lw	a5,-20(s0)
1c00dd14 <plug_holes+0x64> lw	a4,4(a5)
1c00dd16 <plug_holes+0x66> lw	a5,-36(s0)
1c00dd1a <plug_holes+0x6a> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:179
        ((struct heap_mem *)&heap_ptr[nmem->next])->prev = (rt_uint8_t *)mem - heap_ptr;
1c00dd1c <plug_holes+0x6c> lw	a5,-36(s0)
1c00dd20 <plug_holes+0x70> lui	a4,0x1c017
1c00dd24 <plug_holes+0x74> lw	a4,-1040(a4) # 1c016bf0 <heap_ptr>
1c00dd28 <plug_holes+0x78> sub	a3,a5,a4
1c00dd2c <plug_holes+0x7c> lui	a5,0x1c017
1c00dd30 <plug_holes+0x80> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00dd34 <plug_holes+0x84> lw	a5,-20(s0)
1c00dd38 <plug_holes+0x88> lw	a5,4(a5)
1c00dd3a <plug_holes+0x8a> add	a5,a5,a4
1c00dd3c <plug_holes+0x8c> mv	a4,a3
1c00dd3e <plug_holes+0x8e> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:183
    }

    /* plug hole backward */
    pmem = (struct heap_mem *)&heap_ptr[mem->prev];
1c00dd40 <plug_holes+0x90> lui	a5,0x1c017
1c00dd44 <plug_holes+0x94> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00dd48 <plug_holes+0x98> lw	a5,-36(s0)
1c00dd4c <plug_holes+0x9c> lw	a5,8(a5)
1c00dd4e <plug_holes+0x9e> add	a5,a5,a4
1c00dd50 <plug_holes+0xa0> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:184
    if (pmem != mem && pmem->used == 0)
1c00dd54 <plug_holes+0xa4> lw	a4,-24(s0)
1c00dd58 <plug_holes+0xa8> lw	a5,-36(s0)
1c00dd5c <plug_holes+0xac> beq	a4,a5,1c00ddb6 <plug_holes+0x106>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:184 (discriminator 1)
1c00dd60 <plug_holes+0xb0> lw	a5,-24(s0)
1c00dd64 <plug_holes+0xb4> lhu	a5,2(a5)
1c00dd68 <plug_holes+0xb8> bnez	a5,1c00ddb6 <plug_holes+0x106>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:187
    {
        /* if mem->prev is unused, combine mem and mem->prev */
        if (lfree == mem)
1c00dd6a <plug_holes+0xba> lui	a5,0x1c017
1c00dd6e <plug_holes+0xbe> lw	a5,-1032(a5) # 1c016bf8 <lfree>
1c00dd72 <plug_holes+0xc2> lw	a4,-36(s0)
1c00dd76 <plug_holes+0xc6> bne	a4,a5,1c00dd86 <plug_holes+0xd6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:189
        {
            lfree = pmem;
1c00dd7a <plug_holes+0xca> lui	a5,0x1c017
1c00dd7e <plug_holes+0xce> lw	a4,-24(s0)
1c00dd82 <plug_holes+0xd2> sw	a4,-1032(a5) # 1c016bf8 <lfree>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:191
        }
        pmem->next = mem->next;
1c00dd86 <plug_holes+0xd6> lw	a5,-36(s0)
1c00dd8a <plug_holes+0xda> lw	a4,4(a5)
1c00dd8c <plug_holes+0xdc> lw	a5,-24(s0)
1c00dd90 <plug_holes+0xe0> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:192
        ((struct heap_mem *)&heap_ptr[mem->next])->prev = (rt_uint8_t *)pmem - heap_ptr;
1c00dd92 <plug_holes+0xe2> lw	a5,-24(s0)
1c00dd96 <plug_holes+0xe6> lui	a4,0x1c017
1c00dd9a <plug_holes+0xea> lw	a4,-1040(a4) # 1c016bf0 <heap_ptr>
1c00dd9e <plug_holes+0xee> sub	a3,a5,a4
1c00dda2 <plug_holes+0xf2> lui	a5,0x1c017
1c00dda6 <plug_holes+0xf6> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00ddaa <plug_holes+0xfa> lw	a5,-36(s0)
1c00ddae <plug_holes+0xfe> lw	a5,4(a5)
1c00ddb0 <plug_holes+0x100> add	a5,a5,a4
1c00ddb2 <plug_holes+0x102> mv	a4,a3
1c00ddb4 <plug_holes+0x104> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:194
    }
}
1c00ddb6 <plug_holes+0x106> nop
1c00ddb8 <plug_holes+0x108> lw	s0,44(sp)
1c00ddba <plug_holes+0x10a> addi	sp,sp,48
1c00ddbc <plug_holes+0x10c> ret
rt_system_heap_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:205
 *
 * @param begin_addr the beginning address of system heap memory.
 * @param end_addr the end address of system heap memory.
 */
void rt_system_heap_init(void *begin_addr, void *end_addr)
{
1c00ddbe <rt_system_heap_init> addi	sp,sp,-48
1c00ddc0 <rt_system_heap_init+0x2> sw	ra,44(sp)
1c00ddc2 <rt_system_heap_init+0x4> sw	s0,40(sp)
1c00ddc4 <rt_system_heap_init+0x6> addi	s0,sp,48
1c00ddc6 <rt_system_heap_init+0x8> sw	a0,-36(s0)
1c00ddca <rt_system_heap_init+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:207
    struct heap_mem *mem;
    rt_ubase_t begin_align = RT_ALIGN((rt_ubase_t)begin_addr, RT_ALIGN_SIZE);
1c00ddce <rt_system_heap_init+0x10> lw	a5,-36(s0)
1c00ddd2 <rt_system_heap_init+0x14> addi	a5,a5,3
1c00ddd4 <rt_system_heap_init+0x16> andi	a5,a5,-4
1c00ddd6 <rt_system_heap_init+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:208
    rt_ubase_t end_align   = RT_ALIGN_DOWN((rt_ubase_t)end_addr, RT_ALIGN_SIZE);
1c00ddda <rt_system_heap_init+0x1c> lw	a5,-40(s0)
1c00ddde <rt_system_heap_init+0x20> andi	a5,a5,-4
1c00dde0 <rt_system_heap_init+0x22> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:213

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* alignment addr */
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
1c00dde4 <rt_system_heap_init+0x26> lw	a4,-24(s0)
1c00dde8 <rt_system_heap_init+0x2a> li	a5,24
1c00ddea <rt_system_heap_init+0x2c> bgeu	a5,a4,1c00dee6 <rt_system_heap_init+0x128>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:214 (discriminator 1)
        ((end_align - 2 * SIZEOF_STRUCT_MEM) >= begin_align))
1c00ddee <rt_system_heap_init+0x30> lw	a5,-24(s0)
1c00ddf2 <rt_system_heap_init+0x34> addi	a5,a5,-24
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:213 (discriminator 1)
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
1c00ddf4 <rt_system_heap_init+0x36> lw	a4,-20(s0)
1c00ddf8 <rt_system_heap_init+0x3a> bltu	a5,a4,1c00dee6 <rt_system_heap_init+0x128>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:217
    {
        /* calculate the aligned memory size */
        mem_size_aligned = end_align - begin_align - 2 * SIZEOF_STRUCT_MEM;
1c00ddfc <rt_system_heap_init+0x3e> lw	a4,-24(s0)
1c00de00 <rt_system_heap_init+0x42> lw	a5,-20(s0)
1c00de04 <rt_system_heap_init+0x46> sub	a5,a4,a5
1c00de08 <rt_system_heap_init+0x4a> addi	a4,a5,-24
1c00de0c <rt_system_heap_init+0x4e> lui	a5,0x1c017
1c00de10 <rt_system_heap_init+0x52> sw	a4,-1028(a5) # 1c016bfc <mem_size_aligned>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:228

        return;
    }

    /* point to begin address of heap */
    heap_ptr = (rt_uint8_t *)begin_align;
1c00de14 <rt_system_heap_init+0x56> lw	a4,-20(s0)
1c00de18 <rt_system_heap_init+0x5a> lui	a5,0x1c017
1c00de1c <rt_system_heap_init+0x5e> sw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:234

    RT_DEBUG_LOG(RT_DEBUG_MEM, ("mem init, heap begin address 0x%x, size %d\n",
                                (rt_ubase_t)heap_ptr, mem_size_aligned));

    /* initialize the start of the heap */
    mem        = (struct heap_mem *)heap_ptr;
1c00de20 <rt_system_heap_init+0x62> lui	a5,0x1c017
1c00de24 <rt_system_heap_init+0x66> lw	a5,-1040(a5) # 1c016bf0 <heap_ptr>
1c00de28 <rt_system_heap_init+0x6a> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:235
    mem->magic = HEAP_MAGIC;
1c00de2c <rt_system_heap_init+0x6e> lw	a5,-28(s0)
1c00de30 <rt_system_heap_init+0x72> lui	a4,0x2
1c00de32 <rt_system_heap_init+0x74> addi	a4,a4,-352 # 00001ea0 <__stack_size+0x16a0>
1c00de36 <rt_system_heap_init+0x78> sh	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:236
    mem->next  = mem_size_aligned + SIZEOF_STRUCT_MEM;
1c00de3a <rt_system_heap_init+0x7c> lui	a5,0x1c017
1c00de3e <rt_system_heap_init+0x80> lw	a5,-1028(a5) # 1c016bfc <mem_size_aligned>
1c00de42 <rt_system_heap_init+0x84> addi	a4,a5,12
1c00de46 <rt_system_heap_init+0x88> lw	a5,-28(s0)
1c00de4a <rt_system_heap_init+0x8c> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:237
    mem->prev  = 0;
1c00de4c <rt_system_heap_init+0x8e> lw	a5,-28(s0)
1c00de50 <rt_system_heap_init+0x92> sw	zero,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:238
    mem->used  = 0;
1c00de54 <rt_system_heap_init+0x96> lw	a5,-28(s0)
1c00de58 <rt_system_heap_init+0x9a> sh	zero,2(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:244
#ifdef RT_USING_MEMTRACE
    rt_mem_setname(mem, "INIT");
#endif

    /* initialize the end of the heap */
    heap_end        = (struct heap_mem *)&heap_ptr[mem->next];
1c00de5c <rt_system_heap_init+0x9e> lui	a5,0x1c017
1c00de60 <rt_system_heap_init+0xa2> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00de64 <rt_system_heap_init+0xa6> lw	a5,-28(s0)
1c00de68 <rt_system_heap_init+0xaa> lw	a5,4(a5)
1c00de6a <rt_system_heap_init+0xac> add	a4,a4,a5
1c00de6c <rt_system_heap_init+0xae> lui	a5,0x1c017
1c00de70 <rt_system_heap_init+0xb2> sw	a4,-1036(a5) # 1c016bf4 <heap_end>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:245
    heap_end->magic = HEAP_MAGIC;
1c00de74 <rt_system_heap_init+0xb6> lui	a5,0x1c017
1c00de78 <rt_system_heap_init+0xba> lw	a5,-1036(a5) # 1c016bf4 <heap_end>
1c00de7c <rt_system_heap_init+0xbe> lui	a4,0x2
1c00de7e <rt_system_heap_init+0xc0> addi	a4,a4,-352 # 00001ea0 <__stack_size+0x16a0>
1c00de82 <rt_system_heap_init+0xc4> sh	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:246
    heap_end->used  = 1;
1c00de86 <rt_system_heap_init+0xc8> lui	a5,0x1c017
1c00de8a <rt_system_heap_init+0xcc> lw	a5,-1036(a5) # 1c016bf4 <heap_end>
1c00de8e <rt_system_heap_init+0xd0> li	a4,1
1c00de90 <rt_system_heap_init+0xd2> sh	a4,2(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:247
    heap_end->next  = mem_size_aligned + SIZEOF_STRUCT_MEM;
1c00de94 <rt_system_heap_init+0xd6> lui	a5,0x1c017
1c00de98 <rt_system_heap_init+0xda> lw	a4,-1028(a5) # 1c016bfc <mem_size_aligned>
1c00de9c <rt_system_heap_init+0xde> lui	a5,0x1c017
1c00dea0 <rt_system_heap_init+0xe2> lw	a5,-1036(a5) # 1c016bf4 <heap_end>
1c00dea4 <rt_system_heap_init+0xe6> addi	a4,a4,12
1c00dea6 <rt_system_heap_init+0xe8> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:248
    heap_end->prev  = mem_size_aligned + SIZEOF_STRUCT_MEM;
1c00dea8 <rt_system_heap_init+0xea> lui	a5,0x1c017
1c00deac <rt_system_heap_init+0xee> lw	a4,-1028(a5) # 1c016bfc <mem_size_aligned>
1c00deb0 <rt_system_heap_init+0xf2> lui	a5,0x1c017
1c00deb4 <rt_system_heap_init+0xf6> lw	a5,-1036(a5) # 1c016bf4 <heap_end>
1c00deb8 <rt_system_heap_init+0xfa> addi	a4,a4,12
1c00deba <rt_system_heap_init+0xfc> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:253
#ifdef RT_USING_MEMTRACE
    rt_mem_setname(heap_end, "INIT");
#endif

    rt_sem_init(&heap_sem, "heap", 1, RT_IPC_FLAG_FIFO);
1c00debc <rt_system_heap_init+0xfe> li	a3,0
1c00debe <rt_system_heap_init+0x100> li	a2,1
1c00dec0 <rt_system_heap_init+0x102> lui	a5,0x1c010
1c00dec4 <rt_system_heap_init+0x106> addi	a1,a5,1724 # 1c0106bc <small_digits.2103+0x30>
1c00dec8 <rt_system_heap_init+0x10a> lui	a5,0x1c017
1c00decc <rt_system_heap_init+0x10e> addi	a0,a5,-1344 # 1c016ac0 <heap_sem>
1c00ded0 <rt_system_heap_init+0x112> jal	ra,1c00b7de <rt_sem_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:256

    /* initialize the lowest-free pointer to the start of the heap */
    lfree = (struct heap_mem *)heap_ptr;
1c00ded4 <rt_system_heap_init+0x116> lui	a5,0x1c017
1c00ded8 <rt_system_heap_init+0x11a> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00dedc <rt_system_heap_init+0x11e> lui	a5,0x1c017
1c00dee0 <rt_system_heap_init+0x122> sw	a4,-1032(a5) # 1c016bf8 <lfree>
1c00dee4 <rt_system_heap_init+0x126> j	1c00df00 <rt_system_heap_init+0x142>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:221
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
1c00dee6 <rt_system_heap_init+0x128> lw	a5,-36(s0)
1c00deea <rt_system_heap_init+0x12c> lw	a4,-40(s0)
1c00deee <rt_system_heap_init+0x130> mv	a2,a4
1c00def0 <rt_system_heap_init+0x132> mv	a1,a5
1c00def2 <rt_system_heap_init+0x134> lui	a5,0x1c010
1c00def6 <rt_system_heap_init+0x138> addi	a0,a5,1732 # 1c0106c4 <small_digits.2103+0x38>
1c00defa <rt_system_heap_init+0x13c> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:224
        return;
1c00defe <rt_system_heap_init+0x140> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:257
}
1c00df00 <rt_system_heap_init+0x142> lw	ra,44(sp)
1c00df02 <rt_system_heap_init+0x144> lw	s0,40(sp)
1c00df04 <rt_system_heap_init+0x146> addi	sp,sp,48
1c00df06 <rt_system_heap_init+0x148> ret
rt_malloc():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:273
 * @param size is the minimum size of the requested block in bytes.
 *
 * @return pointer to allocated memory or NULL if no free memory was found.
 */
void *rt_malloc(rt_size_t size)
{
1c00df08 <rt_malloc> addi	sp,sp,-48
1c00df0a <rt_malloc+0x2> sw	ra,44(sp)
1c00df0c <rt_malloc+0x4> sw	s0,40(sp)
1c00df0e <rt_malloc+0x6> addi	s0,sp,48
1c00df10 <rt_malloc+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:277
    rt_size_t ptr, ptr2;
    struct heap_mem *mem, *mem2;

    if (size == 0)
1c00df14 <rt_malloc+0xc> lw	a5,-36(s0)
1c00df18 <rt_malloc+0x10> bnez	a5,1c00df1e <rt_malloc+0x16>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:278
        return RT_NULL;
1c00df1a <rt_malloc+0x12> li	a5,0
1c00df1c <rt_malloc+0x14> j	1c00e19a <rt_malloc+0x292>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:289
                                    size, RT_ALIGN(size, RT_ALIGN_SIZE)));
    else
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("malloc size %d\n", size));

    /* alignment size */
    size = RT_ALIGN(size, RT_ALIGN_SIZE);
1c00df1e <rt_malloc+0x16> lw	a5,-36(s0)
1c00df22 <rt_malloc+0x1a> addi	a5,a5,3
1c00df24 <rt_malloc+0x1c> andi	a5,a5,-4
1c00df26 <rt_malloc+0x1e> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:291

    if (size > mem_size_aligned)
1c00df2a <rt_malloc+0x22> lui	a5,0x1c017
1c00df2e <rt_malloc+0x26> lw	a5,-1028(a5) # 1c016bfc <mem_size_aligned>
1c00df32 <rt_malloc+0x2a> lw	a4,-36(s0)
1c00df36 <rt_malloc+0x2e> bgeu	a5,a4,1c00df3e <rt_malloc+0x36>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:295
    {
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("no memory\n"));

        return RT_NULL;
1c00df3a <rt_malloc+0x32> li	a5,0
1c00df3c <rt_malloc+0x34> j	1c00e19a <rt_malloc+0x292>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:299
    }

    /* every data block must be at least MIN_SIZE_ALIGNED long */
    if (size < MIN_SIZE_ALIGNED)
1c00df3e <rt_malloc+0x36> lw	a4,-36(s0)
1c00df42 <rt_malloc+0x3a> li	a5,11
1c00df44 <rt_malloc+0x3c> bltu	a5,a4,1c00df4e <rt_malloc+0x46>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:300
        size = MIN_SIZE_ALIGNED;
1c00df48 <rt_malloc+0x40> li	a5,12
1c00df4a <rt_malloc+0x42> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:303

    /* take memory semaphore */
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
1c00df4e <rt_malloc+0x46> li	a1,-1
1c00df50 <rt_malloc+0x48> lui	a5,0x1c017
1c00df54 <rt_malloc+0x4c> addi	a0,a5,-1344 # 1c016ac0 <heap_sem>
1c00df58 <rt_malloc+0x50> jal	ra,1c00b83a <rt_sem_take>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:305

    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
1c00df5c <rt_malloc+0x54> lui	a5,0x1c017
1c00df60 <rt_malloc+0x58> lw	a5,-1032(a5) # 1c016bf8 <lfree>
1c00df64 <rt_malloc+0x5c> mv	a4,a5
1c00df66 <rt_malloc+0x5e> lui	a5,0x1c017
1c00df6a <rt_malloc+0x62> lw	a5,-1040(a5) # 1c016bf0 <heap_ptr>
1c00df6e <rt_malloc+0x66> sub	a5,a4,a5
1c00df72 <rt_malloc+0x6a> sw	a5,-20(s0)
1c00df76 <rt_malloc+0x6e> j	1c00e174 <rt_malloc+0x26c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:309
         ptr < mem_size_aligned - size;
         ptr = ((struct heap_mem *)&heap_ptr[ptr])->next)
    {
        mem = (struct heap_mem *)&heap_ptr[ptr];
1c00df78 <rt_malloc+0x70> lui	a5,0x1c017
1c00df7c <rt_malloc+0x74> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00df80 <rt_malloc+0x78> lw	a5,-20(s0)
1c00df84 <rt_malloc+0x7c> add	a5,a5,a4
1c00df86 <rt_malloc+0x7e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:311

        if ((!mem->used) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size)
1c00df8a <rt_malloc+0x82> lw	a5,-24(s0)
1c00df8e <rt_malloc+0x86> lhu	a5,2(a5)
1c00df92 <rt_malloc+0x8a> bnez	a5,1c00e160 <rt_malloc+0x258>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:311 (discriminator 1)
1c00df96 <rt_malloc+0x8e> lw	a5,-24(s0)
1c00df9a <rt_malloc+0x92> lw	a4,4(a5)
1c00df9c <rt_malloc+0x94> lw	a5,-20(s0)
1c00dfa0 <rt_malloc+0x98> sub	a5,a4,a5
1c00dfa4 <rt_malloc+0x9c> addi	a5,a5,-12
1c00dfa6 <rt_malloc+0x9e> lw	a4,-36(s0)
1c00dfaa <rt_malloc+0xa2> bltu	a5,a4,1c00e160 <rt_malloc+0x258>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:316
        {
            /* mem is not used and at least perfect fit is possible:
             * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
1c00dfae <rt_malloc+0xa6> lw	a5,-24(s0)
1c00dfb2 <rt_malloc+0xaa> lw	a4,4(a5)
1c00dfb4 <rt_malloc+0xac> lw	a5,-20(s0)
1c00dfb8 <rt_malloc+0xb0> sub	a5,a4,a5
1c00dfbc <rt_malloc+0xb4> addi	a4,a5,-12
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:317
                (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED))
1c00dfc0 <rt_malloc+0xb8> lw	a5,-36(s0)
1c00dfc4 <rt_malloc+0xbc> addi	a5,a5,24
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:316
            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
1c00dfc6 <rt_malloc+0xbe> bltu	a4,a5,1c00e096 <rt_malloc+0x18e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:329
                 * struct heap_mem would fit in but no data between mem2 and mem2->next
                 * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
                 *       region that couldn't hold data, but when mem->next gets freed,
                 *       the 2 regions would be combined, resulting in more free memory
                 */
                ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
1c00dfca <rt_malloc+0xc2> lw	a4,-20(s0)
1c00dfce <rt_malloc+0xc6> lw	a5,-36(s0)
1c00dfd2 <rt_malloc+0xca> add	a5,a5,a4
1c00dfd4 <rt_malloc+0xcc> addi	a5,a5,12
1c00dfd6 <rt_malloc+0xce> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:332

                /* create mem2 struct */
                mem2       = (struct heap_mem *)&heap_ptr[ptr2];
1c00dfda <rt_malloc+0xd2> lui	a5,0x1c017
1c00dfde <rt_malloc+0xd6> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00dfe2 <rt_malloc+0xda> lw	a5,-28(s0)
1c00dfe6 <rt_malloc+0xde> add	a5,a5,a4
1c00dfe8 <rt_malloc+0xe0> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:333
                mem2->magic = HEAP_MAGIC;
1c00dfec <rt_malloc+0xe4> lw	a5,-32(s0)
1c00dff0 <rt_malloc+0xe8> lui	a4,0x2
1c00dff2 <rt_malloc+0xea> addi	a4,a4,-352 # 00001ea0 <__stack_size+0x16a0>
1c00dff6 <rt_malloc+0xee> sh	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:334
                mem2->used = 0;
1c00dffa <rt_malloc+0xf2> lw	a5,-32(s0)
1c00dffe <rt_malloc+0xf6> sh	zero,2(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:335
                mem2->next = mem->next;
1c00e002 <rt_malloc+0xfa> lw	a5,-24(s0)
1c00e006 <rt_malloc+0xfe> lw	a4,4(a5)
1c00e008 <rt_malloc+0x100> lw	a5,-32(s0)
1c00e00c <rt_malloc+0x104> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:336
                mem2->prev = ptr;
1c00e00e <rt_malloc+0x106> lw	a5,-32(s0)
1c00e012 <rt_malloc+0x10a> lw	a4,-20(s0)
1c00e016 <rt_malloc+0x10e> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:342
#ifdef RT_USING_MEMTRACE
                rt_mem_setname(mem2, "    ");
#endif

                /* and insert it between mem and mem->next */
                mem->next = ptr2;
1c00e018 <rt_malloc+0x110> lw	a5,-24(s0)
1c00e01c <rt_malloc+0x114> lw	a4,-28(s0)
1c00e020 <rt_malloc+0x118> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:343
                mem->used = 1;
1c00e022 <rt_malloc+0x11a> lw	a5,-24(s0)
1c00e026 <rt_malloc+0x11e> li	a4,1
1c00e028 <rt_malloc+0x120> sh	a4,2(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:345

                if (mem2->next != mem_size_aligned + SIZEOF_STRUCT_MEM)
1c00e02c <rt_malloc+0x124> lw	a5,-32(s0)
1c00e030 <rt_malloc+0x128> lw	a4,4(a5)
1c00e032 <rt_malloc+0x12a> lui	a5,0x1c017
1c00e036 <rt_malloc+0x12e> lw	a5,-1028(a5) # 1c016bfc <mem_size_aligned>
1c00e03a <rt_malloc+0x132> addi	a5,a5,12
1c00e03c <rt_malloc+0x134> beq	a4,a5,1c00e056 <rt_malloc+0x14e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:347
                {
                    ((struct heap_mem *)&heap_ptr[mem2->next])->prev = ptr2;
1c00e040 <rt_malloc+0x138> lui	a5,0x1c017
1c00e044 <rt_malloc+0x13c> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00e048 <rt_malloc+0x140> lw	a5,-32(s0)
1c00e04c <rt_malloc+0x144> lw	a5,4(a5)
1c00e04e <rt_malloc+0x146> add	a5,a5,a4
1c00e050 <rt_malloc+0x148> lw	a4,-28(s0)
1c00e054 <rt_malloc+0x14c> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:350
                }
#ifdef RT_MEM_STATS
                used_mem += (size + SIZEOF_STRUCT_MEM);
1c00e056 <rt_malloc+0x14e> lui	a5,0x1c017
1c00e05a <rt_malloc+0x152> lw	a4,-1024(a5) # 1c016c00 <used_mem>
1c00e05e <rt_malloc+0x156> lw	a5,-36(s0)
1c00e062 <rt_malloc+0x15a> add	a5,a5,a4
1c00e064 <rt_malloc+0x15c> addi	a4,a5,12
1c00e068 <rt_malloc+0x160> lui	a5,0x1c017
1c00e06c <rt_malloc+0x164> sw	a4,-1024(a5) # 1c016c00 <used_mem>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:351
                if (max_mem < used_mem)
1c00e070 <rt_malloc+0x168> lui	a5,0x1c017
1c00e074 <rt_malloc+0x16c> lw	a4,-1020(a5) # 1c016c04 <max_mem>
1c00e078 <rt_malloc+0x170> lui	a5,0x1c017
1c00e07c <rt_malloc+0x174> lw	a5,-1024(a5) # 1c016c00 <used_mem>
1c00e080 <rt_malloc+0x178> bgeu	a4,a5,1c00e0ee <rt_malloc+0x1e6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:352
                    max_mem = used_mem;
1c00e084 <rt_malloc+0x17c> lui	a5,0x1c017
1c00e088 <rt_malloc+0x180> lw	a4,-1024(a5) # 1c016c00 <used_mem>
1c00e08c <rt_malloc+0x184> lui	a5,0x1c017
1c00e090 <rt_malloc+0x188> sw	a4,-1020(a5) # 1c016c04 <max_mem>
1c00e094 <rt_malloc+0x18c> j	1c00e0ee <rt_malloc+0x1e6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:364
                 * take care of this).
                 * -> near fit or excact fit: do not split, no mem2 creation
                 * also can't move mem->next directly behind mem, since mem->next
                 * will always be used at this point!
                 */
                mem->used = 1;
1c00e096 <rt_malloc+0x18e> lw	a5,-24(s0)
1c00e09a <rt_malloc+0x192> li	a4,1
1c00e09c <rt_malloc+0x194> sh	a4,2(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:366
#ifdef RT_MEM_STATS
                used_mem += mem->next - ((rt_uint8_t *)mem - heap_ptr);
1c00e0a0 <rt_malloc+0x198> lw	a5,-24(s0)
1c00e0a4 <rt_malloc+0x19c> lw	a5,4(a5)
1c00e0a6 <rt_malloc+0x19e> lw	a4,-24(s0)
1c00e0aa <rt_malloc+0x1a2> lui	a3,0x1c017
1c00e0ae <rt_malloc+0x1a6> lw	a3,-1040(a3) # 1c016bf0 <heap_ptr>
1c00e0b2 <rt_malloc+0x1aa> sub	a4,a4,a3
1c00e0b4 <rt_malloc+0x1ac> sub	a4,a5,a4
1c00e0b8 <rt_malloc+0x1b0> lui	a5,0x1c017
1c00e0bc <rt_malloc+0x1b4> lw	a5,-1024(a5) # 1c016c00 <used_mem>
1c00e0c0 <rt_malloc+0x1b8> add	a4,a4,a5
1c00e0c2 <rt_malloc+0x1ba> lui	a5,0x1c017
1c00e0c6 <rt_malloc+0x1be> sw	a4,-1024(a5) # 1c016c00 <used_mem>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:367
                if (max_mem < used_mem)
1c00e0ca <rt_malloc+0x1c2> lui	a5,0x1c017
1c00e0ce <rt_malloc+0x1c6> lw	a4,-1020(a5) # 1c016c04 <max_mem>
1c00e0d2 <rt_malloc+0x1ca> lui	a5,0x1c017
1c00e0d6 <rt_malloc+0x1ce> lw	a5,-1024(a5) # 1c016c00 <used_mem>
1c00e0da <rt_malloc+0x1d2> bgeu	a4,a5,1c00e0ee <rt_malloc+0x1e6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:368
                    max_mem = used_mem;
1c00e0de <rt_malloc+0x1d6> lui	a5,0x1c017
1c00e0e2 <rt_malloc+0x1da> lw	a4,-1024(a5) # 1c016c00 <used_mem>
1c00e0e6 <rt_malloc+0x1de> lui	a5,0x1c017
1c00e0ea <rt_malloc+0x1e2> sw	a4,-1020(a5) # 1c016c04 <max_mem>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:372
#endif
            }
            /* set memory block magic */
            mem->magic = HEAP_MAGIC;
1c00e0ee <rt_malloc+0x1e6> lw	a5,-24(s0)
1c00e0f2 <rt_malloc+0x1ea> lui	a4,0x2
1c00e0f4 <rt_malloc+0x1ec> addi	a4,a4,-352 # 00001ea0 <__stack_size+0x16a0>
1c00e0f8 <rt_malloc+0x1f0> sh	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:380
                rt_mem_setname(mem, rt_thread_self()->name);
            else
                rt_mem_setname(mem, "NONE");
#endif

            if (mem == lfree)
1c00e0fc <rt_malloc+0x1f4> lui	a5,0x1c017
1c00e100 <rt_malloc+0x1f8> lw	a5,-1032(a5) # 1c016bf8 <lfree>
1c00e104 <rt_malloc+0x1fc> lw	a4,-24(s0)
1c00e108 <rt_malloc+0x200> bne	a4,a5,1c00e14c <rt_malloc+0x244>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:383
            {
                /* Find next free block after mem and update lowest free pointer */
                while (lfree->used && lfree != heap_end)
1c00e10c <rt_malloc+0x204> j	1c00e12a <rt_malloc+0x222>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:384
                    lfree = (struct heap_mem *)&heap_ptr[lfree->next];
1c00e10e <rt_malloc+0x206> lui	a5,0x1c017
1c00e112 <rt_malloc+0x20a> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00e116 <rt_malloc+0x20e> lui	a5,0x1c017
1c00e11a <rt_malloc+0x212> lw	a5,-1032(a5) # 1c016bf8 <lfree>
1c00e11e <rt_malloc+0x216> lw	a5,4(a5)
1c00e120 <rt_malloc+0x218> add	a4,a4,a5
1c00e122 <rt_malloc+0x21a> lui	a5,0x1c017
1c00e126 <rt_malloc+0x21e> sw	a4,-1032(a5) # 1c016bf8 <lfree>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:383
                while (lfree->used && lfree != heap_end)
1c00e12a <rt_malloc+0x222> lui	a5,0x1c017
1c00e12e <rt_malloc+0x226> lw	a5,-1032(a5) # 1c016bf8 <lfree>
1c00e132 <rt_malloc+0x22a> lhu	a5,2(a5)
1c00e136 <rt_malloc+0x22e> beqz	a5,1c00e14c <rt_malloc+0x244>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:383 (discriminator 1)
1c00e138 <rt_malloc+0x230> lui	a5,0x1c017
1c00e13c <rt_malloc+0x234> lw	a4,-1032(a5) # 1c016bf8 <lfree>
1c00e140 <rt_malloc+0x238> lui	a5,0x1c017
1c00e144 <rt_malloc+0x23c> lw	a5,-1036(a5) # 1c016bf4 <heap_end>
1c00e148 <rt_malloc+0x240> bne	a4,a5,1c00e10e <rt_malloc+0x206>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:389

                RT_ASSERT(((lfree == heap_end) || (!lfree->used)));
            }

            rt_sem_release(&heap_sem);
1c00e14c <rt_malloc+0x244> lui	a5,0x1c017
1c00e150 <rt_malloc+0x248> addi	a0,a5,-1344 # 1c016ac0 <heap_sem>
1c00e154 <rt_malloc+0x24c> jal	ra,1c00b90a <rt_sem_release>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:403

            RT_OBJECT_HOOK_CALL(rt_malloc_hook,
                                (((void *)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM)), size));

            /* return the memory data except mem struct */
            return (rt_uint8_t *)mem + SIZEOF_STRUCT_MEM;
1c00e158 <rt_malloc+0x250> lw	a5,-24(s0)
1c00e15c <rt_malloc+0x254> addi	a5,a5,12
1c00e15e <rt_malloc+0x256> j	1c00e19a <rt_malloc+0x292>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:307
         ptr = ((struct heap_mem *)&heap_ptr[ptr])->next)
1c00e160 <rt_malloc+0x258> lui	a5,0x1c017
1c00e164 <rt_malloc+0x25c> lw	a4,-1040(a5) # 1c016bf0 <heap_ptr>
1c00e168 <rt_malloc+0x260> lw	a5,-20(s0)
1c00e16c <rt_malloc+0x264> add	a5,a5,a4
1c00e16e <rt_malloc+0x266> lw	a5,4(a5)
1c00e170 <rt_malloc+0x268> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:306 (discriminator 1)
         ptr < mem_size_aligned - size;
1c00e174 <rt_malloc+0x26c> lui	a5,0x1c017
1c00e178 <rt_malloc+0x270> lw	a4,-1028(a5) # 1c016bfc <mem_size_aligned>
1c00e17c <rt_malloc+0x274> lw	a5,-36(s0)
1c00e180 <rt_malloc+0x278> sub	a5,a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:305 (discriminator 1)
    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
1c00e184 <rt_malloc+0x27c> lw	a4,-20(s0)
1c00e188 <rt_malloc+0x280> bltu	a4,a5,1c00df78 <rt_malloc+0x70>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:407
        }
    }

    rt_sem_release(&heap_sem);
1c00e18c <rt_malloc+0x284> lui	a5,0x1c017
1c00e190 <rt_malloc+0x288> addi	a0,a5,-1344 # 1c016ac0 <heap_sem>
1c00e194 <rt_malloc+0x28c> jal	ra,1c00b90a <rt_sem_release>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:409

    return RT_NULL;
1c00e198 <rt_malloc+0x290> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:410
}
1c00e19a <rt_malloc+0x292> mv	a0,a5
1c00e19c <rt_malloc+0x294> lw	ra,44(sp)
1c00e19e <rt_malloc+0x296> lw	s0,40(sp)
1c00e1a0 <rt_malloc+0x298> addi	sp,sp,48
1c00e1a2 <rt_malloc+0x29a> ret
rt_calloc():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:530
 * @param size size of the objects to allocate
 *
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *rt_calloc(rt_size_t count, rt_size_t size)
{
1c00e1a4 <rt_calloc> addi	sp,sp,-48
1c00e1a6 <rt_calloc+0x2> sw	ra,44(sp)
1c00e1a8 <rt_calloc+0x4> sw	s0,40(sp)
1c00e1aa <rt_calloc+0x6> addi	s0,sp,48
1c00e1ac <rt_calloc+0x8> sw	a0,-36(s0)
1c00e1b0 <rt_calloc+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:534
    void *p;

    /* allocate 'count' objects of size 'size' */
    p = rt_malloc(count * size);
1c00e1b4 <rt_calloc+0x10> lw	a4,-36(s0)
1c00e1b8 <rt_calloc+0x14> lw	a5,-40(s0)
1c00e1bc <rt_calloc+0x18> mul	a5,a4,a5
1c00e1c0 <rt_calloc+0x1c> mv	a0,a5
1c00e1c2 <rt_calloc+0x1e> jal	ra,1c00df08 <rt_malloc>
1c00e1c6 <rt_calloc+0x22> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:537

    /* zero the memory */
    if (p)
1c00e1ca <rt_calloc+0x26> lw	a5,-20(s0)
1c00e1ce <rt_calloc+0x2a> beqz	a5,1c00e1e8 <rt_calloc+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:538
        rt_memset(p, 0, count * size);
1c00e1d0 <rt_calloc+0x2c> lw	a4,-36(s0)
1c00e1d4 <rt_calloc+0x30> lw	a5,-40(s0)
1c00e1d8 <rt_calloc+0x34> mul	a5,a4,a5
1c00e1dc <rt_calloc+0x38> mv	a2,a5
1c00e1de <rt_calloc+0x3a> li	a1,0
1c00e1e0 <rt_calloc+0x3c> lw	a0,-20(s0)
1c00e1e4 <rt_calloc+0x40> jal	ra,1c00ba0a <rt_memset>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:540

    return p;
1c00e1e8 <rt_calloc+0x44> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:541
}
1c00e1ec <rt_calloc+0x48> mv	a0,a5
1c00e1ee <rt_calloc+0x4a> lw	ra,44(sp)
1c00e1f0 <rt_calloc+0x4c> lw	s0,40(sp)
1c00e1f2 <rt_calloc+0x4e> addi	sp,sp,48
1c00e1f4 <rt_calloc+0x50> ret
rt_free():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:550
 * rt_malloc. The released memory block is taken back to system heap.
 *
 * @param rmem the address of memory which will be released
 */
void rt_free(void *rmem)
{
1c00e1f6 <rt_free> addi	sp,sp,-48
1c00e1f8 <rt_free+0x2> sw	ra,44(sp)
1c00e1fa <rt_free+0x4> sw	s0,40(sp)
1c00e1fc <rt_free+0x6> addi	s0,sp,48
1c00e1fe <rt_free+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:553
    struct heap_mem *mem;

    if (rmem == RT_NULL)
1c00e202 <rt_free+0xc> lw	a5,-36(s0)
1c00e206 <rt_free+0x10> beqz	a5,1c00e302 <rt_free+0x10c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:564
    RT_ASSERT((rt_uint8_t *)rmem >= (rt_uint8_t *)heap_ptr &&
              (rt_uint8_t *)rmem < (rt_uint8_t *)heap_end);

    RT_OBJECT_HOOK_CALL(rt_free_hook, (rmem));

    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
1c00e20a <rt_free+0x14> lui	a5,0x1c017
1c00e20e <rt_free+0x18> lw	a5,-1040(a5) # 1c016bf0 <heap_ptr>
1c00e212 <rt_free+0x1c> lw	a4,-36(s0)
1c00e216 <rt_free+0x20> bltu	a4,a5,1c00e306 <rt_free+0x110>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:565 (discriminator 1)
        (rt_uint8_t *)rmem >= (rt_uint8_t *)heap_end)
1c00e21a <rt_free+0x24> lui	a5,0x1c017
1c00e21e <rt_free+0x28> lw	a5,-1036(a5) # 1c016bf4 <heap_end>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:564 (discriminator 1)
    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
1c00e222 <rt_free+0x2c> lw	a4,-36(s0)
1c00e226 <rt_free+0x30> bgeu	a4,a5,1c00e306 <rt_free+0x110>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:573

        return;
    }

    /* Get the corresponding struct heap_mem ... */
    mem = (struct heap_mem *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
1c00e22a <rt_free+0x34> lw	a5,-36(s0)
1c00e22e <rt_free+0x38> addi	a5,a5,-12
1c00e230 <rt_free+0x3a> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:582
                  (rt_ubase_t)rmem,
                  (rt_ubase_t)(mem->next - ((rt_uint8_t *)mem - heap_ptr))));


    /* protect the heap from concurrent access */
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
1c00e234 <rt_free+0x3e> li	a1,-1
1c00e236 <rt_free+0x40> lui	a5,0x1c017
1c00e23a <rt_free+0x44> addi	a0,a5,-1344 # 1c016ac0 <heap_sem>
1c00e23e <rt_free+0x48> jal	ra,1c00b83a <rt_sem_take>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:585

    /* ... which has to be in a used state ... */
    if (!mem->used || mem->magic != HEAP_MAGIC)
1c00e242 <rt_free+0x4c> lw	a5,-20(s0)
1c00e246 <rt_free+0x50> lhu	a5,2(a5)
1c00e24a <rt_free+0x54> beqz	a5,1c00e25e <rt_free+0x68>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:585 (discriminator 1)
1c00e24c <rt_free+0x56> lw	a5,-20(s0)
1c00e250 <rt_free+0x5a> lhu	a4,0(a5)
1c00e254 <rt_free+0x5e> lui	a5,0x2
1c00e256 <rt_free+0x60> addi	a5,a5,-352 # 00001ea0 <__stack_size+0x16a0>
1c00e25a <rt_free+0x64> beq	a4,a5,1c00e290 <rt_free+0x9a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:587
    {
        rt_kprintf("to free a bad data block:\n");
1c00e25e <rt_free+0x68> lui	a5,0x1c010
1c00e262 <rt_free+0x6c> addi	a0,a5,1792 # 1c010700 <small_digits.2103+0x74>
1c00e266 <rt_free+0x70> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:588
        rt_kprintf("mem: 0x%08x, used flag: %d, magic code: 0x%04x\n", mem, mem->used, mem->magic);
1c00e26a <rt_free+0x74> lw	a5,-20(s0)
1c00e26e <rt_free+0x78> lhu	a5,2(a5)
1c00e272 <rt_free+0x7c> mv	a4,a5
1c00e274 <rt_free+0x7e> lw	a5,-20(s0)
1c00e278 <rt_free+0x82> lhu	a5,0(a5)
1c00e27c <rt_free+0x86> mv	a3,a5
1c00e27e <rt_free+0x88> mv	a2,a4
1c00e280 <rt_free+0x8a> lw	a1,-20(s0)
1c00e284 <rt_free+0x8e> lui	a5,0x1c010
1c00e288 <rt_free+0x92> addi	a0,a5,1820 # 1c01071c <small_digits.2103+0x90>
1c00e28c <rt_free+0x96> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:593
    }
    RT_ASSERT(mem->used);
    RT_ASSERT(mem->magic == HEAP_MAGIC);
    /* ... and is now unused. */
    mem->used  = 0;
1c00e290 <rt_free+0x9a> lw	a5,-20(s0)
1c00e294 <rt_free+0x9e> sh	zero,2(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:594
    mem->magic = HEAP_MAGIC;
1c00e298 <rt_free+0xa2> lw	a5,-20(s0)
1c00e29c <rt_free+0xa6> lui	a4,0x2
1c00e29e <rt_free+0xa8> addi	a4,a4,-352 # 00001ea0 <__stack_size+0x16a0>
1c00e2a2 <rt_free+0xac> sh	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:599
#ifdef RT_USING_MEMTRACE
    rt_mem_setname(mem, "    ");
#endif

    if (mem < lfree)
1c00e2a6 <rt_free+0xb0> lui	a5,0x1c017
1c00e2aa <rt_free+0xb4> lw	a5,-1032(a5) # 1c016bf8 <lfree>
1c00e2ae <rt_free+0xb8> lw	a4,-20(s0)
1c00e2b2 <rt_free+0xbc> bgeu	a4,a5,1c00e2c2 <rt_free+0xcc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:602
    {
        /* the newly freed struct is now the lowest */
        lfree = mem;
1c00e2b6 <rt_free+0xc0> lui	a5,0x1c017
1c00e2ba <rt_free+0xc4> lw	a4,-20(s0)
1c00e2be <rt_free+0xc8> sw	a4,-1032(a5) # 1c016bf8 <lfree>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:606
    }

#ifdef RT_MEM_STATS
    used_mem -= (mem->next - ((rt_uint8_t *)mem - heap_ptr));
1c00e2c2 <rt_free+0xcc> lw	a5,-20(s0)
1c00e2c6 <rt_free+0xd0> lui	a4,0x1c017
1c00e2ca <rt_free+0xd4> lw	a4,-1040(a4) # 1c016bf0 <heap_ptr>
1c00e2ce <rt_free+0xd8> sub	a5,a5,a4
1c00e2d0 <rt_free+0xda> mv	a4,a5
1c00e2d2 <rt_free+0xdc> lw	a5,-20(s0)
1c00e2d6 <rt_free+0xe0> lw	a5,4(a5)
1c00e2d8 <rt_free+0xe2> sub	a4,a4,a5
1c00e2da <rt_free+0xe4> lui	a5,0x1c017
1c00e2de <rt_free+0xe8> lw	a5,-1024(a5) # 1c016c00 <used_mem>
1c00e2e2 <rt_free+0xec> add	a4,a4,a5
1c00e2e4 <rt_free+0xee> lui	a5,0x1c017
1c00e2e8 <rt_free+0xf2> sw	a4,-1024(a5) # 1c016c00 <used_mem>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:610
#endif

    /* finally, see if prev or next are free also */
    plug_holes(mem);
1c00e2ec <rt_free+0xf6> lw	a0,-20(s0)
1c00e2f0 <rt_free+0xfa> jal	ra,1c00dcb0 <plug_holes>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:611
    rt_sem_release(&heap_sem);
1c00e2f4 <rt_free+0xfe> lui	a5,0x1c017
1c00e2f8 <rt_free+0x102> addi	a0,a5,-1344 # 1c016ac0 <heap_sem>
1c00e2fc <rt_free+0x106> jal	ra,1c00b90a <rt_sem_release>
1c00e300 <rt_free+0x10a> j	1c00e308 <rt_free+0x112>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:554
        return;
1c00e302 <rt_free+0x10c> nop
1c00e304 <rt_free+0x10e> j	1c00e308 <rt_free+0x112>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:569
        return;
1c00e306 <rt_free+0x110> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:612
}
1c00e308 <rt_free+0x112> lw	ra,44(sp)
1c00e30a <rt_free+0x114> lw	s0,40(sp)
1c00e30c <rt_free+0x116> addi	sp,sp,48
1c00e30e <rt_free+0x118> ret
list_mem():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:631

#ifdef RT_USING_FINSH
#include <finsh.h>

void list_mem(void)
{
1c00e310 <list_mem> addi	sp,sp,-16
1c00e312 <list_mem+0x2> sw	ra,12(sp)
1c00e314 <list_mem+0x4> sw	s0,8(sp)
1c00e316 <list_mem+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:632
    rt_kprintf("total memory: %d\n", mem_size_aligned);
1c00e318 <list_mem+0x8> lui	a5,0x1c017
1c00e31c <list_mem+0xc> lw	a5,-1028(a5) # 1c016bfc <mem_size_aligned>
1c00e320 <list_mem+0x10> mv	a1,a5
1c00e322 <list_mem+0x12> lui	a5,0x1c010
1c00e326 <list_mem+0x16> addi	a0,a5,1868 # 1c01074c <small_digits.2103+0xc0>
1c00e32a <list_mem+0x1a> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:633
    rt_kprintf("used memory : %d\n", used_mem);
1c00e32e <list_mem+0x1e> lui	a5,0x1c017
1c00e332 <list_mem+0x22> lw	a5,-1024(a5) # 1c016c00 <used_mem>
1c00e336 <list_mem+0x26> mv	a1,a5
1c00e338 <list_mem+0x28> lui	a5,0x1c010
1c00e33c <list_mem+0x2c> addi	a0,a5,1888 # 1c010760 <small_digits.2103+0xd4>
1c00e340 <list_mem+0x30> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:634
    rt_kprintf("maximum allocated memory: %d\n", max_mem);
1c00e344 <list_mem+0x34> lui	a5,0x1c017
1c00e348 <list_mem+0x38> lw	a5,-1020(a5) # 1c016c04 <max_mem>
1c00e34c <list_mem+0x3c> mv	a1,a5
1c00e34e <list_mem+0x3e> lui	a5,0x1c010
1c00e352 <list_mem+0x42> addi	a0,a5,1908 # 1c010774 <small_digits.2103+0xe8>
1c00e356 <list_mem+0x46> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/mem.c:635
}
1c00e35a <list_mem+0x4a> nop
1c00e35c <list_mem+0x4c> lw	ra,12(sp)
1c00e35e <list_mem+0x4e> lw	s0,8(sp)
1c00e360 <list_mem+0x50> addi	sp,sp,16
1c00e362 <list_mem+0x52> ret
rt_ringbuffer_status():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:18
#include <rtthread.h>
#include <ringbuffer.h>
#include <string.h>

rt_inline enum rt_ringbuffer_state rt_ringbuffer_status(struct rt_ringbuffer *rb)
{
1c00e364 <rt_ringbuffer_status> addi	sp,sp,-32
1c00e366 <rt_ringbuffer_status+0x2> sw	s0,28(sp)
1c00e368 <rt_ringbuffer_status+0x4> addi	s0,sp,32
1c00e36a <rt_ringbuffer_status+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:19
    if (rb->read_index == rb->write_index)
1c00e36e <rt_ringbuffer_status+0xa> lw	a5,-20(s0)
1c00e372 <rt_ringbuffer_status+0xe> lhu	a5,4(a5)
1c00e376 <rt_ringbuffer_status+0x12> srli	a5,a5,0x1
1c00e378 <rt_ringbuffer_status+0x14> slli	a4,a5,0x10
1c00e37c <rt_ringbuffer_status+0x18> srli	a4,a4,0x10
1c00e37e <rt_ringbuffer_status+0x1a> lw	a5,-20(s0)
1c00e382 <rt_ringbuffer_status+0x1e> lhu	a5,6(a5)
1c00e386 <rt_ringbuffer_status+0x22> srli	a5,a5,0x1
1c00e388 <rt_ringbuffer_status+0x24> slli	a5,a5,0x10
1c00e38a <rt_ringbuffer_status+0x26> srli	a5,a5,0x10
1c00e38c <rt_ringbuffer_status+0x28> bne	a4,a5,1c00e3b8 <rt_ringbuffer_status+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:21
    {
        if (rb->read_mirror == rb->write_mirror)
1c00e390 <rt_ringbuffer_status+0x2c> lw	a5,-20(s0)
1c00e394 <rt_ringbuffer_status+0x30> lbu	a5,4(a5)
1c00e398 <rt_ringbuffer_status+0x34> andi	a5,a5,1
1c00e39a <rt_ringbuffer_status+0x36> andi	a4,a5,255
1c00e39e <rt_ringbuffer_status+0x3a> lw	a5,-20(s0)
1c00e3a2 <rt_ringbuffer_status+0x3e> lbu	a5,6(a5)
1c00e3a6 <rt_ringbuffer_status+0x42> andi	a5,a5,1
1c00e3a8 <rt_ringbuffer_status+0x44> andi	a5,a5,255
1c00e3ac <rt_ringbuffer_status+0x48> bne	a4,a5,1c00e3b4 <rt_ringbuffer_status+0x50>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:22
            return RT_RINGBUFFER_EMPTY;
1c00e3b0 <rt_ringbuffer_status+0x4c> li	a5,0
1c00e3b2 <rt_ringbuffer_status+0x4e> j	1c00e3ba <rt_ringbuffer_status+0x56>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:24
        else
            return RT_RINGBUFFER_FULL;
1c00e3b4 <rt_ringbuffer_status+0x50> li	a5,1
1c00e3b6 <rt_ringbuffer_status+0x52> j	1c00e3ba <rt_ringbuffer_status+0x56>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:26
    }
    return RT_RINGBUFFER_HALFFULL;
1c00e3b8 <rt_ringbuffer_status+0x54> li	a5,2
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:27
}
1c00e3ba <rt_ringbuffer_status+0x56> mv	a0,a5
1c00e3bc <rt_ringbuffer_status+0x58> lw	s0,28(sp)
1c00e3be <rt_ringbuffer_status+0x5a> addi	sp,sp,32
1c00e3c0 <rt_ringbuffer_status+0x5c> ret
rt_ringbuffer_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:32

void rt_ringbuffer_init(struct rt_ringbuffer *rb,
                        rt_uint8_t           *pool,
                        rt_int16_t            size)
{
1c00e3c2 <rt_ringbuffer_init> addi	sp,sp,-32
1c00e3c4 <rt_ringbuffer_init+0x2> sw	s0,28(sp)
1c00e3c6 <rt_ringbuffer_init+0x4> addi	s0,sp,32
1c00e3c8 <rt_ringbuffer_init+0x6> sw	a0,-20(s0)
1c00e3cc <rt_ringbuffer_init+0xa> sw	a1,-24(s0)
1c00e3d0 <rt_ringbuffer_init+0xe> mv	a5,a2
1c00e3d2 <rt_ringbuffer_init+0x10> sh	a5,-26(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:37
    RT_ASSERT(rb != RT_NULL);
    RT_ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
1c00e3d6 <rt_ringbuffer_init+0x14> lw	a5,-20(s0)
1c00e3da <rt_ringbuffer_init+0x18> lhu	a4,4(a5)
1c00e3de <rt_ringbuffer_init+0x1c> andi	a4,a4,1
1c00e3e0 <rt_ringbuffer_init+0x1e> sh	a4,4(a5)
1c00e3e4 <rt_ringbuffer_init+0x22> lw	a5,-20(s0)
1c00e3e8 <rt_ringbuffer_init+0x26> lhu	a5,4(a5)
1c00e3ec <rt_ringbuffer_init+0x2a> srli	a5,a5,0x1
1c00e3ee <rt_ringbuffer_init+0x2c> slli	a5,a5,0x10
1c00e3f0 <rt_ringbuffer_init+0x2e> srli	a5,a5,0x10
1c00e3f2 <rt_ringbuffer_init+0x30> andi	a5,a5,1
1c00e3f4 <rt_ringbuffer_init+0x32> andi	a4,a5,255
1c00e3f8 <rt_ringbuffer_init+0x36> lw	a5,-20(s0)
1c00e3fc <rt_ringbuffer_init+0x3a> andi	a2,a4,1
1c00e400 <rt_ringbuffer_init+0x3e> lbu	a4,4(a5)
1c00e404 <rt_ringbuffer_init+0x42> andi	a4,a4,-2
1c00e406 <rt_ringbuffer_init+0x44> mv	a3,a4
1c00e408 <rt_ringbuffer_init+0x46> mv	a4,a2
1c00e40a <rt_ringbuffer_init+0x48> or	a4,a4,a3
1c00e40c <rt_ringbuffer_init+0x4a> sb	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:38
    rb->write_mirror = rb->write_index = 0;
1c00e410 <rt_ringbuffer_init+0x4e> lw	a5,-20(s0)
1c00e414 <rt_ringbuffer_init+0x52> lhu	a4,6(a5)
1c00e418 <rt_ringbuffer_init+0x56> andi	a4,a4,1
1c00e41a <rt_ringbuffer_init+0x58> sh	a4,6(a5)
1c00e41e <rt_ringbuffer_init+0x5c> lw	a5,-20(s0)
1c00e422 <rt_ringbuffer_init+0x60> lhu	a5,6(a5)
1c00e426 <rt_ringbuffer_init+0x64> srli	a5,a5,0x1
1c00e428 <rt_ringbuffer_init+0x66> slli	a5,a5,0x10
1c00e42a <rt_ringbuffer_init+0x68> srli	a5,a5,0x10
1c00e42c <rt_ringbuffer_init+0x6a> andi	a5,a5,1
1c00e42e <rt_ringbuffer_init+0x6c> andi	a4,a5,255
1c00e432 <rt_ringbuffer_init+0x70> lw	a5,-20(s0)
1c00e436 <rt_ringbuffer_init+0x74> andi	a2,a4,1
1c00e43a <rt_ringbuffer_init+0x78> lbu	a4,6(a5)
1c00e43e <rt_ringbuffer_init+0x7c> andi	a4,a4,-2
1c00e440 <rt_ringbuffer_init+0x7e> mv	a3,a4
1c00e442 <rt_ringbuffer_init+0x80> mv	a4,a2
1c00e444 <rt_ringbuffer_init+0x82> or	a4,a4,a3
1c00e446 <rt_ringbuffer_init+0x84> sb	a4,6(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:41

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
1c00e44a <rt_ringbuffer_init+0x88> lw	a5,-20(s0)
1c00e44e <rt_ringbuffer_init+0x8c> lw	a4,-24(s0)
1c00e452 <rt_ringbuffer_init+0x90> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:42
    rb->buffer_size = RT_ALIGN_DOWN(size, RT_ALIGN_SIZE);
1c00e454 <rt_ringbuffer_init+0x92> lhu	a5,-26(s0)
1c00e458 <rt_ringbuffer_init+0x96> andi	a5,a5,-4
1c00e45a <rt_ringbuffer_init+0x98> slli	a4,a5,0x10
1c00e45e <rt_ringbuffer_init+0x9c> srai	a4,a4,0x10
1c00e460 <rt_ringbuffer_init+0x9e> lw	a5,-20(s0)
1c00e464 <rt_ringbuffer_init+0xa2> sh	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:43
}
1c00e468 <rt_ringbuffer_init+0xa6> nop
1c00e46a <rt_ringbuffer_init+0xa8> lw	s0,28(sp)
1c00e46c <rt_ringbuffer_init+0xaa> addi	sp,sp,32
1c00e46e <rt_ringbuffer_init+0xac> ret
rt_ringbuffer_putchar():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:200

/**
 * put a character into ring buffer
 */
rt_size_t rt_ringbuffer_putchar(struct rt_ringbuffer *rb, const rt_uint8_t ch)
{
1c00e470 <rt_ringbuffer_putchar> addi	sp,sp,-32
1c00e472 <rt_ringbuffer_putchar+0x2> sw	ra,28(sp)
1c00e474 <rt_ringbuffer_putchar+0x4> sw	s0,24(sp)
1c00e476 <rt_ringbuffer_putchar+0x6> sw	s1,20(sp)
1c00e478 <rt_ringbuffer_putchar+0x8> addi	s0,sp,32
1c00e47a <rt_ringbuffer_putchar+0xa> sw	a0,-20(s0)
1c00e47e <rt_ringbuffer_putchar+0xe> mv	a5,a1
1c00e480 <rt_ringbuffer_putchar+0x10> sb	a5,-21(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:204
    RT_ASSERT(rb != RT_NULL);

    /* whether has enough space */
    if (!rt_ringbuffer_space_len(rb))
1c00e484 <rt_ringbuffer_putchar+0x14> lw	a5,-20(s0)
1c00e488 <rt_ringbuffer_putchar+0x18> lh	a5,8(a5)
1c00e48c <rt_ringbuffer_putchar+0x1c> mv	s1,a5
1c00e48e <rt_ringbuffer_putchar+0x1e> lw	a0,-20(s0)
1c00e492 <rt_ringbuffer_putchar+0x22> jal	1c00e646 <rt_ringbuffer_data_len>
1c00e494 <rt_ringbuffer_putchar+0x24> mv	a5,a0
1c00e496 <rt_ringbuffer_putchar+0x26> bne	s1,a5,1c00e49e <rt_ringbuffer_putchar+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:205
        return 0;
1c00e49a <rt_ringbuffer_putchar+0x2a> li	a5,0
1c00e49c <rt_ringbuffer_putchar+0x2c> j	1c00e556 <rt_ringbuffer_putchar+0xe6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:207

    rb->buffer_ptr[rb->write_index] = ch;
1c00e49e <rt_ringbuffer_putchar+0x2e> lw	a5,-20(s0)
1c00e4a2 <rt_ringbuffer_putchar+0x32> lw	a5,0(a5)
1c00e4a4 <rt_ringbuffer_putchar+0x34> lw	a4,-20(s0)
1c00e4a8 <rt_ringbuffer_putchar+0x38> lhu	a4,6(a4)
1c00e4ac <rt_ringbuffer_putchar+0x3c> srli	a4,a4,0x1
1c00e4ae <rt_ringbuffer_putchar+0x3e> slli	a4,a4,0x10
1c00e4b0 <rt_ringbuffer_putchar+0x40> srli	a4,a4,0x10
1c00e4b2 <rt_ringbuffer_putchar+0x42> add	a5,a5,a4
1c00e4b4 <rt_ringbuffer_putchar+0x44> lbu	a4,-21(s0)
1c00e4b8 <rt_ringbuffer_putchar+0x48> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:210

    /* flip mirror */
    if (rb->write_index == rb->buffer_size-1)
1c00e4bc <rt_ringbuffer_putchar+0x4c> lw	a5,-20(s0)
1c00e4c0 <rt_ringbuffer_putchar+0x50> lhu	a5,6(a5)
1c00e4c4 <rt_ringbuffer_putchar+0x54> srli	a5,a5,0x1
1c00e4c6 <rt_ringbuffer_putchar+0x56> slli	a5,a5,0x10
1c00e4c8 <rt_ringbuffer_putchar+0x58> srli	a5,a5,0x10
1c00e4ca <rt_ringbuffer_putchar+0x5a> mv	a4,a5
1c00e4cc <rt_ringbuffer_putchar+0x5c> lw	a5,-20(s0)
1c00e4d0 <rt_ringbuffer_putchar+0x60> lh	a5,8(a5)
1c00e4d4 <rt_ringbuffer_putchar+0x64> addi	a5,a5,-1
1c00e4d6 <rt_ringbuffer_putchar+0x66> bne	a4,a5,1c00e51e <rt_ringbuffer_putchar+0xae>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:212
    {
        rb->write_mirror = ~rb->write_mirror;
1c00e4da <rt_ringbuffer_putchar+0x6a> lw	a5,-20(s0)
1c00e4de <rt_ringbuffer_putchar+0x6e> lbu	a5,6(a5)
1c00e4e2 <rt_ringbuffer_putchar+0x72> andi	a5,a5,1
1c00e4e4 <rt_ringbuffer_putchar+0x74> andi	a5,a5,255
1c00e4e8 <rt_ringbuffer_putchar+0x78> not	a5,a5
1c00e4ec <rt_ringbuffer_putchar+0x7c> andi	a5,a5,255
1c00e4f0 <rt_ringbuffer_putchar+0x80> andi	a5,a5,1
1c00e4f2 <rt_ringbuffer_putchar+0x82> andi	a4,a5,255
1c00e4f6 <rt_ringbuffer_putchar+0x86> lw	a5,-20(s0)
1c00e4fa <rt_ringbuffer_putchar+0x8a> andi	a2,a4,1
1c00e4fe <rt_ringbuffer_putchar+0x8e> lbu	a4,6(a5)
1c00e502 <rt_ringbuffer_putchar+0x92> andi	a4,a4,-2
1c00e504 <rt_ringbuffer_putchar+0x94> mv	a3,a4
1c00e506 <rt_ringbuffer_putchar+0x96> mv	a4,a2
1c00e508 <rt_ringbuffer_putchar+0x98> or	a4,a4,a3
1c00e50a <rt_ringbuffer_putchar+0x9a> sb	a4,6(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:213
        rb->write_index = 0;
1c00e50e <rt_ringbuffer_putchar+0x9e> lw	a5,-20(s0)
1c00e512 <rt_ringbuffer_putchar+0xa2> lhu	a4,6(a5)
1c00e516 <rt_ringbuffer_putchar+0xa6> andi	a4,a4,1
1c00e518 <rt_ringbuffer_putchar+0xa8> sh	a4,6(a5)
1c00e51c <rt_ringbuffer_putchar+0xac> j	1c00e554 <rt_ringbuffer_putchar+0xe4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:217
    }
    else
    {
        rb->write_index++;
1c00e51e <rt_ringbuffer_putchar+0xae> lw	a5,-20(s0)
1c00e522 <rt_ringbuffer_putchar+0xb2> lhu	a5,6(a5)
1c00e526 <rt_ringbuffer_putchar+0xb6> srli	a5,a5,0x1
1c00e528 <rt_ringbuffer_putchar+0xb8> slli	a5,a5,0x10
1c00e52a <rt_ringbuffer_putchar+0xba> srli	a5,a5,0x10
1c00e52c <rt_ringbuffer_putchar+0xbc> addi	a5,a5,1
1c00e52e <rt_ringbuffer_putchar+0xbe> mv	a4,a5
1c00e530 <rt_ringbuffer_putchar+0xc0> lui	a5,0x8
1c00e532 <rt_ringbuffer_putchar+0xc2> addi	a5,a5,-1
1c00e534 <rt_ringbuffer_putchar+0xc4> and	a5,a5,a4
1c00e536 <rt_ringbuffer_putchar+0xc6> slli	a4,a5,0x10
1c00e53a <rt_ringbuffer_putchar+0xca> srli	a4,a4,0x10
1c00e53c <rt_ringbuffer_putchar+0xcc> lw	a5,-20(s0)
1c00e540 <rt_ringbuffer_putchar+0xd0> slli	a2,a4,0x1
1c00e544 <rt_ringbuffer_putchar+0xd4> lhu	a4,6(a5) # 00008006 <__stack_size+0x7806>
1c00e548 <rt_ringbuffer_putchar+0xd8> andi	a4,a4,1
1c00e54a <rt_ringbuffer_putchar+0xda> mv	a3,a4
1c00e54c <rt_ringbuffer_putchar+0xdc> mv	a4,a2
1c00e54e <rt_ringbuffer_putchar+0xde> or	a4,a4,a3
1c00e550 <rt_ringbuffer_putchar+0xe0> sh	a4,6(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:220
    }

    return 1;
1c00e554 <rt_ringbuffer_putchar+0xe4> li	a5,1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:221
}
1c00e556 <rt_ringbuffer_putchar+0xe6> mv	a0,a5
1c00e558 <rt_ringbuffer_putchar+0xe8> lw	ra,28(sp)
1c00e55a <rt_ringbuffer_putchar+0xea> lw	s0,24(sp)
1c00e55c <rt_ringbuffer_putchar+0xec> lw	s1,20(sp)
1c00e55e <rt_ringbuffer_putchar+0xee> addi	sp,sp,32
1c00e560 <rt_ringbuffer_putchar+0xf0> ret
rt_ringbuffer_getchar():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:265

/**
 * get a character from a ringbuffer
 */
rt_size_t rt_ringbuffer_getchar(struct rt_ringbuffer *rb, rt_uint8_t *ch)
{
1c00e562 <rt_ringbuffer_getchar> addi	sp,sp,-32
1c00e564 <rt_ringbuffer_getchar+0x2> sw	ra,28(sp)
1c00e566 <rt_ringbuffer_getchar+0x4> sw	s0,24(sp)
1c00e568 <rt_ringbuffer_getchar+0x6> addi	s0,sp,32
1c00e56a <rt_ringbuffer_getchar+0x8> sw	a0,-20(s0)
1c00e56e <rt_ringbuffer_getchar+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:269
    RT_ASSERT(rb != RT_NULL);

    /* ringbuffer is empty */
    if (!rt_ringbuffer_data_len(rb))
1c00e572 <rt_ringbuffer_getchar+0x10> lw	a0,-20(s0)
1c00e576 <rt_ringbuffer_getchar+0x14> jal	1c00e646 <rt_ringbuffer_data_len>
1c00e578 <rt_ringbuffer_getchar+0x16> mv	a5,a0
1c00e57a <rt_ringbuffer_getchar+0x18> bnez	a5,1c00e580 <rt_ringbuffer_getchar+0x1e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:270
        return 0;
1c00e57c <rt_ringbuffer_getchar+0x1a> li	a5,0
1c00e57e <rt_ringbuffer_getchar+0x1c> j	1c00e63c <rt_ringbuffer_getchar+0xda>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:273

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
1c00e580 <rt_ringbuffer_getchar+0x1e> lw	a5,-20(s0)
1c00e584 <rt_ringbuffer_getchar+0x22> lw	a5,0(a5)
1c00e586 <rt_ringbuffer_getchar+0x24> lw	a4,-20(s0)
1c00e58a <rt_ringbuffer_getchar+0x28> lhu	a4,4(a4)
1c00e58e <rt_ringbuffer_getchar+0x2c> srli	a4,a4,0x1
1c00e590 <rt_ringbuffer_getchar+0x2e> slli	a4,a4,0x10
1c00e592 <rt_ringbuffer_getchar+0x30> srli	a4,a4,0x10
1c00e594 <rt_ringbuffer_getchar+0x32> add	a5,a5,a4
1c00e596 <rt_ringbuffer_getchar+0x34> lbu	a4,0(a5)
1c00e59a <rt_ringbuffer_getchar+0x38> lw	a5,-24(s0)
1c00e59e <rt_ringbuffer_getchar+0x3c> sb	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:275

    if (rb->read_index == rb->buffer_size-1)
1c00e5a2 <rt_ringbuffer_getchar+0x40> lw	a5,-20(s0)
1c00e5a6 <rt_ringbuffer_getchar+0x44> lhu	a5,4(a5)
1c00e5aa <rt_ringbuffer_getchar+0x48> srli	a5,a5,0x1
1c00e5ac <rt_ringbuffer_getchar+0x4a> slli	a5,a5,0x10
1c00e5ae <rt_ringbuffer_getchar+0x4c> srli	a5,a5,0x10
1c00e5b0 <rt_ringbuffer_getchar+0x4e> mv	a4,a5
1c00e5b2 <rt_ringbuffer_getchar+0x50> lw	a5,-20(s0)
1c00e5b6 <rt_ringbuffer_getchar+0x54> lh	a5,8(a5)
1c00e5ba <rt_ringbuffer_getchar+0x58> addi	a5,a5,-1
1c00e5bc <rt_ringbuffer_getchar+0x5a> bne	a4,a5,1c00e604 <rt_ringbuffer_getchar+0xa2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:277
    {
        rb->read_mirror = ~rb->read_mirror;
1c00e5c0 <rt_ringbuffer_getchar+0x5e> lw	a5,-20(s0)
1c00e5c4 <rt_ringbuffer_getchar+0x62> lbu	a5,4(a5)
1c00e5c8 <rt_ringbuffer_getchar+0x66> andi	a5,a5,1
1c00e5ca <rt_ringbuffer_getchar+0x68> andi	a5,a5,255
1c00e5ce <rt_ringbuffer_getchar+0x6c> not	a5,a5
1c00e5d2 <rt_ringbuffer_getchar+0x70> andi	a5,a5,255
1c00e5d6 <rt_ringbuffer_getchar+0x74> andi	a5,a5,1
1c00e5d8 <rt_ringbuffer_getchar+0x76> andi	a4,a5,255
1c00e5dc <rt_ringbuffer_getchar+0x7a> lw	a5,-20(s0)
1c00e5e0 <rt_ringbuffer_getchar+0x7e> andi	a2,a4,1
1c00e5e4 <rt_ringbuffer_getchar+0x82> lbu	a4,4(a5)
1c00e5e8 <rt_ringbuffer_getchar+0x86> andi	a4,a4,-2
1c00e5ea <rt_ringbuffer_getchar+0x88> mv	a3,a4
1c00e5ec <rt_ringbuffer_getchar+0x8a> mv	a4,a2
1c00e5ee <rt_ringbuffer_getchar+0x8c> or	a4,a4,a3
1c00e5f0 <rt_ringbuffer_getchar+0x8e> sb	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:278
        rb->read_index = 0;
1c00e5f4 <rt_ringbuffer_getchar+0x92> lw	a5,-20(s0)
1c00e5f8 <rt_ringbuffer_getchar+0x96> lhu	a4,4(a5)
1c00e5fc <rt_ringbuffer_getchar+0x9a> andi	a4,a4,1
1c00e5fe <rt_ringbuffer_getchar+0x9c> sh	a4,4(a5)
1c00e602 <rt_ringbuffer_getchar+0xa0> j	1c00e63a <rt_ringbuffer_getchar+0xd8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:282
    }
    else
    {
        rb->read_index++;
1c00e604 <rt_ringbuffer_getchar+0xa2> lw	a5,-20(s0)
1c00e608 <rt_ringbuffer_getchar+0xa6> lhu	a5,4(a5)
1c00e60c <rt_ringbuffer_getchar+0xaa> srli	a5,a5,0x1
1c00e60e <rt_ringbuffer_getchar+0xac> slli	a5,a5,0x10
1c00e610 <rt_ringbuffer_getchar+0xae> srli	a5,a5,0x10
1c00e612 <rt_ringbuffer_getchar+0xb0> addi	a5,a5,1
1c00e614 <rt_ringbuffer_getchar+0xb2> mv	a4,a5
1c00e616 <rt_ringbuffer_getchar+0xb4> lui	a5,0x8
1c00e618 <rt_ringbuffer_getchar+0xb6> addi	a5,a5,-1
1c00e61a <rt_ringbuffer_getchar+0xb8> and	a5,a5,a4
1c00e61c <rt_ringbuffer_getchar+0xba> slli	a4,a5,0x10
1c00e620 <rt_ringbuffer_getchar+0xbe> srli	a4,a4,0x10
1c00e622 <rt_ringbuffer_getchar+0xc0> lw	a5,-20(s0)
1c00e626 <rt_ringbuffer_getchar+0xc4> slli	a2,a4,0x1
1c00e62a <rt_ringbuffer_getchar+0xc8> lhu	a4,4(a5) # 00008004 <__stack_size+0x7804>
1c00e62e <rt_ringbuffer_getchar+0xcc> andi	a4,a4,1
1c00e630 <rt_ringbuffer_getchar+0xce> mv	a3,a4
1c00e632 <rt_ringbuffer_getchar+0xd0> mv	a4,a2
1c00e634 <rt_ringbuffer_getchar+0xd2> or	a4,a4,a3
1c00e636 <rt_ringbuffer_getchar+0xd4> sh	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:285
    }

    return 1;
1c00e63a <rt_ringbuffer_getchar+0xd8> li	a5,1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:286
}
1c00e63c <rt_ringbuffer_getchar+0xda> mv	a0,a5
1c00e63e <rt_ringbuffer_getchar+0xdc> lw	ra,28(sp)
1c00e640 <rt_ringbuffer_getchar+0xde> lw	s0,24(sp)
1c00e642 <rt_ringbuffer_getchar+0xe0> addi	sp,sp,32
1c00e644 <rt_ringbuffer_getchar+0xe2> ret
rt_ringbuffer_data_len():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:293

/** 
 * get the size of data in rb 
 */
rt_size_t rt_ringbuffer_data_len(struct rt_ringbuffer *rb)
{
1c00e646 <rt_ringbuffer_data_len> addi	sp,sp,-32
1c00e648 <rt_ringbuffer_data_len+0x2> sw	ra,28(sp)
1c00e64a <rt_ringbuffer_data_len+0x4> sw	s0,24(sp)
1c00e64c <rt_ringbuffer_data_len+0x6> addi	s0,sp,32
1c00e64e <rt_ringbuffer_data_len+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:294
    switch (rt_ringbuffer_status(rb))
1c00e652 <rt_ringbuffer_data_len+0xc> lw	a0,-20(s0)
1c00e656 <rt_ringbuffer_data_len+0x10> jal	ra,1c00e364 <rt_ringbuffer_status>
1c00e65a <rt_ringbuffer_data_len+0x14> mv	a5,a0
1c00e65c <rt_ringbuffer_data_len+0x16> beqz	a5,1c00e666 <rt_ringbuffer_data_len+0x20>
1c00e65e <rt_ringbuffer_data_len+0x18> li	a4,1
1c00e660 <rt_ringbuffer_data_len+0x1a> beq	a5,a4,1c00e66a <rt_ringbuffer_data_len+0x24>
1c00e664 <rt_ringbuffer_data_len+0x1e> j	1c00e674 <rt_ringbuffer_data_len+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:297
    {
    case RT_RINGBUFFER_EMPTY:
        return 0;
1c00e666 <rt_ringbuffer_data_len+0x20> li	a5,0
1c00e668 <rt_ringbuffer_data_len+0x22> j	1c00e6ea <rt_ringbuffer_data_len+0xa4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:299
    case RT_RINGBUFFER_FULL:
        return rb->buffer_size;
1c00e66a <rt_ringbuffer_data_len+0x24> lw	a5,-20(s0)
1c00e66e <rt_ringbuffer_data_len+0x28> lh	a5,8(a5)
1c00e672 <rt_ringbuffer_data_len+0x2c> j	1c00e6ea <rt_ringbuffer_data_len+0xa4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:302
    case RT_RINGBUFFER_HALFFULL:
    default:
        if (rb->write_index > rb->read_index)
1c00e674 <rt_ringbuffer_data_len+0x2e> lw	a5,-20(s0)
1c00e678 <rt_ringbuffer_data_len+0x32> lhu	a5,6(a5)
1c00e67c <rt_ringbuffer_data_len+0x36> srli	a5,a5,0x1
1c00e67e <rt_ringbuffer_data_len+0x38> slli	a4,a5,0x10
1c00e682 <rt_ringbuffer_data_len+0x3c> srli	a4,a4,0x10
1c00e684 <rt_ringbuffer_data_len+0x3e> lw	a5,-20(s0)
1c00e688 <rt_ringbuffer_data_len+0x42> lhu	a5,4(a5)
1c00e68c <rt_ringbuffer_data_len+0x46> srli	a5,a5,0x1
1c00e68e <rt_ringbuffer_data_len+0x48> slli	a5,a5,0x10
1c00e690 <rt_ringbuffer_data_len+0x4a> srli	a5,a5,0x10
1c00e692 <rt_ringbuffer_data_len+0x4c> bgeu	a5,a4,1c00e6ba <rt_ringbuffer_data_len+0x74>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:303
            return rb->write_index - rb->read_index;
1c00e696 <rt_ringbuffer_data_len+0x50> lw	a5,-20(s0)
1c00e69a <rt_ringbuffer_data_len+0x54> lhu	a5,6(a5)
1c00e69e <rt_ringbuffer_data_len+0x58> srli	a5,a5,0x1
1c00e6a0 <rt_ringbuffer_data_len+0x5a> slli	a5,a5,0x10
1c00e6a2 <rt_ringbuffer_data_len+0x5c> srli	a5,a5,0x10
1c00e6a4 <rt_ringbuffer_data_len+0x5e> mv	a4,a5
1c00e6a6 <rt_ringbuffer_data_len+0x60> lw	a5,-20(s0)
1c00e6aa <rt_ringbuffer_data_len+0x64> lhu	a5,4(a5)
1c00e6ae <rt_ringbuffer_data_len+0x68> srli	a5,a5,0x1
1c00e6b0 <rt_ringbuffer_data_len+0x6a> slli	a5,a5,0x10
1c00e6b2 <rt_ringbuffer_data_len+0x6c> srli	a5,a5,0x10
1c00e6b4 <rt_ringbuffer_data_len+0x6e> sub	a5,a4,a5
1c00e6b8 <rt_ringbuffer_data_len+0x72> j	1c00e6ea <rt_ringbuffer_data_len+0xa4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:305
        else
            return rb->buffer_size - (rb->read_index - rb->write_index);
1c00e6ba <rt_ringbuffer_data_len+0x74> lw	a5,-20(s0)
1c00e6be <rt_ringbuffer_data_len+0x78> lh	a5,8(a5)
1c00e6c2 <rt_ringbuffer_data_len+0x7c> mv	a4,a5
1c00e6c4 <rt_ringbuffer_data_len+0x7e> lw	a5,-20(s0)
1c00e6c8 <rt_ringbuffer_data_len+0x82> lhu	a5,4(a5)
1c00e6cc <rt_ringbuffer_data_len+0x86> srli	a5,a5,0x1
1c00e6ce <rt_ringbuffer_data_len+0x88> slli	a5,a5,0x10
1c00e6d0 <rt_ringbuffer_data_len+0x8a> srli	a5,a5,0x10
1c00e6d2 <rt_ringbuffer_data_len+0x8c> mv	a3,a5
1c00e6d4 <rt_ringbuffer_data_len+0x8e> lw	a5,-20(s0)
1c00e6d8 <rt_ringbuffer_data_len+0x92> lhu	a5,6(a5)
1c00e6dc <rt_ringbuffer_data_len+0x96> srli	a5,a5,0x1
1c00e6de <rt_ringbuffer_data_len+0x98> slli	a5,a5,0x10
1c00e6e0 <rt_ringbuffer_data_len+0x9a> srli	a5,a5,0x10
1c00e6e2 <rt_ringbuffer_data_len+0x9c> sub	a5,a3,a5
1c00e6e6 <rt_ringbuffer_data_len+0xa0> sub	a5,a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/src/ringbuffer.c:307
    };
}
1c00e6ea <rt_ringbuffer_data_len+0xa4> mv	a0,a5
1c00e6ec <rt_ringbuffer_data_len+0xa6> lw	ra,28(sp)
1c00e6ee <rt_ringbuffer_data_len+0xa8> lw	s0,24(sp)
1c00e6f0 <rt_ringbuffer_data_len+0xaa> addi	sp,sp,32
1c00e6f2 <rt_ringbuffer_data_len+0xac> ret
rt_list_isempty():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:99
{
1c00e6f4 <rt_list_isempty> addi	sp,sp,-32
1c00e6f6 <rt_list_isempty+0x2> sw	s0,28(sp)
1c00e6f8 <rt_list_isempty+0x4> addi	s0,sp,32
1c00e6fa <rt_list_isempty+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:100
    return l->next == l;
1c00e6fe <rt_list_isempty+0xa> lw	a5,-20(s0)
1c00e702 <rt_list_isempty+0xe> lw	a5,0(a5)
1c00e704 <rt_list_isempty+0x10> lw	a4,-20(s0)
1c00e708 <rt_list_isempty+0x14> sub	a5,a4,a5
1c00e70c <rt_list_isempty+0x18> seqz	a5,a5
1c00e710 <rt_list_isempty+0x1c> andi	a5,a5,255
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:101
}
1c00e714 <rt_list_isempty+0x20> mv	a0,a5
1c00e716 <rt_list_isempty+0x22> lw	s0,28(sp)
1c00e718 <rt_list_isempty+0x24> addi	sp,sp,32
1c00e71a <rt_list_isempty+0x26> ret
rt_list_len():
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:108
/**
 * @brief get the list length
 * @param l the list to get.
 */
rt_inline unsigned int rt_list_len(const rt_list_t *l)
{
1c00e71c <rt_list_len> addi	sp,sp,-48
1c00e71e <rt_list_len+0x2> sw	s0,44(sp)
1c00e720 <rt_list_len+0x4> addi	s0,sp,48
1c00e722 <rt_list_len+0x6> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:109
    unsigned int len = 0;
1c00e726 <rt_list_len+0xa> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:110
    const rt_list_t *p = l;
1c00e72a <rt_list_len+0xe> lw	a5,-36(s0)
1c00e72e <rt_list_len+0x12> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:111
    while (p->next != l)
1c00e732 <rt_list_len+0x16> j	1c00e748 <rt_list_len+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:113
    {
        p = p->next;
1c00e734 <rt_list_len+0x18> lw	a5,-24(s0)
1c00e738 <rt_list_len+0x1c> lw	a5,0(a5)
1c00e73a <rt_list_len+0x1e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:114
        len ++;
1c00e73e <rt_list_len+0x22> lw	a5,-20(s0)
1c00e742 <rt_list_len+0x26> addi	a5,a5,1
1c00e744 <rt_list_len+0x28> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:111
    while (p->next != l)
1c00e748 <rt_list_len+0x2c> lw	a5,-24(s0)
1c00e74c <rt_list_len+0x30> lw	a5,0(a5)
1c00e74e <rt_list_len+0x32> lw	a4,-36(s0)
1c00e752 <rt_list_len+0x36> bne	a4,a5,1c00e734 <rt_list_len+0x18>
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:117
    }

    return len;
1c00e756 <rt_list_len+0x3a> lw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/rtservice.h:118
}
1c00e75a <rt_list_len+0x3e> mv	a0,a5
1c00e75c <rt_list_len+0x40> lw	s0,44(sp)
1c00e75e <rt_list_len+0x42> addi	sp,sp,48
1c00e760 <rt_list_len+0x44> ret
hello():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:44
#include "finsh.h"

#define LIST_FIND_OBJ_NR 8

long hello(void)
{
1c00e762 <hello> addi	sp,sp,-16
1c00e764 <hello+0x2> sw	ra,12(sp)
1c00e766 <hello+0x4> sw	s0,8(sp)
1c00e768 <hello+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:45
    rt_kprintf("Hello RT-Thread!\n");
1c00e76a <hello+0x8> lui	a5,0x1c010
1c00e76e <hello+0xc> addi	a0,a5,1984 # 1c0107c0 <__fsym_list_mem_desc+0x20>
1c00e772 <hello+0x10> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:47

    return 0;
1c00e776 <hello+0x14> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:48
}
1c00e778 <hello+0x16> mv	a0,a5
1c00e77a <hello+0x18> lw	ra,12(sp)
1c00e77c <hello+0x1a> lw	s0,8(sp)
1c00e77e <hello+0x1c> addi	sp,sp,16
1c00e780 <hello+0x1e> ret
version():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:53
FINSH_FUNCTION_EXPORT(hello, say hello world);

extern void rt_show_version(void);
long version(void)
{
1c00e782 <version> addi	sp,sp,-16
1c00e784 <version+0x2> sw	ra,12(sp)
1c00e786 <version+0x4> sw	s0,8(sp)
1c00e788 <version+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:54
    rt_show_version();
1c00e78a <version+0x8> jal	ra,1c00bc86 <rt_show_version>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:56

    return 0;
1c00e78e <version+0xc> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:57
}
1c00e790 <version+0xe> mv	a0,a5
1c00e792 <version+0x10> lw	ra,12(sp)
1c00e794 <version+0x12> lw	s0,8(sp)
1c00e796 <version+0x14> addi	sp,sp,16
1c00e798 <version+0x16> ret
object_split():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:62
FINSH_FUNCTION_EXPORT(version, show RT-Thread version information);
MSH_CMD_EXPORT(version, show RT-Thread version information);

rt_inline void object_split(int len)
{
1c00e79a <object_split> addi	sp,sp,-32
1c00e79c <object_split+0x2> sw	ra,28(sp)
1c00e79e <object_split+0x4> sw	s0,24(sp)
1c00e7a0 <object_split+0x6> addi	s0,sp,32
1c00e7a2 <object_split+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:63
    while (len--) rt_kprintf("-");
1c00e7a6 <object_split+0xc> j	1c00e7b4 <object_split+0x1a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:63 (discriminator 2)
1c00e7a8 <object_split+0xe> lui	a5,0x1c010
1c00e7ac <object_split+0x12> addi	a0,a5,2004 # 1c0107d4 <__fsym_list_mem_desc+0x34>
1c00e7b0 <object_split+0x16> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:63 (discriminator 1)
1c00e7b4 <object_split+0x1a> lw	a5,-20(s0)
1c00e7b8 <object_split+0x1e> addi	a4,a5,-1
1c00e7bc <object_split+0x22> sw	a4,-20(s0)
1c00e7c0 <object_split+0x26> bnez	a5,1c00e7a8 <object_split+0xe>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:64
}
1c00e7c2 <object_split+0x28> nop
1c00e7c4 <object_split+0x2a> lw	ra,28(sp)
1c00e7c6 <object_split+0x2c> lw	s0,24(sp)
1c00e7c8 <object_split+0x2e> addi	sp,sp,32
1c00e7ca <object_split+0x30> ret
list_find_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:76
    int nr;             /* input: max nr, can't be 0 */
    int nr_out;         /* out: got nr */
} list_get_next_t;

static void list_find_init(list_get_next_t *p, rt_uint8_t type, rt_list_t **array, int nr)
{
1c00e7cc <list_find_init> addi	sp,sp,-48
1c00e7ce <list_find_init+0x2> sw	ra,44(sp)
1c00e7d0 <list_find_init+0x4> sw	s0,40(sp)
1c00e7d2 <list_find_init+0x6> addi	s0,sp,48
1c00e7d4 <list_find_init+0x8> sw	a0,-36(s0)
1c00e7d8 <list_find_init+0xc> mv	a5,a1
1c00e7da <list_find_init+0xe> sw	a2,-44(s0)
1c00e7de <list_find_init+0x12> sw	a3,-48(s0)
1c00e7e2 <list_find_init+0x16> sb	a5,-37(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:80
    struct rt_object_information *info;
    rt_list_t *list;

    info = rt_object_get_information((enum rt_object_class_type)type);
1c00e7e6 <list_find_init+0x1a> lbu	a5,-37(s0)
1c00e7ea <list_find_init+0x1e> mv	a0,a5
1c00e7ec <list_find_init+0x20> jal	ra,1c00c7f2 <rt_object_get_information>
1c00e7f0 <list_find_init+0x24> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:81
    list = &info->object_list;
1c00e7f4 <list_find_init+0x28> lw	a5,-20(s0)
1c00e7f8 <list_find_init+0x2c> addi	a5,a5,4
1c00e7fa <list_find_init+0x2e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:83

    p->list = list;
1c00e7fe <list_find_init+0x32> lw	a5,-36(s0)
1c00e802 <list_find_init+0x36> lw	a4,-24(s0)
1c00e806 <list_find_init+0x3a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:84
    p->type = type;
1c00e808 <list_find_init+0x3c> lw	a5,-36(s0)
1c00e80c <list_find_init+0x40> lbu	a4,-37(s0)
1c00e810 <list_find_init+0x44> sb	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:85
    p->array = array;
1c00e814 <list_find_init+0x48> lw	a5,-36(s0)
1c00e818 <list_find_init+0x4c> lw	a4,-44(s0)
1c00e81c <list_find_init+0x50> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:86
    p->nr = nr;
1c00e81e <list_find_init+0x52> lw	a5,-36(s0)
1c00e822 <list_find_init+0x56> lw	a4,-48(s0)
1c00e826 <list_find_init+0x5a> sw	a4,12(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:87
    p->nr_out = 0;
1c00e828 <list_find_init+0x5c> lw	a5,-36(s0)
1c00e82c <list_find_init+0x60> sw	zero,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:88
}
1c00e830 <list_find_init+0x64> nop
1c00e832 <list_find_init+0x66> lw	ra,44(sp)
1c00e834 <list_find_init+0x68> lw	s0,40(sp)
1c00e836 <list_find_init+0x6a> addi	sp,sp,48
1c00e838 <list_find_init+0x6c> ret
list_get_next():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:91

static rt_list_t *list_get_next(rt_list_t *current, list_get_next_t *arg)
{
1c00e83a <list_get_next> addi	sp,sp,-64
1c00e83c <list_get_next+0x2> sw	ra,60(sp)
1c00e83e <list_get_next+0x4> sw	s0,56(sp)
1c00e840 <list_get_next+0x6> addi	s0,sp,64
1c00e842 <list_get_next+0x8> sw	a0,-52(s0)
1c00e846 <list_get_next+0xc> sw	a1,-56(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:92
    int first_flag = 0;
1c00e84a <list_get_next+0x10> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:98
    rt_ubase_t level;
    rt_list_t *node, *list;
    rt_list_t **array;
    int nr;

    arg->nr_out = 0;
1c00e84e <list_get_next+0x14> lw	a5,-56(s0)
1c00e852 <list_get_next+0x18> sw	zero,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:100

    if (!arg->nr || !arg->type)
1c00e856 <list_get_next+0x1c> lw	a5,-56(s0)
1c00e85a <list_get_next+0x20> lw	a5,12(a5)
1c00e85c <list_get_next+0x22> beqz	a5,1c00e868 <list_get_next+0x2e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:100 (discriminator 1)
1c00e85e <list_get_next+0x24> lw	a5,-56(s0)
1c00e862 <list_get_next+0x28> lbu	a5,8(a5)
1c00e866 <list_get_next+0x2c> bnez	a5,1c00e86c <list_get_next+0x32>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:102
    {
        return (rt_list_t *)RT_NULL;
1c00e868 <list_get_next+0x2e> li	a5,0
1c00e86a <list_get_next+0x30> j	1c00e944 <list_get_next+0x10a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:105
    }

    list = arg->list;
1c00e86c <list_get_next+0x32> lw	a5,-56(s0)
1c00e870 <list_get_next+0x36> lw	a5,0(a5)
1c00e872 <list_get_next+0x38> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:107

    if (!current) /* find first */
1c00e876 <list_get_next+0x3c> lw	a5,-52(s0)
1c00e87a <list_get_next+0x40> bnez	a5,1c00e88c <list_get_next+0x52>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:109
    {
        node = list;
1c00e87c <list_get_next+0x42> lw	a5,-36(s0)
1c00e880 <list_get_next+0x46> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:110
        first_flag = 1;
1c00e884 <list_get_next+0x4a> li	a5,1
1c00e886 <list_get_next+0x4c> sw	a5,-20(s0)
1c00e88a <list_get_next+0x50> j	1c00e894 <list_get_next+0x5a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:114
    }
    else
    {
        node = current;
1c00e88c <list_get_next+0x52> lw	a5,-52(s0)
1c00e890 <list_get_next+0x56> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:117
    }

    level = rt_hw_interrupt_disable();
1c00e894 <list_get_next+0x5a> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00e898 <list_get_next+0x5e> mv	a5,a0
1c00e89a <list_get_next+0x60> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:119

    if (!first_flag)
1c00e89e <list_get_next+0x64> lw	a5,-20(s0)
1c00e8a2 <list_get_next+0x68> bnez	a5,1c00e8d4 <list_get_next+0x9a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:123
    {
        struct rt_object *obj;
        /* The node in the list? */
        obj = rt_list_entry(node, struct rt_object, list);
1c00e8a4 <list_get_next+0x6a> lw	a5,-24(s0)
1c00e8a8 <list_get_next+0x6e> addi	a5,a5,-12
1c00e8aa <list_get_next+0x70> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:124
        if ((obj->type & ~RT_Object_Class_Static) != arg->type)
1c00e8ae <list_get_next+0x74> lw	a5,-44(s0)
1c00e8b2 <list_get_next+0x78> lbu	a5,8(a5)
1c00e8b6 <list_get_next+0x7c> andi	a5,a5,-129
1c00e8ba <list_get_next+0x80> lw	a4,-56(s0)
1c00e8be <list_get_next+0x84> lbu	a4,8(a4)
1c00e8c2 <list_get_next+0x88> beq	a5,a4,1c00e8d4 <list_get_next+0x9a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:126
        {
            rt_hw_interrupt_enable(level);
1c00e8c6 <list_get_next+0x8c> lw	a5,-40(s0)
1c00e8ca <list_get_next+0x90> mv	a0,a5
1c00e8cc <list_get_next+0x92> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:127
            return (rt_list_t *)RT_NULL;
1c00e8d0 <list_get_next+0x96> li	a5,0
1c00e8d2 <list_get_next+0x98> j	1c00e944 <list_get_next+0x10a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:131
        }
    }

    nr = 0;
1c00e8d4 <list_get_next+0x9a> sw	zero,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:132
    array = arg->array;
1c00e8d8 <list_get_next+0x9e> lw	a5,-56(s0)
1c00e8dc <list_get_next+0xa2> lw	a5,4(a5)
1c00e8de <list_get_next+0xa4> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:135
    while (1)
    {
        node = node->next;
1c00e8e2 <list_get_next+0xa8> lw	a5,-24(s0)
1c00e8e6 <list_get_next+0xac> lw	a5,0(a5)
1c00e8e8 <list_get_next+0xae> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:137

        if (node == list)
1c00e8ec <list_get_next+0xb2> lw	a4,-24(s0)
1c00e8f0 <list_get_next+0xb6> lw	a5,-36(s0)
1c00e8f4 <list_get_next+0xba> bne	a4,a5,1c00e8fe <list_get_next+0xc4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:139
        {
            node = (rt_list_t *)RT_NULL;
1c00e8f8 <list_get_next+0xbe> sw	zero,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:140
            break;
1c00e8fc <list_get_next+0xc2> j	1c00e92c <list_get_next+0xf2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:142
        }
        nr++;
1c00e8fe <list_get_next+0xc4> lw	a5,-32(s0)
1c00e902 <list_get_next+0xc8> addi	a5,a5,1
1c00e904 <list_get_next+0xca> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:143
        *array++ = node;
1c00e908 <list_get_next+0xce> lw	a5,-28(s0)
1c00e90c <list_get_next+0xd2> addi	a4,a5,4
1c00e910 <list_get_next+0xd6> sw	a4,-28(s0)
1c00e914 <list_get_next+0xda> lw	a4,-24(s0)
1c00e918 <list_get_next+0xde> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:144
        if (nr == arg->nr)
1c00e91a <list_get_next+0xe0> lw	a5,-56(s0)
1c00e91e <list_get_next+0xe4> lw	a5,12(a5)
1c00e920 <list_get_next+0xe6> lw	a4,-32(s0)
1c00e924 <list_get_next+0xea> beq	a4,a5,1c00e92a <list_get_next+0xf0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:135
        node = node->next;
1c00e928 <list_get_next+0xee> j	1c00e8e2 <list_get_next+0xa8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:146
        {
            break;
1c00e92a <list_get_next+0xf0> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:150
        }
    }

    rt_hw_interrupt_enable(level);
1c00e92c <list_get_next+0xf2> lw	a5,-40(s0)
1c00e930 <list_get_next+0xf6> mv	a0,a5
1c00e932 <list_get_next+0xf8> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:151
    arg->nr_out = nr;
1c00e936 <list_get_next+0xfc> lw	a5,-56(s0)
1c00e93a <list_get_next+0x100> lw	a4,-32(s0)
1c00e93e <list_get_next+0x104> sw	a4,16(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:152
    return node;
1c00e940 <list_get_next+0x106> lw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:153
}
1c00e944 <list_get_next+0x10a> mv	a0,a5
1c00e946 <list_get_next+0x10c> lw	ra,60(sp)
1c00e948 <list_get_next+0x10e> lw	s0,56(sp)
1c00e94a <list_get_next+0x110> addi	sp,sp,64
1c00e94c <list_get_next+0x112> ret
list_thread():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:156

long list_thread(void)
{
1c00e94e <list_thread> addi	sp,sp,-224
1c00e950 <list_thread+0x2> sw	ra,220(sp)
1c00e952 <list_thread+0x4> sw	s0,216(sp)
1c00e954 <list_thread+0x6> addi	s0,sp,224
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:160
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t*)RT_NULL;
1c00e956 <list_thread+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:161
    const char *item_title = "thread";
1c00e95a <list_thread+0xc> lui	a5,0x1c010
1c00e95e <list_thread+0x10> addi	a5,a5,2008 # 1c0107d8 <__fsym_list_mem_desc+0x38>
1c00e962 <list_thread+0x14> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:164
    int maxlen;

    list_find_init(&find_arg, RT_Object_Class_Thread, obj_list, sizeof(obj_list)/sizeof(obj_list[0]));
1c00e966 <list_thread+0x18> addi	a4,s0,-104
1c00e96a <list_thread+0x1c> addi	a5,s0,-72
1c00e96e <list_thread+0x20> li	a3,8
1c00e970 <list_thread+0x22> mv	a2,a4
1c00e972 <list_thread+0x24> li	a1,1
1c00e974 <list_thread+0x26> mv	a0,a5
1c00e976 <list_thread+0x28> jal	ra,1c00e7cc <list_find_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:166

    maxlen = RT_NAME_MAX;
1c00e97a <list_thread+0x2c> li	a5,8
1c00e97c <list_thread+0x2e> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:172

#ifdef RT_USING_SMP
    rt_kprintf("%-*.s cpu pri  status      sp     stack size max used left tick  error\n", maxlen, item_title); object_split(maxlen);
    rt_kprintf(     " --- ---  ------- ---------- ----------  ------  ---------- ---\n");
#else
    rt_kprintf("%-*.s pri  status      sp     stack size max used left tick  error\n", maxlen, item_title); object_split(maxlen);
1c00e980 <list_thread+0x32> lw	a2,-32(s0)
1c00e984 <list_thread+0x36> lw	a1,-36(s0)
1c00e988 <list_thread+0x3a> lui	a5,0x1c010
1c00e98c <list_thread+0x3e> addi	a0,a5,2016 # 1c0107e0 <__fsym_list_mem_desc+0x40>
1c00e990 <list_thread+0x42> jal	ra,1c00c652 <rt_kprintf>
1c00e994 <list_thread+0x46> lw	a0,-36(s0)
1c00e998 <list_thread+0x4a> jal	ra,1c00e79a <object_split>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:173
    rt_kprintf(     " ---  ------- ---------- ----------  ------  ---------- ---\n");
1c00e99c <list_thread+0x4e> lui	a5,0x1c011
1c00e9a0 <list_thread+0x52> addi	a0,a5,-2012 # 1c010824 <__fsym_list_mem_desc+0x84>
1c00e9a4 <list_thread+0x56> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:178
#endif /*RT_USING_SMP*/

    do
    {
        next = list_get_next(next, &find_arg);
1c00e9a8 <list_thread+0x5a> addi	a5,s0,-72
1c00e9ac <list_thread+0x5e> mv	a1,a5
1c00e9ae <list_thread+0x60> lw	a0,-20(s0)
1c00e9b2 <list_thread+0x64> jal	ra,1c00e83a <list_get_next>
1c00e9b6 <list_thread+0x68> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:181
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
1c00e9ba <list_thread+0x6c> sw	zero,-24(s0)
1c00e9be <list_thread+0x70> j	1c00eb58 <list_thread+0x20a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:186
            {
                struct rt_object *obj;
                struct rt_thread thread_info, *thread;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
1c00e9c0 <list_thread+0x72> lw	a5,-24(s0)
1c00e9c4 <list_thread+0x76> slli	a5,a5,0x2
1c00e9c6 <list_thread+0x78> addi	a4,s0,-16
1c00e9ca <list_thread+0x7c> add	a5,a5,a4
1c00e9cc <list_thread+0x7e> lw	a5,-88(a5)
1c00e9d0 <list_thread+0x82> addi	a5,a5,-12
1c00e9d2 <list_thread+0x84> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:187
                level = rt_hw_interrupt_disable();
1c00e9d6 <list_thread+0x88> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00e9da <list_thread+0x8c> mv	a5,a0
1c00e9dc <list_thread+0x8e> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:189

                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
1c00e9e0 <list_thread+0x92> lw	a5,-40(s0)
1c00e9e4 <list_thread+0x96> lbu	a5,8(a5)
1c00e9e8 <list_thread+0x9a> andi	a5,a5,-129
1c00e9ec <list_thread+0x9e> lbu	a4,-64(s0)
1c00e9f0 <list_thread+0xa2> beq	a5,a4,1c00ea00 <list_thread+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:191
                {
                    rt_hw_interrupt_enable(level);
1c00e9f4 <list_thread+0xa6> lw	a5,-44(s0)
1c00e9f8 <list_thread+0xaa> mv	a0,a5
1c00e9fa <list_thread+0xac> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
1c00e9fe <list_thread+0xb0> j	1c00eb4e <list_thread+0x200>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:195
                    continue;
                }
                /* copy info */
                memcpy(&thread_info, obj, sizeof thread_info);
1c00ea00 <list_thread+0xb2> addi	a5,s0,-224
1c00ea04 <list_thread+0xb6> li	a2,120
1c00ea08 <list_thread+0xba> lw	a1,-40(s0)
1c00ea0c <list_thread+0xbe> mv	a0,a5
1c00ea0e <list_thread+0xc0> jal	ra,1c0081b2 <memcpy>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:196
                rt_hw_interrupt_enable(level);
1c00ea12 <list_thread+0xc4> lw	a5,-44(s0)
1c00ea16 <list_thread+0xc8> mv	a0,a5
1c00ea18 <list_thread+0xca> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:198

                thread = (struct rt_thread*)obj;
1c00ea1c <list_thread+0xce> lw	a5,-40(s0)
1c00ea20 <list_thread+0xd2> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:210
                        rt_kprintf("%-*.*s %3d %3d ", maxlen, RT_NAME_MAX, thread->name, thread->oncpu, thread->current_priority);
                    else
                        rt_kprintf("%-*.*s N/A %3d ", maxlen, RT_NAME_MAX, thread->name, thread->current_priority);

#else
                    rt_kprintf("%-*.*s %3d ", maxlen, RT_NAME_MAX, thread->name, thread->current_priority);
1c00ea24 <list_thread+0xd6> lw	a3,-48(s0)
1c00ea28 <list_thread+0xda> lw	a5,-48(s0)
1c00ea2c <list_thread+0xde> lbu	a5,53(a5)
1c00ea30 <list_thread+0xe2> mv	a4,a5
1c00ea32 <list_thread+0xe4> li	a2,8
1c00ea34 <list_thread+0xe6> lw	a1,-36(s0)
1c00ea38 <list_thread+0xea> lui	a5,0x1c011
1c00ea3c <list_thread+0xee> addi	a0,a5,-1948 # 1c010864 <__fsym_list_mem_desc+0xc4>
1c00ea40 <list_thread+0xf2> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:212
#endif /*RT_USING_SMP*/
                    stat = (thread->stat & RT_THREAD_STAT_MASK);
1c00ea44 <list_thread+0xf6> lw	a5,-48(s0)
1c00ea48 <list_thread+0xfa> lbu	a5,52(a5)
1c00ea4c <list_thread+0xfe> andi	a5,a5,15
1c00ea4e <list_thread+0x100> sb	a5,-49(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:213
                    if (stat == RT_THREAD_READY)        rt_kprintf(" ready  ");
1c00ea52 <list_thread+0x104> lbu	a4,-49(s0)
1c00ea56 <list_thread+0x108> li	a5,1
1c00ea58 <list_thread+0x10a> bne	a4,a5,1c00ea6a <list_thread+0x11c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:213 (discriminator 1)
1c00ea5c <list_thread+0x10e> lui	a5,0x1c011
1c00ea60 <list_thread+0x112> addi	a0,a5,-1936 # 1c010870 <__fsym_list_mem_desc+0xd0>
1c00ea64 <list_thread+0x116> jal	ra,1c00c652 <rt_kprintf>
1c00ea68 <list_thread+0x11a> j	1c00eac4 <list_thread+0x176>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:214
                    else if (stat == RT_THREAD_SUSPEND) rt_kprintf(" suspend");
1c00ea6a <list_thread+0x11c> lbu	a4,-49(s0)
1c00ea6e <list_thread+0x120> li	a5,2
1c00ea70 <list_thread+0x122> bne	a4,a5,1c00ea82 <list_thread+0x134>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:214 (discriminator 1)
1c00ea74 <list_thread+0x126> lui	a5,0x1c011
1c00ea78 <list_thread+0x12a> addi	a0,a5,-1924 # 1c01087c <__fsym_list_mem_desc+0xdc>
1c00ea7c <list_thread+0x12e> jal	ra,1c00c652 <rt_kprintf>
1c00ea80 <list_thread+0x132> j	1c00eac4 <list_thread+0x176>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:215
                    else if (stat == RT_THREAD_INIT)    rt_kprintf(" init   ");
1c00ea82 <list_thread+0x134> lbu	a5,-49(s0)
1c00ea86 <list_thread+0x138> bnez	a5,1c00ea96 <list_thread+0x148>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:215 (discriminator 1)
1c00ea88 <list_thread+0x13a> lui	a5,0x1c011
1c00ea8c <list_thread+0x13e> addi	a0,a5,-1912 # 1c010888 <__fsym_list_mem_desc+0xe8>
1c00ea90 <list_thread+0x142> jal	ra,1c00c652 <rt_kprintf>
1c00ea94 <list_thread+0x146> j	1c00eac4 <list_thread+0x176>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:216
                    else if (stat == RT_THREAD_CLOSE)   rt_kprintf(" close  ");
1c00ea96 <list_thread+0x148> lbu	a4,-49(s0)
1c00ea9a <list_thread+0x14c> li	a5,4
1c00ea9c <list_thread+0x14e> bne	a4,a5,1c00eaae <list_thread+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:216 (discriminator 1)
1c00eaa0 <list_thread+0x152> lui	a5,0x1c011
1c00eaa4 <list_thread+0x156> addi	a0,a5,-1900 # 1c010894 <__fsym_list_mem_desc+0xf4>
1c00eaa8 <list_thread+0x15a> jal	ra,1c00c652 <rt_kprintf>
1c00eaac <list_thread+0x15e> j	1c00eac4 <list_thread+0x176>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:217
                    else if (stat == RT_THREAD_RUNNING) rt_kprintf(" running");
1c00eaae <list_thread+0x160> lbu	a4,-49(s0)
1c00eab2 <list_thread+0x164> li	a5,3
1c00eab4 <list_thread+0x166> bne	a4,a5,1c00eac4 <list_thread+0x176>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:217 (discriminator 1)
1c00eab8 <list_thread+0x16a> lui	a5,0x1c011
1c00eabc <list_thread+0x16e> addi	a0,a5,-1888 # 1c0108a0 <__fsym_list_mem_desc+0x100>
1c00eac0 <list_thread+0x172> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:230
                            thread->stack_size,
                            ((rt_ubase_t)ptr - (rt_ubase_t)thread->stack_addr) * 100 / thread->stack_size,
                            thread->remaining_tick,
                            thread->error);
#else
                    ptr = (rt_uint8_t *)thread->stack_addr;
1c00eac4 <list_thread+0x176> lw	a5,-48(s0)
1c00eac8 <list_thread+0x17a> lw	a5,40(a5)
1c00eaca <list_thread+0x17c> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:231
                    while (*ptr == '#')ptr ++;
1c00eace <list_thread+0x180> j	1c00eada <list_thread+0x18c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:231 (discriminator 2)
1c00ead0 <list_thread+0x182> lw	a5,-28(s0)
1c00ead4 <list_thread+0x186> addi	a5,a5,1
1c00ead6 <list_thread+0x188> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:231 (discriminator 1)
1c00eada <list_thread+0x18c> lw	a5,-28(s0)
1c00eade <list_thread+0x190> lbu	a4,0(a5)
1c00eae2 <list_thread+0x194> li	a5,35
1c00eae6 <list_thread+0x198> beq	a4,a5,1c00ead0 <list_thread+0x182>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:234

                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
                            thread->stack_size + ((rt_ubase_t)thread->stack_addr - (rt_ubase_t)thread->sp),
1c00eaea <list_thread+0x19c> lw	a5,-48(s0)
1c00eaee <list_thread+0x1a0> lw	a4,44(a5)
1c00eaf0 <list_thread+0x1a2> lw	a5,-48(s0)
1c00eaf4 <list_thread+0x1a6> lw	a5,40(a5)
1c00eaf6 <list_thread+0x1a8> mv	a3,a5
1c00eaf8 <list_thread+0x1aa> lw	a5,-48(s0)
1c00eafc <list_thread+0x1ae> lw	a5,28(a5)
1c00eafe <list_thread+0x1b0> sub	a5,a3,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:233
                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
1c00eb02 <list_thread+0x1b4> add	a1,a4,a5
1c00eb06 <list_thread+0x1b8> lw	a5,-48(s0)
1c00eb0a <list_thread+0x1bc> lw	a2,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:236
                            thread->stack_size,
                            (thread->stack_size - ((rt_ubase_t) ptr - (rt_ubase_t) thread->stack_addr)) * 100
1c00eb0c <list_thread+0x1be> lw	a5,-48(s0)
1c00eb10 <list_thread+0x1c2> lw	a4,44(a5)
1c00eb12 <list_thread+0x1c4> lw	a5,-48(s0)
1c00eb16 <list_thread+0x1c8> lw	a5,40(a5)
1c00eb18 <list_thread+0x1ca> mv	a3,a5
1c00eb1a <list_thread+0x1cc> lw	a5,-28(s0)
1c00eb1e <list_thread+0x1d0> sub	a5,a3,a5
1c00eb22 <list_thread+0x1d4> add	a4,a4,a5
1c00eb24 <list_thread+0x1d6> li	a5,100
1c00eb28 <list_thread+0x1da> mul	a4,a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:237
                            / thread->stack_size,
1c00eb2c <list_thread+0x1de> lw	a5,-48(s0)
1c00eb30 <list_thread+0x1e2> lw	a5,44(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:233
                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
1c00eb32 <list_thread+0x1e4> divu	a3,a4,a5
1c00eb36 <list_thread+0x1e8> lw	a5,-48(s0)
1c00eb3a <list_thread+0x1ec> lw	a4,64(a5)
1c00eb3c <list_thread+0x1ee> lw	a5,-48(s0)
1c00eb40 <list_thread+0x1f2> lw	a5,48(a5)
1c00eb42 <list_thread+0x1f4> lui	a0,0x1c011
1c00eb46 <list_thread+0x1f8> addi	a0,a0,-1876 # 1c0108ac <__fsym_list_mem_desc+0x10c>
1c00eb4a <list_thread+0x1fc> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:181 (discriminator 2)
            for (i = 0; i < find_arg.nr_out; i++)
1c00eb4e <list_thread+0x200> lw	a5,-24(s0)
1c00eb52 <list_thread+0x204> addi	a5,a5,1
1c00eb54 <list_thread+0x206> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:181 (discriminator 1)
1c00eb58 <list_thread+0x20a> lw	a5,-56(s0)
1c00eb5c <list_thread+0x20e> lw	a4,-24(s0)
1c00eb60 <list_thread+0x212> blt	a4,a5,1c00e9c0 <list_thread+0x72>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:245
#endif
                }
            }
        }
    }
    while (next != (rt_list_t*)RT_NULL);
1c00eb64 <list_thread+0x216> lw	a5,-20(s0)
1c00eb68 <list_thread+0x21a> bnez	a5,1c00e9a8 <list_thread+0x5a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:247

    return 0;
1c00eb6c <list_thread+0x21e> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:248
}
1c00eb6e <list_thread+0x220> mv	a0,a5
1c00eb70 <list_thread+0x222> lw	ra,220(sp)
1c00eb72 <list_thread+0x224> lw	s0,216(sp)
1c00eb74 <list_thread+0x226> addi	sp,sp,224
1c00eb76 <list_thread+0x228> ret
show_wait_queue():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:253
FINSH_FUNCTION_EXPORT(list_thread, list thread);
MSH_CMD_EXPORT(list_thread, list thread);

static void show_wait_queue(struct rt_list_node *list)
{
1c00eb78 <show_wait_queue> addi	sp,sp,-48
1c00eb7a <show_wait_queue+0x2> sw	ra,44(sp)
1c00eb7c <show_wait_queue+0x4> sw	s0,40(sp)
1c00eb7e <show_wait_queue+0x6> addi	s0,sp,48
1c00eb80 <show_wait_queue+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:257
    struct rt_thread *thread;
    struct rt_list_node *node;

    for (node = list->next; node != list; node = node->next)
1c00eb84 <show_wait_queue+0xc> lw	a5,-36(s0)
1c00eb88 <show_wait_queue+0x10> lw	a5,0(a5)
1c00eb8a <show_wait_queue+0x12> sw	a5,-20(s0)
1c00eb8e <show_wait_queue+0x16> j	1c00ebd0 <show_wait_queue+0x58>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:259
    {
        thread = rt_list_entry(node, struct rt_thread, tlist);
1c00eb90 <show_wait_queue+0x18> lw	a5,-20(s0)
1c00eb94 <show_wait_queue+0x1c> addi	a5,a5,-20
1c00eb96 <show_wait_queue+0x1e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:260
        rt_kprintf("%s", thread->name);
1c00eb9a <show_wait_queue+0x22> lw	a5,-24(s0)
1c00eb9e <show_wait_queue+0x26> mv	a1,a5
1c00eba0 <show_wait_queue+0x28> lui	a5,0x1c011
1c00eba4 <show_wait_queue+0x2c> addi	a0,a5,-1836 # 1c0108d4 <__fsym_list_mem_desc+0x134>
1c00eba8 <show_wait_queue+0x30> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:262

        if (node->next != list)
1c00ebac <show_wait_queue+0x34> lw	a5,-20(s0)
1c00ebb0 <show_wait_queue+0x38> lw	a5,0(a5)
1c00ebb2 <show_wait_queue+0x3a> lw	a4,-36(s0)
1c00ebb6 <show_wait_queue+0x3e> beq	a4,a5,1c00ebc6 <show_wait_queue+0x4e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:263
            rt_kprintf("/");
1c00ebba <show_wait_queue+0x42> lui	a5,0x1c011
1c00ebbe <show_wait_queue+0x46> addi	a0,a5,-1832 # 1c0108d8 <__fsym_list_mem_desc+0x138>
1c00ebc2 <show_wait_queue+0x4a> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:257 (discriminator 2)
    for (node = list->next; node != list; node = node->next)
1c00ebc6 <show_wait_queue+0x4e> lw	a5,-20(s0)
1c00ebca <show_wait_queue+0x52> lw	a5,0(a5)
1c00ebcc <show_wait_queue+0x54> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:257 (discriminator 1)
1c00ebd0 <show_wait_queue+0x58> lw	a4,-20(s0)
1c00ebd4 <show_wait_queue+0x5c> lw	a5,-36(s0)
1c00ebd8 <show_wait_queue+0x60> bne	a4,a5,1c00eb90 <show_wait_queue+0x18>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:265
    }
}
1c00ebdc <show_wait_queue+0x64> nop
1c00ebde <show_wait_queue+0x66> lw	ra,44(sp)
1c00ebe0 <show_wait_queue+0x68> lw	s0,40(sp)
1c00ebe2 <show_wait_queue+0x6a> addi	sp,sp,48
1c00ebe4 <show_wait_queue+0x6c> ret
list_sem():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:269

#ifdef RT_USING_SEMAPHORE
long list_sem(void)
{
1c00ebe6 <list_sem> addi	sp,sp,-96
1c00ebe8 <list_sem+0x2> sw	ra,92(sp)
1c00ebea <list_sem+0x4> sw	s0,88(sp)
1c00ebec <list_sem+0x6> sw	s1,84(sp)
1c00ebee <list_sem+0x8> sw	s2,80(sp)
1c00ebf0 <list_sem+0xa> addi	s0,sp,96
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:273
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t*)RT_NULL;
1c00ebf2 <list_sem+0xc> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:276

    int maxlen;
    const char *item_title = "semaphore";
1c00ebf6 <list_sem+0x10> lui	a5,0x1c011
1c00ebfa <list_sem+0x14> addi	a5,a5,-1828 # 1c0108dc <__fsym_list_mem_desc+0x13c>
1c00ebfe <list_sem+0x18> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:278

    list_find_init(&find_arg, RT_Object_Class_Semaphore, obj_list, sizeof(obj_list)/sizeof(obj_list[0]));
1c00ec02 <list_sem+0x1c> addi	a4,s0,-96
1c00ec06 <list_sem+0x20> addi	a5,s0,-64
1c00ec0a <list_sem+0x24> li	a3,8
1c00ec0c <list_sem+0x26> mv	a2,a4
1c00ec0e <list_sem+0x28> li	a1,2
1c00ec10 <list_sem+0x2a> mv	a0,a5
1c00ec12 <list_sem+0x2c> jal	ra,1c00e7cc <list_find_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:280

    maxlen = RT_NAME_MAX;
1c00ec16 <list_sem+0x30> li	a5,8
1c00ec18 <list_sem+0x32> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:282

    rt_kprintf("%-*.s v   suspend thread\n", maxlen, item_title); object_split(maxlen);
1c00ec1c <list_sem+0x36> lw	a2,-28(s0)
1c00ec20 <list_sem+0x3a> lw	a1,-32(s0)
1c00ec24 <list_sem+0x3e> lui	a5,0x1c011
1c00ec28 <list_sem+0x42> addi	a0,a5,-1816 # 1c0108e8 <__fsym_list_mem_desc+0x148>
1c00ec2c <list_sem+0x46> jal	ra,1c00c652 <rt_kprintf>
1c00ec30 <list_sem+0x4a> lw	a0,-32(s0)
1c00ec34 <list_sem+0x4e> jal	ra,1c00e79a <object_split>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:283
    rt_kprintf(     " --- --------------\n");
1c00ec38 <list_sem+0x52> lui	a5,0x1c011
1c00ec3c <list_sem+0x56> addi	a0,a5,-1788 # 1c010904 <__fsym_list_mem_desc+0x164>
1c00ec40 <list_sem+0x5a> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:287

    do
    {
        next = list_get_next(next, &find_arg);
1c00ec44 <list_sem+0x5e> addi	a5,s0,-64
1c00ec48 <list_sem+0x62> mv	a1,a5
1c00ec4a <list_sem+0x64> lw	a0,-20(s0)
1c00ec4e <list_sem+0x68> jal	ra,1c00e83a <list_get_next>
1c00ec52 <list_sem+0x6c> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:290
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
1c00ec56 <list_sem+0x70> sw	zero,-24(s0)
1c00ec5a <list_sem+0x74> j	1c00ed46 <list_sem+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:295
            {
                struct rt_object *obj;
                struct rt_semaphore *sem;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
1c00ec5c <list_sem+0x76> lw	a5,-24(s0)
1c00ec60 <list_sem+0x7a> slli	a5,a5,0x2
1c00ec62 <list_sem+0x7c> addi	a4,s0,-16
1c00ec66 <list_sem+0x80> add	a5,a5,a4
1c00ec68 <list_sem+0x82> lw	a5,-80(a5)
1c00ec6c <list_sem+0x86> addi	a5,a5,-12
1c00ec6e <list_sem+0x88> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:296
                level = rt_hw_interrupt_disable();
1c00ec72 <list_sem+0x8c> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00ec76 <list_sem+0x90> mv	a5,a0
1c00ec78 <list_sem+0x92> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:297
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
1c00ec7c <list_sem+0x96> lw	a5,-36(s0)
1c00ec80 <list_sem+0x9a> lbu	a5,8(a5)
1c00ec84 <list_sem+0x9e> andi	a5,a5,-129
1c00ec88 <list_sem+0xa2> lbu	a4,-56(s0)
1c00ec8c <list_sem+0xa6> beq	a5,a4,1c00ec9c <list_sem+0xb6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:299
                {
                    rt_hw_interrupt_enable(level);
1c00ec90 <list_sem+0xaa> lw	a5,-40(s0)
1c00ec94 <list_sem+0xae> mv	a0,a5
1c00ec96 <list_sem+0xb0> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:300
                    continue;
1c00ec9a <list_sem+0xb4> j	1c00ed3c <list_sem+0x156>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:302
                }
                rt_hw_interrupt_enable(level);
1c00ec9c <list_sem+0xb6> lw	a5,-40(s0)
1c00eca0 <list_sem+0xba> mv	a0,a5
1c00eca2 <list_sem+0xbc> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:304

                sem = (struct rt_semaphore*)obj;
1c00eca6 <list_sem+0xc0> lw	a5,-36(s0)
1c00ecaa <list_sem+0xc4> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:305
                if (!rt_list_isempty(&sem->parent.suspend_thread))
1c00ecae <list_sem+0xc8> lw	a5,-44(s0)
1c00ecb2 <list_sem+0xcc> addi	a5,a5,20
1c00ecb4 <list_sem+0xce> mv	a0,a5
1c00ecb6 <list_sem+0xd0> jal	ra,1c00e6f4 <rt_list_isempty>
1c00ecba <list_sem+0xd4> mv	a5,a0
1c00ecbc <list_sem+0xd6> bnez	a5,1c00ed0a <list_sem+0x124>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:309
                {
                    rt_kprintf("%-*.*s %03d %d:",
                            maxlen, RT_NAME_MAX,
                            sem->parent.parent.name,
1c00ecbe <list_sem+0xd8> lw	s1,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:310
                            sem->value,
1c00ecc2 <list_sem+0xdc> lw	a5,-44(s0)
1c00ecc6 <list_sem+0xe0> lhu	a5,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:307
                    rt_kprintf("%-*.*s %03d %d:",
1c00ecca <list_sem+0xe4> mv	s2,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:311
                            rt_list_len(&sem->parent.suspend_thread));
1c00eccc <list_sem+0xe6> lw	a5,-44(s0)
1c00ecd0 <list_sem+0xea> addi	a5,a5,20
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:307
                    rt_kprintf("%-*.*s %03d %d:",
1c00ecd2 <list_sem+0xec> mv	a0,a5
1c00ecd4 <list_sem+0xee> jal	ra,1c00e71c <rt_list_len>
1c00ecd8 <list_sem+0xf2> mv	a5,a0
1c00ecda <list_sem+0xf4> mv	a4,s2
1c00ecdc <list_sem+0xf6> mv	a3,s1
1c00ecde <list_sem+0xf8> li	a2,8
1c00ece0 <list_sem+0xfa> lw	a1,-32(s0)
1c00ece4 <list_sem+0xfe> lui	a0,0x1c011
1c00ece8 <list_sem+0x102> addi	a0,a0,-1764 # 1c01091c <__fsym_list_mem_desc+0x17c>
1c00ecec <list_sem+0x106> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:312
                    show_wait_queue(&(sem->parent.suspend_thread));
1c00ecf0 <list_sem+0x10a> lw	a5,-44(s0)
1c00ecf4 <list_sem+0x10e> addi	a5,a5,20
1c00ecf6 <list_sem+0x110> mv	a0,a5
1c00ecf8 <list_sem+0x112> jal	ra,1c00eb78 <show_wait_queue>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:313
                    rt_kprintf("\n");
1c00ecfc <list_sem+0x116> lui	a5,0x1c011
1c00ed00 <list_sem+0x11a> addi	a0,a5,-1748 # 1c01092c <__fsym_list_mem_desc+0x18c>
1c00ed04 <list_sem+0x11e> jal	ra,1c00c652 <rt_kprintf>
1c00ed08 <list_sem+0x122> j	1c00ed3c <list_sem+0x156>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:319
                }
                else
                {
                    rt_kprintf("%-*.*s %03d %d\n",
                            maxlen, RT_NAME_MAX,
                            sem->parent.parent.name,
1c00ed0a <list_sem+0x124> lw	s1,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:320
                            sem->value,
1c00ed0e <list_sem+0x128> lw	a5,-44(s0)
1c00ed12 <list_sem+0x12c> lhu	a5,28(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:317
                    rt_kprintf("%-*.*s %03d %d\n",
1c00ed16 <list_sem+0x130> mv	s2,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:321
                            rt_list_len(&sem->parent.suspend_thread));
1c00ed18 <list_sem+0x132> lw	a5,-44(s0)
1c00ed1c <list_sem+0x136> addi	a5,a5,20
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:317
                    rt_kprintf("%-*.*s %03d %d\n",
1c00ed1e <list_sem+0x138> mv	a0,a5
1c00ed20 <list_sem+0x13a> jal	ra,1c00e71c <rt_list_len>
1c00ed24 <list_sem+0x13e> mv	a5,a0
1c00ed26 <list_sem+0x140> mv	a4,s2
1c00ed28 <list_sem+0x142> mv	a3,s1
1c00ed2a <list_sem+0x144> li	a2,8
1c00ed2c <list_sem+0x146> lw	a1,-32(s0)
1c00ed30 <list_sem+0x14a> lui	a0,0x1c011
1c00ed34 <list_sem+0x14e> addi	a0,a0,-1744 # 1c010930 <__fsym_list_mem_desc+0x190>
1c00ed38 <list_sem+0x152> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:290 (discriminator 2)
            for (i = 0; i < find_arg.nr_out; i++)
1c00ed3c <list_sem+0x156> lw	a5,-24(s0)
1c00ed40 <list_sem+0x15a> addi	a5,a5,1
1c00ed42 <list_sem+0x15c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:290 (discriminator 1)
1c00ed46 <list_sem+0x160> lw	a5,-48(s0)
1c00ed4a <list_sem+0x164> lw	a4,-24(s0)
1c00ed4e <list_sem+0x168> blt	a4,a5,1c00ec5c <list_sem+0x76>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:326
                }
            }
        }
    }
    while (next != (rt_list_t*)RT_NULL);
1c00ed52 <list_sem+0x16c> lw	a5,-20(s0)
1c00ed56 <list_sem+0x170> bnez	a5,1c00ec44 <list_sem+0x5e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:328

    return 0;
1c00ed5a <list_sem+0x174> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:329
}
1c00ed5c <list_sem+0x176> mv	a0,a5
1c00ed5e <list_sem+0x178> lw	ra,92(sp)
1c00ed60 <list_sem+0x17a> lw	s0,88(sp)
1c00ed62 <list_sem+0x17c> lw	s1,84(sp)
1c00ed64 <list_sem+0x17e> lw	s2,80(sp)
1c00ed66 <list_sem+0x180> addi	sp,sp,96
1c00ed68 <list_sem+0x182> ret
list_mailbox():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:459
MSH_CMD_EXPORT(list_mutex, list mutex in system);
#endif

#ifdef RT_USING_MAILBOX
long list_mailbox(void)
{
1c00ed6a <list_mailbox> addi	sp,sp,-112
1c00ed6c <list_mailbox+0x2> sw	ra,108(sp)
1c00ed6e <list_mailbox+0x4> sw	s0,104(sp)
1c00ed70 <list_mailbox+0x6> sw	s1,100(sp)
1c00ed72 <list_mailbox+0x8> sw	s2,96(sp)
1c00ed74 <list_mailbox+0xa> sw	s3,92(sp)
1c00ed76 <list_mailbox+0xc> addi	s0,sp,112
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:463
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t*)RT_NULL;
1c00ed78 <list_mailbox+0xe> sw	zero,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:466

    int maxlen;
    const char *item_title = "mailbox";
1c00ed7c <list_mailbox+0x12> lui	a5,0x1c011
1c00ed80 <list_mailbox+0x16> addi	a5,a5,-1728 # 1c010940 <__fsym_list_mem_desc+0x1a0>
1c00ed84 <list_mailbox+0x1a> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:468

    list_find_init(&find_arg, RT_Object_Class_MailBox, obj_list, sizeof(obj_list)/sizeof(obj_list[0]));
1c00ed88 <list_mailbox+0x1e> addi	a4,s0,-112
1c00ed8c <list_mailbox+0x22> addi	a5,s0,-80
1c00ed90 <list_mailbox+0x26> li	a3,8
1c00ed92 <list_mailbox+0x28> mv	a2,a4
1c00ed94 <list_mailbox+0x2a> li	a1,5
1c00ed96 <list_mailbox+0x2c> mv	a0,a5
1c00ed98 <list_mailbox+0x2e> jal	ra,1c00e7cc <list_find_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:470

    maxlen = RT_NAME_MAX;
1c00ed9c <list_mailbox+0x32> li	a5,8
1c00ed9e <list_mailbox+0x34> sw	a5,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:472

    rt_kprintf("%-*.s entry size suspend thread\n", maxlen, item_title); object_split(maxlen);
1c00eda2 <list_mailbox+0x38> lw	a2,-44(s0)
1c00eda6 <list_mailbox+0x3c> lw	a1,-48(s0)
1c00edaa <list_mailbox+0x40> lui	a5,0x1c011
1c00edae <list_mailbox+0x44> addi	a0,a5,-1720 # 1c010948 <__fsym_list_mem_desc+0x1a8>
1c00edb2 <list_mailbox+0x48> jal	ra,1c00c652 <rt_kprintf>
1c00edb6 <list_mailbox+0x4c> lw	a0,-48(s0)
1c00edba <list_mailbox+0x50> jal	ra,1c00e79a <object_split>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:473
    rt_kprintf(     " ----  ---- --------------\n");
1c00edbe <list_mailbox+0x54> lui	a5,0x1c011
1c00edc2 <list_mailbox+0x58> addi	a0,a5,-1684 # 1c01096c <__fsym_list_mem_desc+0x1cc>
1c00edc6 <list_mailbox+0x5c> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:477

    do
    {
        next = list_get_next(next, &find_arg);
1c00edca <list_mailbox+0x60> addi	a5,s0,-80
1c00edce <list_mailbox+0x64> mv	a1,a5
1c00edd0 <list_mailbox+0x66> lw	a0,-36(s0)
1c00edd4 <list_mailbox+0x6a> jal	ra,1c00e83a <list_get_next>
1c00edd8 <list_mailbox+0x6e> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:480
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
1c00eddc <list_mailbox+0x72> sw	zero,-40(s0)
1c00ede0 <list_mailbox+0x76> j	1c00eee8 <list_mailbox+0x17e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:485
            {
                struct rt_object *obj;
                struct rt_mailbox *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
1c00ede2 <list_mailbox+0x78> lw	a5,-40(s0)
1c00ede6 <list_mailbox+0x7c> slli	a5,a5,0x2
1c00ede8 <list_mailbox+0x7e> addi	a4,s0,-32
1c00edec <list_mailbox+0x82> add	a5,a5,a4
1c00edee <list_mailbox+0x84> lw	a5,-80(a5)
1c00edf2 <list_mailbox+0x88> addi	a5,a5,-12
1c00edf4 <list_mailbox+0x8a> sw	a5,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:486
                level = rt_hw_interrupt_disable();
1c00edf8 <list_mailbox+0x8e> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00edfc <list_mailbox+0x92> mv	a5,a0
1c00edfe <list_mailbox+0x94> sw	a5,-56(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:487
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
1c00ee02 <list_mailbox+0x98> lw	a5,-52(s0)
1c00ee06 <list_mailbox+0x9c> lbu	a5,8(a5)
1c00ee0a <list_mailbox+0xa0> andi	a5,a5,-129
1c00ee0e <list_mailbox+0xa4> lbu	a4,-72(s0)
1c00ee12 <list_mailbox+0xa8> beq	a5,a4,1c00ee22 <list_mailbox+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:489
                {
                    rt_hw_interrupt_enable(level);
1c00ee16 <list_mailbox+0xac> lw	a5,-56(s0)
1c00ee1a <list_mailbox+0xb0> mv	a0,a5
1c00ee1c <list_mailbox+0xb2> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:490
                    continue;
1c00ee20 <list_mailbox+0xb6> j	1c00eede <list_mailbox+0x174>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:493
                }

                rt_hw_interrupt_enable(level);
1c00ee22 <list_mailbox+0xb8> lw	a5,-56(s0)
1c00ee26 <list_mailbox+0xbc> mv	a0,a5
1c00ee28 <list_mailbox+0xbe> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:495

                m = (struct rt_mailbox *)obj;
1c00ee2c <list_mailbox+0xc2> lw	a5,-52(s0)
1c00ee30 <list_mailbox+0xc6> sw	a5,-60(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:496
                if (!rt_list_isempty(&m->parent.suspend_thread))
1c00ee34 <list_mailbox+0xca> lw	a5,-60(s0)
1c00ee38 <list_mailbox+0xce> addi	a5,a5,20
1c00ee3a <list_mailbox+0xd0> mv	a0,a5
1c00ee3c <list_mailbox+0xd2> jal	ra,1c00e6f4 <rt_list_isempty>
1c00ee40 <list_mailbox+0xd6> mv	a5,a0
1c00ee42 <list_mailbox+0xd8> bnez	a5,1c00ee9e <list_mailbox+0x134>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:500
                {
                    rt_kprintf("%-*.*s %04d  %04d %d:",
                            maxlen, RT_NAME_MAX,
                            m->parent.parent.name,
1c00ee44 <list_mailbox+0xda> lw	s1,-60(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:501
                            m->entry,
1c00ee48 <list_mailbox+0xde> lw	a5,-60(s0)
1c00ee4c <list_mailbox+0xe2> lhu	a5,34(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:498
                    rt_kprintf("%-*.*s %04d  %04d %d:",
1c00ee50 <list_mailbox+0xe6> mv	s2,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:502
                            m->size,
1c00ee52 <list_mailbox+0xe8> lw	a5,-60(s0)
1c00ee56 <list_mailbox+0xec> lhu	a5,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:498
                    rt_kprintf("%-*.*s %04d  %04d %d:",
1c00ee5a <list_mailbox+0xf0> mv	s3,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:503
                            rt_list_len(&m->parent.suspend_thread));
1c00ee5c <list_mailbox+0xf2> lw	a5,-60(s0)
1c00ee60 <list_mailbox+0xf6> addi	a5,a5,20
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:498
                    rt_kprintf("%-*.*s %04d  %04d %d:",
1c00ee62 <list_mailbox+0xf8> mv	a0,a5
1c00ee64 <list_mailbox+0xfa> jal	ra,1c00e71c <rt_list_len>
1c00ee68 <list_mailbox+0xfe> mv	a5,a0
1c00ee6a <list_mailbox+0x100> mv	a6,a5
1c00ee6c <list_mailbox+0x102> mv	a5,s3
1c00ee6e <list_mailbox+0x104> mv	a4,s2
1c00ee70 <list_mailbox+0x106> mv	a3,s1
1c00ee72 <list_mailbox+0x108> li	a2,8
1c00ee74 <list_mailbox+0x10a> lw	a1,-48(s0)
1c00ee78 <list_mailbox+0x10e> lui	a0,0x1c011
1c00ee7c <list_mailbox+0x112> addi	a0,a0,-1656 # 1c010988 <__fsym_list_mem_desc+0x1e8>
1c00ee80 <list_mailbox+0x116> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:504
                    show_wait_queue(&(m->parent.suspend_thread));
1c00ee84 <list_mailbox+0x11a> lw	a5,-60(s0)
1c00ee88 <list_mailbox+0x11e> addi	a5,a5,20
1c00ee8a <list_mailbox+0x120> mv	a0,a5
1c00ee8c <list_mailbox+0x122> jal	ra,1c00eb78 <show_wait_queue>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:505
                    rt_kprintf("\n");
1c00ee90 <list_mailbox+0x126> lui	a5,0x1c011
1c00ee94 <list_mailbox+0x12a> addi	a0,a5,-1748 # 1c01092c <__fsym_list_mem_desc+0x18c>
1c00ee98 <list_mailbox+0x12e> jal	ra,1c00c652 <rt_kprintf>
1c00ee9c <list_mailbox+0x132> j	1c00eede <list_mailbox+0x174>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:511
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
                            maxlen, RT_NAME_MAX,
                            m->parent.parent.name,
1c00ee9e <list_mailbox+0x134> lw	s1,-60(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:512
                            m->entry,
1c00eea2 <list_mailbox+0x138> lw	a5,-60(s0)
1c00eea6 <list_mailbox+0x13c> lhu	a5,34(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:509
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
1c00eeaa <list_mailbox+0x140> mv	s2,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:513
                            m->size,
1c00eeac <list_mailbox+0x142> lw	a5,-60(s0)
1c00eeb0 <list_mailbox+0x146> lhu	a5,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:509
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
1c00eeb4 <list_mailbox+0x14a> mv	s3,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:514
                            rt_list_len(&m->parent.suspend_thread));
1c00eeb6 <list_mailbox+0x14c> lw	a5,-60(s0)
1c00eeba <list_mailbox+0x150> addi	a5,a5,20
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:509
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
1c00eebc <list_mailbox+0x152> mv	a0,a5
1c00eebe <list_mailbox+0x154> jal	ra,1c00e71c <rt_list_len>
1c00eec2 <list_mailbox+0x158> mv	a5,a0
1c00eec4 <list_mailbox+0x15a> mv	a6,a5
1c00eec6 <list_mailbox+0x15c> mv	a5,s3
1c00eec8 <list_mailbox+0x15e> mv	a4,s2
1c00eeca <list_mailbox+0x160> mv	a3,s1
1c00eecc <list_mailbox+0x162> li	a2,8
1c00eece <list_mailbox+0x164> lw	a1,-48(s0)
1c00eed2 <list_mailbox+0x168> lui	a0,0x1c011
1c00eed6 <list_mailbox+0x16c> addi	a0,a0,-1632 # 1c0109a0 <__fsym_list_mem_desc+0x200>
1c00eeda <list_mailbox+0x170> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:480 (discriminator 2)
            for (i = 0; i < find_arg.nr_out; i++)
1c00eede <list_mailbox+0x174> lw	a5,-40(s0)
1c00eee2 <list_mailbox+0x178> addi	a5,a5,1
1c00eee4 <list_mailbox+0x17a> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:480 (discriminator 1)
1c00eee8 <list_mailbox+0x17e> lw	a5,-64(s0)
1c00eeec <list_mailbox+0x182> lw	a4,-40(s0)
1c00eef0 <list_mailbox+0x186> blt	a4,a5,1c00ede2 <list_mailbox+0x78>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:520
                }

            }
        }
    }
    while (next != (rt_list_t*)RT_NULL);
1c00eef4 <list_mailbox+0x18a> lw	a5,-36(s0)
1c00eef8 <list_mailbox+0x18e> bnez	a5,1c00edca <list_mailbox+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:522

    return 0;
1c00eefc <list_mailbox+0x192> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:523
}
1c00eefe <list_mailbox+0x194> mv	a0,a5
1c00ef00 <list_mailbox+0x196> lw	ra,108(sp)
1c00ef02 <list_mailbox+0x198> lw	s0,104(sp)
1c00ef04 <list_mailbox+0x19a> lw	s1,100(sp)
1c00ef06 <list_mailbox+0x19c> lw	s2,96(sp)
1c00ef08 <list_mailbox+0x19e> lw	s3,92(sp)
1c00ef0a <list_mailbox+0x1a0> addi	sp,sp,112
1c00ef0c <list_mailbox+0x1a2> ret
list_timer():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:733
FINSH_FUNCTION_EXPORT(list_mempool, list memory pool in system)
MSH_CMD_EXPORT(list_mempool, list memory pool in system);
#endif

long list_timer(void)
{
1c00ef0e <list_timer> addi	sp,sp,-96
1c00ef10 <list_timer+0x2> sw	ra,92(sp)
1c00ef12 <list_timer+0x4> sw	s0,88(sp)
1c00ef14 <list_timer+0x6> addi	s0,sp,96
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:737
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t*)RT_NULL;
1c00ef16 <list_timer+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:740

    int maxlen;
    const char *item_title = "timer";
1c00ef1a <list_timer+0xc> lui	a5,0x1c011
1c00ef1e <list_timer+0x10> addi	a5,a5,-1608 # 1c0109b8 <__fsym_list_mem_desc+0x218>
1c00ef22 <list_timer+0x14> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:742

    list_find_init(&find_arg, RT_Object_Class_Timer, obj_list, sizeof(obj_list)/sizeof(obj_list[0]));
1c00ef26 <list_timer+0x18> addi	a4,s0,-96
1c00ef2a <list_timer+0x1c> addi	a5,s0,-64
1c00ef2e <list_timer+0x20> li	a3,8
1c00ef30 <list_timer+0x22> mv	a2,a4
1c00ef32 <list_timer+0x24> li	a1,10
1c00ef34 <list_timer+0x26> mv	a0,a5
1c00ef36 <list_timer+0x28> jal	ra,1c00e7cc <list_find_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:744

    maxlen = RT_NAME_MAX;
1c00ef3a <list_timer+0x2c> li	a5,8
1c00ef3c <list_timer+0x2e> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:746

    rt_kprintf("%-*.s  periodic   timeout       flag\n", maxlen, item_title); object_split(maxlen);
1c00ef40 <list_timer+0x32> lw	a2,-28(s0)
1c00ef44 <list_timer+0x36> lw	a1,-32(s0)
1c00ef48 <list_timer+0x3a> lui	a5,0x1c011
1c00ef4c <list_timer+0x3e> addi	a0,a5,-1600 # 1c0109c0 <__fsym_list_mem_desc+0x220>
1c00ef50 <list_timer+0x42> jal	ra,1c00c652 <rt_kprintf>
1c00ef54 <list_timer+0x46> lw	a0,-32(s0)
1c00ef58 <list_timer+0x4a> jal	ra,1c00e79a <object_split>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:747
    rt_kprintf(     " ---------- ---------- -----------\n");
1c00ef5c <list_timer+0x4e> lui	a5,0x1c011
1c00ef60 <list_timer+0x52> addi	a0,a5,-1560 # 1c0109e8 <__fsym_list_mem_desc+0x248>
1c00ef64 <list_timer+0x56> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:749
    do {
        next = list_get_next(next, &find_arg);
1c00ef68 <list_timer+0x5a> addi	a5,s0,-64
1c00ef6c <list_timer+0x5e> mv	a1,a5
1c00ef6e <list_timer+0x60> lw	a0,-20(s0)
1c00ef72 <list_timer+0x64> jal	ra,1c00e83a <list_get_next>
1c00ef76 <list_timer+0x68> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:752
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
1c00ef7a <list_timer+0x6c> sw	zero,-24(s0)
1c00ef7e <list_timer+0x70> j	1c00f024 <list_timer+0x116>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:757
            {
                struct rt_object *obj;
                struct rt_timer *timer;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
1c00ef80 <list_timer+0x72> lw	a5,-24(s0)
1c00ef84 <list_timer+0x76> slli	a5,a5,0x2
1c00ef86 <list_timer+0x78> addi	a4,s0,-16
1c00ef8a <list_timer+0x7c> add	a5,a5,a4
1c00ef8c <list_timer+0x7e> lw	a5,-80(a5)
1c00ef90 <list_timer+0x82> addi	a5,a5,-12
1c00ef92 <list_timer+0x84> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:758
                level = rt_hw_interrupt_disable();
1c00ef96 <list_timer+0x88> jal	ra,1c0080ce <rt_hw_interrupt_disable>
1c00ef9a <list_timer+0x8c> mv	a5,a0
1c00ef9c <list_timer+0x8e> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:759
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
1c00efa0 <list_timer+0x92> lw	a5,-36(s0)
1c00efa4 <list_timer+0x96> lbu	a5,8(a5)
1c00efa8 <list_timer+0x9a> andi	a5,a5,-129
1c00efac <list_timer+0x9e> lbu	a4,-56(s0)
1c00efb0 <list_timer+0xa2> beq	a5,a4,1c00efc0 <list_timer+0xb2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:761
                {
                    rt_hw_interrupt_enable(level);
1c00efb4 <list_timer+0xa6> lw	a5,-40(s0)
1c00efb8 <list_timer+0xaa> mv	a0,a5
1c00efba <list_timer+0xac> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:762
                    continue;
1c00efbe <list_timer+0xb0> j	1c00f01a <list_timer+0x10c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:765
                }

                rt_hw_interrupt_enable(level);
1c00efc0 <list_timer+0xb2> lw	a5,-40(s0)
1c00efc4 <list_timer+0xb6> mv	a0,a5
1c00efc6 <list_timer+0xb8> jal	ra,1c0080d4 <rt_hw_interrupt_enable>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:767

                timer = (struct rt_timer *)obj;
1c00efca <list_timer+0xbc> lw	a5,-36(s0)
1c00efce <list_timer+0xc0> sw	a5,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:770
                rt_kprintf("%-*.*s 0x%08x 0x%08x ",
                        maxlen, RT_NAME_MAX,
                        timer->parent.name,
1c00efd2 <list_timer+0xc4> lw	a3,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:768
                rt_kprintf("%-*.*s 0x%08x 0x%08x ",
1c00efd6 <list_timer+0xc8> lw	a5,-44(s0)
1c00efda <list_timer+0xcc> lw	a4,36(a5)
1c00efdc <list_timer+0xce> lw	a5,-44(s0)
1c00efe0 <list_timer+0xd2> lw	a5,40(a5)
1c00efe2 <list_timer+0xd4> li	a2,8
1c00efe4 <list_timer+0xd6> lw	a1,-32(s0)
1c00efe8 <list_timer+0xda> lui	a0,0x1c011
1c00efec <list_timer+0xde> addi	a0,a0,-1524 # 1c010a0c <__fsym_list_mem_desc+0x26c>
1c00eff0 <list_timer+0xe2> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:773
                        timer->init_tick,
                        timer->timeout_tick);
                if (timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
1c00eff4 <list_timer+0xe6> lw	a5,-44(s0)
1c00eff8 <list_timer+0xea> lbu	a5,9(a5)
1c00effc <list_timer+0xee> andi	a5,a5,1
1c00effe <list_timer+0xf0> beqz	a5,1c00f00e <list_timer+0x100>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:774
                    rt_kprintf("activated\n");
1c00f000 <list_timer+0xf2> lui	a5,0x1c011
1c00f004 <list_timer+0xf6> addi	a0,a5,-1500 # 1c010a24 <__fsym_list_mem_desc+0x284>
1c00f008 <list_timer+0xfa> jal	ra,1c00c652 <rt_kprintf>
1c00f00c <list_timer+0xfe> j	1c00f01a <list_timer+0x10c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:776
                else
                    rt_kprintf("deactivated\n");
1c00f00e <list_timer+0x100> lui	a5,0x1c011
1c00f012 <list_timer+0x104> addi	a0,a5,-1488 # 1c010a30 <__fsym_list_mem_desc+0x290>
1c00f016 <list_timer+0x108> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:752 (discriminator 2)
            for (i = 0; i < find_arg.nr_out; i++)
1c00f01a <list_timer+0x10c> lw	a5,-24(s0)
1c00f01e <list_timer+0x110> addi	a5,a5,1
1c00f020 <list_timer+0x112> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:752 (discriminator 1)
1c00f024 <list_timer+0x116> lw	a5,-48(s0)
1c00f028 <list_timer+0x11a> lw	a4,-24(s0)
1c00f02c <list_timer+0x11e> blt	a4,a5,1c00ef80 <list_timer+0x72>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:781

            }
        }
    }
    while (next != (rt_list_t*)RT_NULL);
1c00f030 <list_timer+0x122> lw	a5,-20(s0)
1c00f034 <list_timer+0x126> bnez	a5,1c00ef68 <list_timer+0x5a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:783

    rt_kprintf("current tick:0x%08x\n", rt_tick_get());
1c00f036 <list_timer+0x128> jal	ra,1c00b49c <rt_tick_get>
1c00f03a <list_timer+0x12c> mv	a5,a0
1c00f03c <list_timer+0x12e> mv	a1,a5
1c00f03e <list_timer+0x130> lui	a5,0x1c011
1c00f042 <list_timer+0x134> addi	a0,a5,-1472 # 1c010a40 <__fsym_list_mem_desc+0x2a0>
1c00f046 <list_timer+0x138> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:785

    return 0;
1c00f04a <list_timer+0x13c> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:786
}
1c00f04c <list_timer+0x13e> mv	a0,a5
1c00f04e <list_timer+0x140> lw	ra,92(sp)
1c00f050 <list_timer+0x142> lw	s0,88(sp)
1c00f052 <list_timer+0x144> addi	sp,sp,96
1c00f054 <list_timer+0x146> ret
list():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:874
FINSH_FUNCTION_EXPORT(list_device, list device in system);
MSH_CMD_EXPORT(list_device, list device in system);
#endif

long list(void)
{
1c00f056 <list> addi	sp,sp,-32
1c00f058 <list+0x2> sw	ra,28(sp)
1c00f05a <list+0x4> sw	s0,24(sp)
1c00f05c <list+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:880
#ifndef FINSH_USING_MSH_ONLY
    struct finsh_syscall_item *syscall_item;
    struct finsh_sysvar_item *sysvar_item;
#endif

    rt_kprintf("--Function List:\n");
1c00f05e <list+0x8> lui	a5,0x1c011
1c00f062 <list+0xc> addi	a0,a5,-1448 # 1c010a58 <__fsym_list_mem_desc+0x2b8>
1c00f066 <list+0x10> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:883
    {
        struct finsh_syscall *index;
        for (index = _syscall_table_begin;
1c00f06a <list+0x14> lui	a5,0x1c017
1c00f06e <list+0x18> lw	a5,-1016(a5) # 1c016c08 <_syscall_table_begin>
1c00f072 <list+0x1c> sw	a5,-20(s0)
1c00f076 <list+0x20> j	1c00f0bc <list+0x66>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:888
                index < _syscall_table_end;
                FINSH_NEXT_SYSCALL(index))
        {
            /* skip the internal command */
            if (strncmp((char *)index->name, "__", 2) == 0) continue;
1c00f078 <list+0x22> lw	a5,-20(s0)
1c00f07c <list+0x26> lw	a4,0(a5)
1c00f07e <list+0x28> li	a2,2
1c00f080 <list+0x2a> lui	a5,0x1c011
1c00f084 <list+0x2e> addi	a1,a5,-1428 # 1c010a6c <__fsym_list_mem_desc+0x2cc>
1c00f088 <list+0x32> mv	a0,a4
1c00f08a <list+0x34> jal	ra,1c00832a <strncmp>
1c00f08e <list+0x38> mv	a5,a0
1c00f090 <list+0x3a> beqz	a5,1c00f0b0 <list+0x5a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:891

#ifdef FINSH_USING_DESCRIPTION
            rt_kprintf("%-16s -- %s\n", index->name, index->desc);
1c00f092 <list+0x3c> lw	a5,-20(s0)
1c00f096 <list+0x40> lw	a4,0(a5)
1c00f098 <list+0x42> lw	a5,-20(s0)
1c00f09c <list+0x46> lw	a5,4(a5)
1c00f09e <list+0x48> mv	a2,a5
1c00f0a0 <list+0x4a> mv	a1,a4
1c00f0a2 <list+0x4c> lui	a5,0x1c011
1c00f0a6 <list+0x50> addi	a0,a5,-1424 # 1c010a70 <__fsym_list_mem_desc+0x2d0>
1c00f0aa <list+0x54> jal	ra,1c00c652 <rt_kprintf>
1c00f0ae <list+0x58> j	1c00f0b2 <list+0x5c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:888
            if (strncmp((char *)index->name, "__", 2) == 0) continue;
1c00f0b0 <list+0x5a> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:885
                FINSH_NEXT_SYSCALL(index))
1c00f0b2 <list+0x5c> lw	a5,-20(s0)
1c00f0b6 <list+0x60> addi	a5,a5,12
1c00f0b8 <list+0x62> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:884 (discriminator 1)
                index < _syscall_table_end;
1c00f0bc <list+0x66> lui	a5,0x1c017
1c00f0c0 <list+0x6a> lw	a5,-1012(a5) # 1c016c0c <_syscall_table_end>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:883 (discriminator 1)
        for (index = _syscall_table_begin;
1c00f0c4 <list+0x6e> lw	a4,-20(s0)
1c00f0c8 <list+0x72> bltu	a4,a5,1c00f078 <list+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:930
        rt_kprintf("[l] %s\n", sysvar_item->sysvar.name);
        sysvar_item = sysvar_item->next;
    }
#endif

    return 0;
1c00f0cc <list+0x76> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/cmd.c:931
}
1c00f0ce <list+0x78> mv	a0,a5
1c00f0d0 <list+0x7a> lw	ra,28(sp)
1c00f0d2 <list+0x7c> lw	s0,24(sp)
1c00f0d4 <list+0x7e> addi	sp,sp,32
1c00f0d6 <list+0x80> ret
msh_is_used():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:38
typedef int (*cmd_function_t)(int argc, char **argv);

#ifdef FINSH_USING_MSH
#ifdef FINSH_USING_MSH_ONLY
rt_bool_t msh_is_used(void)
{
1c00f0d8 <msh_is_used> addi	sp,sp,-16
1c00f0da <msh_is_used+0x2> sw	s0,12(sp)
1c00f0dc <msh_is_used+0x4> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:39
    return RT_TRUE;
1c00f0de <msh_is_used+0x6> li	a5,1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:40
}
1c00f0e0 <msh_is_used+0x8> mv	a0,a5
1c00f0e2 <msh_is_used+0xa> lw	s0,12(sp)
1c00f0e4 <msh_is_used+0xc> addi	sp,sp,16
1c00f0e6 <msh_is_used+0xe> ret
msh_help():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:70
}
FINSH_FUNCTION_EXPORT_ALIAS(msh_enter, msh, use module shell);
#endif

int msh_help(int argc, char **argv)
{
1c00f0e8 <msh_help> addi	sp,sp,-48
1c00f0ea <msh_help+0x2> sw	ra,44(sp)
1c00f0ec <msh_help+0x4> sw	s0,40(sp)
1c00f0ee <msh_help+0x6> addi	s0,sp,48
1c00f0f0 <msh_help+0x8> sw	a0,-36(s0)
1c00f0f4 <msh_help+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:71
    rt_kprintf("RT-Thread shell commands:\n");
1c00f0f8 <msh_help+0x10> lui	a5,0x1c011
1c00f0fc <msh_help+0x14> addi	a0,a5,-948 # 1c010c4c <__fsym_list_desc+0x1c>
1c00f100 <msh_help+0x18> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:75
    {
        struct finsh_syscall *index;

        for (index = _syscall_table_begin;
1c00f104 <msh_help+0x1c> lui	a5,0x1c017
1c00f108 <msh_help+0x20> lw	a5,-1016(a5) # 1c016c08 <_syscall_table_begin>
1c00f10c <msh_help+0x24> sw	a5,-20(s0)
1c00f110 <msh_help+0x28> j	1c00f15a <msh_help+0x72>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:79
                index < _syscall_table_end;
                FINSH_NEXT_SYSCALL(index))
        {
            if (strncmp(index->name, "__cmd_", 6) != 0) continue;
1c00f112 <msh_help+0x2a> lw	a5,-20(s0)
1c00f116 <msh_help+0x2e> lw	a4,0(a5)
1c00f118 <msh_help+0x30> li	a2,6
1c00f11a <msh_help+0x32> lui	a5,0x1c011
1c00f11e <msh_help+0x36> addi	a1,a5,-920 # 1c010c68 <__fsym_list_desc+0x38>
1c00f122 <msh_help+0x3a> mv	a0,a4
1c00f124 <msh_help+0x3c> jal	ra,1c00832a <strncmp>
1c00f128 <msh_help+0x40> mv	a5,a0
1c00f12a <msh_help+0x42> bnez	a5,1c00f14e <msh_help+0x66>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:81
#if defined(FINSH_USING_DESCRIPTION) && defined(FINSH_USING_SYMTAB)
            rt_kprintf("%-16s - %s\n", &index->name[6], index->desc);
1c00f12c <msh_help+0x44> lw	a5,-20(s0)
1c00f130 <msh_help+0x48> lw	a5,0(a5)
1c00f132 <msh_help+0x4a> addi	a4,a5,6
1c00f136 <msh_help+0x4e> lw	a5,-20(s0)
1c00f13a <msh_help+0x52> lw	a5,4(a5)
1c00f13c <msh_help+0x54> mv	a2,a5
1c00f13e <msh_help+0x56> mv	a1,a4
1c00f140 <msh_help+0x58> lui	a5,0x1c011
1c00f144 <msh_help+0x5c> addi	a0,a5,-912 # 1c010c70 <__fsym_list_desc+0x40>
1c00f148 <msh_help+0x60> jal	ra,1c00c652 <rt_kprintf>
1c00f14c <msh_help+0x64> j	1c00f150 <msh_help+0x68>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:79
            if (strncmp(index->name, "__cmd_", 6) != 0) continue;
1c00f14e <msh_help+0x66> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:77
                FINSH_NEXT_SYSCALL(index))
1c00f150 <msh_help+0x68> lw	a5,-20(s0)
1c00f154 <msh_help+0x6c> addi	a5,a5,12
1c00f156 <msh_help+0x6e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:76 (discriminator 1)
                index < _syscall_table_end;
1c00f15a <msh_help+0x72> lui	a5,0x1c017
1c00f15e <msh_help+0x76> lw	a5,-1012(a5) # 1c016c0c <_syscall_table_end>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:75 (discriminator 1)
        for (index = _syscall_table_begin;
1c00f162 <msh_help+0x7a> lw	a4,-20(s0)
1c00f166 <msh_help+0x7e> bltu	a4,a5,1c00f112 <msh_help+0x2a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:87
#else
            rt_kprintf("%s ", &index->name[6]);
#endif
        }
    }
    rt_kprintf("\n");
1c00f16a <msh_help+0x82> lui	a5,0x1c011
1c00f16e <msh_help+0x86> addi	a0,a5,-900 # 1c010c7c <__fsym_list_desc+0x4c>
1c00f172 <msh_help+0x8a> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:89

    return 0;
1c00f176 <msh_help+0x8e> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:90
}
1c00f178 <msh_help+0x90> mv	a0,a5
1c00f17a <msh_help+0x92> lw	ra,44(sp)
1c00f17c <msh_help+0x94> lw	s0,40(sp)
1c00f17e <msh_help+0x96> addi	sp,sp,48
1c00f180 <msh_help+0x98> ret
cmd_ps():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:94
FINSH_FUNCTION_EXPORT_ALIAS(msh_help, __cmd_help, RT-Thread shell help.);

int cmd_ps(int argc, char **argv)
{
1c00f182 <cmd_ps> addi	sp,sp,-32
1c00f184 <cmd_ps+0x2> sw	ra,28(sp)
1c00f186 <cmd_ps+0x4> sw	s0,24(sp)
1c00f188 <cmd_ps+0x6> addi	s0,sp,32
1c00f18a <cmd_ps+0x8> sw	a0,-20(s0)
1c00f18e <cmd_ps+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:103
#ifdef RT_USING_MODULE
    if ((argc == 2) && (strcmp(argv[1], "-m") == 0))
        list_module();
    else
#endif
        list_thread();
1c00f192 <cmd_ps+0x10> jal	ra,1c00e94e <list_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:104
    return 0;
1c00f196 <cmd_ps+0x14> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:105
}
1c00f198 <cmd_ps+0x16> mv	a0,a5
1c00f19a <cmd_ps+0x18> lw	ra,28(sp)
1c00f19c <cmd_ps+0x1a> lw	s0,24(sp)
1c00f19e <cmd_ps+0x1c> addi	sp,sp,32
1c00f1a0 <cmd_ps+0x1e> ret
cmd_free():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:110
FINSH_FUNCTION_EXPORT_ALIAS(cmd_ps, __cmd_ps, List threads in the system.);

#ifdef RT_USING_HEAP
int cmd_free(int argc, char **argv)
{
1c00f1a2 <cmd_free> addi	sp,sp,-32
1c00f1a4 <cmd_free+0x2> sw	ra,28(sp)
1c00f1a6 <cmd_free+0x4> sw	s0,24(sp)
1c00f1a8 <cmd_free+0x6> addi	s0,sp,32
1c00f1aa <cmd_free+0x8> sw	a0,-20(s0)
1c00f1ae <cmd_free+0xc> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:117
    extern void list_memheap(void);

#ifdef RT_USING_MEMHEAP_AS_HEAP
    list_memheap();
#else
    list_mem();
1c00f1b2 <cmd_free+0x10> jal	ra,1c00e310 <list_mem>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:119
#endif
    return 0;
1c00f1b6 <cmd_free+0x14> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:120
}
1c00f1b8 <cmd_free+0x16> mv	a0,a5
1c00f1ba <cmd_free+0x18> lw	ra,28(sp)
1c00f1bc <cmd_free+0x1a> lw	s0,24(sp)
1c00f1be <cmd_free+0x1c> addi	sp,sp,32
1c00f1c0 <cmd_free+0x1e> ret
msh_split():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:125
FINSH_FUNCTION_EXPORT_ALIAS(cmd_free, __cmd_free, Show the memory usage in the system.);
#endif

static int msh_split(char *cmd, rt_size_t length, char *argv[FINSH_ARG_MAX])
{
1c00f1c2 <msh_split> addi	sp,sp,-48
1c00f1c4 <msh_split+0x2> sw	ra,44(sp)
1c00f1c6 <msh_split+0x4> sw	s0,40(sp)
1c00f1c8 <msh_split+0x6> addi	s0,sp,48
1c00f1ca <msh_split+0x8> sw	a0,-36(s0)
1c00f1ce <msh_split+0xc> sw	a1,-40(s0)
1c00f1d2 <msh_split+0x10> sw	a2,-44(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:131
    char *ptr;
    rt_size_t position;
    rt_size_t argc;
    rt_size_t i;

    ptr = cmd;
1c00f1d6 <msh_split+0x14> lw	a5,-36(s0)
1c00f1da <msh_split+0x18> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:132
    position = 0; argc = 0;
1c00f1de <msh_split+0x1c> sw	zero,-24(s0)
1c00f1e2 <msh_split+0x20> sw	zero,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:134

    while (position < length)
1c00f1e6 <msh_split+0x24> j	1c00f3d0 <msh_split+0x20e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:139
    {
        /* strip bank and tab */
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
        {
            *ptr = '\0';
1c00f1e8 <msh_split+0x26> lw	a5,-20(s0)
1c00f1ec <msh_split+0x2a> sb	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:140
            ptr ++; position ++;
1c00f1f0 <msh_split+0x2e> lw	a5,-20(s0)
1c00f1f4 <msh_split+0x32> addi	a5,a5,1
1c00f1f6 <msh_split+0x34> sw	a5,-20(s0)
1c00f1fa <msh_split+0x38> lw	a5,-24(s0)
1c00f1fe <msh_split+0x3c> addi	a5,a5,1
1c00f200 <msh_split+0x3e> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:137
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
1c00f204 <msh_split+0x42> lw	a5,-20(s0)
1c00f208 <msh_split+0x46> lb	a4,0(a5)
1c00f20c <msh_split+0x4a> li	a5,32
1c00f210 <msh_split+0x4e> beq	a4,a5,1c00f222 <msh_split+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:137 (discriminator 2)
1c00f214 <msh_split+0x52> lw	a5,-20(s0)
1c00f218 <msh_split+0x56> lb	a4,0(a5)
1c00f21c <msh_split+0x5a> li	a5,9
1c00f21e <msh_split+0x5c> bne	a4,a5,1c00f22e <msh_split+0x6c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:137 (discriminator 3)
1c00f222 <msh_split+0x60> lw	a4,-24(s0)
1c00f226 <msh_split+0x64> lw	a5,-40(s0)
1c00f22a <msh_split+0x68> bltu	a4,a5,1c00f1e8 <msh_split+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:143
        }

        if(argc >= FINSH_ARG_MAX)
1c00f22e <msh_split+0x6c> lw	a4,-28(s0)
1c00f232 <msh_split+0x70> li	a5,7
1c00f234 <msh_split+0x72> bgeu	a5,a4,1c00f28a <msh_split+0xc8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:145
        {
            rt_kprintf("Too many args ! We only Use:\n");
1c00f238 <msh_split+0x76> lui	a5,0x1c011
1c00f23c <msh_split+0x7a> addi	a0,a5,-896 # 1c010c80 <__fsym_list_desc+0x50>
1c00f240 <msh_split+0x7e> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:146
            for(i = 0; i < argc; i++)
1c00f244 <msh_split+0x82> sw	zero,-32(s0)
1c00f248 <msh_split+0x86> j	1c00f270 <msh_split+0xae>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:148 (discriminator 3)
            {
                rt_kprintf("%s ", argv[i]);
1c00f24a <msh_split+0x88> lw	a5,-32(s0)
1c00f24e <msh_split+0x8c> slli	a5,a5,0x2
1c00f250 <msh_split+0x8e> lw	a4,-44(s0)
1c00f254 <msh_split+0x92> add	a5,a5,a4
1c00f256 <msh_split+0x94> lw	a5,0(a5)
1c00f258 <msh_split+0x96> mv	a1,a5
1c00f25a <msh_split+0x98> lui	a5,0x1c011
1c00f25e <msh_split+0x9c> addi	a0,a5,-864 # 1c010ca0 <__fsym_list_desc+0x70>
1c00f262 <msh_split+0xa0> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:146 (discriminator 3)
            for(i = 0; i < argc; i++)
1c00f266 <msh_split+0xa4> lw	a5,-32(s0)
1c00f26a <msh_split+0xa8> addi	a5,a5,1
1c00f26c <msh_split+0xaa> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:146 (discriminator 1)
1c00f270 <msh_split+0xae> lw	a4,-32(s0)
1c00f274 <msh_split+0xb2> lw	a5,-28(s0)
1c00f278 <msh_split+0xb6> bltu	a4,a5,1c00f24a <msh_split+0x88>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:150
            }
            rt_kprintf("\n");
1c00f27c <msh_split+0xba> lui	a5,0x1c011
1c00f280 <msh_split+0xbe> addi	a0,a5,-900 # 1c010c7c <__fsym_list_desc+0x4c>
1c00f284 <msh_split+0xc2> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:151
            break;
1c00f288 <msh_split+0xc6> j	1c00f3e8 <msh_split+0x226>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:154
        }

        if (position >= length) break;
1c00f28a <msh_split+0xc8> lw	a4,-24(s0)
1c00f28e <msh_split+0xcc> lw	a5,-40(s0)
1c00f292 <msh_split+0xd0> bgeu	a4,a5,1c00f3de <msh_split+0x21c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:157

        /* handle string */
        if (*ptr == '"')
1c00f296 <msh_split+0xd4> lw	a5,-20(s0)
1c00f29a <msh_split+0xd8> lb	a4,0(a5)
1c00f29e <msh_split+0xdc> li	a5,34
1c00f2a2 <msh_split+0xe0> bne	a4,a5,1c00f368 <msh_split+0x1a6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:159
        {
            ptr ++; position ++;
1c00f2a6 <msh_split+0xe4> lw	a5,-20(s0)
1c00f2aa <msh_split+0xe8> addi	a5,a5,1
1c00f2ac <msh_split+0xea> sw	a5,-20(s0)
1c00f2b0 <msh_split+0xee> lw	a5,-24(s0)
1c00f2b4 <msh_split+0xf2> addi	a5,a5,1
1c00f2b6 <msh_split+0xf4> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:160
            argv[argc] = ptr; argc ++;
1c00f2ba <msh_split+0xf8> lw	a5,-28(s0)
1c00f2be <msh_split+0xfc> slli	a5,a5,0x2
1c00f2c0 <msh_split+0xfe> lw	a4,-44(s0)
1c00f2c4 <msh_split+0x102> add	a5,a5,a4
1c00f2c6 <msh_split+0x104> lw	a4,-20(s0)
1c00f2ca <msh_split+0x108> sw	a4,0(a5)
1c00f2cc <msh_split+0x10a> lw	a5,-28(s0)
1c00f2d0 <msh_split+0x10e> addi	a5,a5,1
1c00f2d2 <msh_split+0x110> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:163

            /* skip this string */
            while (*ptr != '"' && position < length)
1c00f2d6 <msh_split+0x114> j	1c00f322 <msh_split+0x160>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:165
            {
                if (*ptr == '\\')
1c00f2d8 <msh_split+0x116> lw	a5,-20(s0)
1c00f2dc <msh_split+0x11a> lb	a4,0(a5)
1c00f2e0 <msh_split+0x11e> li	a5,92
1c00f2e4 <msh_split+0x122> bne	a4,a5,1c00f30e <msh_split+0x14c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:167
                {
                    if (*(ptr + 1) == '"')
1c00f2e8 <msh_split+0x126> lw	a5,-20(s0)
1c00f2ec <msh_split+0x12a> addi	a5,a5,1
1c00f2ee <msh_split+0x12c> lb	a4,0(a5)
1c00f2f2 <msh_split+0x130> li	a5,34
1c00f2f6 <msh_split+0x134> bne	a4,a5,1c00f30e <msh_split+0x14c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:169
                    {
                        ptr ++; position ++;
1c00f2fa <msh_split+0x138> lw	a5,-20(s0)
1c00f2fe <msh_split+0x13c> addi	a5,a5,1
1c00f300 <msh_split+0x13e> sw	a5,-20(s0)
1c00f304 <msh_split+0x142> lw	a5,-24(s0)
1c00f308 <msh_split+0x146> addi	a5,a5,1
1c00f30a <msh_split+0x148> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:172
                    }
                }
                ptr ++; position ++;
1c00f30e <msh_split+0x14c> lw	a5,-20(s0)
1c00f312 <msh_split+0x150> addi	a5,a5,1
1c00f314 <msh_split+0x152> sw	a5,-20(s0)
1c00f318 <msh_split+0x156> lw	a5,-24(s0)
1c00f31c <msh_split+0x15a> addi	a5,a5,1
1c00f31e <msh_split+0x15c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:163
            while (*ptr != '"' && position < length)
1c00f322 <msh_split+0x160> lw	a5,-20(s0)
1c00f326 <msh_split+0x164> lb	a4,0(a5)
1c00f32a <msh_split+0x168> li	a5,34
1c00f32e <msh_split+0x16c> beq	a4,a5,1c00f33e <msh_split+0x17c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:163 (discriminator 1)
1c00f332 <msh_split+0x170> lw	a4,-24(s0)
1c00f336 <msh_split+0x174> lw	a5,-40(s0)
1c00f33a <msh_split+0x178> bltu	a4,a5,1c00f2d8 <msh_split+0x116>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:174
            }
            if (position >= length) break;
1c00f33e <msh_split+0x17c> lw	a4,-24(s0)
1c00f342 <msh_split+0x180> lw	a5,-40(s0)
1c00f346 <msh_split+0x184> bgeu	a4,a5,1c00f3e2 <msh_split+0x220>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:177

            /* skip '"' */
            *ptr = '\0'; ptr ++; position ++;
1c00f34a <msh_split+0x188> lw	a5,-20(s0)
1c00f34e <msh_split+0x18c> sb	zero,0(a5)
1c00f352 <msh_split+0x190> lw	a5,-20(s0)
1c00f356 <msh_split+0x194> addi	a5,a5,1
1c00f358 <msh_split+0x196> sw	a5,-20(s0)
1c00f35c <msh_split+0x19a> lw	a5,-24(s0)
1c00f360 <msh_split+0x19e> addi	a5,a5,1
1c00f362 <msh_split+0x1a0> sw	a5,-24(s0)
1c00f366 <msh_split+0x1a4> j	1c00f3d0 <msh_split+0x20e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:181
        }
        else
        {
            argv[argc] = ptr;
1c00f368 <msh_split+0x1a6> lw	a5,-28(s0)
1c00f36c <msh_split+0x1aa> slli	a5,a5,0x2
1c00f36e <msh_split+0x1ac> lw	a4,-44(s0)
1c00f372 <msh_split+0x1b0> add	a5,a5,a4
1c00f374 <msh_split+0x1b2> lw	a4,-20(s0)
1c00f378 <msh_split+0x1b6> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:182
            argc ++;
1c00f37a <msh_split+0x1b8> lw	a5,-28(s0)
1c00f37e <msh_split+0x1bc> addi	a5,a5,1
1c00f380 <msh_split+0x1be> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:183
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
1c00f384 <msh_split+0x1c2> j	1c00f39a <msh_split+0x1d8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:185
            {
                ptr ++; position ++;
1c00f386 <msh_split+0x1c4> lw	a5,-20(s0)
1c00f38a <msh_split+0x1c8> addi	a5,a5,1
1c00f38c <msh_split+0x1ca> sw	a5,-20(s0)
1c00f390 <msh_split+0x1ce> lw	a5,-24(s0)
1c00f394 <msh_split+0x1d2> addi	a5,a5,1
1c00f396 <msh_split+0x1d4> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:183
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
1c00f39a <msh_split+0x1d8> lw	a5,-20(s0)
1c00f39e <msh_split+0x1dc> lb	a4,0(a5)
1c00f3a2 <msh_split+0x1e0> li	a5,32
1c00f3a6 <msh_split+0x1e4> beq	a4,a5,1c00f3c4 <msh_split+0x202>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:183 (discriminator 1)
1c00f3aa <msh_split+0x1e8> lw	a5,-20(s0)
1c00f3ae <msh_split+0x1ec> lb	a4,0(a5)
1c00f3b2 <msh_split+0x1f0> li	a5,9
1c00f3b4 <msh_split+0x1f2> beq	a4,a5,1c00f3c4 <msh_split+0x202>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:183 (discriminator 2)
1c00f3b8 <msh_split+0x1f6> lw	a4,-24(s0)
1c00f3bc <msh_split+0x1fa> lw	a5,-40(s0)
1c00f3c0 <msh_split+0x1fe> bltu	a4,a5,1c00f386 <msh_split+0x1c4>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:187
            }
            if (position >= length) break;
1c00f3c4 <msh_split+0x202> lw	a4,-24(s0)
1c00f3c8 <msh_split+0x206> lw	a5,-40(s0)
1c00f3cc <msh_split+0x20a> bgeu	a4,a5,1c00f3e6 <msh_split+0x224>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:134
    while (position < length)
1c00f3d0 <msh_split+0x20e> lw	a4,-24(s0)
1c00f3d4 <msh_split+0x212> lw	a5,-40(s0)
1c00f3d8 <msh_split+0x216> bltu	a4,a5,1c00f204 <msh_split+0x42>
1c00f3dc <msh_split+0x21a> j	1c00f3e8 <msh_split+0x226>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:154
        if (position >= length) break;
1c00f3de <msh_split+0x21c> nop
1c00f3e0 <msh_split+0x21e> j	1c00f3e8 <msh_split+0x226>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:174
            if (position >= length) break;
1c00f3e2 <msh_split+0x220> nop
1c00f3e4 <msh_split+0x222> j	1c00f3e8 <msh_split+0x226>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:187
            if (position >= length) break;
1c00f3e6 <msh_split+0x224> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:191
        }
    }

    return argc;
1c00f3e8 <msh_split+0x226> lw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:192
}
1c00f3ec <msh_split+0x22a> mv	a0,a5
1c00f3ee <msh_split+0x22c> lw	ra,44(sp)
1c00f3f0 <msh_split+0x22e> lw	s0,40(sp)
1c00f3f2 <msh_split+0x230> addi	sp,sp,48
1c00f3f4 <msh_split+0x232> ret
msh_get_cmd():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:195

static cmd_function_t msh_get_cmd(char *cmd, int size)
{
1c00f3f6 <msh_get_cmd> addi	sp,sp,-48
1c00f3f8 <msh_get_cmd+0x2> sw	ra,44(sp)
1c00f3fa <msh_get_cmd+0x4> sw	s0,40(sp)
1c00f3fc <msh_get_cmd+0x6> addi	s0,sp,48
1c00f3fe <msh_get_cmd+0x8> sw	a0,-36(s0)
1c00f402 <msh_get_cmd+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:197
    struct finsh_syscall *index;
    cmd_function_t cmd_func = RT_NULL;
1c00f406 <msh_get_cmd+0x10> sw	zero,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:199

    for (index = _syscall_table_begin;
1c00f40a <msh_get_cmd+0x14> lui	a5,0x1c017
1c00f40e <msh_get_cmd+0x18> lw	a5,-1016(a5) # 1c016c08 <_syscall_table_begin>
1c00f412 <msh_get_cmd+0x1c> sw	a5,-20(s0)
1c00f416 <msh_get_cmd+0x20> j	1c00f47a <msh_get_cmd+0x84>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:203
            index < _syscall_table_end;
            FINSH_NEXT_SYSCALL(index))
    {
        if (strncmp(index->name, "__cmd_", 6) != 0) continue;
1c00f418 <msh_get_cmd+0x22> lw	a5,-20(s0)
1c00f41c <msh_get_cmd+0x26> lw	a4,0(a5)
1c00f41e <msh_get_cmd+0x28> li	a2,6
1c00f420 <msh_get_cmd+0x2a> lui	a5,0x1c011
1c00f424 <msh_get_cmd+0x2e> addi	a1,a5,-920 # 1c010c68 <__fsym_list_desc+0x38>
1c00f428 <msh_get_cmd+0x32> mv	a0,a4
1c00f42a <msh_get_cmd+0x34> jal	ra,1c00832a <strncmp>
1c00f42e <msh_get_cmd+0x38> mv	a5,a0
1c00f430 <msh_get_cmd+0x3a> bnez	a5,1c00f46e <msh_get_cmd+0x78>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:205

        if (strncmp(&index->name[6], cmd, size) == 0 &&
1c00f432 <msh_get_cmd+0x3c> lw	a5,-20(s0)
1c00f436 <msh_get_cmd+0x40> lw	a5,0(a5)
1c00f438 <msh_get_cmd+0x42> addi	a5,a5,6
1c00f43a <msh_get_cmd+0x44> lw	a4,-40(s0)
1c00f43e <msh_get_cmd+0x48> mv	a2,a4
1c00f440 <msh_get_cmd+0x4a> lw	a1,-36(s0)
1c00f444 <msh_get_cmd+0x4e> mv	a0,a5
1c00f446 <msh_get_cmd+0x50> jal	ra,1c00832a <strncmp>
1c00f44a <msh_get_cmd+0x54> mv	a5,a0
1c00f44c <msh_get_cmd+0x56> bnez	a5,1c00f470 <msh_get_cmd+0x7a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:206 (discriminator 1)
                index->name[6 + size] == '\0')
1c00f44e <msh_get_cmd+0x58> lw	a5,-20(s0)
1c00f452 <msh_get_cmd+0x5c> lw	a5,0(a5)
1c00f454 <msh_get_cmd+0x5e> lw	a4,-40(s0)
1c00f458 <msh_get_cmd+0x62> addi	a4,a4,6
1c00f45a <msh_get_cmd+0x64> add	a5,a5,a4
1c00f45c <msh_get_cmd+0x66> lb	a5,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:205 (discriminator 1)
        if (strncmp(&index->name[6], cmd, size) == 0 &&
1c00f460 <msh_get_cmd+0x6a> bnez	a5,1c00f470 <msh_get_cmd+0x7a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:208
        {
            cmd_func = (cmd_function_t)index->func;
1c00f462 <msh_get_cmd+0x6c> lw	a5,-20(s0)
1c00f466 <msh_get_cmd+0x70> lw	a5,8(a5)
1c00f468 <msh_get_cmd+0x72> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:209
            break;
1c00f46c <msh_get_cmd+0x76> j	1c00f48a <msh_get_cmd+0x94>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:203
        if (strncmp(index->name, "__cmd_", 6) != 0) continue;
1c00f46e <msh_get_cmd+0x78> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:201
            FINSH_NEXT_SYSCALL(index))
1c00f470 <msh_get_cmd+0x7a> lw	a5,-20(s0)
1c00f474 <msh_get_cmd+0x7e> addi	a5,a5,12
1c00f476 <msh_get_cmd+0x80> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:200 (discriminator 1)
            index < _syscall_table_end;
1c00f47a <msh_get_cmd+0x84> lui	a5,0x1c017
1c00f47e <msh_get_cmd+0x88> lw	a5,-1012(a5) # 1c016c0c <_syscall_table_end>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:199 (discriminator 1)
    for (index = _syscall_table_begin;
1c00f482 <msh_get_cmd+0x8c> lw	a4,-20(s0)
1c00f486 <msh_get_cmd+0x90> bltu	a4,a5,1c00f418 <msh_get_cmd+0x22>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:213
        }
    }

    return cmd_func;
1c00f48a <msh_get_cmd+0x94> lw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:214
}
1c00f48e <msh_get_cmd+0x98> mv	a0,a5
1c00f490 <msh_get_cmd+0x9a> lw	ra,44(sp)
1c00f492 <msh_get_cmd+0x9c> lw	s0,40(sp)
1c00f494 <msh_get_cmd+0x9e> addi	sp,sp,48
1c00f496 <msh_get_cmd+0xa0> ret
_msh_exec_cmd():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:305
}

#endif

static int _msh_exec_cmd(char *cmd, rt_size_t length, int *retp)
{
1c00f498 <_msh_exec_cmd> addi	sp,sp,-80
1c00f49a <_msh_exec_cmd+0x2> sw	ra,76(sp)
1c00f49c <_msh_exec_cmd+0x4> sw	s0,72(sp)
1c00f49e <_msh_exec_cmd+0x6> addi	s0,sp,80
1c00f4a0 <_msh_exec_cmd+0x8> sw	a0,-68(s0)
1c00f4a4 <_msh_exec_cmd+0xc> sw	a1,-72(s0)
1c00f4a8 <_msh_exec_cmd+0x10> sw	a2,-76(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:307
    int argc;
    rt_size_t cmd0_size = 0;
1c00f4ac <_msh_exec_cmd+0x14> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:315

    RT_ASSERT(cmd);
    RT_ASSERT(retp);

    /* find the size of first command */
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
1c00f4b0 <_msh_exec_cmd+0x18> j	1c00f4bc <_msh_exec_cmd+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:316
        cmd0_size ++;
1c00f4b2 <_msh_exec_cmd+0x1a> lw	a5,-20(s0)
1c00f4b6 <_msh_exec_cmd+0x1e> addi	a5,a5,1
1c00f4b8 <_msh_exec_cmd+0x20> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:315
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
1c00f4bc <_msh_exec_cmd+0x24> lw	a4,-68(s0)
1c00f4c0 <_msh_exec_cmd+0x28> lw	a5,-20(s0)
1c00f4c4 <_msh_exec_cmd+0x2c> add	a5,a5,a4
1c00f4c6 <_msh_exec_cmd+0x2e> lb	a4,0(a5)
1c00f4ca <_msh_exec_cmd+0x32> li	a5,32
1c00f4ce <_msh_exec_cmd+0x36> beq	a4,a5,1c00f4f2 <_msh_exec_cmd+0x5a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:315 (discriminator 1)
1c00f4d2 <_msh_exec_cmd+0x3a> lw	a4,-68(s0)
1c00f4d6 <_msh_exec_cmd+0x3e> lw	a5,-20(s0)
1c00f4da <_msh_exec_cmd+0x42> add	a5,a5,a4
1c00f4dc <_msh_exec_cmd+0x44> lb	a4,0(a5)
1c00f4e0 <_msh_exec_cmd+0x48> li	a5,9
1c00f4e2 <_msh_exec_cmd+0x4a> beq	a4,a5,1c00f4f2 <_msh_exec_cmd+0x5a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:315 (discriminator 2)
1c00f4e6 <_msh_exec_cmd+0x4e> lw	a4,-20(s0)
1c00f4ea <_msh_exec_cmd+0x52> lw	a5,-72(s0)
1c00f4ee <_msh_exec_cmd+0x56> bltu	a4,a5,1c00f4b2 <_msh_exec_cmd+0x1a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:317
    if (cmd0_size == 0)
1c00f4f2 <_msh_exec_cmd+0x5a> lw	a5,-20(s0)
1c00f4f6 <_msh_exec_cmd+0x5e> bnez	a5,1c00f4fc <_msh_exec_cmd+0x64>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:318
        return -RT_ERROR;
1c00f4f8 <_msh_exec_cmd+0x60> li	a5,-1
1c00f4fa <_msh_exec_cmd+0x62> j	1c00f562 <_msh_exec_cmd+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:320

    cmd_func = msh_get_cmd(cmd, cmd0_size);
1c00f4fc <_msh_exec_cmd+0x64> lw	a5,-20(s0)
1c00f500 <_msh_exec_cmd+0x68> mv	a1,a5
1c00f502 <_msh_exec_cmd+0x6a> lw	a0,-68(s0)
1c00f506 <_msh_exec_cmd+0x6e> jal	ra,1c00f3f6 <msh_get_cmd>
1c00f50a <_msh_exec_cmd+0x72> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:321
    if (cmd_func == RT_NULL)
1c00f50e <_msh_exec_cmd+0x76> lw	a5,-24(s0)
1c00f512 <_msh_exec_cmd+0x7a> bnez	a5,1c00f518 <_msh_exec_cmd+0x80>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:322
        return -RT_ERROR;
1c00f514 <_msh_exec_cmd+0x7c> li	a5,-1
1c00f516 <_msh_exec_cmd+0x7e> j	1c00f562 <_msh_exec_cmd+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:325

    /* split arguments */
    memset(argv, 0x00, sizeof(argv));
1c00f518 <_msh_exec_cmd+0x80> addi	a5,s0,-60
1c00f51c <_msh_exec_cmd+0x84> li	a2,32
1c00f520 <_msh_exec_cmd+0x88> li	a1,0
1c00f522 <_msh_exec_cmd+0x8a> mv	a0,a5
1c00f524 <_msh_exec_cmd+0x8c> jal	ra,1c008270 <memset>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:326
    argc = msh_split(cmd, length, argv);
1c00f528 <_msh_exec_cmd+0x90> addi	a5,s0,-60
1c00f52c <_msh_exec_cmd+0x94> mv	a2,a5
1c00f52e <_msh_exec_cmd+0x96> lw	a1,-72(s0)
1c00f532 <_msh_exec_cmd+0x9a> lw	a0,-68(s0)
1c00f536 <_msh_exec_cmd+0x9e> jal	ra,1c00f1c2 <msh_split>
1c00f53a <_msh_exec_cmd+0xa2> sw	a0,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:327
    if (argc == 0)
1c00f53e <_msh_exec_cmd+0xa6> lw	a5,-28(s0)
1c00f542 <_msh_exec_cmd+0xaa> bnez	a5,1c00f548 <_msh_exec_cmd+0xb0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:328
        return -RT_ERROR;
1c00f544 <_msh_exec_cmd+0xac> li	a5,-1
1c00f546 <_msh_exec_cmd+0xae> j	1c00f562 <_msh_exec_cmd+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:331

    /* exec this command */
    *retp = cmd_func(argc, argv);
1c00f548 <_msh_exec_cmd+0xb0> addi	a5,s0,-60
1c00f54c <_msh_exec_cmd+0xb4> lw	a4,-24(s0)
1c00f550 <_msh_exec_cmd+0xb8> mv	a1,a5
1c00f552 <_msh_exec_cmd+0xba> lw	a0,-28(s0)
1c00f556 <_msh_exec_cmd+0xbe> jalr	a4
1c00f558 <_msh_exec_cmd+0xc0> mv	a4,a0
1c00f55a <_msh_exec_cmd+0xc2> lw	a5,-76(s0)
1c00f55e <_msh_exec_cmd+0xc6> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:332
    return 0;
1c00f560 <_msh_exec_cmd+0xc8> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:333 (discriminator 1)
}
1c00f562 <_msh_exec_cmd+0xca> mv	a0,a5
1c00f564 <_msh_exec_cmd+0xcc> lw	ra,76(sp)
1c00f566 <_msh_exec_cmd+0xce> lw	s0,72(sp)
1c00f568 <_msh_exec_cmd+0xd0> addi	sp,sp,80
1c00f56a <_msh_exec_cmd+0xd2> ret
msh_exec():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:374
    return 0;
}
#endif

int msh_exec(char *cmd, rt_size_t length)
{
1c00f56c <msh_exec> addi	sp,sp,-48
1c00f56e <msh_exec+0x2> sw	ra,44(sp)
1c00f570 <msh_exec+0x4> sw	s0,40(sp)
1c00f572 <msh_exec+0x6> addi	s0,sp,48
1c00f574 <msh_exec+0x8> sw	a0,-36(s0)
1c00f578 <msh_exec+0xc> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:378
    int cmd_ret;

    /* strim the beginning of command */
    while ((length > 0) && (*cmd == ' ' || *cmd == '\t'))
1c00f57c <msh_exec+0x10> j	1c00f592 <msh_exec+0x26>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:380
    {
        cmd++;
1c00f57e <msh_exec+0x12> lw	a5,-36(s0)
1c00f582 <msh_exec+0x16> addi	a5,a5,1
1c00f584 <msh_exec+0x18> sw	a5,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:381
        length--;
1c00f588 <msh_exec+0x1c> lw	a5,-40(s0)
1c00f58c <msh_exec+0x20> addi	a5,a5,-1
1c00f58e <msh_exec+0x22> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:378
    while ((length > 0) && (*cmd == ' ' || *cmd == '\t'))
1c00f592 <msh_exec+0x26> lw	a5,-40(s0)
1c00f596 <msh_exec+0x2a> beqz	a5,1c00f5b6 <msh_exec+0x4a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:378 (discriminator 1)
1c00f598 <msh_exec+0x2c> lw	a5,-36(s0)
1c00f59c <msh_exec+0x30> lb	a4,0(a5)
1c00f5a0 <msh_exec+0x34> li	a5,32
1c00f5a4 <msh_exec+0x38> beq	a4,a5,1c00f57e <msh_exec+0x12>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:378 (discriminator 2)
1c00f5a8 <msh_exec+0x3c> lw	a5,-36(s0)
1c00f5ac <msh_exec+0x40> lb	a4,0(a5)
1c00f5b0 <msh_exec+0x44> li	a5,9
1c00f5b2 <msh_exec+0x46> beq	a4,a5,1c00f57e <msh_exec+0x12>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:384
    }

    if (length == 0)
1c00f5b6 <msh_exec+0x4a> lw	a5,-40(s0)
1c00f5ba <msh_exec+0x4e> bnez	a5,1c00f5c0 <msh_exec+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:385
        return 0;
1c00f5bc <msh_exec+0x50> li	a5,0
1c00f5be <msh_exec+0x52> j	1c00f624 <msh_exec+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:391

    /* Exec sequence:
     * 1. built-in command
     * 2. module(if enabled)
     */
    if (_msh_exec_cmd(cmd, length, &cmd_ret) == 0)
1c00f5c0 <msh_exec+0x54> addi	a5,s0,-24
1c00f5c4 <msh_exec+0x58> mv	a2,a5
1c00f5c6 <msh_exec+0x5a> lw	a1,-40(s0)
1c00f5ca <msh_exec+0x5e> lw	a0,-36(s0)
1c00f5ce <msh_exec+0x62> jal	ra,1c00f498 <_msh_exec_cmd>
1c00f5d2 <msh_exec+0x66> mv	a5,a0
1c00f5d4 <msh_exec+0x68> bnez	a5,1c00f5dc <msh_exec+0x70>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:393
    {
        return cmd_ret;
1c00f5d6 <msh_exec+0x6a> lw	a5,-24(s0)
1c00f5da <msh_exec+0x6e> j	1c00f624 <msh_exec+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:421
#endif

    /* truncate the cmd at the first space. */
    {
        char *tcmd;
        tcmd = cmd;
1c00f5dc <msh_exec+0x70> lw	a5,-36(s0)
1c00f5e0 <msh_exec+0x74> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:422
        while (*tcmd != ' ' && *tcmd != '\0')
1c00f5e4 <msh_exec+0x78> j	1c00f5f0 <msh_exec+0x84>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:424
        {
            tcmd++;
1c00f5e6 <msh_exec+0x7a> lw	a5,-20(s0)
1c00f5ea <msh_exec+0x7e> addi	a5,a5,1
1c00f5ec <msh_exec+0x80> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:422
        while (*tcmd != ' ' && *tcmd != '\0')
1c00f5f0 <msh_exec+0x84> lw	a5,-20(s0)
1c00f5f4 <msh_exec+0x88> lb	a4,0(a5)
1c00f5f8 <msh_exec+0x8c> li	a5,32
1c00f5fc <msh_exec+0x90> beq	a4,a5,1c00f60a <msh_exec+0x9e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:422 (discriminator 1)
1c00f600 <msh_exec+0x94> lw	a5,-20(s0)
1c00f604 <msh_exec+0x98> lb	a5,0(a5)
1c00f608 <msh_exec+0x9c> bnez	a5,1c00f5e6 <msh_exec+0x7a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:426
        }
        *tcmd = '\0';
1c00f60a <msh_exec+0x9e> lw	a5,-20(s0)
1c00f60e <msh_exec+0xa2> sb	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:428
    }
    rt_kprintf("%s: command not found.\n", cmd);
1c00f612 <msh_exec+0xa6> lw	a1,-36(s0)
1c00f616 <msh_exec+0xaa> lui	a5,0x1c011
1c00f61a <msh_exec+0xae> addi	a0,a5,-860 # 1c010ca4 <__fsym_list_desc+0x74>
1c00f61e <msh_exec+0xb2> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:429
    return -1;
1c00f622 <msh_exec+0xb6> li	a5,-1
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:430 (discriminator 1)
}
1c00f624 <msh_exec+0xb8> mv	a0,a5
1c00f626 <msh_exec+0xba> lw	ra,44(sp)
1c00f628 <msh_exec+0xbc> lw	s0,40(sp)
1c00f62a <msh_exec+0xbe> addi	sp,sp,48
1c00f62c <msh_exec+0xc0> ret
str_common():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:433

static int str_common(const char *str1, const char *str2)
{
1c00f62e <str_common> addi	sp,sp,-48
1c00f630 <str_common+0x2> sw	s0,44(sp)
1c00f632 <str_common+0x4> addi	s0,sp,48
1c00f634 <str_common+0x6> sw	a0,-36(s0)
1c00f638 <str_common+0xa> sw	a1,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:434
    const char *str = str1;
1c00f63c <str_common+0xe> lw	a5,-36(s0)
1c00f640 <str_common+0x12> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:436

    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
1c00f644 <str_common+0x16> j	1c00f65a <str_common+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:438
    {
        str ++;
1c00f646 <str_common+0x18> lw	a5,-20(s0)
1c00f64a <str_common+0x1c> addi	a5,a5,1
1c00f64c <str_common+0x1e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:439
        str2 ++;
1c00f650 <str_common+0x22> lw	a5,-40(s0)
1c00f654 <str_common+0x26> addi	a5,a5,1
1c00f656 <str_common+0x28> sw	a5,-40(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:436
    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
1c00f65a <str_common+0x2c> lw	a5,-20(s0)
1c00f65e <str_common+0x30> lb	a5,0(a5)
1c00f662 <str_common+0x34> beqz	a5,1c00f682 <str_common+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:436 (discriminator 1)
1c00f664 <str_common+0x36> lw	a5,-40(s0)
1c00f668 <str_common+0x3a> lb	a5,0(a5)
1c00f66c <str_common+0x3e> beqz	a5,1c00f682 <str_common+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:436 (discriminator 2)
1c00f66e <str_common+0x40> lw	a5,-20(s0)
1c00f672 <str_common+0x44> lb	a4,0(a5)
1c00f676 <str_common+0x48> lw	a5,-40(s0)
1c00f67a <str_common+0x4c> lb	a5,0(a5)
1c00f67e <str_common+0x50> beq	a4,a5,1c00f646 <str_common+0x18>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:442
    }

    return (str - str1);
1c00f682 <str_common+0x54> lw	a4,-20(s0)
1c00f686 <str_common+0x58> lw	a5,-36(s0)
1c00f68a <str_common+0x5c> sub	a5,a4,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:443
}
1c00f68e <str_common+0x60> mv	a0,a5
1c00f690 <str_common+0x62> lw	s0,44(sp)
1c00f692 <str_common+0x64> addi	sp,sp,48
1c00f694 <str_common+0x66> ret
msh_auto_complete():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:569
    rt_free(full_path);
}
#endif

void msh_auto_complete(char *prefix)
{
1c00f696 <msh_auto_complete> addi	sp,sp,-64
1c00f698 <msh_auto_complete+0x2> sw	ra,60(sp)
1c00f69a <msh_auto_complete+0x4> sw	s0,56(sp)
1c00f69c <msh_auto_complete+0x6> addi	s0,sp,64
1c00f69e <msh_auto_complete+0x8> sw	a0,-52(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:574
    int length, min_length;
    const char *name_ptr, *cmd_name;
    struct finsh_syscall *index;

    min_length = 0;
1c00f6a2 <msh_auto_complete+0xc> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:575
    name_ptr = RT_NULL;
1c00f6a6 <msh_auto_complete+0x10> sw	zero,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:577

    if (*prefix == '\0')
1c00f6aa <msh_auto_complete+0x14> lw	a5,-52(s0)
1c00f6ae <msh_auto_complete+0x18> lb	a5,0(a5)
1c00f6b2 <msh_auto_complete+0x1c> bnez	a5,1c00f6be <msh_auto_complete+0x28>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:579
    {
        msh_help(0, RT_NULL);
1c00f6b4 <msh_auto_complete+0x1e> li	a1,0
1c00f6b6 <msh_auto_complete+0x20> li	a0,0
1c00f6b8 <msh_auto_complete+0x22> jal	ra,1c00f0e8 <msh_help>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:580
        return;
1c00f6bc <msh_auto_complete+0x26> j	1c00f798 <msh_auto_complete+0x102>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:613
    }
#endif

    /* checks in internal command */
    {
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
1c00f6be <msh_auto_complete+0x28> lui	a5,0x1c017
1c00f6c2 <msh_auto_complete+0x2c> lw	a5,-1016(a5) # 1c016c08 <_syscall_table_begin>
1c00f6c6 <msh_auto_complete+0x30> sw	a5,-28(s0)
1c00f6ca <msh_auto_complete+0x34> j	1c00f76c <msh_auto_complete+0xd6>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:616
        {
            /* skip finsh shell function */
            if (strncmp(index->name, "__cmd_", 6) != 0) continue;
1c00f6cc <msh_auto_complete+0x36> lw	a5,-28(s0)
1c00f6d0 <msh_auto_complete+0x3a> lw	a4,0(a5)
1c00f6d2 <msh_auto_complete+0x3c> li	a2,6
1c00f6d4 <msh_auto_complete+0x3e> lui	a5,0x1c011
1c00f6d8 <msh_auto_complete+0x42> addi	a1,a5,-920 # 1c010c68 <__fsym_list_desc+0x38>
1c00f6dc <msh_auto_complete+0x46> mv	a0,a4
1c00f6de <msh_auto_complete+0x48> jal	ra,1c00832a <strncmp>
1c00f6e2 <msh_auto_complete+0x4c> mv	a5,a0
1c00f6e4 <msh_auto_complete+0x4e> bnez	a5,1c00f760 <msh_auto_complete+0xca>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:618

            cmd_name = (const char *) &index->name[6];
1c00f6e6 <msh_auto_complete+0x50> lw	a5,-28(s0)
1c00f6ea <msh_auto_complete+0x54> lw	a5,0(a5)
1c00f6ec <msh_auto_complete+0x56> addi	a5,a5,6
1c00f6ee <msh_auto_complete+0x58> sw	a5,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:619
            if (strncmp(prefix, cmd_name, strlen(prefix)) == 0)
1c00f6f2 <msh_auto_complete+0x5c> lw	a0,-52(s0)
1c00f6f6 <msh_auto_complete+0x60> jal	ra,1c008318 <strlen>
1c00f6fa <msh_auto_complete+0x64> mv	a5,a0
1c00f6fc <msh_auto_complete+0x66> mv	a2,a5
1c00f6fe <msh_auto_complete+0x68> lw	a1,-32(s0)
1c00f702 <msh_auto_complete+0x6c> lw	a0,-52(s0)
1c00f706 <msh_auto_complete+0x70> jal	ra,1c00832a <strncmp>
1c00f70a <msh_auto_complete+0x74> mv	a5,a0
1c00f70c <msh_auto_complete+0x76> bnez	a5,1c00f762 <msh_auto_complete+0xcc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:621
            {
                if (min_length == 0)
1c00f70e <msh_auto_complete+0x78> lw	a5,-20(s0)
1c00f712 <msh_auto_complete+0x7c> bnez	a5,1c00f72a <msh_auto_complete+0x94>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:624
                {
                    /* set name_ptr */
                    name_ptr = cmd_name;
1c00f714 <msh_auto_complete+0x7e> lw	a5,-32(s0)
1c00f718 <msh_auto_complete+0x82> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:626
                    /* set initial length */
                    min_length = strlen(name_ptr);
1c00f71c <msh_auto_complete+0x86> lw	a0,-24(s0)
1c00f720 <msh_auto_complete+0x8a> jal	ra,1c008318 <strlen>
1c00f724 <msh_auto_complete+0x8e> mv	a5,a0
1c00f726 <msh_auto_complete+0x90> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:629
                }

                length = str_common(name_ptr, cmd_name);
1c00f72a <msh_auto_complete+0x94> lw	a1,-32(s0)
1c00f72e <msh_auto_complete+0x98> lw	a0,-24(s0)
1c00f732 <msh_auto_complete+0x9c> jal	ra,1c00f62e <str_common>
1c00f736 <msh_auto_complete+0xa0> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:630
                if (length < min_length)
1c00f73a <msh_auto_complete+0xa4> lw	a4,-36(s0)
1c00f73e <msh_auto_complete+0xa8> lw	a5,-20(s0)
1c00f742 <msh_auto_complete+0xac> bge	a4,a5,1c00f74e <msh_auto_complete+0xb8>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:631
                    min_length = length;
1c00f746 <msh_auto_complete+0xb0> lw	a5,-36(s0)
1c00f74a <msh_auto_complete+0xb4> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:633

                rt_kprintf("%s\n", cmd_name);
1c00f74e <msh_auto_complete+0xb8> lw	a1,-32(s0)
1c00f752 <msh_auto_complete+0xbc> lui	a5,0x1c011
1c00f756 <msh_auto_complete+0xc0> addi	a0,a5,-836 # 1c010cbc <__fsym_list_desc+0x8c>
1c00f75a <msh_auto_complete+0xc4> jal	ra,1c00c652 <rt_kprintf>
1c00f75e <msh_auto_complete+0xc8> j	1c00f762 <msh_auto_complete+0xcc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:616
            if (strncmp(index->name, "__cmd_", 6) != 0) continue;
1c00f760 <msh_auto_complete+0xca> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:613 (discriminator 2)
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
1c00f762 <msh_auto_complete+0xcc> lw	a5,-28(s0)
1c00f766 <msh_auto_complete+0xd0> addi	a5,a5,12
1c00f768 <msh_auto_complete+0xd2> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:613 (discriminator 1)
1c00f76c <msh_auto_complete+0xd6> lui	a5,0x1c017
1c00f770 <msh_auto_complete+0xda> lw	a5,-1012(a5) # 1c016c0c <_syscall_table_end>
1c00f774 <msh_auto_complete+0xde> lw	a4,-28(s0)
1c00f778 <msh_auto_complete+0xe2> bltu	a4,a5,1c00f6cc <msh_auto_complete+0x36>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:639
            }
        }
    }

    /* auto complete string */
    if (name_ptr != NULL)
1c00f77c <msh_auto_complete+0xe6> lw	a5,-24(s0)
1c00f780 <msh_auto_complete+0xea> beqz	a5,1c00f796 <msh_auto_complete+0x100>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:641
    {
        rt_strncpy(prefix, name_ptr, min_length);
1c00f782 <msh_auto_complete+0xec> lw	a5,-20(s0)
1c00f786 <msh_auto_complete+0xf0> mv	a2,a5
1c00f788 <msh_auto_complete+0xf2> lw	a1,-24(s0)
1c00f78c <msh_auto_complete+0xf6> lw	a0,-52(s0)
1c00f790 <msh_auto_complete+0xfa> jal	ra,1c00bbf8 <rt_strncpy>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:644
    }

    return ;
1c00f794 <msh_auto_complete+0xfe> nop
1c00f796 <msh_auto_complete+0x100> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/msh.c:645
}
1c00f798 <msh_auto_complete+0x102> lw	ra,60(sp)
1c00f79a <msh_auto_complete+0x104> lw	s0,56(sp)
1c00f79c <msh_auto_complete+0x106> addi	sp,sp,64
1c00f79e <msh_auto_complete+0x108> ret
finsh_get_prompt():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:106
#if defined(RT_USING_DFS)
#include <dfs_posix.h>
#endif /* RT_USING_DFS */

const char *finsh_get_prompt()
{
1c00f7a0 <finsh_get_prompt> addi	sp,sp,-16
1c00f7a2 <finsh_get_prompt+0x2> sw	ra,12(sp)
1c00f7a4 <finsh_get_prompt+0x4> sw	s0,8(sp)
1c00f7a6 <finsh_get_prompt+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:112
#define _MSH_PROMPT "msh "
#define _PROMPT     "finsh "
    static char finsh_prompt[RT_CONSOLEBUF_SIZE + 1] = {0};

    /* check prompt mode */
    if (!shell->prompt_mode)
1c00f7a8 <finsh_get_prompt+0x8> lui	a5,0x1c017
1c00f7ac <finsh_get_prompt+0xc> lw	a5,44(a5) # 1c01702c <shell>
1c00f7b0 <finsh_get_prompt+0x10> lbu	a5,36(a5)
1c00f7b4 <finsh_get_prompt+0x14> andi	a5,a5,2
1c00f7b6 <finsh_get_prompt+0x16> andi	a5,a5,255
1c00f7ba <finsh_get_prompt+0x1a> bnez	a5,1c00f7d2 <finsh_get_prompt+0x32>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:114
    {
        finsh_prompt[0] = '\0';
1c00f7bc <finsh_get_prompt+0x1c> lui	a5,0x1c017
1c00f7c0 <finsh_get_prompt+0x20> addi	a5,a5,-1312 # 1c016ae0 <finsh_prompt.3837>
1c00f7c4 <finsh_get_prompt+0x24> sb	zero,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:115
        return finsh_prompt;
1c00f7c8 <finsh_get_prompt+0x28> lui	a5,0x1c017
1c00f7cc <finsh_get_prompt+0x2c> addi	a5,a5,-1312 # 1c016ae0 <finsh_prompt.3837>
1c00f7d0 <finsh_get_prompt+0x30> j	1c00f86e <finsh_get_prompt+0xce>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:118
    }

    if(finsh_prompt_custom)
1c00f7d2 <finsh_get_prompt+0x32> lui	a5,0x1c017
1c00f7d6 <finsh_get_prompt+0x36> lw	a5,-1000(a5) # 1c016c18 <finsh_prompt_custom>
1c00f7da <finsh_get_prompt+0x3a> beqz	a5,1c00f800 <finsh_get_prompt+0x60>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:120
    {
        strncpy(finsh_prompt, finsh_prompt_custom, sizeof(finsh_prompt)-1);
1c00f7dc <finsh_get_prompt+0x3c> lui	a5,0x1c017
1c00f7e0 <finsh_get_prompt+0x40> lw	a5,-1000(a5) # 1c016c18 <finsh_prompt_custom>
1c00f7e4 <finsh_get_prompt+0x44> li	a2,128
1c00f7e8 <finsh_get_prompt+0x48> mv	a1,a5
1c00f7ea <finsh_get_prompt+0x4a> lui	a5,0x1c017
1c00f7ee <finsh_get_prompt+0x4e> addi	a0,a5,-1312 # 1c016ae0 <finsh_prompt.3837>
1c00f7f2 <finsh_get_prompt+0x52> jal	ra,1c008354 <strncpy>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:121
        return finsh_prompt;
1c00f7f6 <finsh_get_prompt+0x56> lui	a5,0x1c017
1c00f7fa <finsh_get_prompt+0x5a> addi	a5,a5,-1312 # 1c016ae0 <finsh_prompt.3837>
1c00f7fe <finsh_get_prompt+0x5e> j	1c00f86e <finsh_get_prompt+0xce>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:125
    }

#ifdef FINSH_USING_MSH
    if (msh_is_used()) strcpy(finsh_prompt, _MSH_PROMPT);
1c00f800 <finsh_get_prompt+0x60> jal	ra,1c00f0d8 <msh_is_used>
1c00f804 <finsh_get_prompt+0x64> mv	a5,a0
1c00f806 <finsh_get_prompt+0x66> beqz	a5,1c00f820 <finsh_get_prompt+0x80>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:125 (discriminator 1)
1c00f808 <finsh_get_prompt+0x68> lui	a5,0x1c017
1c00f80c <finsh_get_prompt+0x6c> addi	a5,a5,-1312 # 1c016ae0 <finsh_prompt.3837>
1c00f810 <finsh_get_prompt+0x70> lui	a4,0x20687
1c00f814 <finsh_get_prompt+0x74> addi	a4,a4,877 # 2068736d <__l2_shared_end+0x465fb3d>
1c00f818 <finsh_get_prompt+0x78> sw	a4,0(a5)
1c00f81a <finsh_get_prompt+0x7a> sb	zero,4(a5)
1c00f81e <finsh_get_prompt+0x7e> j	1c00f840 <finsh_get_prompt+0xa0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:128
    else
#endif
        strcpy(finsh_prompt, _PROMPT);
1c00f820 <finsh_get_prompt+0x80> lui	a5,0x1c017
1c00f824 <finsh_get_prompt+0x84> addi	a5,a5,-1312 # 1c016ae0 <finsh_prompt.3837>
1c00f828 <finsh_get_prompt+0x88> lui	a4,0x736e7
1c00f82c <finsh_get_prompt+0x8c> addi	a4,a4,-1690 # 736e6966 <__l2_shared_end+0x576bf136>
1c00f830 <finsh_get_prompt+0x90> sw	a4,0(a5)
1c00f832 <finsh_get_prompt+0x92> lui	a4,0x2
1c00f834 <finsh_get_prompt+0x94> addi	a4,a4,104 # 00002068 <__stack_size+0x1868>
1c00f838 <finsh_get_prompt+0x98> sh	a4,4(a5)
1c00f83c <finsh_get_prompt+0x9c> sb	zero,6(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:135
#if defined(RT_USING_DFS) && defined(DFS_USING_WORKDIR)
    /* get current working directory */
    getcwd(&finsh_prompt[rt_strlen(finsh_prompt)], RT_CONSOLEBUF_SIZE - rt_strlen(finsh_prompt));
#endif

    strcat(finsh_prompt, ">");
1c00f840 <finsh_get_prompt+0xa0> lui	a5,0x1c017
1c00f844 <finsh_get_prompt+0xa4> addi	a0,a5,-1312 # 1c016ae0 <finsh_prompt.3837>
1c00f848 <finsh_get_prompt+0xa8> jal	ra,1c008318 <strlen>
1c00f84c <finsh_get_prompt+0xac> mv	a5,a0
1c00f84e <finsh_get_prompt+0xae> mv	a4,a5
1c00f850 <finsh_get_prompt+0xb0> lui	a5,0x1c017
1c00f854 <finsh_get_prompt+0xb4> addi	a5,a5,-1312 # 1c016ae0 <finsh_prompt.3837>
1c00f858 <finsh_get_prompt+0xb8> add	a5,a5,a4
1c00f85a <finsh_get_prompt+0xba> li	a4,62
1c00f85e <finsh_get_prompt+0xbe> sb	a4,0(a5)
1c00f862 <finsh_get_prompt+0xc2> sb	zero,1(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:137

    return finsh_prompt;
1c00f866 <finsh_get_prompt+0xc6> lui	a5,0x1c017
1c00f86a <finsh_get_prompt+0xca> addi	a5,a5,-1312 # 1c016ae0 <finsh_prompt.3837>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:138
}
1c00f86e <finsh_get_prompt+0xce> mv	a0,a5
1c00f870 <finsh_get_prompt+0xd0> lw	ra,12(sp)
1c00f872 <finsh_get_prompt+0xd2> lw	s0,8(sp)
1c00f874 <finsh_get_prompt+0xd4> addi	sp,sp,16
1c00f876 <finsh_get_prompt+0xd6> ret
finsh_set_prompt_mode():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:163
 * The parameter 0 disable prompt mode, other values enable prompt mode.
 *
 * @param prompt the prompt mode
 */
void finsh_set_prompt_mode(rt_uint32_t prompt_mode)
{
1c00f878 <finsh_set_prompt_mode> addi	sp,sp,-32
1c00f87a <finsh_set_prompt_mode+0x2> sw	s0,28(sp)
1c00f87c <finsh_set_prompt_mode+0x4> addi	s0,sp,32
1c00f87e <finsh_set_prompt_mode+0x6> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:165
    RT_ASSERT(shell != RT_NULL);
    shell->prompt_mode = prompt_mode;
1c00f882 <finsh_set_prompt_mode+0xa> lui	a5,0x1c017
1c00f886 <finsh_set_prompt_mode+0xe> lw	a5,44(a5) # 1c01702c <shell>
1c00f88a <finsh_set_prompt_mode+0x12> lw	a4,-20(s0)
1c00f88e <finsh_set_prompt_mode+0x16> andi	a4,a4,1
1c00f890 <finsh_set_prompt_mode+0x18> andi	a4,a4,255
1c00f894 <finsh_set_prompt_mode+0x1c> andi	a4,a4,1
1c00f896 <finsh_set_prompt_mode+0x1e> slli	a2,a4,0x1
1c00f89a <finsh_set_prompt_mode+0x22> lbu	a4,36(a5)
1c00f89e <finsh_set_prompt_mode+0x26> andi	a4,a4,-3
1c00f8a0 <finsh_set_prompt_mode+0x28> mv	a3,a4
1c00f8a2 <finsh_set_prompt_mode+0x2a> mv	a4,a2
1c00f8a4 <finsh_set_prompt_mode+0x2c> or	a4,a4,a3
1c00f8a6 <finsh_set_prompt_mode+0x2e> sb	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:166
}
1c00f8aa <finsh_set_prompt_mode+0x32> nop
1c00f8ac <finsh_set_prompt_mode+0x34> lw	s0,28(sp)
1c00f8ae <finsh_set_prompt_mode+0x36> addi	sp,sp,32
1c00f8b0 <finsh_set_prompt_mode+0x38> ret
finsh_getchar():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:169

static int finsh_getchar(void)
{
1c00f8b2 <finsh_getchar> addi	sp,sp,-16
1c00f8b4 <finsh_getchar+0x2> sw	ra,12(sp)
1c00f8b6 <finsh_getchar+0x4> sw	s0,8(sp)
1c00f8b8 <finsh_getchar+0x6> addi	s0,sp,16
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:190
    else
#endif
#endif
    {
        extern char rt_hw_console_getchar(void);
        return rt_hw_console_getchar();
1c00f8ba <finsh_getchar+0x8> jal	ra,1c00b34a <rt_hw_console_getchar>
1c00f8be <finsh_getchar+0xc> mv	a5,a0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:192
    }
}
1c00f8c0 <finsh_getchar+0xe> mv	a0,a5
1c00f8c2 <finsh_getchar+0x10> lw	ra,12(sp)
1c00f8c4 <finsh_getchar+0x12> lw	s0,8(sp)
1c00f8c6 <finsh_getchar+0x14> addi	sp,sp,16
1c00f8c8 <finsh_getchar+0x16> ret
shell_auto_complete():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:381
    }
}
#endif /* FINSH_USING_AUTH */

static void shell_auto_complete(char *prefix)
{
1c00f8ca <shell_auto_complete> addi	sp,sp,-32
1c00f8cc <shell_auto_complete+0x2> sw	ra,28(sp)
1c00f8ce <shell_auto_complete+0x4> sw	s0,24(sp)
1c00f8d0 <shell_auto_complete+0x6> addi	s0,sp,32
1c00f8d2 <shell_auto_complete+0x8> sw	a0,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:383

    rt_kprintf("\n");
1c00f8d6 <shell_auto_complete+0xc> lui	a5,0x1c011
1c00f8da <shell_auto_complete+0x10> addi	a0,a5,-704 # 1c010d40 <__fsym___cmd_free_desc+0x28>
1c00f8de <shell_auto_complete+0x14> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:385
#ifdef FINSH_USING_MSH
    if (msh_is_used() == RT_TRUE)
1c00f8e2 <shell_auto_complete+0x18> jal	ra,1c00f0d8 <msh_is_used>
1c00f8e6 <shell_auto_complete+0x1c> mv	a4,a0
1c00f8e8 <shell_auto_complete+0x1e> li	a5,1
1c00f8ea <shell_auto_complete+0x20> bne	a4,a5,1c00f8f6 <shell_auto_complete+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:387
    {
        msh_auto_complete(prefix);
1c00f8ee <shell_auto_complete+0x24> lw	a0,-20(s0)
1c00f8f2 <shell_auto_complete+0x28> jal	ra,1c00f696 <msh_auto_complete>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:398
        extern void list_prefix(char * prefix);
        list_prefix(prefix);
#endif
    }

    rt_kprintf("%s%s", FINSH_PROMPT, prefix);
1c00f8f6 <shell_auto_complete+0x2c> jal	ra,1c00f7a0 <finsh_get_prompt>
1c00f8fa <shell_auto_complete+0x30> mv	a5,a0
1c00f8fc <shell_auto_complete+0x32> lw	a2,-20(s0)
1c00f900 <shell_auto_complete+0x36> mv	a1,a5
1c00f902 <shell_auto_complete+0x38> lui	a5,0x1c011
1c00f906 <shell_auto_complete+0x3c> addi	a0,a5,-700 # 1c010d44 <__fsym___cmd_free_desc+0x2c>
1c00f90a <shell_auto_complete+0x40> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:399
}
1c00f90e <shell_auto_complete+0x44> nop
1c00f910 <shell_auto_complete+0x46> lw	ra,28(sp)
1c00f912 <shell_auto_complete+0x48> lw	s0,24(sp)
1c00f914 <shell_auto_complete+0x4a> addi	sp,sp,32
1c00f916 <shell_auto_complete+0x4c> ret
finsh_thread_entry():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:508
    shell->current_history = shell->history_count;
}
#endif

void finsh_thread_entry(void *parameter)
{
1c00f918 <finsh_thread_entry> addi	sp,sp,-48
1c00f91a <finsh_thread_entry+0x2> sw	ra,44(sp)
1c00f91c <finsh_thread_entry+0x4> sw	s0,40(sp)
1c00f91e <finsh_thread_entry+0x6> addi	s0,sp,48
1c00f920 <finsh_thread_entry+0x8> sw	a0,-36(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:513
    int ch;

    /* normal is echo mode */
#ifndef FINSH_ECHO_DISABLE_DEFAULT
    shell->echo_mode = 1;
1c00f924 <finsh_thread_entry+0xc> lui	a5,0x1c017
1c00f928 <finsh_thread_entry+0x10> lw	a5,44(a5) # 1c01702c <shell>
1c00f92c <finsh_thread_entry+0x14> lbu	a4,36(a5)
1c00f930 <finsh_thread_entry+0x18> ori	a4,a4,1
1c00f934 <finsh_thread_entry+0x1c> sb	a4,36(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:547
    }
    /* waiting authenticate success */
    finsh_wait_auth();
#endif

    rt_kprintf(FINSH_PROMPT);
1c00f938 <finsh_thread_entry+0x20> jal	ra,1c00f7a0 <finsh_get_prompt>
1c00f93c <finsh_thread_entry+0x24> mv	a5,a0
1c00f93e <finsh_thread_entry+0x26> mv	a0,a5
1c00f940 <finsh_thread_entry+0x28> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:551

    while (1)
    {
        ch = finsh_getchar();
1c00f944 <finsh_thread_entry+0x2c> jal	ra,1c00f8b2 <finsh_getchar>
1c00f948 <finsh_thread_entry+0x30> sw	a0,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:552
        if (ch < 0)
1c00f94c <finsh_thread_entry+0x34> lw	a5,-32(s0)
1c00f950 <finsh_thread_entry+0x38> bltz	a5,1c00ff24 <finsh_thread_entry+0x60c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:564
         * up key  : 0x1b 0x5b 0x41
         * down key: 0x1b 0x5b 0x42
         * right key:0x1b 0x5b 0x43
         * left key: 0x1b 0x5b 0x44
         */
        if (ch == 0x1b)
1c00f954 <finsh_thread_entry+0x3c> lw	a4,-32(s0)
1c00f958 <finsh_thread_entry+0x40> li	a5,27
1c00f95a <finsh_thread_entry+0x42> bne	a4,a5,1c00f96c <finsh_thread_entry+0x54>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:566
        {
            shell->stat = WAIT_SPEC_KEY;
1c00f95e <finsh_thread_entry+0x46> lui	a5,0x1c017
1c00f962 <finsh_thread_entry+0x4a> lw	a5,44(a5) # 1c01702c <shell>
1c00f966 <finsh_thread_entry+0x4e> li	a4,1
1c00f968 <finsh_thread_entry+0x50> sw	a4,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:567
            continue;
1c00f96a <finsh_thread_entry+0x52> j	1c00ff3e <finsh_thread_entry+0x626>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:569
        }
        else if (shell->stat == WAIT_SPEC_KEY)
1c00f96c <finsh_thread_entry+0x54> lui	a5,0x1c017
1c00f970 <finsh_thread_entry+0x58> lw	a5,44(a5) # 1c01702c <shell>
1c00f974 <finsh_thread_entry+0x5c> lw	a4,32(a5)
1c00f976 <finsh_thread_entry+0x5e> li	a5,1
1c00f978 <finsh_thread_entry+0x60> bne	a4,a5,1c00f9a4 <finsh_thread_entry+0x8c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:571
        {
            if (ch == 0x5b)
1c00f97c <finsh_thread_entry+0x64> lw	a4,-32(s0)
1c00f980 <finsh_thread_entry+0x68> li	a5,91
1c00f984 <finsh_thread_entry+0x6c> bne	a4,a5,1c00f996 <finsh_thread_entry+0x7e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:573
            {
                shell->stat = WAIT_FUNC_KEY;
1c00f988 <finsh_thread_entry+0x70> lui	a5,0x1c017
1c00f98c <finsh_thread_entry+0x74> lw	a5,44(a5) # 1c01702c <shell>
1c00f990 <finsh_thread_entry+0x78> li	a4,2
1c00f992 <finsh_thread_entry+0x7a> sw	a4,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:574
                continue;
1c00f994 <finsh_thread_entry+0x7c> j	1c00ff3e <finsh_thread_entry+0x626>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:577
            }

            shell->stat = WAIT_NORMAL;
1c00f996 <finsh_thread_entry+0x7e> lui	a5,0x1c017
1c00f99a <finsh_thread_entry+0x82> lw	a5,44(a5) # 1c01702c <shell>
1c00f99e <finsh_thread_entry+0x86> sw	zero,32(a5)
1c00f9a2 <finsh_thread_entry+0x8a> j	1c00fa80 <finsh_thread_entry+0x168>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:579
        }
        else if (shell->stat == WAIT_FUNC_KEY)
1c00f9a4 <finsh_thread_entry+0x8c> lui	a5,0x1c017
1c00f9a8 <finsh_thread_entry+0x90> lw	a5,44(a5) # 1c01702c <shell>
1c00f9ac <finsh_thread_entry+0x94> lw	a4,32(a5)
1c00f9ae <finsh_thread_entry+0x96> li	a5,2
1c00f9b0 <finsh_thread_entry+0x98> bne	a4,a5,1c00fa80 <finsh_thread_entry+0x168>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:581
        {
            shell->stat = WAIT_NORMAL;
1c00f9b4 <finsh_thread_entry+0x9c> lui	a5,0x1c017
1c00f9b8 <finsh_thread_entry+0xa0> lw	a5,44(a5) # 1c01702c <shell>
1c00f9bc <finsh_thread_entry+0xa4> sw	zero,32(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:583

            if (ch == 0x41) /* up key */
1c00f9c0 <finsh_thread_entry+0xa8> lw	a4,-32(s0)
1c00f9c4 <finsh_thread_entry+0xac> li	a5,65
1c00f9c8 <finsh_thread_entry+0xb0> beq	a4,a5,1c00ff28 <finsh_thread_entry+0x610>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:603
                shell->line_curpos = shell->line_position = strlen(shell->line);
                shell_handle_history(shell);
#endif
                continue;
            }
            else if (ch == 0x42) /* down key */
1c00f9cc <finsh_thread_entry+0xb4> lw	a4,-32(s0)
1c00f9d0 <finsh_thread_entry+0xb8> li	a5,66
1c00f9d4 <finsh_thread_entry+0xbc> beq	a4,a5,1c00ff2c <finsh_thread_entry+0x614>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:625
                shell->line_curpos = shell->line_position = strlen(shell->line);
                shell_handle_history(shell);
#endif
                continue;
            }
            else if (ch == 0x44) /* left key */
1c00f9d8 <finsh_thread_entry+0xc0> lw	a4,-32(s0)
1c00f9dc <finsh_thread_entry+0xc4> li	a5,68
1c00f9e0 <finsh_thread_entry+0xc8> bne	a4,a5,1c00fa18 <finsh_thread_entry+0x100>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:627
            {
                if (shell->line_curpos)
1c00f9e4 <finsh_thread_entry+0xcc> lui	a5,0x1c017
1c00f9e8 <finsh_thread_entry+0xd0> lw	a5,44(a5) # 1c01702c <shell>
1c00f9ec <finsh_thread_entry+0xd4> lhu	a5,120(a5)
1c00f9f0 <finsh_thread_entry+0xd8> beqz	a5,1c00ff30 <finsh_thread_entry+0x618>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:629
                {
                    rt_kprintf("\b");
1c00f9f4 <finsh_thread_entry+0xdc> lui	a5,0x1c011
1c00f9f8 <finsh_thread_entry+0xe0> addi	a0,a5,-692 # 1c010d4c <__fsym___cmd_free_desc+0x34>
1c00f9fc <finsh_thread_entry+0xe4> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:630
                    shell->line_curpos --;
1c00fa00 <finsh_thread_entry+0xe8> lui	a5,0x1c017
1c00fa04 <finsh_thread_entry+0xec> lw	a5,44(a5) # 1c01702c <shell>
1c00fa08 <finsh_thread_entry+0xf0> lhu	a4,120(a5)
1c00fa0c <finsh_thread_entry+0xf4> addi	a4,a4,-1
1c00fa0e <finsh_thread_entry+0xf6> slli	a4,a4,0x10
1c00fa10 <finsh_thread_entry+0xf8> srli	a4,a4,0x10
1c00fa12 <finsh_thread_entry+0xfa> sh	a4,120(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:633
                }

                continue;
1c00fa16 <finsh_thread_entry+0xfe> j	1c00ff30 <finsh_thread_entry+0x618>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:635
            }
            else if (ch == 0x43) /* right key */
1c00fa18 <finsh_thread_entry+0x100> lw	a4,-32(s0)
1c00fa1c <finsh_thread_entry+0x104> li	a5,67
1c00fa20 <finsh_thread_entry+0x108> bne	a4,a5,1c00fa80 <finsh_thread_entry+0x168>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:637
            {
                if (shell->line_curpos < shell->line_position)
1c00fa24 <finsh_thread_entry+0x10c> lui	a5,0x1c017
1c00fa28 <finsh_thread_entry+0x110> lw	a5,44(a5) # 1c01702c <shell>
1c00fa2c <finsh_thread_entry+0x114> lhu	a4,120(a5)
1c00fa30 <finsh_thread_entry+0x118> lui	a5,0x1c017
1c00fa34 <finsh_thread_entry+0x11c> lw	a5,44(a5) # 1c01702c <shell>
1c00fa38 <finsh_thread_entry+0x120> lhu	a5,118(a5)
1c00fa3c <finsh_thread_entry+0x124> bgeu	a4,a5,1c00ff34 <finsh_thread_entry+0x61c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:639
                {
                    rt_kprintf("%c", shell->line[shell->line_curpos]);
1c00fa40 <finsh_thread_entry+0x128> lui	a5,0x1c017
1c00fa44 <finsh_thread_entry+0x12c> lw	a5,44(a5) # 1c01702c <shell>
1c00fa48 <finsh_thread_entry+0x130> lui	a4,0x1c017
1c00fa4c <finsh_thread_entry+0x134> lw	a4,44(a4) # 1c01702c <shell>
1c00fa50 <finsh_thread_entry+0x138> lhu	a4,120(a4)
1c00fa54 <finsh_thread_entry+0x13c> add	a5,a5,a4
1c00fa56 <finsh_thread_entry+0x13e> lb	a5,37(a5)
1c00fa5a <finsh_thread_entry+0x142> mv	a1,a5
1c00fa5c <finsh_thread_entry+0x144> lui	a5,0x1c011
1c00fa60 <finsh_thread_entry+0x148> addi	a0,a5,-688 # 1c010d50 <__fsym___cmd_free_desc+0x38>
1c00fa64 <finsh_thread_entry+0x14c> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:640
                    shell->line_curpos ++;
1c00fa68 <finsh_thread_entry+0x150> lui	a5,0x1c017
1c00fa6c <finsh_thread_entry+0x154> lw	a5,44(a5) # 1c01702c <shell>
1c00fa70 <finsh_thread_entry+0x158> lhu	a4,120(a5)
1c00fa74 <finsh_thread_entry+0x15c> addi	a4,a4,1
1c00fa76 <finsh_thread_entry+0x15e> slli	a4,a4,0x10
1c00fa78 <finsh_thread_entry+0x160> srli	a4,a4,0x10
1c00fa7a <finsh_thread_entry+0x162> sh	a4,120(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:643
                }

                continue;
1c00fa7e <finsh_thread_entry+0x166> j	1c00ff34 <finsh_thread_entry+0x61c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:648
            }
        }

        /* received null or error */
        if (ch == '\0' || ch == 0xFF) continue;
1c00fa80 <finsh_thread_entry+0x168> lw	a5,-32(s0)
1c00fa84 <finsh_thread_entry+0x16c> beqz	a5,1c00ff38 <finsh_thread_entry+0x620>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:648 (discriminator 2)
1c00fa88 <finsh_thread_entry+0x170> lw	a4,-32(s0)
1c00fa8c <finsh_thread_entry+0x174> li	a5,255
1c00fa90 <finsh_thread_entry+0x178> beq	a4,a5,1c00ff38 <finsh_thread_entry+0x620>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:650
        /* handle tab key */
        else if (ch == '\t')
1c00fa94 <finsh_thread_entry+0x17c> lw	a4,-32(s0)
1c00fa98 <finsh_thread_entry+0x180> li	a5,9
1c00fa9a <finsh_thread_entry+0x182> bne	a4,a5,1c00fb18 <finsh_thread_entry+0x200>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:654
        {
            int i;
            /* move the cursor to the beginning of line */
            for (i = 0; i < shell->line_curpos; i++)
1c00fa9e <finsh_thread_entry+0x186> sw	zero,-20(s0)
1c00faa2 <finsh_thread_entry+0x18a> j	1c00faba <finsh_thread_entry+0x1a2>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:655 (discriminator 3)
                rt_kprintf("\b");
1c00faa4 <finsh_thread_entry+0x18c> lui	a5,0x1c011
1c00faa8 <finsh_thread_entry+0x190> addi	a0,a5,-692 # 1c010d4c <__fsym___cmd_free_desc+0x34>
1c00faac <finsh_thread_entry+0x194> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:654 (discriminator 3)
            for (i = 0; i < shell->line_curpos; i++)
1c00fab0 <finsh_thread_entry+0x198> lw	a5,-20(s0)
1c00fab4 <finsh_thread_entry+0x19c> addi	a5,a5,1
1c00fab6 <finsh_thread_entry+0x19e> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:654 (discriminator 1)
1c00faba <finsh_thread_entry+0x1a2> lui	a5,0x1c017
1c00fabe <finsh_thread_entry+0x1a6> lw	a5,44(a5) # 1c01702c <shell>
1c00fac2 <finsh_thread_entry+0x1aa> lhu	a5,120(a5)
1c00fac6 <finsh_thread_entry+0x1ae> mv	a4,a5
1c00fac8 <finsh_thread_entry+0x1b0> lw	a5,-20(s0)
1c00facc <finsh_thread_entry+0x1b4> blt	a5,a4,1c00faa4 <finsh_thread_entry+0x18c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:658

            /* auto complete */
            shell_auto_complete(&shell->line[0]);
1c00fad0 <finsh_thread_entry+0x1b8> lui	a5,0x1c017
1c00fad4 <finsh_thread_entry+0x1bc> lw	a5,44(a5) # 1c01702c <shell>
1c00fad8 <finsh_thread_entry+0x1c0> addi	a5,a5,37
1c00fadc <finsh_thread_entry+0x1c4> mv	a0,a5
1c00fade <finsh_thread_entry+0x1c6> jal	ra,1c00f8ca <shell_auto_complete>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:660
            /* re-calculate position */
            shell->line_curpos = shell->line_position = strlen(shell->line);
1c00fae2 <finsh_thread_entry+0x1ca> lui	a5,0x1c017
1c00fae6 <finsh_thread_entry+0x1ce> lw	a5,44(a5) # 1c01702c <shell>
1c00faea <finsh_thread_entry+0x1d2> addi	a5,a5,37
1c00faee <finsh_thread_entry+0x1d6> mv	a0,a5
1c00faf0 <finsh_thread_entry+0x1d8> jal	ra,1c008318 <strlen>
1c00faf4 <finsh_thread_entry+0x1dc> mv	a4,a0
1c00faf6 <finsh_thread_entry+0x1de> lui	a5,0x1c017
1c00fafa <finsh_thread_entry+0x1e2> lw	a5,44(a5) # 1c01702c <shell>
1c00fafe <finsh_thread_entry+0x1e6> slli	a4,a4,0x10
1c00fb00 <finsh_thread_entry+0x1e8> srli	a4,a4,0x10
1c00fb02 <finsh_thread_entry+0x1ea> sh	a4,118(a5)
1c00fb06 <finsh_thread_entry+0x1ee> lui	a4,0x1c017
1c00fb0a <finsh_thread_entry+0x1f2> lw	a4,44(a4) # 1c01702c <shell>
1c00fb0e <finsh_thread_entry+0x1f6> lhu	a5,118(a5)
1c00fb12 <finsh_thread_entry+0x1fa> sh	a5,120(a4)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:662

            continue;
1c00fb16 <finsh_thread_entry+0x1fe> j	1c00ff3e <finsh_thread_entry+0x626>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:665
        }
        /* handle backspace key */
        else if (ch == 0x7f || ch == 0x08)
1c00fb18 <finsh_thread_entry+0x200> lw	a4,-32(s0)
1c00fb1c <finsh_thread_entry+0x204> li	a5,127
1c00fb20 <finsh_thread_entry+0x208> beq	a4,a5,1c00fb2e <finsh_thread_entry+0x216>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:665 (discriminator 1)
1c00fb24 <finsh_thread_entry+0x20c> lw	a4,-32(s0)
1c00fb28 <finsh_thread_entry+0x210> li	a5,8
1c00fb2a <finsh_thread_entry+0x212> bne	a4,a5,1c00fc98 <finsh_thread_entry+0x380>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:668
        {
            /* note that shell->line_curpos >= 0 */
            if (shell->line_curpos == 0)
1c00fb2e <finsh_thread_entry+0x216> lui	a5,0x1c017
1c00fb32 <finsh_thread_entry+0x21a> lw	a5,44(a5) # 1c01702c <shell>
1c00fb36 <finsh_thread_entry+0x21e> lhu	a5,120(a5)
1c00fb3a <finsh_thread_entry+0x222> beqz	a5,1c00ff3c <finsh_thread_entry+0x624>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:671
                continue;

            shell->line_position--;
1c00fb3e <finsh_thread_entry+0x226> lui	a5,0x1c017
1c00fb42 <finsh_thread_entry+0x22a> lw	a5,44(a5) # 1c01702c <shell>
1c00fb46 <finsh_thread_entry+0x22e> lhu	a4,118(a5)
1c00fb4a <finsh_thread_entry+0x232> addi	a4,a4,-1
1c00fb4c <finsh_thread_entry+0x234> slli	a4,a4,0x10
1c00fb4e <finsh_thread_entry+0x236> srli	a4,a4,0x10
1c00fb50 <finsh_thread_entry+0x238> sh	a4,118(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:672
            shell->line_curpos--;
1c00fb54 <finsh_thread_entry+0x23c> lui	a5,0x1c017
1c00fb58 <finsh_thread_entry+0x240> lw	a5,44(a5) # 1c01702c <shell>
1c00fb5c <finsh_thread_entry+0x244> lhu	a4,120(a5)
1c00fb60 <finsh_thread_entry+0x248> addi	a4,a4,-1
1c00fb62 <finsh_thread_entry+0x24a> slli	a4,a4,0x10
1c00fb64 <finsh_thread_entry+0x24c> srli	a4,a4,0x10
1c00fb66 <finsh_thread_entry+0x24e> sh	a4,120(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:674

            if (shell->line_position > shell->line_curpos)
1c00fb6a <finsh_thread_entry+0x252> lui	a5,0x1c017
1c00fb6e <finsh_thread_entry+0x256> lw	a5,44(a5) # 1c01702c <shell>
1c00fb72 <finsh_thread_entry+0x25a> lhu	a4,118(a5)
1c00fb76 <finsh_thread_entry+0x25e> lui	a5,0x1c017
1c00fb7a <finsh_thread_entry+0x262> lw	a5,44(a5) # 1c01702c <shell>
1c00fb7e <finsh_thread_entry+0x266> lhu	a5,120(a5)
1c00fb82 <finsh_thread_entry+0x26a> bgeu	a5,a4,1c00fc70 <finsh_thread_entry+0x358>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:678
            {
                int i;

                rt_memmove(&shell->line[shell->line_curpos],
1c00fb86 <finsh_thread_entry+0x26e> lui	a5,0x1c017
1c00fb8a <finsh_thread_entry+0x272> lw	a4,44(a5) # 1c01702c <shell>
1c00fb8e <finsh_thread_entry+0x276> lui	a5,0x1c017
1c00fb92 <finsh_thread_entry+0x27a> lw	a5,44(a5) # 1c01702c <shell>
1c00fb96 <finsh_thread_entry+0x27e> lhu	a5,120(a5)
1c00fb9a <finsh_thread_entry+0x282> addi	a5,a5,32
1c00fb9e <finsh_thread_entry+0x286> add	a5,a5,a4
1c00fba0 <finsh_thread_entry+0x288> addi	a3,a5,5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:679
                           &shell->line[shell->line_curpos + 1],
1c00fba4 <finsh_thread_entry+0x28c> lui	a5,0x1c017
1c00fba8 <finsh_thread_entry+0x290> lw	a4,44(a5) # 1c01702c <shell>
1c00fbac <finsh_thread_entry+0x294> lui	a5,0x1c017
1c00fbb0 <finsh_thread_entry+0x298> lw	a5,44(a5) # 1c01702c <shell>
1c00fbb4 <finsh_thread_entry+0x29c> lhu	a5,120(a5)
1c00fbb8 <finsh_thread_entry+0x2a0> addi	a5,a5,1
1c00fbba <finsh_thread_entry+0x2a2> addi	a5,a5,32
1c00fbbe <finsh_thread_entry+0x2a6> add	a5,a5,a4
1c00fbc0 <finsh_thread_entry+0x2a8> addi	a4,a5,5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:680
                           shell->line_position - shell->line_curpos);
1c00fbc4 <finsh_thread_entry+0x2ac> lui	a5,0x1c017
1c00fbc8 <finsh_thread_entry+0x2b0> lw	a5,44(a5) # 1c01702c <shell>
1c00fbcc <finsh_thread_entry+0x2b4> lhu	a5,118(a5)
1c00fbd0 <finsh_thread_entry+0x2b8> mv	a2,a5
1c00fbd2 <finsh_thread_entry+0x2ba> lui	a5,0x1c017
1c00fbd6 <finsh_thread_entry+0x2be> lw	a5,44(a5) # 1c01702c <shell>
1c00fbda <finsh_thread_entry+0x2c2> lhu	a5,120(a5)
1c00fbde <finsh_thread_entry+0x2c6> sub	a5,a2,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:678
                rt_memmove(&shell->line[shell->line_curpos],
1c00fbe2 <finsh_thread_entry+0x2ca> mv	a2,a5
1c00fbe4 <finsh_thread_entry+0x2cc> mv	a1,a4
1c00fbe6 <finsh_thread_entry+0x2ce> mv	a0,a3
1c00fbe8 <finsh_thread_entry+0x2d0> jal	ra,1c00bb2c <rt_memmove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:681
                shell->line[shell->line_position] = 0;
1c00fbec <finsh_thread_entry+0x2d4> lui	a5,0x1c017
1c00fbf0 <finsh_thread_entry+0x2d8> lw	a5,44(a5) # 1c01702c <shell>
1c00fbf4 <finsh_thread_entry+0x2dc> lui	a4,0x1c017
1c00fbf8 <finsh_thread_entry+0x2e0> lw	a4,44(a4) # 1c01702c <shell>
1c00fbfc <finsh_thread_entry+0x2e4> lhu	a4,118(a4)
1c00fc00 <finsh_thread_entry+0x2e8> add	a5,a5,a4
1c00fc02 <finsh_thread_entry+0x2ea> sb	zero,37(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:683

                rt_kprintf("\b%s  \b", &shell->line[shell->line_curpos]);
1c00fc06 <finsh_thread_entry+0x2ee> lui	a5,0x1c017
1c00fc0a <finsh_thread_entry+0x2f2> lw	a4,44(a5) # 1c01702c <shell>
1c00fc0e <finsh_thread_entry+0x2f6> lui	a5,0x1c017
1c00fc12 <finsh_thread_entry+0x2fa> lw	a5,44(a5) # 1c01702c <shell>
1c00fc16 <finsh_thread_entry+0x2fe> lhu	a5,120(a5)
1c00fc1a <finsh_thread_entry+0x302> addi	a5,a5,32
1c00fc1e <finsh_thread_entry+0x306> add	a5,a5,a4
1c00fc20 <finsh_thread_entry+0x308> addi	a5,a5,5
1c00fc22 <finsh_thread_entry+0x30a> mv	a1,a5
1c00fc24 <finsh_thread_entry+0x30c> lui	a5,0x1c011
1c00fc28 <finsh_thread_entry+0x310> addi	a0,a5,-684 # 1c010d54 <__fsym___cmd_free_desc+0x3c>
1c00fc2c <finsh_thread_entry+0x314> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:686

                /* move the cursor to the origin position */
                for (i = shell->line_curpos; i <= shell->line_position; i++)
1c00fc30 <finsh_thread_entry+0x318> lui	a5,0x1c017
1c00fc34 <finsh_thread_entry+0x31c> lw	a5,44(a5) # 1c01702c <shell>
1c00fc38 <finsh_thread_entry+0x320> lhu	a5,120(a5)
1c00fc3c <finsh_thread_entry+0x324> sw	a5,-24(s0)
1c00fc40 <finsh_thread_entry+0x328> j	1c00fc58 <finsh_thread_entry+0x340>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:687 (discriminator 3)
                    rt_kprintf("\b");
1c00fc42 <finsh_thread_entry+0x32a> lui	a5,0x1c011
1c00fc46 <finsh_thread_entry+0x32e> addi	a0,a5,-692 # 1c010d4c <__fsym___cmd_free_desc+0x34>
1c00fc4a <finsh_thread_entry+0x332> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:686 (discriminator 3)
                for (i = shell->line_curpos; i <= shell->line_position; i++)
1c00fc4e <finsh_thread_entry+0x336> lw	a5,-24(s0)
1c00fc52 <finsh_thread_entry+0x33a> addi	a5,a5,1
1c00fc54 <finsh_thread_entry+0x33c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:686 (discriminator 1)
1c00fc58 <finsh_thread_entry+0x340> lui	a5,0x1c017
1c00fc5c <finsh_thread_entry+0x344> lw	a5,44(a5) # 1c01702c <shell>
1c00fc60 <finsh_thread_entry+0x348> lhu	a5,118(a5)
1c00fc64 <finsh_thread_entry+0x34c> mv	a4,a5
1c00fc66 <finsh_thread_entry+0x34e> lw	a5,-24(s0)
1c00fc6a <finsh_thread_entry+0x352> bge	a4,a5,1c00fc42 <finsh_thread_entry+0x32a>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:695
            {
                rt_kprintf("\b \b");
                shell->line[shell->line_position] = 0;
            }

            continue;
1c00fc6e <finsh_thread_entry+0x356> j	1c00ff3e <finsh_thread_entry+0x626>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:691
                rt_kprintf("\b \b");
1c00fc70 <finsh_thread_entry+0x358> lui	a5,0x1c011
1c00fc74 <finsh_thread_entry+0x35c> addi	a0,a5,-676 # 1c010d5c <__fsym___cmd_free_desc+0x44>
1c00fc78 <finsh_thread_entry+0x360> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:692
                shell->line[shell->line_position] = 0;
1c00fc7c <finsh_thread_entry+0x364> lui	a5,0x1c017
1c00fc80 <finsh_thread_entry+0x368> lw	a5,44(a5) # 1c01702c <shell>
1c00fc84 <finsh_thread_entry+0x36c> lui	a4,0x1c017
1c00fc88 <finsh_thread_entry+0x370> lw	a4,44(a4) # 1c01702c <shell>
1c00fc8c <finsh_thread_entry+0x374> lhu	a4,118(a4)
1c00fc90 <finsh_thread_entry+0x378> add	a5,a5,a4
1c00fc92 <finsh_thread_entry+0x37a> sb	zero,37(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:695
            continue;
1c00fc96 <finsh_thread_entry+0x37e> j	1c00ff3e <finsh_thread_entry+0x626>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:699
        }

        /* handle end of line, break */
        if (ch == '\r' || ch == '\n')
1c00fc98 <finsh_thread_entry+0x380> lw	a4,-32(s0)
1c00fc9c <finsh_thread_entry+0x384> li	a5,13
1c00fc9e <finsh_thread_entry+0x386> beq	a4,a5,1c00fcac <finsh_thread_entry+0x394>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:699 (discriminator 1)
1c00fca2 <finsh_thread_entry+0x38a> lw	a4,-32(s0)
1c00fca6 <finsh_thread_entry+0x38e> li	a5,10
1c00fca8 <finsh_thread_entry+0x390> bne	a4,a5,1c00fd3a <finsh_thread_entry+0x422>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:706
#ifdef FINSH_USING_HISTORY
            shell_push_history(shell);
#endif

#ifdef FINSH_USING_MSH
            if (msh_is_used() == RT_TRUE)
1c00fcac <finsh_thread_entry+0x394> jal	ra,1c00f0d8 <msh_is_used>
1c00fcb0 <finsh_thread_entry+0x398> mv	a4,a0
1c00fcb2 <finsh_thread_entry+0x39a> li	a5,1
1c00fcb4 <finsh_thread_entry+0x39c> bne	a4,a5,1c00fcf8 <finsh_thread_entry+0x3e0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:708
            {
                if (shell->echo_mode)
1c00fcb8 <finsh_thread_entry+0x3a0> lui	a5,0x1c017
1c00fcbc <finsh_thread_entry+0x3a4> lw	a5,44(a5) # 1c01702c <shell>
1c00fcc0 <finsh_thread_entry+0x3a8> lbu	a5,36(a5)
1c00fcc4 <finsh_thread_entry+0x3ac> andi	a5,a5,1
1c00fcc6 <finsh_thread_entry+0x3ae> andi	a5,a5,255
1c00fcca <finsh_thread_entry+0x3b2> beqz	a5,1c00fcd8 <finsh_thread_entry+0x3c0>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:709
                    rt_kprintf("\n");
1c00fccc <finsh_thread_entry+0x3b4> lui	a5,0x1c011
1c00fcd0 <finsh_thread_entry+0x3b8> addi	a0,a5,-704 # 1c010d40 <__fsym___cmd_free_desc+0x28>
1c00fcd4 <finsh_thread_entry+0x3bc> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:710
                msh_exec(shell->line, shell->line_position);
1c00fcd8 <finsh_thread_entry+0x3c0> lui	a5,0x1c017
1c00fcdc <finsh_thread_entry+0x3c4> lw	a5,44(a5) # 1c01702c <shell>
1c00fce0 <finsh_thread_entry+0x3c8> addi	a4,a5,37
1c00fce4 <finsh_thread_entry+0x3cc> lui	a5,0x1c017
1c00fce8 <finsh_thread_entry+0x3d0> lw	a5,44(a5) # 1c01702c <shell>
1c00fcec <finsh_thread_entry+0x3d4> lhu	a5,118(a5)
1c00fcf0 <finsh_thread_entry+0x3d8> mv	a1,a5
1c00fcf2 <finsh_thread_entry+0x3da> mv	a0,a4
1c00fcf4 <finsh_thread_entry+0x3dc> jal	ra,1c00f56c <msh_exec>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:725
                else
                    if (shell->echo_mode) rt_kprintf("\n");
#endif
            }

            rt_kprintf(FINSH_PROMPT);
1c00fcf8 <finsh_thread_entry+0x3e0> jal	ra,1c00f7a0 <finsh_get_prompt>
1c00fcfc <finsh_thread_entry+0x3e4> mv	a5,a0
1c00fcfe <finsh_thread_entry+0x3e6> mv	a0,a5
1c00fd00 <finsh_thread_entry+0x3e8> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:726
            memset(shell->line, 0, sizeof(shell->line));
1c00fd04 <finsh_thread_entry+0x3ec> lui	a5,0x1c017
1c00fd08 <finsh_thread_entry+0x3f0> lw	a5,44(a5) # 1c01702c <shell>
1c00fd0c <finsh_thread_entry+0x3f4> addi	a5,a5,37
1c00fd10 <finsh_thread_entry+0x3f8> li	a2,80
1c00fd14 <finsh_thread_entry+0x3fc> li	a1,0
1c00fd16 <finsh_thread_entry+0x3fe> mv	a0,a5
1c00fd18 <finsh_thread_entry+0x400> jal	ra,1c008270 <memset>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:727
            shell->line_curpos = shell->line_position = 0;
1c00fd1c <finsh_thread_entry+0x404> lui	a5,0x1c017
1c00fd20 <finsh_thread_entry+0x408> lw	a5,44(a5) # 1c01702c <shell>
1c00fd24 <finsh_thread_entry+0x40c> sh	zero,118(a5)
1c00fd28 <finsh_thread_entry+0x410> lui	a4,0x1c017
1c00fd2c <finsh_thread_entry+0x414> lw	a4,44(a4) # 1c01702c <shell>
1c00fd30 <finsh_thread_entry+0x418> lhu	a5,118(a5)
1c00fd34 <finsh_thread_entry+0x41c> sh	a5,120(a4)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:728
            continue;
1c00fd38 <finsh_thread_entry+0x420> j	1c00ff3e <finsh_thread_entry+0x626>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:732
        }

        /* it's a large line, discard it */
        if (shell->line_position >= FINSH_CMD_SIZE)
1c00fd3a <finsh_thread_entry+0x422> lui	a5,0x1c017
1c00fd3e <finsh_thread_entry+0x426> lw	a5,44(a5) # 1c01702c <shell>
1c00fd42 <finsh_thread_entry+0x42a> lhu	a4,118(a5)
1c00fd46 <finsh_thread_entry+0x42e> li	a5,79
1c00fd4a <finsh_thread_entry+0x432> bgeu	a5,a4,1c00fd5a <finsh_thread_entry+0x442>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:733
            shell->line_position = 0;
1c00fd4e <finsh_thread_entry+0x436> lui	a5,0x1c017
1c00fd52 <finsh_thread_entry+0x43a> lw	a5,44(a5) # 1c01702c <shell>
1c00fd56 <finsh_thread_entry+0x43e> sh	zero,118(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:736

        /* normal character */
        if (shell->line_curpos < shell->line_position)
1c00fd5a <finsh_thread_entry+0x442> lui	a5,0x1c017
1c00fd5e <finsh_thread_entry+0x446> lw	a5,44(a5) # 1c01702c <shell>
1c00fd62 <finsh_thread_entry+0x44a> lhu	a4,120(a5)
1c00fd66 <finsh_thread_entry+0x44e> lui	a5,0x1c017
1c00fd6a <finsh_thread_entry+0x452> lw	a5,44(a5) # 1c01702c <shell>
1c00fd6e <finsh_thread_entry+0x456> lhu	a5,118(a5)
1c00fd72 <finsh_thread_entry+0x45a> bgeu	a4,a5,1c00fe7e <finsh_thread_entry+0x566>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:740
        {
            int i;

            rt_memmove(&shell->line[shell->line_curpos + 1],
1c00fd76 <finsh_thread_entry+0x45e> lui	a5,0x1c017
1c00fd7a <finsh_thread_entry+0x462> lw	a4,44(a5) # 1c01702c <shell>
1c00fd7e <finsh_thread_entry+0x466> lui	a5,0x1c017
1c00fd82 <finsh_thread_entry+0x46a> lw	a5,44(a5) # 1c01702c <shell>
1c00fd86 <finsh_thread_entry+0x46e> lhu	a5,120(a5)
1c00fd8a <finsh_thread_entry+0x472> addi	a5,a5,1
1c00fd8c <finsh_thread_entry+0x474> addi	a5,a5,32
1c00fd90 <finsh_thread_entry+0x478> add	a5,a5,a4
1c00fd92 <finsh_thread_entry+0x47a> addi	a3,a5,5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:741
                       &shell->line[shell->line_curpos],
1c00fd96 <finsh_thread_entry+0x47e> lui	a5,0x1c017
1c00fd9a <finsh_thread_entry+0x482> lw	a4,44(a5) # 1c01702c <shell>
1c00fd9e <finsh_thread_entry+0x486> lui	a5,0x1c017
1c00fda2 <finsh_thread_entry+0x48a> lw	a5,44(a5) # 1c01702c <shell>
1c00fda6 <finsh_thread_entry+0x48e> lhu	a5,120(a5)
1c00fdaa <finsh_thread_entry+0x492> addi	a5,a5,32
1c00fdae <finsh_thread_entry+0x496> add	a5,a5,a4
1c00fdb0 <finsh_thread_entry+0x498> addi	a4,a5,5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:742
                       shell->line_position - shell->line_curpos);
1c00fdb4 <finsh_thread_entry+0x49c> lui	a5,0x1c017
1c00fdb8 <finsh_thread_entry+0x4a0> lw	a5,44(a5) # 1c01702c <shell>
1c00fdbc <finsh_thread_entry+0x4a4> lhu	a5,118(a5)
1c00fdc0 <finsh_thread_entry+0x4a8> mv	a2,a5
1c00fdc2 <finsh_thread_entry+0x4aa> lui	a5,0x1c017
1c00fdc6 <finsh_thread_entry+0x4ae> lw	a5,44(a5) # 1c01702c <shell>
1c00fdca <finsh_thread_entry+0x4b2> lhu	a5,120(a5)
1c00fdce <finsh_thread_entry+0x4b6> sub	a5,a2,a5
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:740
            rt_memmove(&shell->line[shell->line_curpos + 1],
1c00fdd2 <finsh_thread_entry+0x4ba> mv	a2,a5
1c00fdd4 <finsh_thread_entry+0x4bc> mv	a1,a4
1c00fdd6 <finsh_thread_entry+0x4be> mv	a0,a3
1c00fdd8 <finsh_thread_entry+0x4c0> jal	ra,1c00bb2c <rt_memmove>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:743
            shell->line[shell->line_curpos] = ch;
1c00fddc <finsh_thread_entry+0x4c4> lui	a5,0x1c017
1c00fde0 <finsh_thread_entry+0x4c8> lw	a5,44(a5) # 1c01702c <shell>
1c00fde4 <finsh_thread_entry+0x4cc> lui	a4,0x1c017
1c00fde8 <finsh_thread_entry+0x4d0> lw	a4,44(a4) # 1c01702c <shell>
1c00fdec <finsh_thread_entry+0x4d4> lhu	a4,120(a4)
1c00fdf0 <finsh_thread_entry+0x4d8> mv	a3,a4
1c00fdf2 <finsh_thread_entry+0x4da> lw	a4,-32(s0)
1c00fdf6 <finsh_thread_entry+0x4de> slli	a4,a4,0x18
1c00fdf8 <finsh_thread_entry+0x4e0> srai	a4,a4,0x18
1c00fdfa <finsh_thread_entry+0x4e2> add	a5,a5,a3
1c00fdfc <finsh_thread_entry+0x4e4> sb	a4,37(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:744
            if (shell->echo_mode)
1c00fe00 <finsh_thread_entry+0x4e8> lui	a5,0x1c017
1c00fe04 <finsh_thread_entry+0x4ec> lw	a5,44(a5) # 1c01702c <shell>
1c00fe08 <finsh_thread_entry+0x4f0> lbu	a5,36(a5)
1c00fe0c <finsh_thread_entry+0x4f4> andi	a5,a5,1
1c00fe0e <finsh_thread_entry+0x4f6> andi	a5,a5,255
1c00fe12 <finsh_thread_entry+0x4fa> beqz	a5,1c00fe3e <finsh_thread_entry+0x526>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:745
                rt_kprintf("%s", &shell->line[shell->line_curpos]);
1c00fe14 <finsh_thread_entry+0x4fc> lui	a5,0x1c017
1c00fe18 <finsh_thread_entry+0x500> lw	a4,44(a5) # 1c01702c <shell>
1c00fe1c <finsh_thread_entry+0x504> lui	a5,0x1c017
1c00fe20 <finsh_thread_entry+0x508> lw	a5,44(a5) # 1c01702c <shell>
1c00fe24 <finsh_thread_entry+0x50c> lhu	a5,120(a5)
1c00fe28 <finsh_thread_entry+0x510> addi	a5,a5,32
1c00fe2c <finsh_thread_entry+0x514> add	a5,a5,a4
1c00fe2e <finsh_thread_entry+0x516> addi	a5,a5,5
1c00fe30 <finsh_thread_entry+0x518> mv	a1,a5
1c00fe32 <finsh_thread_entry+0x51a> lui	a5,0x1c011
1c00fe36 <finsh_thread_entry+0x51e> addi	a0,a5,-672 # 1c010d60 <__fsym___cmd_free_desc+0x48>
1c00fe3a <finsh_thread_entry+0x522> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:748

            /* move the cursor to new position */
            for (i = shell->line_curpos; i < shell->line_position; i++)
1c00fe3e <finsh_thread_entry+0x526> lui	a5,0x1c017
1c00fe42 <finsh_thread_entry+0x52a> lw	a5,44(a5) # 1c01702c <shell>
1c00fe46 <finsh_thread_entry+0x52e> lhu	a5,120(a5)
1c00fe4a <finsh_thread_entry+0x532> sw	a5,-28(s0)
1c00fe4e <finsh_thread_entry+0x536> j	1c00fe66 <finsh_thread_entry+0x54e>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:749 (discriminator 3)
                rt_kprintf("\b");
1c00fe50 <finsh_thread_entry+0x538> lui	a5,0x1c011
1c00fe54 <finsh_thread_entry+0x53c> addi	a0,a5,-692 # 1c010d4c <__fsym___cmd_free_desc+0x34>
1c00fe58 <finsh_thread_entry+0x540> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:748 (discriminator 3)
            for (i = shell->line_curpos; i < shell->line_position; i++)
1c00fe5c <finsh_thread_entry+0x544> lw	a5,-28(s0)
1c00fe60 <finsh_thread_entry+0x548> addi	a5,a5,1
1c00fe62 <finsh_thread_entry+0x54a> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:748 (discriminator 1)
1c00fe66 <finsh_thread_entry+0x54e> lui	a5,0x1c017
1c00fe6a <finsh_thread_entry+0x552> lw	a5,44(a5) # 1c01702c <shell>
1c00fe6e <finsh_thread_entry+0x556> lhu	a5,118(a5)
1c00fe72 <finsh_thread_entry+0x55a> mv	a4,a5
1c00fe74 <finsh_thread_entry+0x55c> lw	a5,-28(s0)
1c00fe78 <finsh_thread_entry+0x560> blt	a5,a4,1c00fe50 <finsh_thread_entry+0x538>
1c00fe7c <finsh_thread_entry+0x564> j	1c00fec6 <finsh_thread_entry+0x5ae>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:753
        }
        else
        {
            shell->line[shell->line_position] = ch;
1c00fe7e <finsh_thread_entry+0x566> lui	a5,0x1c017
1c00fe82 <finsh_thread_entry+0x56a> lw	a5,44(a5) # 1c01702c <shell>
1c00fe86 <finsh_thread_entry+0x56e> lui	a4,0x1c017
1c00fe8a <finsh_thread_entry+0x572> lw	a4,44(a4) # 1c01702c <shell>
1c00fe8e <finsh_thread_entry+0x576> lhu	a4,118(a4)
1c00fe92 <finsh_thread_entry+0x57a> mv	a3,a4
1c00fe94 <finsh_thread_entry+0x57c> lw	a4,-32(s0)
1c00fe98 <finsh_thread_entry+0x580> slli	a4,a4,0x18
1c00fe9a <finsh_thread_entry+0x582> srai	a4,a4,0x18
1c00fe9c <finsh_thread_entry+0x584> add	a5,a5,a3
1c00fe9e <finsh_thread_entry+0x586> sb	a4,37(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:754
            if (shell->echo_mode)
1c00fea2 <finsh_thread_entry+0x58a> lui	a5,0x1c017
1c00fea6 <finsh_thread_entry+0x58e> lw	a5,44(a5) # 1c01702c <shell>
1c00feaa <finsh_thread_entry+0x592> lbu	a5,36(a5)
1c00feae <finsh_thread_entry+0x596> andi	a5,a5,1
1c00feb0 <finsh_thread_entry+0x598> andi	a5,a5,255
1c00feb4 <finsh_thread_entry+0x59c> beqz	a5,1c00fec6 <finsh_thread_entry+0x5ae>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:755
                rt_kprintf("%c", ch);
1c00feb6 <finsh_thread_entry+0x59e> lw	a1,-32(s0)
1c00feba <finsh_thread_entry+0x5a2> lui	a5,0x1c011
1c00febe <finsh_thread_entry+0x5a6> addi	a0,a5,-688 # 1c010d50 <__fsym___cmd_free_desc+0x38>
1c00fec2 <finsh_thread_entry+0x5aa> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:758
        }

        ch = 0;
1c00fec6 <finsh_thread_entry+0x5ae> sw	zero,-32(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:759
        shell->line_position ++;
1c00feca <finsh_thread_entry+0x5b2> lui	a5,0x1c017
1c00fece <finsh_thread_entry+0x5b6> lw	a5,44(a5) # 1c01702c <shell>
1c00fed2 <finsh_thread_entry+0x5ba> lhu	a4,118(a5)
1c00fed6 <finsh_thread_entry+0x5be> addi	a4,a4,1
1c00fed8 <finsh_thread_entry+0x5c0> slli	a4,a4,0x10
1c00feda <finsh_thread_entry+0x5c2> srli	a4,a4,0x10
1c00fedc <finsh_thread_entry+0x5c4> sh	a4,118(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:760
        shell->line_curpos++;
1c00fee0 <finsh_thread_entry+0x5c8> lui	a5,0x1c017
1c00fee4 <finsh_thread_entry+0x5cc> lw	a5,44(a5) # 1c01702c <shell>
1c00fee8 <finsh_thread_entry+0x5d0> lhu	a4,120(a5)
1c00feec <finsh_thread_entry+0x5d4> addi	a4,a4,1
1c00feee <finsh_thread_entry+0x5d6> slli	a4,a4,0x10
1c00fef0 <finsh_thread_entry+0x5d8> srli	a4,a4,0x10
1c00fef2 <finsh_thread_entry+0x5da> sh	a4,120(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:761
        if (shell->line_position >= FINSH_CMD_SIZE)
1c00fef6 <finsh_thread_entry+0x5de> lui	a5,0x1c017
1c00fefa <finsh_thread_entry+0x5e2> lw	a5,44(a5) # 1c01702c <shell>
1c00fefe <finsh_thread_entry+0x5e6> lhu	a4,118(a5)
1c00ff02 <finsh_thread_entry+0x5ea> li	a5,79
1c00ff06 <finsh_thread_entry+0x5ee> bgeu	a5,a4,1c00f944 <finsh_thread_entry+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:764
        {
            /* clear command line */
            shell->line_position = 0;
1c00ff0a <finsh_thread_entry+0x5f2> lui	a5,0x1c017
1c00ff0e <finsh_thread_entry+0x5f6> lw	a5,44(a5) # 1c01702c <shell>
1c00ff12 <finsh_thread_entry+0x5fa> sh	zero,118(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:765
            shell->line_curpos = 0;
1c00ff16 <finsh_thread_entry+0x5fe> lui	a5,0x1c017
1c00ff1a <finsh_thread_entry+0x602> lw	a5,44(a5) # 1c01702c <shell>
1c00ff1e <finsh_thread_entry+0x606> sh	zero,120(a5)
1c00ff22 <finsh_thread_entry+0x60a> j	1c00f944 <finsh_thread_entry+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:554
            continue;
1c00ff24 <finsh_thread_entry+0x60c> nop
1c00ff26 <finsh_thread_entry+0x60e> j	1c00f944 <finsh_thread_entry+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:601
                continue;
1c00ff28 <finsh_thread_entry+0x610> nop
1c00ff2a <finsh_thread_entry+0x612> j	1c00f944 <finsh_thread_entry+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:623
                continue;
1c00ff2c <finsh_thread_entry+0x614> nop
1c00ff2e <finsh_thread_entry+0x616> j	1c00f944 <finsh_thread_entry+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:633
                continue;
1c00ff30 <finsh_thread_entry+0x618> nop
1c00ff32 <finsh_thread_entry+0x61a> j	1c00f944 <finsh_thread_entry+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:643
                continue;
1c00ff34 <finsh_thread_entry+0x61c> nop
1c00ff36 <finsh_thread_entry+0x61e> j	1c00f944 <finsh_thread_entry+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:648
        if (ch == '\0' || ch == 0xFF) continue;
1c00ff38 <finsh_thread_entry+0x620> nop
1c00ff3a <finsh_thread_entry+0x622> j	1c00f944 <finsh_thread_entry+0x2c>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:669
                continue;
1c00ff3c <finsh_thread_entry+0x624> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:551
        ch = finsh_getchar();
1c00ff3e <finsh_thread_entry+0x626> j	1c00f944 <finsh_thread_entry+0x2c>
finsh_system_function_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:771
        }
    } /* end of device read */
}

void finsh_system_function_init(const void *begin, const void *end)
{
1c00ff40 <finsh_system_function_init> addi	sp,sp,-32
1c00ff42 <finsh_system_function_init+0x2> sw	s0,28(sp)
1c00ff44 <finsh_system_function_init+0x4> addi	s0,sp,32
1c00ff46 <finsh_system_function_init+0x6> sw	a0,-20(s0)
1c00ff4a <finsh_system_function_init+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:772
    _syscall_table_begin = (struct finsh_syscall *) begin;
1c00ff4e <finsh_system_function_init+0xe> lui	a5,0x1c017
1c00ff52 <finsh_system_function_init+0x12> lw	a4,-20(s0)
1c00ff56 <finsh_system_function_init+0x16> sw	a4,-1016(a5) # 1c016c08 <_syscall_table_begin>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:773
    _syscall_table_end = (struct finsh_syscall *) end;
1c00ff5a <finsh_system_function_init+0x1a> lui	a5,0x1c017
1c00ff5e <finsh_system_function_init+0x1e> lw	a4,-24(s0)
1c00ff62 <finsh_system_function_init+0x22> sw	a4,-1012(a5) # 1c016c0c <_syscall_table_end>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:774
}
1c00ff66 <finsh_system_function_init+0x26> nop
1c00ff68 <finsh_system_function_init+0x28> lw	s0,28(sp)
1c00ff6a <finsh_system_function_init+0x2a> addi	sp,sp,32
1c00ff6c <finsh_system_function_init+0x2c> ret
finsh_system_var_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:777

void finsh_system_var_init(const void *begin, const void *end)
{
1c00ff6e <finsh_system_var_init> addi	sp,sp,-32
1c00ff70 <finsh_system_var_init+0x2> sw	s0,28(sp)
1c00ff72 <finsh_system_var_init+0x4> addi	s0,sp,32
1c00ff74 <finsh_system_var_init+0x6> sw	a0,-20(s0)
1c00ff78 <finsh_system_var_init+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:778
    _sysvar_table_begin = (struct finsh_sysvar *) begin;
1c00ff7c <finsh_system_var_init+0xe> lui	a5,0x1c017
1c00ff80 <finsh_system_var_init+0x12> lw	a4,-20(s0)
1c00ff84 <finsh_system_var_init+0x16> sw	a4,-1008(a5) # 1c016c10 <_sysvar_table_begin>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:779
    _sysvar_table_end = (struct finsh_sysvar *) end;
1c00ff88 <finsh_system_var_init+0x1a> lui	a5,0x1c017
1c00ff8c <finsh_system_var_init+0x1e> lw	a4,-24(s0)
1c00ff90 <finsh_system_var_init+0x22> sw	a4,-1004(a5) # 1c016c14 <_sysvar_table_end>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:780
}
1c00ff94 <finsh_system_var_init+0x26> nop
1c00ff96 <finsh_system_var_init+0x28> lw	s0,28(sp)
1c00ff98 <finsh_system_var_init+0x2a> addi	sp,sp,32
1c00ff9a <finsh_system_var_init+0x2c> ret
finsh_system_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:822
 * @ingroup finsh
 *
 * This function will initialize finsh shell
 */
int finsh_system_init(void)
{
1c00ff9c <finsh_system_init> addi	sp,sp,-32
1c00ff9e <finsh_system_init+0x2> sw	ra,28(sp)
1c00ffa0 <finsh_system_init+0x4> sw	s0,24(sp)
1c00ffa2 <finsh_system_init+0x6> addi	s0,sp,32
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:823
    rt_err_t result = RT_EOK;
1c00ffa4 <finsh_system_init+0x8> sw	zero,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:847
    /* GNU GCC Compiler and TI CCS */
    extern const int __fsymtab_start;
    extern const int __fsymtab_end;
    extern const int __vsymtab_start;
    extern const int __vsymtab_end;
    finsh_system_function_init(&__fsymtab_start, &__fsymtab_end);
1c00ffa8 <finsh_system_init+0xc> lui	a5,0x1c010
1c00ffac <finsh_system_init+0x10> addi	a1,a5,784 # 1c010310 <__rt_init_rti_start>
1c00ffb0 <finsh_system_init+0x14> lui	a5,0x1c010
1c00ffb4 <finsh_system_init+0x18> addi	a0,a5,592 # 1c010250 <__fsym_list_mem>
1c00ffb8 <finsh_system_init+0x1c> jal	ra,1c00ff40 <finsh_system_function_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:848
    finsh_system_var_init(&__vsymtab_start, &__vsymtab_end);
1c00ffbc <finsh_system_init+0x20> lui	a5,0x1c010
1c00ffc0 <finsh_system_init+0x24> addi	a1,a5,784 # 1c010310 <__rt_init_rti_start>
1c00ffc4 <finsh_system_init+0x28> lui	a5,0x1c010
1c00ffc8 <finsh_system_init+0x2c> addi	a0,a5,784 # 1c010310 <__rt_init_rti_start>
1c00ffcc <finsh_system_init+0x30> jal	ra,1c00ff6e <finsh_system_var_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:875
#endif
#endif

#ifdef RT_USING_HEAP
    /* create or set shell structure */
    shell = (struct finsh_shell *)rt_calloc(1, sizeof(struct finsh_shell));
1c00ffd0 <finsh_system_init+0x34> li	a1,124
1c00ffd4 <finsh_system_init+0x38> li	a0,1
1c00ffd6 <finsh_system_init+0x3a> jal	ra,1c00e1a4 <rt_calloc>
1c00ffda <finsh_system_init+0x3e> mv	a4,a0
1c00ffdc <finsh_system_init+0x40> lui	a5,0x1c017
1c00ffe0 <finsh_system_init+0x44> sw	a4,44(a5) # 1c01702c <shell>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:876
    if (shell == RT_NULL)
1c00ffe4 <finsh_system_init+0x48> lui	a5,0x1c017
1c00ffe8 <finsh_system_init+0x4c> lw	a5,44(a5) # 1c01702c <shell>
1c00ffec <finsh_system_init+0x50> bnez	a5,1c00fffe <finsh_system_init+0x62>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:878
    {
        rt_kprintf("no memory for shell\n");
1c00ffee <finsh_system_init+0x52> lui	a5,0x1c011
1c00fff2 <finsh_system_init+0x56> addi	a0,a5,-668 # 1c010d64 <__fsym___cmd_free_desc+0x4c>
1c00fff6 <finsh_system_init+0x5a> jal	ra,1c00c652 <rt_kprintf>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:879
        return -1;
1c00fffa <finsh_system_init+0x5e> li	a5,-1
1c00fffc <finsh_system_init+0x60> j	1c010058 <finsh_system_init+0xbc>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:881
    }
    tid = rt_thread_create(FINSH_THREAD_NAME,
1c00fffe <finsh_system_init+0x62> li	a5,10
1c010000 <finsh_system_init+0x64> li	a4,21
1c010002 <finsh_system_init+0x66> li	a3,1024
1c010006 <finsh_system_init+0x6a> li	a2,0
1c010008 <finsh_system_init+0x6c> lui	a1,0x1c010
1c01000c <finsh_system_init+0x70> addi	a1,a1,-1768 # 1c00f918 <finsh_thread_entry>
1c010010 <finsh_system_init+0x74> lui	a0,0x1c011
1c010014 <finsh_system_init+0x78> addi	a0,a0,-644 # 1c010d7c <__fsym___cmd_free_desc+0x64>
1c010018 <finsh_system_init+0x7c> jal	ra,1c00d1c0 <rt_thread_create>
1c01001c <finsh_system_init+0x80> sw	a0,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:894
                            finsh_thread_entry, RT_NULL,
                            &finsh_thread_stack[0], sizeof(finsh_thread_stack),
                            FINSH_THREAD_PRIORITY, 10);
#endif /* RT_USING_HEAP */

    rt_sem_init(&(shell->rx_sem), "shrx", 0, 0);
1c010020 <finsh_system_init+0x84> lui	a5,0x1c017
1c010024 <finsh_system_init+0x88> lw	a5,44(a5) # 1c01702c <shell>
1c010028 <finsh_system_init+0x8c> mv	a4,a5
1c01002a <finsh_system_init+0x8e> li	a3,0
1c01002c <finsh_system_init+0x90> li	a2,0
1c01002e <finsh_system_init+0x92> lui	a5,0x1c011
1c010032 <finsh_system_init+0x96> addi	a1,a5,-636 # 1c010d84 <__fsym___cmd_free_desc+0x6c>
1c010036 <finsh_system_init+0x9a> mv	a0,a4
1c010038 <finsh_system_init+0x9c> jal	ra,1c00b7de <rt_sem_init>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:895
    finsh_set_prompt_mode(1);
1c01003c <finsh_system_init+0xa0> li	a0,1
1c01003e <finsh_system_init+0xa2> jal	ra,1c00f878 <finsh_set_prompt_mode>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:897

    if (tid != NULL && result == RT_EOK)
1c010042 <finsh_system_init+0xa6> lw	a5,-24(s0)
1c010046 <finsh_system_init+0xaa> beqz	a5,1c010056 <finsh_system_init+0xba>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:897 (discriminator 1)
1c010048 <finsh_system_init+0xac> lw	a5,-20(s0)
1c01004c <finsh_system_init+0xb0> bnez	a5,1c010056 <finsh_system_init+0xba>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:898
        rt_thread_startup(tid);
1c01004e <finsh_system_init+0xb2> lw	a0,-24(s0)
1c010052 <finsh_system_init+0xb6> jal	ra,1c00d166 <rt_thread_startup>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:899
    return 0;
1c010056 <finsh_system_init+0xba> li	a5,0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/components/finsh/shell.c:900
}
1c010058 <finsh_system_init+0xbc> mv	a0,a5
1c01005a <finsh_system_init+0xbe> lw	ra,28(sp)
1c01005c <finsh_system_init+0xc0> lw	s0,24(sp)
1c01005e <finsh_system_init+0xc2> addi	sp,sp,32
1c010060 <finsh_system_init+0xc4> ret
	...
IRQ_Handler():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:19
  .align 2
  .global IRQ_Handler
IRQ_Handler:

    /* save all from thread context */
    addi sp, sp, -32 * REGBYTES
1c010064 <IRQ_Handler> addi	sp,sp,-128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:21

    STORE x1,   1 * REGBYTES(sp)
1c010066 <IRQ_Handler+0x2> sw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:22
    li    t0,   0x80
1c010068 <IRQ_Handler+0x4> li	t0,128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:23
    STORE t0,   2 * REGBYTES(sp)
1c01006c <IRQ_Handler+0x8> sw	t0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:25

    STORE x4,   4 * REGBYTES(sp)
1c01006e <IRQ_Handler+0xa> sw	tp,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:26
    STORE x5,   5 * REGBYTES(sp)
1c010070 <IRQ_Handler+0xc> sw	t0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:27
    STORE x6,   6 * REGBYTES(sp)
1c010072 <IRQ_Handler+0xe> sw	t1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:28
    STORE x7,   7 * REGBYTES(sp)
1c010074 <IRQ_Handler+0x10> sw	t2,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:29
    STORE x8,   8 * REGBYTES(sp)
1c010076 <IRQ_Handler+0x12> sw	s0,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:30
    STORE x9,   9 * REGBYTES(sp)
1c010078 <IRQ_Handler+0x14> sw	s1,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:31
    STORE x10, 10 * REGBYTES(sp)
1c01007a <IRQ_Handler+0x16> sw	a0,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:32
    STORE x11, 11 * REGBYTES(sp)
1c01007c <IRQ_Handler+0x18> sw	a1,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:33
    STORE x12, 12 * REGBYTES(sp)
1c01007e <IRQ_Handler+0x1a> sw	a2,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:34
    STORE x13, 13 * REGBYTES(sp)
1c010080 <IRQ_Handler+0x1c> sw	a3,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:35
    STORE x14, 14 * REGBYTES(sp)
1c010082 <IRQ_Handler+0x1e> sw	a4,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:36
    STORE x15, 15 * REGBYTES(sp)
1c010084 <IRQ_Handler+0x20> sw	a5,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:37
    STORE x16, 16 * REGBYTES(sp)
1c010086 <IRQ_Handler+0x22> sw	a6,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:38
    STORE x17, 17 * REGBYTES(sp)
1c010088 <IRQ_Handler+0x24> sw	a7,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:39
    STORE x18, 18 * REGBYTES(sp)
1c01008a <IRQ_Handler+0x26> sw	s2,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:40
    STORE x19, 19 * REGBYTES(sp)
1c01008c <IRQ_Handler+0x28> sw	s3,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:41
    STORE x20, 20 * REGBYTES(sp)
1c01008e <IRQ_Handler+0x2a> sw	s4,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:42
    STORE x21, 21 * REGBYTES(sp)
1c010090 <IRQ_Handler+0x2c> sw	s5,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:43
    STORE x22, 22 * REGBYTES(sp)
1c010092 <IRQ_Handler+0x2e> sw	s6,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:44
    STORE x23, 23 * REGBYTES(sp)
1c010094 <IRQ_Handler+0x30> sw	s7,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:45
    STORE x24, 24 * REGBYTES(sp)
1c010096 <IRQ_Handler+0x32> sw	s8,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:46
    STORE x25, 25 * REGBYTES(sp)
1c010098 <IRQ_Handler+0x34> sw	s9,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:47
    STORE x26, 26 * REGBYTES(sp)
1c01009a <IRQ_Handler+0x36> sw	s10,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:48
    STORE x27, 27 * REGBYTES(sp)
1c01009c <IRQ_Handler+0x38> sw	s11,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:49
    STORE x28, 28 * REGBYTES(sp)
1c01009e <IRQ_Handler+0x3a> sw	t3,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:50
    STORE x29, 29 * REGBYTES(sp)
1c0100a0 <IRQ_Handler+0x3c> sw	t4,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:51
    STORE x30, 30 * REGBYTES(sp)
1c0100a2 <IRQ_Handler+0x3e> sw	t5,120(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:52
    STORE x31, 31 * REGBYTES(sp)
1c0100a4 <IRQ_Handler+0x40> sw	t6,124(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:54

    move  s0, sp
1c0100a6 <IRQ_Handler+0x42> mv	s0,sp
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:57

    /* switch to interrupt stack */
    la    sp, __freertos_irq_stack_top
1c0100a8 <IRQ_Handler+0x44> auipc	sp,0x17
1c0100ac <IRQ_Handler+0x48> addi	sp,sp,1928 # 1c027830 <__l2_shared_end>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:60

    /* interrupt handle */
    call  rt_interrupt_enter
1c0100b0 <IRQ_Handler+0x4c> jal	ra,1c00b992 <rt_interrupt_enter>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:61
    csrr  a0, mcause
1c0100b4 <IRQ_Handler+0x50> csrr	a0,mcause
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:62
    csrr  a1, mepc
1c0100b8 <IRQ_Handler+0x54> csrr	a1,mepc
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:63
    mv    a2, sp
1c0100bc <IRQ_Handler+0x58> mv	a2,sp
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:64
    call  vSystemIrqHandler
1c0100be <IRQ_Handler+0x5a> jal	ra,1c00af20 <vSystemIrqHandler>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:65
    call  rt_interrupt_leave
1c0100c2 <IRQ_Handler+0x5e> jal	ra,1c00b9ce <rt_interrupt_leave>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:68

    /* switch to from thread stack */
    move  sp, s0
1c0100c6 <IRQ_Handler+0x62> mv	sp,s0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:71

    /* need to switch new thread */
    la    s0, rt_thread_switch_interrupt_flag
1c0100c8 <IRQ_Handler+0x64> auipc	s0,0x7
1c0100cc <IRQ_Handler+0x68> addi	s0,s0,-1188 # 1c016c24 <rt_thread_switch_interrupt_flag>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:72
    lw    s2, 0(s0)
1c0100d0 <IRQ_Handler+0x6c> lw	s2,0(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:73
    beqz  s2, spurious_interrupt
1c0100d4 <IRQ_Handler+0x70> beqz	s2,1c010104 <spurious_interrupt>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:75
    /* clear switch interrupt flag */
    sw    zero, 0(s0)
1c0100d8 <IRQ_Handler+0x74> sw	zero,0(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:77

    csrr  a0, mepc
1c0100dc <IRQ_Handler+0x78> csrr	a0,mepc
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:78
    STORE a0, 0 * REGBYTES(sp)
1c0100e0 <IRQ_Handler+0x7c> sw	a0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:80

    la    s0, rt_interrupt_from_thread
1c0100e2 <IRQ_Handler+0x7e> auipc	s0,0x7
1c0100e6 <IRQ_Handler+0x82> addi	s0,s0,-1222 # 1c016c1c <rt_interrupt_from_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:81
    LOAD  s1, 0(s0)
1c0100ea <IRQ_Handler+0x86> lw	s1,0(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:82
    STORE sp, 0(s1)
1c0100ec <IRQ_Handler+0x88> sw	sp,0(s1)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:84

    la    s0, rt_interrupt_to_thread
1c0100f0 <IRQ_Handler+0x8c> auipc	s0,0x7
1c0100f4 <IRQ_Handler+0x90> addi	s0,s0,-1232 # 1c016c20 <rt_interrupt_to_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:85
    LOAD  s1, 0(s0)
1c0100f8 <IRQ_Handler+0x94> lw	s1,0(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:86
    LOAD  sp, 0(s1)
1c0100fa <IRQ_Handler+0x96> lw	sp,0(s1)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:88

    LOAD  a0,  0 * REGBYTES(sp)
1c0100fe <IRQ_Handler+0x9a> lw	a0,0(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:89
    csrw  mepc, a0
1c010100 <IRQ_Handler+0x9c> csrw	mepc,a0
spurious_interrupt():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:92

spurious_interrupt:
    LOAD  x1,   1 * REGBYTES(sp)
1c010104 <spurious_interrupt> lw	ra,4(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:95

    /* Remain in M-mode after mret */
    li    t0, 0x00001800
1c010106 <spurious_interrupt+0x2> lui	t0,0x2
1c01010a <spurious_interrupt+0x6> addi	t0,t0,-2048 # 00001800 <__stack_size+0x1000>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:96
    csrs  mstatus, t0
1c01010e <spurious_interrupt+0xa> csrs	mstatus,t0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:97
    LOAD  t0,   2 * REGBYTES(sp)
1c010112 <spurious_interrupt+0xe> lw	t0,8(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:98
    csrs  mstatus, t0
1c010114 <spurious_interrupt+0x10> csrs	mstatus,t0
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:100

    LOAD  x4,   4 * REGBYTES(sp)
1c010118 <spurious_interrupt+0x14> lw	tp,16(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:101
    LOAD  x5,   5 * REGBYTES(sp)
1c01011a <spurious_interrupt+0x16> lw	t0,20(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:102
    LOAD  x6,   6 * REGBYTES(sp)
1c01011c <spurious_interrupt+0x18> lw	t1,24(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:103
    LOAD  x7,   7 * REGBYTES(sp)
1c01011e <spurious_interrupt+0x1a> lw	t2,28(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:104
    LOAD  x8,   8 * REGBYTES(sp)
1c010120 <spurious_interrupt+0x1c> lw	s0,32(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:105
    LOAD  x9,   9 * REGBYTES(sp)
1c010122 <spurious_interrupt+0x1e> lw	s1,36(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:106
    LOAD  x10, 10 * REGBYTES(sp)
1c010124 <spurious_interrupt+0x20> lw	a0,40(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:107
    LOAD  x11, 11 * REGBYTES(sp)
1c010126 <spurious_interrupt+0x22> lw	a1,44(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:108
    LOAD  x12, 12 * REGBYTES(sp)
1c010128 <spurious_interrupt+0x24> lw	a2,48(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:109
    LOAD  x13, 13 * REGBYTES(sp)
1c01012a <spurious_interrupt+0x26> lw	a3,52(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:110
    LOAD  x14, 14 * REGBYTES(sp)
1c01012c <spurious_interrupt+0x28> lw	a4,56(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:111
    LOAD  x15, 15 * REGBYTES(sp)
1c01012e <spurious_interrupt+0x2a> lw	a5,60(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:112
    LOAD  x16, 16 * REGBYTES(sp)
1c010130 <spurious_interrupt+0x2c> lw	a6,64(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:113
    LOAD  x17, 17 * REGBYTES(sp)
1c010132 <spurious_interrupt+0x2e> lw	a7,68(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:114
    LOAD  x18, 18 * REGBYTES(sp)
1c010134 <spurious_interrupt+0x30> lw	s2,72(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:115
    LOAD  x19, 19 * REGBYTES(sp)
1c010136 <spurious_interrupt+0x32> lw	s3,76(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:116
    LOAD  x20, 20 * REGBYTES(sp)
1c010138 <spurious_interrupt+0x34> lw	s4,80(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:117
    LOAD  x21, 21 * REGBYTES(sp)
1c01013a <spurious_interrupt+0x36> lw	s5,84(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:118
    LOAD  x22, 22 * REGBYTES(sp)
1c01013c <spurious_interrupt+0x38> lw	s6,88(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:119
    LOAD  x23, 23 * REGBYTES(sp)
1c01013e <spurious_interrupt+0x3a> lw	s7,92(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:120
    LOAD  x24, 24 * REGBYTES(sp)
1c010140 <spurious_interrupt+0x3c> lw	s8,96(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:121
    LOAD  x25, 25 * REGBYTES(sp)
1c010142 <spurious_interrupt+0x3e> lw	s9,100(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:122
    LOAD  x26, 26 * REGBYTES(sp)
1c010144 <spurious_interrupt+0x40> lw	s10,104(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:123
    LOAD  x27, 27 * REGBYTES(sp)
1c010146 <spurious_interrupt+0x42> lw	s11,108(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:124
    LOAD  x28, 28 * REGBYTES(sp)
1c010148 <spurious_interrupt+0x44> lw	t3,112(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:125
    LOAD  x29, 29 * REGBYTES(sp)
1c01014a <spurious_interrupt+0x46> lw	t4,116(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:126
    LOAD  x30, 30 * REGBYTES(sp)
1c01014c <spurious_interrupt+0x48> lw	t5,120(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:127
    LOAD  x31, 31 * REGBYTES(sp)
1c01014e <spurious_interrupt+0x4a> lw	t6,124(sp)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:129

    addi  sp, sp, 32 * REGBYTES
1c010150 <spurious_interrupt+0x4c> addi	sp,sp,128
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S:130
    mret
1c010152 <spurious_interrupt+0x4e> mret
rt_hw_stack_init():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:72
 */
rt_uint8_t *rt_hw_stack_init(void       *tentry,
                             void       *parameter,
                             rt_uint8_t *stack_addr,
                             void       *texit)
{
1c010156 <rt_hw_stack_init> addi	sp,sp,-48
1c010158 <rt_hw_stack_init+0x2> sw	s0,44(sp)
1c01015a <rt_hw_stack_init+0x4> addi	s0,sp,48
1c01015c <rt_hw_stack_init+0x6> sw	a0,-36(s0)
1c010160 <rt_hw_stack_init+0xa> sw	a1,-40(s0)
1c010164 <rt_hw_stack_init+0xe> sw	a2,-44(s0)
1c010168 <rt_hw_stack_init+0x12> sw	a3,-48(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:77
    struct rt_hw_stack_frame *frame;
    rt_uint8_t         *stk;
    int                i;

    stk  = stack_addr + sizeof(rt_ubase_t);
1c01016c <rt_hw_stack_init+0x16> lw	a5,-44(s0)
1c010170 <rt_hw_stack_init+0x1a> addi	a5,a5,4
1c010172 <rt_hw_stack_init+0x1c> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:78
    stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_ubase_t)stk, REGBYTES);
1c010176 <rt_hw_stack_init+0x20> lw	a5,-24(s0)
1c01017a <rt_hw_stack_init+0x24> andi	a5,a5,-4
1c01017c <rt_hw_stack_init+0x26> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:79
    stk -= sizeof(struct rt_hw_stack_frame);
1c010180 <rt_hw_stack_init+0x2a> lw	a5,-24(s0)
1c010184 <rt_hw_stack_init+0x2e> addi	a5,a5,-128
1c010188 <rt_hw_stack_init+0x32> sw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:81

    frame = (struct rt_hw_stack_frame *)stk;
1c01018c <rt_hw_stack_init+0x36> lw	a5,-24(s0)
1c010190 <rt_hw_stack_init+0x3a> sw	a5,-28(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:83

    for (i = 0; i < sizeof(struct rt_hw_stack_frame) / sizeof(rt_ubase_t); i++)
1c010194 <rt_hw_stack_init+0x3e> sw	zero,-20(s0)
1c010198 <rt_hw_stack_init+0x42> j	1c0101ba <rt_hw_stack_init+0x64>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:85 (discriminator 3)
    {
        ((rt_ubase_t *)frame)[i] = 0xdeadbeef;
1c01019a <rt_hw_stack_init+0x44> lw	a5,-20(s0)
1c01019e <rt_hw_stack_init+0x48> slli	a5,a5,0x2
1c0101a0 <rt_hw_stack_init+0x4a> lw	a4,-28(s0)
1c0101a4 <rt_hw_stack_init+0x4e> add	a5,a5,a4
1c0101a6 <rt_hw_stack_init+0x50> lui	a4,0xdeadc
1c0101aa <rt_hw_stack_init+0x54> addi	a4,a4,-273 # deadbeef <__l2_shared_end+0xc2ab46bf>
1c0101ae <rt_hw_stack_init+0x58> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:83 (discriminator 3)
    for (i = 0; i < sizeof(struct rt_hw_stack_frame) / sizeof(rt_ubase_t); i++)
1c0101b0 <rt_hw_stack_init+0x5a> lw	a5,-20(s0)
1c0101b4 <rt_hw_stack_init+0x5e> addi	a5,a5,1
1c0101b6 <rt_hw_stack_init+0x60> sw	a5,-20(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:83 (discriminator 1)
1c0101ba <rt_hw_stack_init+0x64> lw	a4,-20(s0)
1c0101be <rt_hw_stack_init+0x68> li	a5,31
1c0101c0 <rt_hw_stack_init+0x6a> bgeu	a5,a4,1c01019a <rt_hw_stack_init+0x44>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:88
    }

    frame->ra      = (rt_ubase_t)texit;
1c0101c4 <rt_hw_stack_init+0x6e> lw	a4,-48(s0)
1c0101c8 <rt_hw_stack_init+0x72> lw	a5,-28(s0)
1c0101cc <rt_hw_stack_init+0x76> sw	a4,4(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:89
    frame->a0      = (rt_ubase_t)parameter;
1c0101ce <rt_hw_stack_init+0x78> lw	a4,-40(s0)
1c0101d2 <rt_hw_stack_init+0x7c> lw	a5,-28(s0)
1c0101d6 <rt_hw_stack_init+0x80> sw	a4,40(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:90
    frame->epc     = (rt_ubase_t)tentry;
1c0101d8 <rt_hw_stack_init+0x82> lw	a4,-36(s0)
1c0101dc <rt_hw_stack_init+0x86> lw	a5,-28(s0)
1c0101e0 <rt_hw_stack_init+0x8a> sw	a4,0(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:93

    /* force to machine mode(MPP=11) and set MPIE to 1 */
    frame->mstatus = 0x00007880;
1c0101e2 <rt_hw_stack_init+0x8c> lw	a5,-28(s0)
1c0101e6 <rt_hw_stack_init+0x90> lui	a4,0x8
1c0101e8 <rt_hw_stack_init+0x92> addi	a4,a4,-1920 # 00007880 <__stack_size+0x7080>
1c0101ec <rt_hw_stack_init+0x96> sw	a4,8(a5)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:95

    return stk;
1c0101ee <rt_hw_stack_init+0x98> lw	a5,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:96
}
1c0101f2 <rt_hw_stack_init+0x9c> mv	a0,a5
1c0101f4 <rt_hw_stack_init+0x9e> lw	s0,44(sp)
1c0101f6 <rt_hw_stack_init+0xa0> addi	sp,sp,48
1c0101f8 <rt_hw_stack_init+0xa2> ret
rt_hw_context_switch_interrupt():
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:109
 */

//extern void IRQ_Handler();
#ifndef RT_USING_SMP
void rt_hw_context_switch_interrupt(rt_ubase_t from, rt_ubase_t to)
{
1c0101fa <rt_hw_context_switch_interrupt> addi	sp,sp,-32
1c0101fc <rt_hw_context_switch_interrupt+0x2> sw	s0,28(sp)
1c0101fe <rt_hw_context_switch_interrupt+0x4> addi	s0,sp,32
1c010200 <rt_hw_context_switch_interrupt+0x6> sw	a0,-20(s0)
1c010204 <rt_hw_context_switch_interrupt+0xa> sw	a1,-24(s0)
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:110
    if (rt_thread_switch_interrupt_flag == 0)
1c010208 <rt_hw_context_switch_interrupt+0xe> lui	a5,0x1c017
1c01020c <rt_hw_context_switch_interrupt+0x12> lw	a5,-988(a5) # 1c016c24 <rt_thread_switch_interrupt_flag>
1c010210 <rt_hw_context_switch_interrupt+0x16> bnez	a5,1c01021e <rt_hw_context_switch_interrupt+0x24>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:111
        rt_interrupt_from_thread = from;
1c010212 <rt_hw_context_switch_interrupt+0x18> lui	a5,0x1c017
1c010216 <rt_hw_context_switch_interrupt+0x1c> lw	a4,-20(s0)
1c01021a <rt_hw_context_switch_interrupt+0x20> sw	a4,-996(a5) # 1c016c1c <rt_interrupt_from_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:113

    rt_interrupt_to_thread = to;
1c01021e <rt_hw_context_switch_interrupt+0x24> lui	a5,0x1c017
1c010222 <rt_hw_context_switch_interrupt+0x28> lw	a4,-24(s0)
1c010226 <rt_hw_context_switch_interrupt+0x2c> sw	a4,-992(a5) # 1c016c20 <rt_interrupt_to_thread>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:114
    rt_thread_switch_interrupt_flag = 1;
1c01022a <rt_hw_context_switch_interrupt+0x30> lui	a5,0x1c017
1c01022e <rt_hw_context_switch_interrupt+0x34> li	a4,1
1c010230 <rt_hw_context_switch_interrupt+0x36> sw	a4,-988(a5) # 1c016c24 <rt_thread_switch_interrupt_flag>
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:117
    //IRQ_Handler();
    //__asm volatile( "ecall" );
    return ;
1c010234 <rt_hw_context_switch_interrupt+0x3a> nop
/home/wangshun/plct_cli/cli_test/cli_test/app//rt-thread/libcpu/risc-v/common/cpuport.c:118
}
1c010236 <rt_hw_context_switch_interrupt+0x3c> lw	s0,28(sp)
1c010238 <rt_hw_context_switch_interrupt+0x3e> addi	sp,sp,32
1c01023a <rt_hw_context_switch_interrupt+0x40> ret
__stack_chk_init():
1c01023c <__stack_chk_init> lui	a5,0x1c017
1c010240 <__stack_chk_init+0x4> lw	a4,-1180(a5) # 1c016b64 <__stack_chk_guard>
1c010244 <__stack_chk_init+0x8> bnez	a4,1c01024e <__stack_chk_init+0x12>
1c010246 <__stack_chk_init+0xa> lui	a4,0xff0a0
1c01024a <__stack_chk_init+0xe> sw	a4,-1180(a5)
1c01024e <__stack_chk_init+0x12> ret
_etext():
1c010250 <__fsym_list_mem> ............
1c01025c <__fsym_hello> ........b...
1c010268 <__fsym_version> ............
1c010274 <__fsym___cmd_version> ............
1c010280 <__fsym_list_thread> ........N...
1c01028c <__fsym___cmd_list_thread> ....$...N...
1c010298 <__fsym_list_sem> 0...<.......
1c0102a4 <__fsym___cmd_list_sem> X...h.......
1c0102b0 <__fsym_list_mailbox> ........j...
1c0102bc <__fsym___cmd_list_mailbox> ........j...
1c0102c8 <__fsym_list_timer> ............
1c0102d4 <__fsym___cmd_list_timer> ............
1c0102e0 <__fsym_list> (...0...V...
1c0102ec <__fsym___cmd_help> ............
1c0102f8 <__fsym___cmd_ps> ............
1c010304 <__fsym___cmd_free> ............
__rt_init_start():
1c010310 <__rt_init_rti_start> H...
1c010314 <__rt_init_rti_board_start> X...
1c010318 <__rt_init_rti_board_end> h...
1c01031c <__rt_init_led_init> ....
1c010320 <__rt_init_finsh_system_init> ....
1c010324 <__rt_init_rti_end> x...
