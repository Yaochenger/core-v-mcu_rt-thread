# Copyright (C) 2020 ETH Zurich
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# SPDX-License-Identifier: MIT
# Author: Robert Balas (balasr@iis.ee.ethz.ch)


# Description: Makefile to build the blinky and other demo applications. Note
# that it supports the usual GNU Make implicit variables e.g. CC, CFLAGS,
# CPPFLAGS etc. Consult the GNU Make manual for move information about these.

# Notes:
# Useful targets
# run make help for an updated overview

# Important Variables
# PROG       Needs to be set to your executables name
# USER_SRCS  Add your source files here (use +=)
# CPPFLAGS   Add your include search paths and macro definitions (use +=)

# Adding common compile flags when using default_flags.mk.
# Compile options (passed to make) e.g. make NDEBUG=yes
# RELEASE   Make release build (default no)
# LIBC      Link against libc (default yes)
# LTO       Enable link time optimization (default no)
# SANITIZE  Enable gcc sanitizer for debugging memory access problems (default no)
# STACKDBG  Enable stack debugging information and warnings.
#           By default 1 KiB but can be changed with MAXSTACKSIZE=your_value


# indicate this repository's root folder
# set some project specific path variables
ROOT="/home/wangshun/plct_cli/cli_test/cli_test"
FREERTOS_PROJ_ROOT=$ROOT
FREERTOS_CONFIG_FAMILY="core-v-mcu"


ifndef FREERTOS_PROJ_ROOT
$(error "FREERTOS_PROJ_ROOT is unset. Run source env/platform-you-want.sh \
	from the freertos project's root folder.")
endif


# good defaults for many environment variables
include $(FREERTOS_PROJ_ROOT)/default_flags.mk

# rtos and pulp sources, minimal
include $(FREERTOS_PROJ_ROOT)/metal_srcs.mk

# application name
PROG = cli_test

# application/user specific code

USER_SRCS += barrMemTest.c
USER_SRCS += cam_tests.c
USER_SRCS += camera_task.c
USER_SRCS += camera.c
USER_SRCS += cli_adv_timer_unit_tests.c
USER_SRCS += cli_efpga_tests.c
USER_SRCS += cli_efpgaio_tests.c
USER_SRCS += cli_fcb_tests.c
USER_SRCS += cli_gpio_tests.c
USER_SRCS += cli_i2c_tests.c
USER_SRCS += cli_i2cs_tests.c
USER_SRCS += cli_interrupt_tests.c
USER_SRCS += cli.c
USER_SRCS += gpio_map.c
USER_SRCS += i2c_task.c
USER_SRCS += sdio_tests.c
USER_SRCS += programFPGA.c
USER_SRCS += qspi_tests.c

USER_SRCS += main.c

# rt-thread

USER_SRCS += rt-thread/src/clock.c
USER_SRCS += rt-thread/src/idle.c
USER_SRCS += rt-thread/src/ipc.c
USER_SRCS += rt-thread/src/irq.c
USER_SRCS += rt-thread/src/kservice.c
USER_SRCS += rt-thread/src/object.c
USER_SRCS += rt-thread/src/scheduler.c
USER_SRCS += rt-thread/src/thread.c
USER_SRCS += rt-thread/src/timer.c
USER_SRCS += rt-thread/src/components.c
# rt-thread port
USER_SRCS += rt-thread/libcpu/risc-v/rv32m1/interrupt.c
USER_SRCS += rt-thread/libcpu/risc-v/rv32m1/interrupt_gcc.S
USER_SRCS += rt-thread/libcpu/risc-v/common/cpuport.c
USER_SRCS += rt-thread/libcpu/risc-v/common/context_gcc.S
CV_CPPFLAGS += -I"/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include"
CV_CPPFLAGS += -I"/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/include/libc"
CV_CPPFLAGS += -I"/home/wangshun/plct_cli/cli_test/cli_test/app/rt-thread/libcpu/risc-v/common"
# rt-thread port end

CV_CPPFLAGS += -I"$(FREERTOS_PROJ_ROOT)"

# FreeRTOS.h
CPPFLAGS += $(addprefix -I$(VPATH)/, ".")

CPPFLAGS += -DportasmHANDLE_INTERRUPT=vSystemIrqHandler

# compile, simulation and analysis targets
include $(FREERTOS_PROJ_ROOT)/default_targets.mk
